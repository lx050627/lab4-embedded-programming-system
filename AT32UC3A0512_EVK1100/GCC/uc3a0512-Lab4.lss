
uc3a0512-Lab4.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000d6b8  80002024  80002024  00002424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  8000f800  8000f800  0000fc00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  8000fa00  8000fa00  0000fe00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000384  8000fa18  8000fa18  0000fe18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  8000fd9c  8000fd9c  0001019c  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  8000fda0  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  8000fda8  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  8000fdb0  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          0000000c  0000001c  8000fdb4  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         0000052c  00000028  8000fdc0  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .balign       00000004  00000554  800102ec  00010954  2**0
                  ALLOC
 15 .bss          00000af0  00000558  00000558  00000000  2**2
                  ALLOC
 16 .heap         0000dfb8  00001048  00001048  00000000  2**0
                  ALLOC
 17 .comment      0000012b  00000000  00000000  00010954  2**0
                  CONTENTS, READONLY
 18 .debug_aranges 00001c48  00000000  00000000  00010a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_pubnames 000043e6  00000000  00000000  000126c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   000a9a5e  00000000  00000000  00016aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 00008216  00000000  00000000  000c050b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000eb3f  00000000  00000000  000c8721  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  00005064  00000000  00000000  000d7260  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0000afc0  00000000  00000000  000dc2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    0000f326  00000000  00000000  000e7284  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 27 .debug_ranges 00001c30  00000000  00000000  000f65aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	48 1f       	lddpc	pc,80002004 <program_start+0x4>
80002002:	00 00       	add	r0,r0
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	20 24       	sub	r4,2

Disassembly of section .init:

80002008 <_init>:
80002008:	eb cd 40 40 	pushm	r6,lr
8000200c:	48 26       	lddpc	r6,80002014 <_init+0xc>
8000200e:	1e 26       	rsub	r6,pc
80002010:	c0 48       	rjmp	80002018 <_init+0x10>
80002012:	00 00       	add	r0,r0
80002014:	80 00       	ld.sh	r0,r0[0x0]
80002016:	1f f2       	ld.ub	r2,pc[0x7]
80002018:	f0 16 00 01 	mcall	r6[4]
8000201c:	f0 16 00 00 	mcall	r6[0]
80002020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002024 <_stext>:
80002024:	30 07       	mov	r7,0
80002026:	49 5a       	lddpc	r10,80002078 <_stext+0x54>
80002028:	5b fa       	cp.w	r10,-1
8000202a:	f4 0d 17 10 	movne	sp,r10
8000202e:	49 4b       	lddpc	r11,8000207c <_stext+0x58>
80002030:	49 4c       	lddpc	r12,80002080 <_stext+0x5c>
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 60       	breq	80002040 <_stext+0x1c>
80002036:	49 4a       	lddpc	r10,80002084 <_stext+0x60>
80002038:	b7 09       	ld.d	r8,r11++
8000203a:	b9 28       	st.d	r12++,r8
8000203c:	14 3c       	cp.w	r12,r10
8000203e:	cf d5       	brlt	80002038 <_stext+0x14>
80002040:	49 2a       	lddpc	r10,80002088 <_stext+0x64>
80002042:	49 1c       	lddpc	r12,80002084 <_stext+0x60>
80002044:	30 08       	mov	r8,0
80002046:	30 09       	mov	r9,0
80002048:	b9 28       	st.d	r12++,r8
8000204a:	14 3c       	cp.w	r12,r10
8000204c:	cf e5       	brlt	80002048 <_stext+0x24>
8000204e:	f0 1f 00 10 	mcall	8000208c <_stext+0x68>
80002052:	49 0c       	lddpc	r12,80002090 <_stext+0x6c>
80002054:	f0 1f 00 10 	mcall	80002094 <_stext+0x70>
80002058:	f0 1f 00 10 	mcall	80002098 <_stext+0x74>
8000205c:	1a 9c       	mov	r12,sp
8000205e:	30 0b       	mov	r11,0
80002060:	f0 1f 00 0f 	mcall	8000209c <_stext+0x78>
80002064:	5b fc       	cp.w	r12,-1
80002066:	f9 bc 00 00 	moveq	r12,0
8000206a:	f9 ba 00 00 	moveq	r10,0
8000206e:	14 1d       	sub	sp,r10
80002070:	f0 1f 00 0c 	mcall	800020a0 <_stext+0x7c>
80002074:	f0 1f 00 0c 	mcall	800020a4 <_stext+0x80>
80002078:	00 01       	add	r1,r0
8000207a:	00 00       	add	r0,r0
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	fd a0       	*unknown*
80002080:	00 00       	add	r0,r0
80002082:	00 08       	add	r8,r0
80002084:	00 00       	add	r0,r0
80002086:	05 58       	ld.sh	r8,--r2
80002088:	00 00       	add	r0,r0
8000208a:	10 48       	or	r8,r8
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	dd 38       	*unknown*
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	fa 00       	*unknown*
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	eb 80       	*unknown*
80002098:	80 00       	ld.sh	r0,r0[0x0]
8000209a:	20 08       	sub	r8,0
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	eb 48 80 00 	st.w	r5[-32768],r8
800020a2:	e4 a4       	*unknown*
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	eb a0 eb cd 	stc.w	cp7,r0[0x334],cr11

800020a8 <__do_global_dtors_aux>:
800020a8:	eb cd 40 e0 	pushm	r5-r7,lr
800020ac:	48 e6       	lddpc	r6,800020e4 <__do_global_dtors_aux+0x3c>
800020ae:	30 08       	mov	r8,0
800020b0:	0d 89       	ld.ub	r9,r6[0x0]
800020b2:	f0 09 18 00 	cp.b	r9,r8
800020b6:	c1 41       	brne	800020de <__do_global_dtors_aux+0x36>
800020b8:	48 c5       	lddpc	r5,800020e8 <__do_global_dtors_aux+0x40>
800020ba:	48 d8       	lddpc	r8,800020ec <__do_global_dtors_aux+0x44>
800020bc:	6c 19       	ld.w	r9,r6[0x4]
800020be:	0a 18       	sub	r8,r5
800020c0:	a3 48       	asr	r8,0x2
800020c2:	f0 c7 00 01 	sub	r7,r8,1
800020c6:	0e 39       	cp.w	r9,r7
800020c8:	c0 92       	brcc	800020da <__do_global_dtors_aux+0x32>
800020ca:	2f f9       	sub	r9,-1
800020cc:	8d 19       	st.w	r6[0x4],r9
800020ce:	ea 09 03 28 	ld.w	r8,r5[r9<<0x2]
800020d2:	5d 18       	icall	r8
800020d4:	6c 19       	ld.w	r9,r6[0x4]
800020d6:	0e 39       	cp.w	r9,r7
800020d8:	cf 93       	brcs	800020ca <__do_global_dtors_aux+0x22>
800020da:	30 18       	mov	r8,1
800020dc:	ac 88       	st.b	r6[0x0],r8
800020de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800020e2:	00 00       	add	r0,r0
800020e4:	00 00       	add	r0,r0
800020e6:	05 58       	ld.sh	r8,--r2
800020e8:	00 00       	add	r0,r0
800020ea:	00 10       	sub	r0,r0
800020ec:	00 00       	add	r0,r0
800020ee:	00 14       	sub	r4,r0

800020f0 <frame_dummy>:
800020f0:	d4 01       	pushm	lr
800020f2:	48 5c       	lddpc	r12,80002104 <frame_dummy+0x14>
800020f4:	78 08       	ld.w	r8,r12[0x0]
800020f6:	58 08       	cp.w	r8,0
800020f8:	c0 50       	breq	80002102 <frame_dummy+0x12>
800020fa:	48 48       	lddpc	r8,80002108 <frame_dummy+0x18>
800020fc:	58 08       	cp.w	r8,0
800020fe:	c0 20       	breq	80002102 <frame_dummy+0x12>
80002100:	5d 18       	icall	r8
80002102:	d8 02       	popm	pc
80002104:	00 00       	add	r0,r0
80002106:	00 18       	sub	r8,r0
80002108:	00 00       	add	r0,r0
	...

8000210c <getBaudDiv>:
 * \return Divider or error code.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
static int getBaudDiv(const spi_options_t *options, unsigned int pba_hz)
{
8000210c:	eb cd 40 80 	pushm	r7,lr
80002110:	1a 97       	mov	r7,sp
80002112:	20 4d       	sub	sp,16
80002114:	ef 4c ff f8 	st.w	r7[-8],r12
80002118:	ef 4b ff f4 	st.w	r7[-12],r11
  int baudDiv = (pba_hz + options->baudrate / 2) / options->baudrate;
8000211c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002120:	70 18       	ld.w	r8,r8[0x4]
80002122:	f0 09 16 01 	lsr	r9,r8,0x1
80002126:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000212a:	10 09       	add	r9,r8
8000212c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002130:	70 18       	ld.w	r8,r8[0x4]
80002132:	f2 08 0d 08 	divu	r8,r9,r8
80002136:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv <= 0 || baudDiv > 255) {
8000213a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000213e:	58 08       	cp.w	r8,0
80002140:	e0 8a 00 08 	brle	80002150 <getBaudDiv+0x44>
80002144:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002148:	e0 48 00 ff 	cp.w	r8,255
8000214c:	e0 8a 00 06 	brle	80002158 <getBaudDiv+0x4c>
    return -1;
80002150:	3f f8       	mov	r8,-1
80002152:	ef 48 ff f0 	st.w	r7[-16],r8
80002156:	c0 58       	rjmp	80002160 <getBaudDiv+0x54>
  }

  return baudDiv;
80002158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000215c:	ef 48 ff f0 	st.w	r7[-16],r8
80002160:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80002164:	10 9c       	mov	r12,r8
80002166:	2f cd       	sub	sp,-16
80002168:	e3 cd 80 80 	ldm	sp++,r7,pc

8000216c <spi_initMaster>:
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
8000216c:	eb cd 40 80 	pushm	r7,lr
80002170:	1a 97       	mov	r7,sp
80002172:	20 4d       	sub	sp,16
80002174:	ef 4c ff f8 	st.w	r7[-8],r12
80002178:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
8000217c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002180:	f1 39 00 0d 	ld.ub	r9,r8[13]
80002184:	30 18       	mov	r8,1
80002186:	f0 09 18 00 	cp.b	r9,r8
8000218a:	e0 88 00 06 	brls	80002196 <spi_initMaster+0x2a>
    return SPI_ERROR_ARGUMENT;
8000218e:	30 28       	mov	r8,2
80002190:	ef 48 ff f0 	st.w	r7[-16],r8
80002194:	c3 68       	rjmp	80002200 <spi_initMaster+0x94>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80002196:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000219a:	e0 68 00 80 	mov	r8,128
8000219e:	93 08       	st.w	r9[0x0],r8

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
800021a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021a4:	70 18       	ld.w	r8,r8[0x4]
800021a6:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.mstr = 1;
800021aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021ae:	30 19       	mov	r9,1
800021b0:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800021b4:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
800021b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021bc:	f1 38 00 0d 	ld.ub	r8,r8[13]
800021c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800021c4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800021c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021cc:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800021d0:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.llb = 0;
800021d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d8:	30 09       	mov	r9,0
800021da:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800021de:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800021e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021e6:	30 f9       	mov	r9,15
800021e8:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800021ec:	ef 48 ff fc 	st.w	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
800021f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021f8:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
800021fa:	30 08       	mov	r8,0
800021fc:	ef 48 ff f0 	st.w	r7[-16],r8
80002200:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80002204:	10 9c       	mov	r12,r8
80002206:	2f cd       	sub	sp,-16
80002208:	e3 cd 80 80 	ldm	sp++,r7,pc

8000220c <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
8000220c:	eb cd 40 80 	pushm	r7,lr
80002210:	1a 97       	mov	r7,sp
80002212:	20 6d       	sub	sp,24
80002214:	ef 4c ff f8 	st.w	r7[-8],r12
80002218:	16 98       	mov	r8,r11
8000221a:	ef 68 ff f4 	st.b	r7[-12],r8
8000221e:	14 98       	mov	r8,r10
80002220:	ef 68 ff f0 	st.b	r7[-16],r8
80002224:	12 98       	mov	r8,r9
80002226:	ef 68 ff ec 	st.b	r7[-20],r8
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
8000222a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000222e:	30 18       	mov	r8,1
80002230:	f0 09 18 00 	cp.b	r9,r8
80002234:	e0 8b 00 09 	brhi	80002246 <spi_selectionMode+0x3a>
80002238:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000223c:	30 18       	mov	r8,1
8000223e:	f0 09 18 00 	cp.b	r9,r8
80002242:	e0 88 00 06 	brls	8000224e <spi_selectionMode+0x42>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
80002246:	30 28       	mov	r8,2
80002248:	ef 48 ff e8 	st.w	r7[-24],r8
8000224c:	c2 a8       	rjmp	800022a0 <spi_selectionMode+0x94>
  }

  u_avr32_spi_mr.mr = spi->mr;
8000224e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002252:	70 18       	ld.w	r8,r8[0x4]
80002254:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.ps = variable_ps;
80002258:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000225c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002260:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002264:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002268:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000226c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002270:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002274:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002278:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000227c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002280:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80002284:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.dlybcs = delay;
80002288:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000228c:	ef 68 ff fc 	st.b	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
80002290:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002294:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002298:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
8000229a:	30 08       	mov	r8,0
8000229c:	ef 48 ff e8 	st.w	r7[-24],r8
800022a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
}
800022a4:	10 9c       	mov	r12,r8
800022a6:	2f ad       	sub	sp,-24
800022a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800022ac <spi_selectChip>:


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800022ac:	eb cd 40 80 	pushm	r7,lr
800022b0:	1a 97       	mov	r7,sp
800022b2:	20 3d       	sub	sp,12
800022b4:	ef 4c ff fc 	st.w	r7[-4],r12
800022b8:	16 98       	mov	r8,r11
800022ba:	ef 68 ff f8 	st.b	r7[-8],r8
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800022be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022c2:	70 18       	ld.w	r8,r8[0x4]
800022c4:	10 99       	mov	r9,r8
800022c6:	ea 19 00 0f 	orh	r9,0xf
800022ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ce:	91 19       	st.w	r8[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800022d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022d4:	70 18       	ld.w	r8,r8[0x4]
800022d6:	e2 18 00 04 	andl	r8,0x4,COH
800022da:	c1 b0       	breq	80002310 <spi_selectChip+0x64>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
800022dc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800022e0:	30 e8       	mov	r8,14
800022e2:	f0 09 18 00 	cp.b	r9,r8
800022e6:	e0 88 00 06 	brls	800022f2 <spi_selectChip+0x46>
      return SPI_ERROR_ARGUMENT;
800022ea:	30 28       	mov	r8,2
800022ec:	ef 48 ff f4 	st.w	r7[-12],r8
800022f0:	c2 e8       	rjmp	8000234c <spi_selectChip+0xa0>
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
800022f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022f6:	70 19       	ld.w	r9,r8[0x4]
800022f8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800022fc:	b1 68       	lsl	r8,0x10
800022fe:	ea 18 ff f0 	orh	r8,0xfff0
80002302:	e8 18 ff ff 	orl	r8,0xffff
80002306:	10 69       	and	r9,r8
80002308:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000230c:	91 19       	st.w	r8[0x4],r9
8000230e:	c1 c8       	rjmp	80002346 <spi_selectChip+0x9a>
  } else {
    if (chip > 3) {
80002310:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002314:	30 38       	mov	r8,3
80002316:	f0 09 18 00 	cp.b	r9,r8
8000231a:	e0 88 00 06 	brls	80002326 <spi_selectChip+0x7a>
      return SPI_ERROR_ARGUMENT;
8000231e:	30 28       	mov	r8,2
80002320:	ef 48 ff f4 	st.w	r7[-12],r8
80002324:	c1 48       	rjmp	8000234c <spi_selectChip+0xa0>
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000232a:	70 1a       	ld.w	r10,r8[0x4]
8000232c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002330:	f0 c9 ff f0 	sub	r9,r8,-16
80002334:	30 18       	mov	r8,1
80002336:	f0 09 09 48 	lsl	r8,r8,r9
8000233a:	5c d8       	com	r8
8000233c:	f5 e8 00 09 	and	r9,r10,r8
80002340:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002344:	91 19       	st.w	r8[0x4],r9
  }

  return SPI_OK;
80002346:	30 08       	mov	r8,0
80002348:	ef 48 ff f4 	st.w	r7[-12],r8
8000234c:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80002350:	10 9c       	mov	r12,r8
80002352:	2f dd       	sub	sp,-12
80002354:	e3 cd 80 80 	ldm	sp++,r7,pc

80002358 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80002358:	eb cd 40 80 	pushm	r7,lr
8000235c:	1a 97       	mov	r7,sp
8000235e:	20 4d       	sub	sp,16
80002360:	ef 4c ff f8 	st.w	r7[-8],r12
80002364:	16 98       	mov	r8,r11
80002366:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
8000236a:	e0 68 27 10 	mov	r8,10000
8000236e:	ef 48 ff fc 	st.w	r7[-4],r8
80002372:	c1 28       	rjmp	80002396 <spi_unselectChip+0x3e>

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80002374:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002378:	58 08       	cp.w	r8,0
8000237a:	5f 08       	sreq	r8
8000237c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002384:	20 18       	sub	r8,1
80002386:	ef 48 ff fc 	st.w	r7[-4],r8
8000238a:	58 09       	cp.w	r9,0
8000238c:	c0 50       	breq	80002396 <spi_unselectChip+0x3e>
      return SPI_ERROR_TIMEOUT;
8000238e:	30 18       	mov	r8,1
80002390:	ef 48 ff f0 	st.w	r7[-16],r8
80002394:	c1 88       	rjmp	800023c4 <spi_unselectChip+0x6c>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000239a:	70 48       	ld.w	r8,r8[0x10]
8000239c:	e2 18 02 00 	andl	r8,0x200,COH
800023a0:	ce a0       	breq	80002374 <spi_unselectChip+0x1c>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800023a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023a6:	70 18       	ld.w	r8,r8[0x4]
800023a8:	10 99       	mov	r9,r8
800023aa:	ea 19 00 0f 	orh	r9,0xf
800023ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023b2:	91 19       	st.w	r8[0x4],r9

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800023b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023b8:	fc 18 01 00 	movh	r8,0x100
800023bc:	93 08       	st.w	r9[0x0],r8

#ifdef FREERTOS_USED
  xSemaphoreGive(xSPIMutex);
#endif

  return SPI_OK;
800023be:	30 08       	mov	r8,0
800023c0:	ef 48 ff f0 	st.w	r7[-16],r8
800023c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800023c8:	10 9c       	mov	r12,r8
800023ca:	2f cd       	sub	sp,-16
800023cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800023d0 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              unsigned int pba_hz)
{
800023d0:	eb cd 40 80 	pushm	r7,lr
800023d4:	1a 97       	mov	r7,sp
800023d6:	20 7d       	sub	sp,28
800023d8:	ef 4c ff f4 	st.w	r7[-12],r12
800023dc:	ef 4b ff f0 	st.w	r7[-16],r11
800023e0:	ef 4a ff ec 	st.w	r7[-20],r10
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800023e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800023e8:	f1 39 00 0c 	ld.ub	r9,r8[12]
800023ec:	30 38       	mov	r8,3
800023ee:	f0 09 18 00 	cp.b	r9,r8
800023f2:	e0 8b 00 1d 	brhi	8000242c <spi_setupChipReg+0x5c>
800023f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800023fa:	f1 39 00 0b 	ld.ub	r9,r8[11]
800023fe:	30 18       	mov	r8,1
80002400:	f0 09 18 00 	cp.b	r9,r8
80002404:	e0 8b 00 14 	brhi	8000242c <spi_setupChipReg+0x5c>
80002408:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000240c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002410:	30 78       	mov	r8,7
80002412:	f0 09 18 00 	cp.b	r9,r8
80002416:	e0 88 00 0b 	brls	8000242c <spi_setupChipReg+0x5c>
8000241a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000241e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002422:	31 08       	mov	r8,16
80002424:	f0 09 18 00 	cp.b	r9,r8
80002428:	e0 88 00 06 	brls	80002434 <spi_setupChipReg+0x64>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
8000242c:	30 28       	mov	r8,2
8000242e:	ef 48 ff e4 	st.w	r7[-28],r8
80002432:	c9 e8       	rjmp	8000256e <spi_setupChipReg+0x19e>
  }

  int baudDiv = getBaudDiv(options, pba_hz);
80002434:	ee fb ff ec 	ld.w	r11,r7[-20]
80002438:	ee fc ff f0 	ld.w	r12,r7[-16]
8000243c:	f0 1f 00 50 	mcall	8000257c <spi_setupChipReg+0x1ac>
80002440:	18 98       	mov	r8,r12
80002442:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv < 0) {
80002446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000244a:	58 08       	cp.w	r8,0
8000244c:	c0 54       	brge	80002456 <spi_setupChipReg+0x86>
    return SPI_ERROR_ARGUMENT;
8000244e:	30 28       	mov	r8,2
80002450:	ef 48 ff e4 	st.w	r7[-28],r8
80002454:	c8 d8       	rjmp	8000256e <spi_setupChipReg+0x19e>
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
80002456:	30 08       	mov	r8,0
80002458:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.cpol = options->spi_mode >> 1;
8000245c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002460:	f1 38 00 0c 	ld.ub	r8,r8[12]
80002464:	a1 98       	lsr	r8,0x1
80002466:	5c 58       	castu.b	r8
80002468:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000246c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002470:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002474:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80002478:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.ncpha = (options->spi_mode & 0x1) ^ 0x1;
8000247c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002480:	f1 38 00 0c 	ld.ub	r8,r8[12]
80002484:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002488:	5f 08       	sreq	r8
8000248a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000248e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002492:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80002496:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.csaat = options->stay_act;
8000249a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000249e:	f1 38 00 0b 	ld.ub	r8,r8[11]
800024a2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800024a6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800024aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800024ae:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
800024b2:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.bits = options->bits - 8;
800024b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024ba:	f1 38 00 08 	ld.ub	r8,r8[8]
800024be:	20 88       	sub	r8,8
800024c0:	5c 58       	castu.b	r8
800024c2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800024c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800024ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800024ce:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
800024d2:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.scbr = baudDiv;
800024d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024da:	5c 58       	castu.b	r8
800024dc:	ef 68 ff fa 	st.b	r7[-6],r8
  u_avr32_spi_csr.CSR.dlybs = options->spck_delay;
800024e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024e4:	f1 38 00 09 	ld.ub	r8,r8[9]
800024e8:	ef 68 ff f9 	st.b	r7[-7],r8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800024ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024f0:	f1 38 00 0a 	ld.ub	r8,r8[10]
800024f4:	ef 68 ff f8 	st.b	r7[-8],r8

  switch(options->reg) {
800024f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024fc:	11 88       	ld.ub	r8,r8[0x0]
800024fe:	ef 48 ff e8 	st.w	r7[-24],r8
80002502:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002506:	58 18       	cp.w	r8,1
80002508:	c1 a0       	breq	8000253c <spi_setupChipReg+0x16c>
8000250a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000250e:	58 18       	cp.w	r8,1
80002510:	e0 89 00 07 	brgt	8000251e <spi_setupChipReg+0x14e>
80002514:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002518:	58 08       	cp.w	r8,0
8000251a:	c0 b0       	breq	80002530 <spi_setupChipReg+0x160>
8000251c:	c2 28       	rjmp	80002560 <spi_setupChipReg+0x190>
8000251e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002522:	58 28       	cp.w	r8,2
80002524:	c1 20       	breq	80002548 <spi_setupChipReg+0x178>
80002526:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000252a:	58 38       	cp.w	r8,3
8000252c:	c1 40       	breq	80002554 <spi_setupChipReg+0x184>
8000252e:	c1 98       	rjmp	80002560 <spi_setupChipReg+0x190>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80002530:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002534:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002538:	91 c9       	st.w	r8[0x30],r9
8000253a:	c1 78       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
8000253c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002540:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002544:	91 d9       	st.w	r8[0x34],r9
80002546:	c1 18       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80002548:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000254c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002550:	91 e9       	st.w	r8[0x38],r9
80002552:	c0 b8       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
80002554:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002558:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000255c:	91 f9       	st.w	r8[0x3c],r9
8000255e:	c0 58       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    default:
      return SPI_ERROR_ARGUMENT;
80002560:	30 28       	mov	r8,2
80002562:	ef 48 ff e4 	st.w	r7[-28],r8
80002566:	c0 48       	rjmp	8000256e <spi_setupChipReg+0x19e>
      while(1);
    }
  }
#endif

  return SPI_OK;
80002568:	30 08       	mov	r8,0
8000256a:	ef 48 ff e4 	st.w	r7[-28],r8
8000256e:	ee f8 ff e4 	ld.w	r8,r7[-28]
}
80002572:	10 9c       	mov	r12,r8
80002574:	2f 9d       	sub	sp,-28
80002576:	e3 cd 80 80 	ldm	sp++,r7,pc
8000257a:	00 00       	add	r0,r0
8000257c:	80 00       	ld.sh	r0,r0[0x0]
8000257e:	21 0c       	sub	r12,16

80002580 <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
80002580:	eb cd 40 80 	pushm	r7,lr
80002584:	1a 97       	mov	r7,sp
80002586:	20 1d       	sub	sp,4
80002588:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
8000258c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002590:	30 18       	mov	r8,1
80002592:	93 08       	st.w	r9[0x0],r8
}
80002594:	2f fd       	sub	sp,-4
80002596:	e3 cd 80 80 	ldm	sp++,r7,pc

8000259a <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, unsigned short data)
{
8000259a:	eb cd 40 80 	pushm	r7,lr
8000259e:	1a 97       	mov	r7,sp
800025a0:	20 4d       	sub	sp,16
800025a2:	ef 4c ff f8 	st.w	r7[-8],r12
800025a6:	16 98       	mov	r8,r11
800025a8:	ef 58 ff f4 	st.h	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
800025ac:	e0 68 27 10 	mov	r8,10000
800025b0:	ef 48 ff fc 	st.w	r7[-4],r8
800025b4:	c1 28       	rjmp	800025d8 <spi_write+0x3e>

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
800025b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025ba:	58 08       	cp.w	r8,0
800025bc:	5f 08       	sreq	r8
800025be:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800025c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025c6:	20 18       	sub	r8,1
800025c8:	ef 48 ff fc 	st.w	r7[-4],r8
800025cc:	58 09       	cp.w	r9,0
800025ce:	c0 50       	breq	800025d8 <spi_write+0x3e>
      return SPI_ERROR_TIMEOUT;
800025d0:	30 18       	mov	r8,1
800025d2:	ef 48 ff f0 	st.w	r7[-16],r8
800025d6:	c0 f8       	rjmp	800025f4 <spi_write+0x5a>

spi_status_t spi_write(volatile avr32_spi_t *spi, unsigned short data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800025d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025dc:	70 48       	ld.w	r8,r8[0x10]
800025de:	e2 18 00 02 	andl	r8,0x2,COH
800025e2:	ce a0       	breq	800025b6 <spi_write+0x1c>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800025e4:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800025e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025ec:	91 39       	st.w	r8[0xc],r9

  return SPI_OK;
800025ee:	30 08       	mov	r8,0
800025f0:	ef 48 ff f0 	st.w	r7[-16],r8
800025f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800025f8:	10 9c       	mov	r12,r8
800025fa:	2f cd       	sub	sp,-16
800025fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80002600 <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
80002600:	eb cd 40 80 	pushm	r7,lr
80002604:	1a 97       	mov	r7,sp
80002606:	20 4d       	sub	sp,16
80002608:	ef 4c ff f8 	st.w	r7[-8],r12
8000260c:	ef 4b ff f4 	st.w	r7[-12],r11
  unsigned int timeout = SPI_TIMEOUT;
80002610:	e0 68 27 10 	mov	r8,10000
80002614:	ef 48 ff fc 	st.w	r7[-4],r8
80002618:	c1 28       	rjmp	8000263c <spi_read+0x3c>

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
8000261a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000261e:	58 08       	cp.w	r8,0
80002620:	5f 08       	sreq	r8
80002622:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000262a:	20 18       	sub	r8,1
8000262c:	ef 48 ff fc 	st.w	r7[-4],r8
80002630:	58 09       	cp.w	r9,0
80002632:	c0 50       	breq	8000263c <spi_read+0x3c>
      return SPI_ERROR_TIMEOUT;
80002634:	30 18       	mov	r8,1
80002636:	ef 48 ff f0 	st.w	r7[-16],r8
8000263a:	c1 38       	rjmp	80002660 <spi_read+0x60>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8000263c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002640:	70 48       	ld.w	r8,r8[0x10]
80002642:	e2 18 02 01 	andl	r8,0x201,COH
80002646:	e0 48 02 01 	cp.w	r8,513
8000264a:	ce 81       	brne	8000261a <spi_read+0x1a>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8000264c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002650:	70 28       	ld.w	r8,r8[0x8]
80002652:	5c 88       	casts.h	r8
80002654:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002658:	b2 08       	st.h	r9[0x0],r8

  return SPI_OK;
8000265a:	30 08       	mov	r8,0
8000265c:	ef 48 ff f0 	st.w	r7[-16],r8
80002660:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80002664:	10 9c       	mov	r12,r8
80002666:	2f cd       	sub	sp,-16
80002668:	e3 cd 80 80 	ldm	sp++,r7,pc

8000266c <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000266c:	eb cd 40 80 	pushm	r7,lr
80002670:	1a 97       	mov	r7,sp
80002672:	c0 08       	rjmp	80002672 <_unhandled_interrupt+0x6>

80002674 <_get_interrupt_handler>:
 * \return Interrupt handler to execute.
 *
 * \note Taken and adapted from Newlib.
 */
__int_handler _get_interrupt_handler(unsigned int int_level)
{
80002674:	eb cd 40 80 	pushm	r7,lr
80002678:	1a 97       	mov	r7,sp
8000267a:	20 4d       	sub	sp,16
8000267c:	ef 4c ff f4 	st.w	r7[-12],r12
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002680:	fe 79 08 00 	mov	r9,-63488
80002684:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002688:	f0 08 11 03 	rsub	r8,r8,3
8000268c:	28 08       	sub	r8,-128
8000268e:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80002692:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int int_req = AVR32_INTC.irr[int_grp];
80002696:	fe 79 08 00 	mov	r9,-63488
8000269a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000269e:	2c 08       	sub	r8,-64
800026a0:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800026a4:	ef 48 ff fc 	st.w	r7[-4],r8
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800026a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026ac:	58 08       	cp.w	r8,0
800026ae:	c1 50       	breq	800026d8 <_get_interrupt_handler+0x64>
800026b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026b4:	48 e9       	lddpc	r9,800026ec <_get_interrupt_handler+0x78>
800026b6:	a1 78       	lsl	r8,0x1
800026b8:	2f f8       	sub	r8,-1
800026ba:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
800026be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026c2:	f0 08 12 00 	clz	r8,r8
800026c6:	f0 08 11 1f 	rsub	r8,r8,31
800026ca:	a3 68       	lsl	r8,0x2
800026cc:	f2 08 00 08 	add	r8,r9,r8
800026d0:	70 08       	ld.w	r8,r8[0x0]
800026d2:	ef 48 ff f0 	st.w	r7[-16],r8
800026d6:	c0 48       	rjmp	800026de <_get_interrupt_handler+0x6a>
800026d8:	30 08       	mov	r8,0
800026da:	ef 48 ff f0 	st.w	r7[-16],r8
800026de:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800026e2:	10 9c       	mov	r12,r8
800026e4:	2f cd       	sub	sp,-16
800026e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800026ea:	00 00       	add	r0,r0
800026ec:	80 00       	ld.sh	r0,r0[0x0]
800026ee:	fa 18 eb cd 	memt	-20684,0x11

800026f0 <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
800026f0:	eb cd 40 80 	pushm	r7,lr
800026f4:	1a 97       	mov	r7,sp
800026f6:	20 2d       	sub	sp,8
  unsigned int int_grp, int_req;

  INTC_init_evba();
800026f8:	f0 1f 00 1e 	mcall	80002770 <INTC_init_interrupts+0x80>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800026fc:	30 08       	mov	r8,0
800026fe:	ef 48 ff f8 	st.w	r7[-8],r8
80002702:	c2 e8       	rjmp	8000275e <INTC_init_interrupts+0x6e>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002704:	30 08       	mov	r8,0
80002706:	ef 48 ff fc 	st.w	r7[-4],r8
8000270a:	c1 38       	rjmp	80002730 <INTC_init_interrupts+0x40>
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000270c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002710:	49 99       	lddpc	r9,80002774 <INTC_init_interrupts+0x84>
80002712:	a1 78       	lsl	r8,0x1
80002714:	2f f8       	sub	r8,-1
80002716:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
8000271a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000271e:	a3 68       	lsl	r8,0x2
80002720:	10 09       	add	r9,r8
80002722:	49 68       	lddpc	r8,80002778 <INTC_init_interrupts+0x88>
80002724:	93 08       	st.w	r9[0x0],r8

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000272a:	2f f8       	sub	r8,-1
8000272c:	ef 48 ff fc 	st.w	r7[-4],r8
80002730:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002734:	49 08       	lddpc	r8,80002774 <INTC_init_interrupts+0x84>
80002736:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
8000273a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000273e:	10 39       	cp.w	r9,r8
80002740:	fe 9b ff e6 	brhi	8000270c <INTC_init_interrupts+0x1c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002744:	fe 7a 08 00 	mov	r10,-63488
80002748:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000274c:	48 c8       	lddpc	r8,8000277c <INTC_init_interrupts+0x8c>
8000274e:	70 08       	ld.w	r8,r8[0x0]
80002750:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002758:	2f f8       	sub	r8,-1
8000275a:	ef 48 ff f8 	st.w	r7[-8],r8
8000275e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002762:	59 38       	cp.w	r8,19
80002764:	fe 98 ff d0 	brls	80002704 <INTC_init_interrupts+0x14>
    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
  }
}
80002768:	2f ed       	sub	sp,-8
8000276a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000276e:	00 00       	add	r0,r0
80002770:	80 00       	ld.sh	r0,r0[0x0]
80002772:	27 80       	sub	r0,120
80002774:	80 00       	ld.sh	r0,r0[0x0]
80002776:	fa 18 80 00 	memt	0,0x11
8000277a:	26 6c       	sub	r12,102
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	f9 3c eb cd 	ld.ub	r12,r12[-5171]

80002780 <INTC_init_evba>:
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
}

//! Init EVBA address. This sequence might also be done in the UTILS/STARTUP/GCC/crt0.S
static __inline__ void INTC_init_evba(void)
{
80002780:	eb cd 40 80 	pushm	r7,lr
80002784:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002786:	48 38       	lddpc	r8,80002790 <INTC_init_evba+0x10>
80002788:	e3 b8 00 01 	mtsr	0x4,r8
}
8000278c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002790:	80 00       	ld.sh	r0,r0[0x0]
80002792:	f8 00       	*unknown*

80002794 <INTC_register_interrupt>:
  }
}


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
80002794:	eb cd 40 80 	pushm	r7,lr
80002798:	1a 97       	mov	r7,sp
8000279a:	20 4d       	sub	sp,16
8000279c:	ef 4c ff f8 	st.w	r7[-8],r12
800027a0:	ef 4b ff f4 	st.w	r7[-12],r11
800027a4:	ef 4a ff f0 	st.w	r7[-16],r10
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800027a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800027ac:	a5 98       	lsr	r8,0x5
800027ae:	ef 48 ff fc 	st.w	r7[-4],r8

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
800027b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027b6:	49 09       	lddpc	r9,800027f4 <INTC_register_interrupt+0x60>
800027b8:	a1 78       	lsl	r8,0x1
800027ba:	2f f8       	sub	r8,-1
800027bc:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
800027c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800027c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800027c8:	a3 68       	lsl	r8,0x2
800027ca:	10 09       	add	r9,r8
800027cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027d0:	93 08       	st.w	r9[0x0],r8
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
800027d2:	fe 7b 08 00 	mov	r11,-63488
800027d6:	ee fa ff fc 	ld.w	r10,r7[-4]
800027da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027de:	f3 d8 c0 02 	bfextu	r9,r8,0x0,0x2
800027e2:	48 68       	lddpc	r8,800027f8 <INTC_register_interrupt+0x64>
800027e4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800027e8:	f6 0a 09 28 	st.w	r11[r10<<0x2],r8
}
800027ec:	2f cd       	sub	sp,-16
800027ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800027f2:	00 00       	add	r0,r0
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	fa 18 80 00 	memt	0,0x11
800027fa:	f9 3c eb cd 	ld.ub	r12,r12[-5171]

800027fc <pm_set_osc0_mode>:
 *
 * \param pm Base address of the Power Manager (i.e. &AVR32_PM).
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
800027fc:	eb cd 40 80 	pushm	r7,lr
80002800:	1a 97       	mov	r7,sp
80002802:	20 3d       	sub	sp,12
80002804:	ef 4c ff f8 	st.w	r7[-8],r12
80002808:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000280c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002810:	70 a9       	ld.w	r9,r8[0x28]
80002812:	30 08       	mov	r8,0
80002814:	ef 48 ff fc 	st.w	r7[-4],r8
80002818:	ef 49 ff fc 	st.w	r7[-4],r9
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
8000281c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002820:	5c 58       	castu.b	r8
80002822:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002826:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000282a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000282e:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80002832:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002836:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000283a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000283e:	91 a9       	st.w	r8[0x28],r9
}
80002840:	2f dd       	sub	sp,-12
80002842:	e3 cd 80 80 	ldm	sp++,r7,pc
80002846:	d7 03       	nop

80002848 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002848:	eb cd 40 80 	pushm	r7,lr
8000284c:	1a 97       	mov	r7,sp
8000284e:	20 5d       	sub	sp,20
80002850:	ef 4c ff fc 	st.w	r7[-4],r12
80002854:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000285c:	ec 58 bb 9f 	cp.w	r8,899999
80002860:	e0 88 00 28 	brls	800028b0 <pm_enable_osc0_crystal+0x68>
80002864:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002868:	e0 69 c6 bf 	mov	r9,50879
8000286c:	ea 19 00 2d 	orh	r9,0x2d
80002870:	12 38       	cp.w	r8,r9
80002872:	e0 88 00 17 	brls	800028a0 <pm_enable_osc0_crystal+0x58>
80002876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000287a:	e0 69 11 ff 	mov	r9,4607
8000287e:	ea 19 00 7a 	orh	r9,0x7a
80002882:	12 38       	cp.w	r8,r9
80002884:	e0 8b 00 06 	brhi	80002890 <pm_enable_osc0_crystal+0x48>
80002888:	30 68       	mov	r8,6
8000288a:	ef 48 ff f4 	st.w	r7[-12],r8
8000288e:	c0 48       	rjmp	80002896 <pm_enable_osc0_crystal+0x4e>
80002890:	30 79       	mov	r9,7
80002892:	ef 49 ff f4 	st.w	r7[-12],r9
80002896:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000289a:	ef 48 ff f0 	st.w	r7[-16],r8
8000289e:	c0 48       	rjmp	800028a6 <pm_enable_osc0_crystal+0x5e>
800028a0:	30 59       	mov	r9,5
800028a2:	ef 49 ff f0 	st.w	r7[-16],r9
800028a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028aa:	ef 48 ff ec 	st.w	r7[-20],r8
800028ae:	c0 48       	rjmp	800028b6 <pm_enable_osc0_crystal+0x6e>
800028b0:	30 49       	mov	r9,4
800028b2:	ef 49 ff ec 	st.w	r7[-20],r9
800028b6:	ee fb ff ec 	ld.w	r11,r7[-20]
800028ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800028be:	f0 1f 00 03 	mcall	800028c8 <pm_enable_osc0_crystal+0x80>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800028c2:	2f bd       	sub	sp,-20
800028c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800028c8:	80 00       	ld.sh	r0,r0[0x0]
800028ca:	27 fc       	sub	r12,127

800028cc <pm_enable_clk0>:


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800028cc:	eb cd 40 80 	pushm	r7,lr
800028d0:	1a 97       	mov	r7,sp
800028d2:	20 2d       	sub	sp,8
800028d4:	ef 4c ff fc 	st.w	r7[-4],r12
800028d8:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_enable_clk0_no_wait(pm, startup);
800028dc:	ee fb ff f8 	ld.w	r11,r7[-8]
800028e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800028e4:	f0 1f 00 05 	mcall	800028f8 <pm_enable_clk0+0x2c>
  pm_wait_for_clk0_ready(pm);
800028e8:	ee fc ff fc 	ld.w	r12,r7[-4]
800028ec:	f0 1f 00 04 	mcall	800028fc <pm_enable_clk0+0x30>
}
800028f0:	2f ed       	sub	sp,-8
800028f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800028f6:	00 00       	add	r0,r0
800028f8:	80 00       	ld.sh	r0,r0[0x0]
800028fa:	29 00       	sub	r0,-112
800028fc:	80 00       	ld.sh	r0,r0[0x0]
800028fe:	29 5a       	sub	r10,-107

80002900 <pm_enable_clk0_no_wait>:
  pm->mcctrl &= ~AVR32_PM_MCCTRL_OSC0EN_MASK;
}


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
80002900:	eb cd 40 80 	pushm	r7,lr
80002904:	1a 97       	mov	r7,sp
80002906:	20 3d       	sub	sp,12
80002908:	ef 4c ff f8 	st.w	r7[-8],r12
8000290c:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002910:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002914:	70 a9       	ld.w	r9,r8[0x28]
80002916:	30 08       	mov	r8,0
80002918:	ef 48 ff fc 	st.w	r7[-4],r8
8000291c:	ef 49 ff fc 	st.w	r7[-4],r9
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002920:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002924:	5c 58       	castu.b	r8
80002926:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000292a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000292e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002932:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80002936:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000293a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000293e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002942:	91 a9       	st.w	r8[0x28],r9

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002944:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002948:	70 08       	ld.w	r8,r8[0x0]
8000294a:	10 99       	mov	r9,r8
8000294c:	a3 a9       	sbr	r9,0x2
8000294e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002952:	91 09       	st.w	r8[0x0],r9
}
80002954:	2f dd       	sub	sp,-12
80002956:	e3 cd 80 80 	ldm	sp++,r7,pc

8000295a <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
8000295a:	eb cd 40 80 	pushm	r7,lr
8000295e:	1a 97       	mov	r7,sp
80002960:	20 1d       	sub	sp,4
80002962:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000296a:	71 58       	ld.w	r8,r8[0x54]
8000296c:	e2 18 00 80 	andl	r8,0x80,COH
80002970:	cf b0       	breq	80002966 <pm_wait_for_clk0_ready+0xc>
}
80002972:	2f fd       	sub	sp,-4
80002974:	e3 cd 80 80 	ldm	sp++,r7,pc

80002978 <pm_cksel>:
              unsigned int pbasel,
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
80002978:	eb cd 40 80 	pushm	r7,lr
8000297c:	1a 97       	mov	r7,sp
8000297e:	20 6d       	sub	sp,24
80002980:	ee ce ff f8 	sub	lr,r7,-8
80002984:	ef 4c ff f8 	st.w	r7[-8],r12
80002988:	ef 4b ff f4 	st.w	r7[-12],r11
8000298c:	ef 4a ff f0 	st.w	r7[-16],r10
80002990:	ef 49 ff ec 	st.w	r7[-20],r9
80002994:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};
80002998:	30 08       	mov	r8,0
8000299a:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
8000299e:	7c 18       	ld.w	r8,lr[0x4]
800029a0:	5c 58       	castu.b	r8
800029a2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800029a6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800029aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029ae:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800029b2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
800029b6:	7c 08       	ld.w	r8,lr[0x0]
800029b8:	5c 58       	castu.b	r8
800029ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800029be:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800029c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029c6:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800029ca:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.hsbsel = hsbsel;
800029ce:	7c 18       	ld.w	r8,lr[0x4]
800029d0:	5c 58       	castu.b	r8
800029d2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800029d6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800029da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029de:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
800029e2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.hsbdiv = hsbdiv;
800029e6:	7c 08       	ld.w	r8,lr[0x0]
800029e8:	5c 58       	castu.b	r8
800029ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800029ee:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800029f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029f6:	f1 d9 d1 e1 	bfins	r8,r9,0xf,0x1
800029fa:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbasel = pbasel;
800029fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a02:	5c 58       	castu.b	r8
80002a04:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002a08:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a10:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
80002a14:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbadiv = pbadiv;
80002a18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a1c:	5c 58       	castu.b	r8
80002a1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002a22:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a2a:	f1 d9 d2 e1 	bfins	r8,r9,0x17,0x1
80002a2e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbbsel = pbbsel;
80002a32:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002a36:	5c 58       	castu.b	r8
80002a38:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002a3c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a44:	f1 d9 d3 03 	bfins	r8,r9,0x18,0x3
80002a48:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbbdiv = pbbdiv;
80002a4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a50:	5c 58       	castu.b	r8
80002a52:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002a56:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a5e:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
80002a62:	ef 48 ff fc 	st.w	r7[-4],r8

  pm->cksel = u_avr32_pm_cksel.cksel;
80002a66:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a6e:	91 19       	st.w	r8[0x4],r9

  // Wait for ckrdy bit and then clear it
  while (!(pm->poscsr & AVR32_PM_POSCSR_CKRDY_MASK));
80002a70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a74:	71 58       	ld.w	r8,r8[0x54]
80002a76:	e2 18 00 20 	andl	r8,0x20,COH
80002a7a:	cf b0       	breq	80002a70 <pm_cksel+0xf8>
}
80002a7c:	2f ad       	sub	sp,-24
80002a7e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002a82 <pm_gc_setup>:
                  unsigned int gc,
                  unsigned int osc_or_pll, // Use Osc (=0) or PLL (=1)
                  unsigned int pll_osc, // Sel Osc0/PLL0 or Osc1/PLL1
                  unsigned int diven,
                  unsigned int div)
{
80002a82:	eb cd 40 80 	pushm	r7,lr
80002a86:	1a 97       	mov	r7,sp
80002a88:	20 6d       	sub	sp,24
80002a8a:	ee ce ff f8 	sub	lr,r7,-8
80002a8e:	ef 4c ff f8 	st.w	r7[-8],r12
80002a92:	ef 4b ff f4 	st.w	r7[-12],r11
80002a96:	ef 4a ff f0 	st.w	r7[-16],r10
80002a9a:	ef 49 ff ec 	st.w	r7[-20],r9
80002a9e:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_gcctrl_t u_avr32_pm_gcctrl = {0};
80002aa2:	30 08       	mov	r8,0
80002aa4:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_gcctrl.GCCTRL.oscsel = pll_osc;
80002aa8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002aac:	5c 58       	castu.b	r8
80002aae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002ab2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002ab6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002aba:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80002abe:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_gcctrl.GCCTRL.pllsel = osc_or_pll;
80002ac2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ac6:	5c 58       	castu.b	r8
80002ac8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002acc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002ad0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ad4:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80002ad8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_gcctrl.GCCTRL.diven  = diven;
80002adc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002ae0:	5c 58       	castu.b	r8
80002ae2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002ae6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002aea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002aee:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80002af2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_gcctrl.GCCTRL.div    = div;
80002af6:	7c 08       	ld.w	r8,lr[0x0]
80002af8:	5c 58       	castu.b	r8
80002afa:	ef 68 ff fe 	st.b	r7[-2],r8

  pm->gcctrl[gc] = u_avr32_pm_gcctrl.gcctrl;
80002afe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b02:	ee fa ff fc 	ld.w	r10,r7[-4]
80002b06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b0a:	2e 88       	sub	r8,-24
80002b0c:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002b10:	2f ad       	sub	sp,-24
80002b12:	e3 cd 80 80 	ldm	sp++,r7,pc

80002b16 <pm_gc_enable>:


void pm_gc_enable(volatile avr32_pm_t *pm,
                  unsigned int gc)
{
80002b16:	eb cd 40 80 	pushm	r7,lr
80002b1a:	1a 97       	mov	r7,sp
80002b1c:	20 2d       	sub	sp,8
80002b1e:	ef 4c ff fc 	st.w	r7[-4],r12
80002b22:	ef 4b ff f8 	st.w	r7[-8],r11
  pm->gcctrl[gc] |= AVR32_PM_GCCTRL_CEN_MASK;
80002b26:	ee fb ff f8 	ld.w	r11,r7[-8]
80002b2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002b32:	2e 88       	sub	r8,-24
80002b34:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80002b38:	10 9a       	mov	r10,r8
80002b3a:	a3 aa       	sbr	r10,0x2
80002b3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002b40:	f6 c8 ff e8 	sub	r8,r11,-24
80002b44:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002b48:	2f ed       	sub	sp,-8
80002b4a:	e3 cd 80 80 	ldm	sp++,r7,pc

80002b4e <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002b4e:	eb cd 40 80 	pushm	r7,lr
80002b52:	1a 97       	mov	r7,sp
80002b54:	20 6d       	sub	sp,24
80002b56:	ee ce ff f8 	sub	lr,r7,-8
80002b5a:	ef 4c ff f8 	st.w	r7[-8],r12
80002b5e:	ef 4b ff f4 	st.w	r7[-12],r11
80002b62:	ef 4a ff f0 	st.w	r7[-16],r10
80002b66:	ef 49 ff ec 	st.w	r7[-20],r9
80002b6a:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
80002b6e:	30 08       	mov	r8,0
80002b70:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_pll.PLL.pllosc   = osc;
80002b74:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002b78:	5c 58       	castu.b	r8
80002b7a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b7e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b86:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80002b8a:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.plldiv   = div;
80002b8e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002b92:	5c 58       	castu.b	r8
80002b94:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002b98:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ba0:	f1 d9 d1 04 	bfins	r8,r9,0x8,0x4
80002ba4:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllmul   = mul;
80002ba8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002bac:	5c 58       	castu.b	r8
80002bae:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002bb2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002bb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bba:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80002bbe:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllcount = lockcount;
80002bc2:	7c 08       	ld.w	r8,lr[0x0]
80002bc4:	5c 58       	castu.b	r8
80002bc6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002bca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002bce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bd2:	f1 d9 d3 06 	bfins	r8,r9,0x18,0x6
80002bd6:	ef 48 ff fc 	st.w	r7[-4],r8

  pm->pll[pll] = u_avr32_pm_pll.pll;
80002bda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002bde:	ee fa ff fc 	ld.w	r10,r7[-4]
80002be2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002be6:	2f 88       	sub	r8,-8
80002be8:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002bec:	2f ad       	sub	sp,-24
80002bee:	e3 cd 80 80 	ldm	sp++,r7,pc

80002bf2 <pm_pll_set_option>:
void pm_pll_set_option(volatile avr32_pm_t *pm,
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
80002bf2:	eb cd 40 80 	pushm	r7,lr
80002bf6:	1a 97       	mov	r7,sp
80002bf8:	20 6d       	sub	sp,24
80002bfa:	ef 4c ff f8 	st.w	r7[-8],r12
80002bfe:	ef 4b ff f4 	st.w	r7[-12],r11
80002c02:	ef 4a ff f0 	st.w	r7[-16],r10
80002c06:	ef 49 ff ec 	st.w	r7[-20],r9
80002c0a:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
80002c0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002c12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c16:	2f 88       	sub	r8,-8
80002c18:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80002c1c:	30 08       	mov	r8,0
80002c1e:	ef 48 ff fc 	st.w	r7[-4],r8
80002c22:	ef 49 ff fc 	st.w	r7[-4],r9
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002c26:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002c2a:	5c 58       	castu.b	r8
80002c2c:	a1 78       	lsl	r8,0x1
80002c2e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002c32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c36:	5c 58       	castu.b	r8
80002c38:	f3 e8 10 08 	or	r8,r9,r8
80002c3c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002c40:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002c44:	5c 58       	castu.b	r8
80002c46:	a3 68       	lsl	r8,0x2
80002c48:	5c 58       	castu.b	r8
80002c4a:	f3 e8 10 08 	or	r8,r9,r8
80002c4e:	5c 58       	castu.b	r8
80002c50:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002c54:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002c58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c5c:	f1 d9 d0 43 	bfins	r8,r9,0x2,0x3
80002c60:	ef 48 ff fc 	st.w	r7[-4],r8
  pm->pll[pll] = u_avr32_pm_pll.pll;
80002c64:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002c68:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c6c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c70:	2f 88       	sub	r8,-8
80002c72:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002c76:	2f ad       	sub	sp,-24
80002c78:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c7c <pm_pll_enable>:
}


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
80002c7c:	eb cd 40 80 	pushm	r7,lr
80002c80:	1a 97       	mov	r7,sp
80002c82:	20 2d       	sub	sp,8
80002c84:	ef 4c ff fc 	st.w	r7[-4],r12
80002c88:	ef 4b ff f8 	st.w	r7[-8],r11
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
80002c8c:	ee fb ff f8 	ld.w	r11,r7[-8]
80002c90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c94:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c98:	2f 88       	sub	r8,-8
80002c9a:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80002c9e:	10 9a       	mov	r10,r8
80002ca0:	a1 aa       	sbr	r10,0x0
80002ca2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002ca6:	f6 c8 ff f8 	sub	r8,r11,-8
80002caa:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002cae:	2f ed       	sub	sp,-8
80002cb0:	e3 cd 80 80 	ldm	sp++,r7,pc

80002cb4 <pm_wait_for_pll0_locked>:
  pm->pll[pll] &= ~AVR32_PM_PLLEN_MASK;
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
80002cb4:	eb cd 40 80 	pushm	r7,lr
80002cb8:	1a 97       	mov	r7,sp
80002cba:	20 1d       	sub	sp,4
80002cbc:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
80002cc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cc4:	71 58       	ld.w	r8,r8[0x54]
80002cc6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002cca:	cf b0       	breq	80002cc0 <pm_wait_for_pll0_locked+0xc>
}
80002ccc:	2f fd       	sub	sp,-4
80002cce:	e3 cd 80 80 	ldm	sp++,r7,pc

80002cd2 <pm_wait_for_pll1_locked>:


void pm_wait_for_pll1_locked(volatile avr32_pm_t *pm)
{
80002cd2:	eb cd 40 80 	pushm	r7,lr
80002cd6:	1a 97       	mov	r7,sp
80002cd8:	20 1d       	sub	sp,4
80002cda:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK1_MASK));
80002cde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ce2:	71 58       	ld.w	r8,r8[0x54]
80002ce4:	e2 18 00 02 	andl	r8,0x2,COH
80002ce8:	cf b0       	breq	80002cde <pm_wait_for_pll1_locked+0xc>
}
80002cea:	2f fd       	sub	sp,-4
80002cec:	e3 cd 80 80 	ldm	sp++,r7,pc

80002cf0 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
80002cf0:	eb cd 40 80 	pushm	r7,lr
80002cf4:	1a 97       	mov	r7,sp
80002cf6:	20 3d       	sub	sp,12
80002cf8:	ef 4c ff f8 	st.w	r7[-8],r12
80002cfc:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002d00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d04:	70 09       	ld.w	r9,r8[0x0]
80002d06:	30 08       	mov	r8,0
80002d08:	ef 48 ff fc 	st.w	r7[-4],r8
80002d0c:	ef 49 ff fc 	st.w	r7[-4],r9
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002d10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d14:	5c 58       	castu.b	r8
80002d16:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002d1a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002d1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d22:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002d26:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002d2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d32:	91 09       	st.w	r8[0x0],r9
}
80002d34:	2f dd       	sub	sp,-12
80002d36:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d3a:	d7 03       	nop

80002d3c <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002d3c:	eb cd 40 80 	pushm	r7,lr
80002d40:	1a 97       	mov	r7,sp
80002d42:	20 3d       	sub	sp,12
80002d44:	ef 4c ff fc 	st.w	r7[-4],r12
80002d48:	ef 4b ff f8 	st.w	r7[-8],r11
80002d4c:	ef 4a ff f4 	st.w	r7[-12],r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002d50:	ee fb ff f8 	ld.w	r11,r7[-8]
80002d54:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d58:	f0 1f 00 08 	mcall	80002d78 <pm_switch_to_osc0+0x3c>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002d5c:	ee fb ff f4 	ld.w	r11,r7[-12]
80002d60:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d64:	f0 1f 00 06 	mcall	80002d7c <pm_switch_to_osc0+0x40>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002d68:	30 1b       	mov	r11,1
80002d6a:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d6e:	f0 1f 00 05 	mcall	80002d80 <pm_switch_to_osc0+0x44>
}
80002d72:	2f dd       	sub	sp,-12
80002d74:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	28 48       	sub	r8,-124
80002d7c:	80 00       	ld.sh	r0,r0[0x0]
80002d7e:	28 cc       	sub	r12,-116
80002d80:	80 00       	ld.sh	r0,r0[0x0]
80002d82:	2c f0       	sub	r0,-49

80002d84 <pm_configure_clocks>:

#define PM_MAX_MUL                ((1 << AVR32_PM_PLL0_PLLMUL_SIZE) - 1)


int pm_configure_clocks(pm_freq_param_t *param)
{
80002d84:	eb cd 40 80 	pushm	r7,lr
80002d88:	1a 97       	mov	r7,sp
80002d8a:	20 cd       	sub	sp,48
80002d8c:	ef 4c ff d4 	st.w	r7[-44],r12
  //  12    8   1  108     1     54    27
  //  12    9   1  120     1     60    15
  //  12    9   1  120     1     60    30
  //  12   10   1  132     1     66    16.5
  //
  unsigned long in_cpu_f  = param->cpu_f;
80002d90:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002d94:	70 08       	ld.w	r8,r8[0x0]
80002d96:	ef 48 ff d8 	st.w	r7[-40],r8
  unsigned long in_osc0_f = param->osc0_f;
80002d9a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002d9e:	70 28       	ld.w	r8,r8[0x8]
80002da0:	ef 48 ff dc 	st.w	r7[-36],r8
  unsigned long mul, div, div2_en = 0, div2_cpu = 0, div2_pba = 0;
80002da4:	30 08       	mov	r8,0
80002da6:	ef 48 ff e8 	st.w	r7[-24],r8
80002daa:	30 08       	mov	r8,0
80002dac:	ef 48 ff ec 	st.w	r7[-20],r8
80002db0:	30 08       	mov	r8,0
80002db2:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned long pll_freq, rest;
  Bool b_div2_pba, b_div2_cpu;

  // Switch to external Oscillator 0
  pm_switch_to_osc0(&AVR32_PM, in_osc0_f, param->osc0_startup);
80002db6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002dba:	70 38       	ld.w	r8,r8[0xc]
80002dbc:	10 9a       	mov	r10,r8
80002dbe:	ee fb ff dc 	ld.w	r11,r7[-36]
80002dc2:	fe 7c 0c 00 	mov	r12,-62464
80002dc6:	f0 1f 00 b0 	mcall	80003084 <pm_configure_clocks+0x300>

  // Start with CPU freq config
  if (in_cpu_f == in_osc0_f)
80002dca:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002dce:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002dd2:	10 39       	cp.w	r9,r8
80002dd4:	c0 f1       	brne	80002df2 <pm_configure_clocks+0x6e>
  {
    param->cpu_f = in_osc0_f;
80002dd6:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002dda:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002dde:	93 08       	st.w	r9[0x0],r8
    param->pba_f = in_osc0_f;
80002de0:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002de4:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002de8:	93 18       	st.w	r9[0x4],r8
    return PM_FREQ_STATUS_OK;
80002dea:	30 09       	mov	r9,0
80002dec:	ef 49 ff d0 	st.w	r7[-48],r9
80002df0:	c4 49       	rjmp	80003078 <pm_configure_clocks+0x2f4>
  else if (in_cpu_f < in_osc0_f)
  {
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;
80002df2:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002df6:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002dfa:	f2 08 0d 08 	divu	r8,r9,r8
80002dfe:	12 98       	mov	r8,r9
80002e00:	ef 48 ff f8 	st.w	r7[-8],r8

  for (div = 1; div < 32; div++)
80002e04:	30 18       	mov	r8,1
80002e06:	ef 48 ff e4 	st.w	r7[-28],r8
80002e0a:	c1 28       	rjmp	80002e2e <pm_configure_clocks+0xaa>
  {
    if ((div * rest) % in_osc0_f == 0)
80002e0c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002e10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e14:	b1 39       	mul	r9,r8
80002e16:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002e1a:	f2 08 0d 08 	divu	r8,r9,r8
80002e1e:	12 98       	mov	r8,r9
80002e20:	58 08       	cp.w	r8,0
80002e22:	c0 b0       	breq	80002e38 <pm_configure_clocks+0xb4>
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;

  for (div = 1; div < 32; div++)
80002e24:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002e28:	2f f8       	sub	r8,-1
80002e2a:	ef 48 ff e4 	st.w	r7[-28],r8
80002e2e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002e32:	59 f8       	cp.w	r8,31
80002e34:	fe 98 ff ec 	brls	80002e0c <pm_configure_clocks+0x88>
  {
    if ((div * rest) % in_osc0_f == 0)
      break;
  }
  if (div == 32)
80002e38:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002e3c:	e0 48 00 20 	cp.w	r8,32
80002e40:	c0 51       	brne	80002e4a <pm_configure_clocks+0xc6>
    return PM_FREQ_STATUS_FAIL;
80002e42:	3f f8       	mov	r8,-1
80002e44:	ef 48 ff d0 	st.w	r7[-48],r8
80002e48:	c1 89       	rjmp	80003078 <pm_configure_clocks+0x2f4>

  mul = (in_cpu_f * div) / in_osc0_f;
80002e4a:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002e4e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002e52:	b1 39       	mul	r9,r8
80002e54:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002e58:	f2 08 0d 08 	divu	r8,r9,r8
80002e5c:	ef 48 ff e0 	st.w	r7[-32],r8

  if (mul > PM_MAX_MUL)
80002e60:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002e64:	58 f8       	cp.w	r8,15
80002e66:	e0 88 00 10 	brls	80002e86 <pm_configure_clocks+0x102>
    return PM_FREQ_STATUS_FAIL;
80002e6a:	3f f9       	mov	r9,-1
80002e6c:	ef 49 ff d0 	st.w	r7[-48],r9
80002e70:	c0 49       	rjmp	80003078 <pm_configure_clocks+0x2f4>

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
  {
    div /= 2;
80002e72:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002e76:	a1 98       	lsr	r8,0x1
80002e78:	ef 48 ff e4 	st.w	r7[-28],r8
    div2_cpu++;
80002e7c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002e80:	2f f8       	sub	r8,-1
80002e82:	ef 48 ff ec 	st.w	r7[-20],r8

  if (mul > PM_MAX_MUL)
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
80002e86:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002e8a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002e8e:	cf 20       	breq	80002e72 <pm_configure_clocks+0xee>
80002e90:	c1 18       	rjmp	80002eb2 <pm_configure_clocks+0x12e>
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
  {
    if (2 * mul > PM_MAX_MUL)
80002e92:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002e96:	a1 78       	lsl	r8,0x1
80002e98:	58 f8       	cp.w	r8,15
80002e9a:	e0 8b 00 1f 	brhi	80002ed8 <pm_configure_clocks+0x154>
      break;
    mul *= 2;
80002e9e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002ea2:	a1 78       	lsl	r8,0x1
80002ea4:	ef 48 ff e0 	st.w	r7[-32],r8
    div2_cpu++;
80002ea8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002eac:	2f f8       	sub	r8,-1
80002eae:	ef 48 ff ec 	st.w	r7[-20],r8

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
80002eb2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002eb6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002eba:	f2 08 02 48 	mul	r8,r9,r8
80002ebe:	f0 09 15 01 	lsl	r9,r8,0x1
80002ec2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002ec6:	f2 08 0d 08 	divu	r8,r9,r8
80002eca:	e0 69 1b ff 	mov	r9,7167
80002ece:	ea 19 0e 4e 	orh	r9,0xe4e
80002ed2:	12 38       	cp.w	r8,r9
80002ed4:	fe 98 ff df 	brls	80002e92 <pm_configure_clocks+0x10e>
      break;
    mul *= 2;
    div2_cpu++;
  }

  if (div2_cpu != 0)
80002ed8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002edc:	58 08       	cp.w	r8,0
80002ede:	c0 90       	breq	80002ef0 <pm_configure_clocks+0x16c>
  {
    div2_cpu--;
80002ee0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002ee4:	20 18       	sub	r8,1
80002ee6:	ef 48 ff ec 	st.w	r7[-20],r8
    div2_en = 1;
80002eea:	30 18       	mov	r8,1
80002eec:	ef 48 ff e8 	st.w	r7[-24],r8
  }

  pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
80002ef0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002ef4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002ef8:	f2 08 02 4a 	mul	r10,r9,r8
80002efc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002f00:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002f04:	f0 09 09 48 	lsl	r8,r8,r9
80002f08:	f4 08 0d 08 	divu	r8,r10,r8
80002f0c:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update real CPU Frequency
  param->cpu_f = pll_freq / (1 << div2_cpu);
80002f10:	ee f9 ff ec 	ld.w	r9,r7[-20]
80002f14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f18:	f0 09 0a 49 	lsr	r9,r8,r9
80002f1c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f20:	91 09       	st.w	r8[0x0],r9
  mul--;
80002f22:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002f26:	20 18       	sub	r8,1
80002f28:	ef 48 ff e0 	st.w	r7[-32],r8

  pm_pll_setup(&AVR32_PM
80002f2c:	31 08       	mov	r8,16
80002f2e:	1a d8       	st.w	--sp,r8
80002f30:	30 08       	mov	r8,0
80002f32:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002f36:	ee fa ff e0 	ld.w	r10,r7[-32]
80002f3a:	30 0b       	mov	r11,0
80002f3c:	fe 7c 0c 00 	mov	r12,-62464
80002f40:	f0 1f 00 52 	mcall	80003088 <pm_configure_clocks+0x304>
80002f44:	2f fd       	sub	sp,-4
  , div // div
  , 0   // osc
  , 16  // lockcount
  );

  pm_pll_set_option(&AVR32_PM
80002f46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f4a:	e0 69 67 ff 	mov	r9,26623
80002f4e:	ea 19 09 89 	orh	r9,0x989
80002f52:	12 38       	cp.w	r8,r9
80002f54:	5f 8a       	srls	r10
80002f56:	30 08       	mov	r8,0
80002f58:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002f5c:	30 0b       	mov	r11,0
80002f5e:	fe 7c 0c 00 	mov	r12,-62464
80002f62:	f0 1f 00 4b 	mcall	8000308c <pm_configure_clocks+0x308>
  , (pll_freq < AVR32_PM_PLL_VCO_RANGE0_MIN_FREQ) ? 1 : 0 // pll_freq
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
80002f66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f6a:	ef 48 ff f8 	st.w	r7[-8],r8
80002f6e:	c1 68       	rjmp	80002f9a <pm_configure_clocks+0x216>
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
         rest != param->pba_f)
  {
    div2_pba++;
80002f70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002f74:	2f f8       	sub	r8,-1
80002f76:	ef 48 ff f0 	st.w	r7[-16],r8
    rest = pll_freq / (1 << div2_pba);
80002f7a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002f7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f82:	f0 09 0a 48 	lsr	r8,r8,r9
80002f86:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rest < param->pba_f)
80002f8a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f8e:	70 19       	ld.w	r9,r8[0x4]
80002f90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f94:	10 39       	cp.w	r9,r8
80002f96:	e0 8b 00 12 	brhi	80002fba <pm_configure_clocks+0x236>
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80002f9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f9e:	e0 69 14 80 	mov	r9,5248
80002fa2:	ea 19 03 ef 	orh	r9,0x3ef
80002fa6:	12 38       	cp.w	r8,r9
80002fa8:	fe 9b ff e4 	brhi	80002f70 <pm_configure_clocks+0x1ec>
80002fac:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fb0:	70 19       	ld.w	r9,r8[0x4]
80002fb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002fb6:	10 39       	cp.w	r9,r8
80002fb8:	cd c1       	brne	80002f70 <pm_configure_clocks+0x1ec>
    if (rest < param->pba_f)
      break;
  }

  // Update real PBA Frequency
  param->pba_f = pll_freq / (1 << div2_pba);
80002fba:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002fbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002fc2:	f0 09 0a 49 	lsr	r9,r8,r9
80002fc6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fca:	91 19       	st.w	r8[0x4],r9

  // Enable PLL0
  pm_pll_enable(&AVR32_PM, 0);
80002fcc:	30 0b       	mov	r11,0
80002fce:	fe 7c 0c 00 	mov	r12,-62464
80002fd2:	f0 1f 00 30 	mcall	80003090 <pm_configure_clocks+0x30c>

  // Wait for PLL0 locked
  pm_wait_for_pll0_locked(&AVR32_PM);
80002fd6:	fe 7c 0c 00 	mov	r12,-62464
80002fda:	f0 1f 00 2f 	mcall	80003094 <pm_configure_clocks+0x310>

  if (div2_cpu)
80002fde:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002fe2:	58 08       	cp.w	r8,0
80002fe4:	c0 a0       	breq	80002ff8 <pm_configure_clocks+0x274>
  {
    b_div2_cpu = TRUE;
80002fe6:	30 18       	mov	r8,1
80002fe8:	ef 68 ff ff 	st.b	r7[-1],r8
    div2_cpu--;
80002fec:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002ff0:	20 18       	sub	r8,1
80002ff2:	ef 48 ff ec 	st.w	r7[-20],r8
80002ff6:	c0 48       	rjmp	80002ffe <pm_configure_clocks+0x27a>
  }
  else
    b_div2_cpu = FALSE;
80002ff8:	30 08       	mov	r8,0
80002ffa:	ef 68 ff ff 	st.b	r7[-1],r8

  if (div2_pba)
80002ffe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003002:	58 08       	cp.w	r8,0
80003004:	c0 a0       	breq	80003018 <pm_configure_clocks+0x294>
  {
    b_div2_pba = TRUE;
80003006:	30 18       	mov	r8,1
80003008:	ef 68 ff fe 	st.b	r7[-2],r8
    div2_pba--;
8000300c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003010:	20 18       	sub	r8,1
80003012:	ef 48 ff f0 	st.w	r7[-16],r8
80003016:	c0 48       	rjmp	8000301e <pm_configure_clocks+0x29a>
  }
  else
    b_div2_pba = FALSE;
80003018:	30 08       	mov	r8,0
8000301a:	ef 68 ff fe 	st.b	r7[-2],r8

  pm_cksel(&AVR32_PM
8000301e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003022:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003026:	ef 3b ff fe 	ld.ub	r11,r7[-2]
8000302a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000302e:	1a d8       	st.w	--sp,r8
80003030:	1a d9       	st.w	--sp,r9
80003032:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003036:	14 99       	mov	r9,r10
80003038:	ee fa ff f0 	ld.w	r10,r7[-16]
8000303c:	fe 7c 0c 00 	mov	r12,-62464
80003040:	f0 1f 00 16 	mcall	80003098 <pm_configure_clocks+0x314>
80003044:	2f ed       	sub	sp,-8
  , b_div2_pba, div2_pba // PBA
  , b_div2_cpu, div2_cpu // PBB
  , b_div2_cpu, div2_cpu // HSB
  );

  if (param->cpu_f > AVR32_FLASHC_FWS_0_MAX_FREQ)
80003046:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000304a:	70 08       	ld.w	r8,r8[0x0]
8000304c:	e0 69 8a 40 	mov	r9,35392
80003050:	ea 19 01 f7 	orh	r9,0x1f7
80003054:	12 38       	cp.w	r8,r9
80003056:	e0 88 00 06 	brls	80003062 <pm_configure_clocks+0x2de>
  {
    flashc_set_wait_state(1);
8000305a:	30 1c       	mov	r12,1
8000305c:	f0 1f 00 10 	mcall	8000309c <pm_configure_clocks+0x318>
80003060:	c0 48       	rjmp	80003068 <pm_configure_clocks+0x2e4>
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }
  else
  {
    flashc_set_wait_state(0);
80003062:	30 0c       	mov	r12,0
80003064:	f0 1f 00 0e 	mcall	8000309c <pm_configure_clocks+0x318>
    else
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }

  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
80003068:	30 2b       	mov	r11,2
8000306a:	fe 7c 0c 00 	mov	r12,-62464
8000306e:	f0 1f 00 0d 	mcall	800030a0 <pm_configure_clocks+0x31c>

  return PM_FREQ_STATUS_OK;
80003072:	30 08       	mov	r8,0
80003074:	ef 48 ff d0 	st.w	r7[-48],r8
80003078:	ee f8 ff d0 	ld.w	r8,r7[-48]
}
8000307c:	10 9c       	mov	r12,r8
8000307e:	2f 4d       	sub	sp,-48
80003080:	e3 cd 80 80 	ldm	sp++,r7,pc
80003084:	80 00       	ld.sh	r0,r0[0x0]
80003086:	2d 3c       	sub	r12,-45
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	2b 4e       	sub	lr,-76
8000308c:	80 00       	ld.sh	r0,r0[0x0]
8000308e:	2b f2       	sub	r2,-65
80003090:	80 00       	ld.sh	r0,r0[0x0]
80003092:	2c 7c       	sub	r12,-57
80003094:	80 00       	ld.sh	r0,r0[0x0]
80003096:	2c b4       	sub	r4,-53
80003098:	80 00       	ld.sh	r0,r0[0x0]
8000309a:	29 78       	sub	r8,-105
8000309c:	80 00       	ld.sh	r0,r0[0x0]
8000309e:	31 20       	mov	r0,18
800030a0:	80 00       	ld.sh	r0,r0[0x0]
800030a2:	2c f0       	sub	r0,-49

800030a4 <pm_configure_usb_clock>:


void pm_configure_usb_clock(void)
{
800030a4:	eb cd 40 80 	pushm	r7,lr
800030a8:	1a 97       	mov	r7,sp

  // Enable USB GCLK.
  pm_gc_enable(&AVR32_PM, AVR32_PM_GCLK_USBB);
#else
  // Use 12MHz from OSC0 and generate 96 MHz
  pm_pll_setup(&AVR32_PM, 1,  // pll.
800030aa:	31 08       	mov	r8,16
800030ac:	1a d8       	st.w	--sp,r8
800030ae:	30 08       	mov	r8,0
800030b0:	30 19       	mov	r9,1
800030b2:	30 7a       	mov	r10,7
800030b4:	30 1b       	mov	r11,1
800030b6:	fe 7c 0c 00 	mov	r12,-62464
800030ba:	f0 1f 00 14 	mcall	80003108 <pm_configure_usb_clock+0x64>
800030be:	2f fd       	sub	sp,-4
	  7,   // mul.
	  1,   // div.
	  0,   // osc.
	  16); // lockcount.

  pm_pll_set_option(&AVR32_PM, 1, // pll.
800030c0:	30 08       	mov	r8,0
800030c2:	30 19       	mov	r9,1
800030c4:	30 1a       	mov	r10,1
800030c6:	30 1b       	mov	r11,1
800030c8:	fe 7c 0c 00 	mov	r12,-62464
800030cc:	f0 1f 00 10 	mcall	8000310c <pm_configure_usb_clock+0x68>
	  1,  // pll_freq: choose the range 80-180MHz.
	  1,  // pll_div2.
	  0); // pll_wbwdisable.

  // start PLL1 and wait forl lock
  pm_pll_enable(&AVR32_PM, 1);
800030d0:	30 1b       	mov	r11,1
800030d2:	fe 7c 0c 00 	mov	r12,-62464
800030d6:	f0 1f 00 0f 	mcall	80003110 <pm_configure_usb_clock+0x6c>

  // Wait for PLL1 locked.
  pm_wait_for_pll1_locked(&AVR32_PM);
800030da:	fe 7c 0c 00 	mov	r12,-62464
800030de:	f0 1f 00 0e 	mcall	80003114 <pm_configure_usb_clock+0x70>

  pm_gc_setup(&AVR32_PM, AVR32_PM_GCLK_USBB,  // gc.
800030e2:	30 08       	mov	r8,0
800030e4:	1a d8       	st.w	--sp,r8
800030e6:	30 08       	mov	r8,0
800030e8:	30 19       	mov	r9,1
800030ea:	30 1a       	mov	r10,1
800030ec:	30 4b       	mov	r11,4
800030ee:	fe 7c 0c 00 	mov	r12,-62464
800030f2:	f0 1f 00 0a 	mcall	80003118 <pm_configure_usb_clock+0x74>
800030f6:	2f fd       	sub	sp,-4
            1,  // osc_or_pll: use Osc (if 0) or PLL (if 1).
            1,  // pll_osc: select Osc0/PLL0 or Osc1/PLL1.
            0,  // diven.
            0); // div.
  pm_gc_enable(&AVR32_PM, AVR32_PM_GCLK_USBB);
800030f8:	30 4b       	mov	r11,4
800030fa:	fe 7c 0c 00 	mov	r12,-62464
800030fe:	f0 1f 00 08 	mcall	8000311c <pm_configure_usb_clock+0x78>
#endif
}
80003102:	e3 cd 80 80 	ldm	sp++,r7,pc
80003106:	00 00       	add	r0,r0
80003108:	80 00       	ld.sh	r0,r0[0x0]
8000310a:	2b 4e       	sub	lr,-76
8000310c:	80 00       	ld.sh	r0,r0[0x0]
8000310e:	2b f2       	sub	r2,-65
80003110:	80 00       	ld.sh	r0,r0[0x0]
80003112:	2c 7c       	sub	r12,-57
80003114:	80 00       	ld.sh	r0,r0[0x0]
80003116:	2c d2       	sub	r2,-51
80003118:	80 00       	ld.sh	r0,r0[0x0]
8000311a:	2a 82       	sub	r2,-88
8000311c:	80 00       	ld.sh	r0,r0[0x0]
8000311e:	2b 16       	sub	r6,-79

80003120 <flashc_set_wait_state>:
  return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
80003120:	eb cd 40 80 	pushm	r7,lr
80003124:	1a 97       	mov	r7,sp
80003126:	20 2d       	sub	sp,8
80003128:	ef 4c ff f8 	st.w	r7[-8],r12
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000312c:	fe 68 14 00 	mov	r8,-125952
80003130:	70 09       	ld.w	r9,r8[0x0]
80003132:	30 08       	mov	r8,0
80003134:	ef 48 ff fc 	st.w	r7[-4],r8
80003138:	ef 49 ff fc 	st.w	r7[-4],r9
  u_avr32_flashc_fcr.FCR.fws = wait_state;
8000313c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003140:	5c 58       	castu.b	r8
80003142:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003146:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000314a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000314e:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80003152:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80003156:	fe 69 14 00 	mov	r9,-125952
8000315a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000315e:	93 08       	st.w	r9[0x0],r8
}
80003160:	2f ed       	sub	sp,-8
80003162:	e3 cd 80 80 	ldm	sp++,r7,pc
80003166:	d7 03       	nop

80003168 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, unsigned int size)
{
80003168:	eb cd 40 80 	pushm	r7,lr
8000316c:	1a 97       	mov	r7,sp
8000316e:	20 4d       	sub	sp,16
80003170:	ef 4c ff f4 	st.w	r7[-12],r12
80003174:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80003178:	30 08       	mov	r8,0
8000317a:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int i;

  for (i = 0; i < size; i++)
8000317e:	30 08       	mov	r8,0
80003180:	ef 48 ff fc 	st.w	r7[-4],r8
80003184:	c1 c8       	rjmp	800031bc <gpio_enable_module+0x54>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80003186:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000318a:	11 98       	ld.ub	r8,r8[0x1]
8000318c:	10 99       	mov	r9,r8
8000318e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003192:	11 88       	ld.ub	r8,r8[0x0]
80003194:	12 9b       	mov	r11,r9
80003196:	10 9c       	mov	r12,r8
80003198:	f0 1f 00 0f 	mcall	800031d4 <gpio_enable_module+0x6c>
8000319c:	18 99       	mov	r9,r12
8000319e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a2:	12 48       	or	r8,r9
800031a4:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
800031a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031ac:	2f e8       	sub	r8,-2
800031ae:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, unsigned int size)
{
  int status = GPIO_SUCCESS;
  unsigned int i;

  for (i = 0; i < size; i++)
800031b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031b6:	2f f8       	sub	r8,-1
800031b8:	ef 48 ff fc 	st.w	r7[-4],r8
800031bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800031c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800031c4:	10 39       	cp.w	r9,r8
800031c6:	ce 03       	brcs	80003186 <gpio_enable_module+0x1e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
800031c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800031cc:	10 9c       	mov	r12,r8
800031ce:	2f cd       	sub	sp,-16
800031d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	31 d8       	mov	r8,29

800031d8 <gpio_enable_module_pin>:


int gpio_enable_module_pin(unsigned int pin, unsigned int function)
{
800031d8:	eb cd 40 80 	pushm	r7,lr
800031dc:	1a 97       	mov	r7,sp
800031de:	20 5d       	sub	sp,20
800031e0:	ef 4c ff f8 	st.w	r7[-8],r12
800031e4:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800031e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031ec:	a5 98       	lsr	r8,0x5
800031ee:	a9 68       	lsl	r8,0x8
800031f0:	e0 28 f0 00 	sub	r8,61440
800031f4:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800031f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031fc:	ef 48 ff ec 	st.w	r7[-20],r8
80003200:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003204:	58 18       	cp.w	r8,1
80003206:	c2 50       	breq	80003250 <gpio_enable_module_pin+0x78>
80003208:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000320c:	58 18       	cp.w	r8,1
8000320e:	c0 a3       	brcs	80003222 <gpio_enable_module_pin+0x4a>
80003210:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003214:	58 28       	cp.w	r8,2
80003216:	c3 40       	breq	8000327e <gpio_enable_module_pin+0xa6>
80003218:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000321c:	58 38       	cp.w	r8,3
8000321e:	c4 70       	breq	800032ac <gpio_enable_module_pin+0xd4>
80003220:	c5 d8       	rjmp	800032da <gpio_enable_module_pin+0x102>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80003222:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003226:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000322a:	30 18       	mov	r8,1
8000322c:	f0 09 09 48 	lsl	r8,r8,r9
80003230:	10 99       	mov	r9,r8
80003232:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003236:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80003238:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000323c:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003240:	30 18       	mov	r8,1
80003242:	f0 09 09 48 	lsl	r8,r8,r9
80003246:	10 99       	mov	r9,r8
80003248:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000324c:	91 a9       	st.w	r8[0x28],r9
8000324e:	c4 a8       	rjmp	800032e2 <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80003250:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003254:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003258:	30 18       	mov	r8,1
8000325a:	f0 09 09 48 	lsl	r8,r8,r9
8000325e:	10 99       	mov	r9,r8
80003260:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003264:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80003266:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000326a:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000326e:	30 18       	mov	r8,1
80003270:	f0 09 09 48 	lsl	r8,r8,r9
80003274:	10 99       	mov	r9,r8
80003276:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000327a:	91 a9       	st.w	r8[0x28],r9
8000327c:	c3 38       	rjmp	800032e2 <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000327e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003282:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003286:	30 18       	mov	r8,1
80003288:	f0 09 09 48 	lsl	r8,r8,r9
8000328c:	10 99       	mov	r9,r8
8000328e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003292:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80003294:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003298:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000329c:	30 18       	mov	r8,1
8000329e:	f0 09 09 48 	lsl	r8,r8,r9
800032a2:	10 99       	mov	r9,r8
800032a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032a8:	91 99       	st.w	r8[0x24],r9
800032aa:	c1 c8       	rjmp	800032e2 <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800032ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032b0:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800032b4:	30 18       	mov	r8,1
800032b6:	f0 09 09 48 	lsl	r8,r8,r9
800032ba:	10 99       	mov	r9,r8
800032bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032c0:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800032c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032c6:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800032ca:	30 18       	mov	r8,1
800032cc:	f0 09 09 48 	lsl	r8,r8,r9
800032d0:	10 99       	mov	r9,r8
800032d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032d6:	91 99       	st.w	r8[0x24],r9
800032d8:	c0 58       	rjmp	800032e2 <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
800032da:	30 18       	mov	r8,1
800032dc:	ef 48 ff f0 	st.w	r7[-16],r8
800032e0:	c0 f8       	rjmp	800032fe <gpio_enable_module_pin+0x126>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800032e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032e6:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800032ea:	30 18       	mov	r8,1
800032ec:	f0 09 09 48 	lsl	r8,r8,r9
800032f0:	10 99       	mov	r9,r8
800032f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032f6:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
800032f8:	30 08       	mov	r8,0
800032fa:	ef 48 ff f0 	st.w	r7[-16],r8
800032fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80003302:	10 9c       	mov	r12,r8
80003304:	2f bd       	sub	sp,-20
80003306:	e3 cd 80 80 	ldm	sp++,r7,pc

8000330a <gpio_get_pin_interrupt_flag>:
  gpio_port->ierc = 1 << (pin & 0x1F);
}


int gpio_get_pin_interrupt_flag(unsigned int pin)
{
8000330a:	eb cd 40 80 	pushm	r7,lr
8000330e:	1a 97       	mov	r7,sp
80003310:	20 2d       	sub	sp,8
80003312:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80003316:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000331a:	a5 98       	lsr	r8,0x5
8000331c:	a9 68       	lsl	r8,0x8
8000331e:	e0 28 f0 00 	sub	r8,61440
80003322:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80003326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000332a:	f0 f9 00 d0 	ld.w	r9,r8[208]
8000332e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003332:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003336:	f2 08 0a 48 	lsr	r8,r9,r8
8000333a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
8000333e:	10 9c       	mov	r12,r8
80003340:	2f ed       	sub	sp,-8
80003342:	e3 cd 80 80 	ldm	sp++,r7,pc

80003346 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003346:	eb cd 40 80 	pushm	r7,lr
8000334a:	1a 97       	mov	r7,sp
8000334c:	20 bd       	sub	sp,44
8000334e:	ef 4c ff ec 	st.w	r7[-20],r12
80003352:	ef 4b ff e8 	st.w	r7[-24],r11
80003356:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000335a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000335e:	f0 09 15 04 	lsl	r9,r8,0x4
80003362:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003366:	10 39       	cp.w	r9,r8
80003368:	e0 8b 00 06 	brhi	80003374 <usart_set_async_baudrate+0x2e>
8000336c:	31 09       	mov	r9,16
8000336e:	ef 49 ff d4 	st.w	r7[-44],r9
80003372:	c0 48       	rjmp	8000337a <usart_set_async_baudrate+0x34>
80003374:	30 88       	mov	r8,8
80003376:	ef 48 ff d4 	st.w	r7[-44],r8
8000337a:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000337e:	ef 49 ff f0 	st.w	r7[-16],r9
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003382:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003386:	f0 0a 15 03 	lsl	r10,r8,0x3
8000338a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000338e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003392:	f2 08 02 48 	mul	r8,r9,r8
80003396:	a1 98       	lsr	r8,0x1
80003398:	10 0a       	add	r10,r8
8000339a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000339e:	ee f8 ff e8 	ld.w	r8,r7[-24]
800033a2:	f2 08 02 48 	mul	r8,r9,r8
800033a6:	f4 08 0d 08 	divu	r8,r10,r8
800033aa:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800033ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033b2:	a3 98       	lsr	r8,0x3
800033b4:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
800033b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033bc:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800033c0:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800033c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033c8:	58 08       	cp.w	r8,0
800033ca:	c0 70       	breq	800033d8 <usart_set_async_baudrate+0x92>
800033cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033d0:	e0 48 ff ff 	cp.w	r8,65535
800033d4:	e0 88 00 06 	brls	800033e0 <usart_set_async_baudrate+0x9a>
    return USART_INVALID_INPUT;
800033d8:	30 18       	mov	r8,1
800033da:	ef 48 ff d8 	st.w	r7[-40],r8
800033de:	c2 c8       	rjmp	80003436 <usart_set_async_baudrate+0xf0>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800033e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800033e4:	70 18       	ld.w	r8,r8[0x4]
800033e6:	10 99       	mov	r9,r8
800033e8:	e4 19 ff f7 	andh	r9,0xfff7
800033ec:	e0 19 fe cf 	andl	r9,0xfecf
800033f0:	ef 49 ff dc 	st.w	r7[-36],r9
800033f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033f8:	59 08       	cp.w	r8,16
800033fa:	c0 60       	breq	80003406 <usart_set_async_baudrate+0xc0>
800033fc:	e8 68 00 00 	mov	r8,524288
80003400:	ef 48 ff e0 	st.w	r7[-32],r8
80003404:	c0 48       	rjmp	8000340c <usart_set_async_baudrate+0xc6>
80003406:	30 09       	mov	r9,0
80003408:	ef 49 ff e0 	st.w	r7[-32],r9
8000340c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003410:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003414:	10 49       	or	r9,r8
80003416:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000341a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8000341c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003420:	f0 09 15 10 	lsl	r9,r8,0x10
80003424:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003428:	10 49       	or	r9,r8
8000342a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000342e:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80003430:	30 09       	mov	r9,0
80003432:	ef 49 ff d8 	st.w	r7[-40],r9
80003436:	ee f8 ff d8 	ld.w	r8,r7[-40]
}
8000343a:	10 9c       	mov	r12,r8
8000343c:	2f 5d       	sub	sp,-44
8000343e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003442 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80003442:	eb cd 40 80 	pushm	r7,lr
80003446:	1a 97       	mov	r7,sp
80003448:	20 3d       	sub	sp,12
8000344a:	ef 4c ff f8 	st.w	r7[-8],r12
  Bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000344e:	e1 b8 00 00 	mfsr	r8,0x0
80003452:	e6 18 00 01 	andh	r8,0x1,COH
80003456:	5f 08       	sreq	r8
80003458:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000345c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003460:	30 08       	mov	r8,0
80003462:	f0 09 18 00 	cp.b	r9,r8
80003466:	c0 20       	breq	8000346a <usart_reset+0x28>
80003468:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8000346a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000346e:	3f f8       	mov	r8,-1
80003470:	93 38       	st.w	r9[0xc],r8
  usart->csr;
80003472:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003476:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003478:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000347c:	30 08       	mov	r8,0
8000347e:	f0 09 18 00 	cp.b	r9,r8
80003482:	c0 20       	breq	80003486 <usart_reset+0x44>
80003484:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003486:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000348a:	30 08       	mov	r8,0
8000348c:	93 18       	st.w	r9[0x4],r8
  usart->rtor = 0;
8000348e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003492:	30 08       	mov	r8,0
80003494:	93 98       	st.w	r9[0x24],r8
  usart->ttgr = 0;
80003496:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000349a:	30 08       	mov	r8,0
8000349c:	93 a8       	st.w	r9[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000349e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034a2:	ea 68 61 0c 	mov	r8,680204
800034a6:	93 08       	st.w	r9[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800034a8:	2f dd       	sub	sp,-12
800034aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800034ae:	d7 03       	nop

800034b0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800034b0:	eb cd 40 80 	pushm	r7,lr
800034b4:	1a 97       	mov	r7,sp
800034b6:	20 4d       	sub	sp,16
800034b8:	ef 4c ff fc 	st.w	r7[-4],r12
800034bc:	ef 4b ff f8 	st.w	r7[-8],r11
800034c0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800034c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800034c8:	f0 1f 00 57 	mcall	80003624 <usart_init_rs232+0x174>

  // Check input values.
  if (!opt || // Null pointer.
800034cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034d0:	58 08       	cp.w	r8,0
800034d2:	c3 90       	breq	80003544 <usart_init_rs232+0x94>
800034d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034d8:	11 c9       	ld.ub	r9,r8[0x4]
800034da:	30 48       	mov	r8,4
800034dc:	f0 09 18 00 	cp.b	r9,r8
800034e0:	e0 88 00 32 	brls	80003544 <usart_init_rs232+0x94>
800034e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034e8:	11 c9       	ld.ub	r9,r8[0x4]
800034ea:	30 98       	mov	r8,9
800034ec:	f0 09 18 00 	cp.b	r9,r8
800034f0:	e0 8b 00 2a 	brhi	80003544 <usart_init_rs232+0x94>
800034f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034f8:	11 d9       	ld.ub	r9,r8[0x5]
800034fa:	30 78       	mov	r8,7
800034fc:	f0 09 18 00 	cp.b	r9,r8
80003500:	e0 8b 00 22 	brhi	80003544 <usart_init_rs232+0x94>
80003504:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003508:	90 39       	ld.sh	r9,r8[0x6]
8000350a:	e0 68 01 01 	mov	r8,257
8000350e:	f0 09 19 00 	cp.h	r9,r8
80003512:	e0 8b 00 19 	brhi	80003544 <usart_init_rs232+0x94>
80003516:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000351a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000351e:	30 38       	mov	r8,3
80003520:	f0 09 18 00 	cp.b	r9,r8
80003524:	e0 8b 00 10 	brhi	80003544 <usart_init_rs232+0x94>
80003528:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000352c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003530:	70 08       	ld.w	r8,r8[0x0]
80003532:	12 9a       	mov	r10,r9
80003534:	10 9b       	mov	r11,r8
80003536:	ee fc ff fc 	ld.w	r12,r7[-4]
8000353a:	f0 1f 00 3c 	mcall	80003628 <usart_init_rs232+0x178>
8000353e:	18 98       	mov	r8,r12
80003540:	58 18       	cp.w	r8,1
80003542:	c0 51       	brne	8000354c <usart_init_rs232+0x9c>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80003544:	30 18       	mov	r8,1
80003546:	ef 48 ff f0 	st.w	r7[-16],r8
8000354a:	c6 78       	rjmp	80003618 <usart_init_rs232+0x168>

  if (opt->charlength == 9)
8000354c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003550:	11 c9       	ld.ub	r9,r8[0x4]
80003552:	30 98       	mov	r8,9
80003554:	f0 09 18 00 	cp.b	r9,r8
80003558:	c0 a1       	brne	8000356c <usart_init_rs232+0xbc>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8000355a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000355e:	70 18       	ld.w	r8,r8[0x4]
80003560:	10 99       	mov	r9,r8
80003562:	b1 b9       	sbr	r9,0x11
80003564:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003568:	91 19       	st.w	r8[0x4],r9
8000356a:	c0 d8       	rjmp	80003584 <usart_init_rs232+0xd4>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8000356c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003570:	70 19       	ld.w	r9,r8[0x4]
80003572:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003576:	11 c8       	ld.ub	r8,r8[0x4]
80003578:	20 58       	sub	r8,5
8000357a:	a7 68       	lsl	r8,0x6
8000357c:	10 49       	or	r9,r8
8000357e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003582:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003584:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003588:	70 1a       	ld.w	r10,r8[0x4]
8000358a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000358e:	11 d8       	ld.ub	r8,r8[0x5]
80003590:	f0 09 15 09 	lsl	r9,r8,0x9
80003594:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003598:	f1 38 00 08 	ld.ub	r8,r8[8]
8000359c:	af 68       	lsl	r8,0xe
8000359e:	f3 e8 10 08 	or	r8,r9,r8
800035a2:	f5 e8 10 09 	or	r9,r10,r8
800035a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035aa:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800035ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035b0:	90 39       	ld.sh	r9,r8[0x6]
800035b2:	30 28       	mov	r8,2
800035b4:	f0 09 19 00 	cp.h	r9,r8
800035b8:	e0 88 00 14 	brls	800035e0 <usart_init_rs232+0x130>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800035bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035c0:	70 18       	ld.w	r8,r8[0x4]
800035c2:	10 99       	mov	r9,r8
800035c4:	ad b9       	sbr	r9,0xd
800035c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035ca:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800035cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035d0:	90 38       	ld.sh	r8,r8[0x6]
800035d2:	5c 78       	castu.h	r8
800035d4:	20 28       	sub	r8,2
800035d6:	10 99       	mov	r9,r8
800035d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035dc:	91 a9       	st.w	r8[0x28],r9
800035de:	c0 d8       	rjmp	800035f8 <usart_init_rs232+0x148>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800035e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035e4:	70 19       	ld.w	r9,r8[0x4]
800035e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035ea:	90 38       	ld.sh	r8,r8[0x6]
800035ec:	5c 78       	castu.h	r8
800035ee:	ad 68       	lsl	r8,0xc
800035f0:	10 49       	or	r9,r8
800035f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035f6:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800035f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035fc:	70 18       	ld.w	r8,r8[0x4]
800035fe:	10 99       	mov	r9,r8
80003600:	e0 19 ff f0 	andl	r9,0xfff0
80003604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003608:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8000360a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000360e:	35 08       	mov	r8,80
80003610:	93 08       	st.w	r9[0x0],r8
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003612:	30 08       	mov	r8,0
80003614:	ef 48 ff f0 	st.w	r7[-16],r8
80003618:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
8000361c:	10 9c       	mov	r12,r8
8000361e:	2f cd       	sub	sp,-16
80003620:	e3 cd 80 80 	ldm	sp++,r7,pc
80003624:	80 00       	ld.sh	r0,r0[0x0]
80003626:	34 42       	mov	r2,68
80003628:	80 00       	ld.sh	r0,r0[0x0]
8000362a:	33 46       	mov	r6,52

8000362c <adc_configure>:
#include "compiler.h"
#include "adc.h"


void adc_configure(volatile avr32_adc_t * adc)
{
8000362c:	eb cd 40 80 	pushm	r7,lr
80003630:	1a 97       	mov	r7,sp
80003632:	20 1d       	sub	sp,4
80003634:	ef 4c ff fc 	st.w	r7[-4],r12

#ifdef USE_ADC_8_BITS
  adc->mr |= 1<<AVR32_ADC_LOWRES_OFFSET;
#endif
  // set Sample/Hold time to max so that the ADC capacitor should be loaded entirely
  adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
80003638:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000363c:	70 18       	ld.w	r8,r8[0x4]
8000363e:	10 99       	mov	r9,r8
80003640:	ea 19 0f 00 	orh	r9,0xf00
80003644:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003648:	91 19       	st.w	r8[0x4],r9
  // set Startup to max so that the ADC capacitor should be loaded entirely
  adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
8000364a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000364e:	70 18       	ld.w	r8,r8[0x4]
80003650:	10 99       	mov	r9,r8
80003652:	ea 19 00 1f 	orh	r9,0x1f
80003656:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000365a:	91 19       	st.w	r8[0x4],r9
}
8000365c:	2f fd       	sub	sp,-4
8000365e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003662 <adc_start>:

void adc_start(volatile avr32_adc_t * adc)
{
80003662:	eb cd 40 80 	pushm	r7,lr
80003666:	1a 97       	mov	r7,sp
80003668:	20 1d       	sub	sp,4
8000366a:	ef 4c ff fc 	st.w	r7[-4],r12
  Assert( adc!=NULL );

  // start conversion
  adc->cr = AVR32_ADC_START_MASK;
8000366e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003672:	30 28       	mov	r8,2
80003674:	93 08       	st.w	r9[0x0],r8
}
80003676:	2f fd       	sub	sp,-4
80003678:	e3 cd 80 80 	ldm	sp++,r7,pc

8000367c <adc_enable>:

void adc_enable(volatile avr32_adc_t * adc, unsigned short channel)
{
8000367c:	eb cd 40 80 	pushm	r7,lr
80003680:	1a 97       	mov	r7,sp
80003682:	20 2d       	sub	sp,8
80003684:	ef 4c ff fc 	st.w	r7[-4],r12
80003688:	16 98       	mov	r8,r11
8000368a:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( adc!=NULL );
  Assert( channel <= AVR32_ADC_CHANNELS_MSB );  // check if channel exist

  // enable channel
  adc->cher = (1 << channel);
8000368e:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80003692:	30 18       	mov	r8,1
80003694:	f0 09 09 48 	lsl	r8,r8,r9
80003698:	10 99       	mov	r9,r8
8000369a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000369e:	91 49       	st.w	r8[0x10],r9
}
800036a0:	2f ed       	sub	sp,-8
800036a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800036a6 <adc_check_eoc>:

  return ((adc->chsr & (1 << channel)) ? ENABLED : DISABLED);
}

Bool adc_check_eoc(volatile avr32_adc_t * adc, unsigned short channel)
{
800036a6:	eb cd 40 80 	pushm	r7,lr
800036aa:	1a 97       	mov	r7,sp
800036ac:	20 2d       	sub	sp,8
800036ae:	ef 4c ff fc 	st.w	r7[-4],r12
800036b2:	16 98       	mov	r8,r11
800036b4:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( adc!=NULL );
  Assert( channel <= AVR32_ADC_CHANNELS_MSB );  // check if channel exist

  // get SR register : EOC bit for channel
  return ((adc->sr & (1 << channel)) ? HIGH : LOW);
800036b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036bc:	70 7a       	ld.w	r10,r8[0x1c]
800036be:	ef 19 ff f8 	ld.uh	r9,r7[-8]
800036c2:	30 18       	mov	r8,1
800036c4:	f0 09 09 48 	lsl	r8,r8,r9
800036c8:	f5 e8 00 08 	and	r8,r10,r8
800036cc:	5f 18       	srne	r8
}
800036ce:	10 9c       	mov	r12,r8
800036d0:	2f ed       	sub	sp,-8
800036d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800036d6:	d7 03       	nop

800036d8 <adc_get_value>:
  // get SR register : OVR bit for channel
  return ((adc->sr & (1 << (channel + 8))) ? FAIL : PASS);
}

unsigned long adc_get_value(volatile avr32_adc_t * adc, unsigned short channel)
{
800036d8:	eb cd 40 80 	pushm	r7,lr
800036dc:	1a 97       	mov	r7,sp
800036de:	20 2d       	sub	sp,8
800036e0:	ef 4c ff fc 	st.w	r7[-4],r12
800036e4:	16 98       	mov	r8,r11
800036e6:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( adc!=NULL );
  Assert( channel <= AVR32_ADC_CHANNELS_MSB );  // check if channel exist

  // wait for end of conversion
  while(adc_check_eoc(adc, channel) != HIGH);
800036ea:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800036ee:	10 9b       	mov	r11,r8
800036f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800036f4:	f0 1f 00 0b 	mcall	80003720 <adc_get_value+0x48>
800036f8:	18 98       	mov	r8,r12
800036fa:	10 99       	mov	r9,r8
800036fc:	30 18       	mov	r8,1
800036fe:	f0 09 18 00 	cp.b	r9,r8
80003702:	cf 41       	brne	800036ea <adc_get_value+0x12>
  return *((unsigned long * )((&(adc->cdr0)) + channel));
80003704:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003708:	2d 08       	sub	r8,-48
8000370a:	10 99       	mov	r9,r8
8000370c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003710:	a3 68       	lsl	r8,0x2
80003712:	f2 08 00 08 	add	r8,r9,r8
80003716:	70 08       	ld.w	r8,r8[0x0]
}
80003718:	10 9c       	mov	r12,r8
8000371a:	2f ed       	sub	sp,-8
8000371c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003720:	80 00       	ld.sh	r0,r0[0x0]
80003722:	36 a6       	mov	r6,106

80003724 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80003724:	eb cd 40 80 	pushm	r7,lr
80003728:	1a 97       	mov	r7,sp
8000372a:	21 3d       	sub	sp,76
8000372c:	ef 4c ff f8 	st.w	r7[-8],r12
80003730:	ef 4b ff f4 	st.w	r7[-12],r11
80003734:	ef 4a ff f0 	st.w	r7[-16],r10
  Bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003738:	e1 b8 00 00 	mfsr	r8,0x0
8000373c:	e6 18 00 01 	andh	r8,0x1,COH
80003740:	5f 08       	sreq	r8
80003742:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003746:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000374a:	58 28       	cp.w	r8,2
8000374c:	e0 88 00 06 	brls	80003758 <tc_configure_interrupts+0x34>
    return TC_INVALID_ARGUMENT;
80003750:	3f f9       	mov	r9,-1
80003752:	ef 49 ff b4 	st.w	r7[-76],r9
80003756:	c1 99       	rjmp	80003988 <tc_configure_interrupts+0x264>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80003758:	ee fb ff f4 	ld.w	r11,r7[-12]
8000375c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003760:	70 08       	ld.w	r8,r8[0x0]
80003762:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003766:	5c 58       	castu.b	r8
80003768:	f0 09 15 07 	lsl	r9,r8,0x7
8000376c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003770:	70 08       	ld.w	r8,r8[0x0]
80003772:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003776:	5c 58       	castu.b	r8
80003778:	a7 68       	lsl	r8,0x6
8000377a:	10 49       	or	r9,r8
8000377c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003780:	70 08       	ld.w	r8,r8[0x0]
80003782:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80003786:	5c 58       	castu.b	r8
80003788:	a5 78       	lsl	r8,0x5
8000378a:	10 49       	or	r9,r8
8000378c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003790:	70 08       	ld.w	r8,r8[0x0]
80003792:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80003796:	5c 58       	castu.b	r8
80003798:	a5 68       	lsl	r8,0x4
8000379a:	10 49       	or	r9,r8
8000379c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037a0:	70 08       	ld.w	r8,r8[0x0]
800037a2:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800037a6:	5c 58       	castu.b	r8
800037a8:	a3 78       	lsl	r8,0x3
800037aa:	10 49       	or	r9,r8
800037ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037b0:	70 08       	ld.w	r8,r8[0x0]
800037b2:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800037b6:	5c 58       	castu.b	r8
800037b8:	a3 68       	lsl	r8,0x2
800037ba:	10 49       	or	r9,r8
800037bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037c0:	70 08       	ld.w	r8,r8[0x0]
800037c2:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800037c6:	5c 58       	castu.b	r8
800037c8:	a1 78       	lsl	r8,0x1
800037ca:	10 49       	or	r9,r8
800037cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037d0:	70 08       	ld.w	r8,r8[0x0]
800037d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800037d6:	5c 58       	castu.b	r8
800037d8:	f3 e8 10 08 	or	r8,r9,r8
800037dc:	10 9a       	mov	r10,r8
800037de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800037e2:	f6 08 15 06 	lsl	r8,r11,0x6
800037e6:	f2 08 00 08 	add	r8,r9,r8
800037ea:	2d c8       	sub	r8,-36
800037ec:	91 0a       	st.w	r8[0x0],r10
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800037ee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800037f2:	30 08       	mov	r8,0
800037f4:	f0 09 18 00 	cp.b	r9,r8
800037f8:	c0 20       	breq	800037fc <tc_configure_interrupts+0xd8>
800037fa:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800037fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003800:	ef 48 ff b8 	st.w	r7[-72],r8
80003804:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003808:	70 08       	ld.w	r8,r8[0x0]
8000380a:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000380e:	5c 58       	castu.b	r8
80003810:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003814:	c0 61       	brne	80003820 <tc_configure_interrupts+0xfc>
80003816:	e0 69 00 80 	mov	r9,128
8000381a:	ef 49 ff bc 	st.w	r7[-68],r9
8000381e:	c0 48       	rjmp	80003826 <tc_configure_interrupts+0x102>
80003820:	30 08       	mov	r8,0
80003822:	ef 48 ff bc 	st.w	r7[-68],r8
80003826:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000382a:	70 08       	ld.w	r8,r8[0x0]
8000382c:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003830:	5c 58       	castu.b	r8
80003832:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003836:	c0 51       	brne	80003840 <tc_configure_interrupts+0x11c>
80003838:	34 09       	mov	r9,64
8000383a:	ef 49 ff c0 	st.w	r7[-64],r9
8000383e:	c0 48       	rjmp	80003846 <tc_configure_interrupts+0x122>
80003840:	30 08       	mov	r8,0
80003842:	ef 48 ff c0 	st.w	r7[-64],r8
80003846:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000384a:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000384e:	10 49       	or	r9,r8
80003850:	ef 49 ff c4 	st.w	r7[-60],r9
80003854:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003858:	70 08       	ld.w	r8,r8[0x0]
8000385a:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
8000385e:	5c 58       	castu.b	r8
80003860:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003864:	c0 51       	brne	8000386e <tc_configure_interrupts+0x14a>
80003866:	32 09       	mov	r9,32
80003868:	ef 49 ff c8 	st.w	r7[-56],r9
8000386c:	c0 48       	rjmp	80003874 <tc_configure_interrupts+0x150>
8000386e:	30 08       	mov	r8,0
80003870:	ef 48 ff c8 	st.w	r7[-56],r8
80003874:	ee f9 ff c4 	ld.w	r9,r7[-60]
80003878:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000387c:	10 49       	or	r9,r8
8000387e:	ef 49 ff cc 	st.w	r7[-52],r9
80003882:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003886:	70 08       	ld.w	r8,r8[0x0]
80003888:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
8000388c:	5c 58       	castu.b	r8
8000388e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003892:	c0 51       	brne	8000389c <tc_configure_interrupts+0x178>
80003894:	31 09       	mov	r9,16
80003896:	ef 49 ff d0 	st.w	r7[-48],r9
8000389a:	c0 48       	rjmp	800038a2 <tc_configure_interrupts+0x17e>
8000389c:	30 08       	mov	r8,0
8000389e:	ef 48 ff d0 	st.w	r7[-48],r8
800038a2:	ee f9 ff cc 	ld.w	r9,r7[-52]
800038a6:	ee f8 ff d0 	ld.w	r8,r7[-48]
800038aa:	10 49       	or	r9,r8
800038ac:	ef 49 ff d4 	st.w	r7[-44],r9
800038b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800038b4:	70 08       	ld.w	r8,r8[0x0]
800038b6:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800038ba:	5c 58       	castu.b	r8
800038bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800038c0:	c0 51       	brne	800038ca <tc_configure_interrupts+0x1a6>
800038c2:	30 89       	mov	r9,8
800038c4:	ef 49 ff d8 	st.w	r7[-40],r9
800038c8:	c0 48       	rjmp	800038d0 <tc_configure_interrupts+0x1ac>
800038ca:	30 08       	mov	r8,0
800038cc:	ef 48 ff d8 	st.w	r7[-40],r8
800038d0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800038d4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800038d8:	10 49       	or	r9,r8
800038da:	ef 49 ff dc 	st.w	r7[-36],r9
800038de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800038e2:	70 08       	ld.w	r8,r8[0x0]
800038e4:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800038e8:	5c 58       	castu.b	r8
800038ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800038ee:	c0 51       	brne	800038f8 <tc_configure_interrupts+0x1d4>
800038f0:	30 49       	mov	r9,4
800038f2:	ef 49 ff e0 	st.w	r7[-32],r9
800038f6:	c0 48       	rjmp	800038fe <tc_configure_interrupts+0x1da>
800038f8:	30 08       	mov	r8,0
800038fa:	ef 48 ff e0 	st.w	r7[-32],r8
800038fe:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003902:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003906:	10 49       	or	r9,r8
80003908:	ef 49 ff e4 	st.w	r7[-28],r9
8000390c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003910:	70 08       	ld.w	r8,r8[0x0]
80003912:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80003916:	5c 58       	castu.b	r8
80003918:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000391c:	c0 51       	brne	80003926 <tc_configure_interrupts+0x202>
8000391e:	30 29       	mov	r9,2
80003920:	ef 49 ff e8 	st.w	r7[-24],r9
80003924:	c0 48       	rjmp	8000392c <tc_configure_interrupts+0x208>
80003926:	30 08       	mov	r8,0
80003928:	ef 48 ff e8 	st.w	r7[-24],r8
8000392c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003930:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003934:	10 49       	or	r9,r8
80003936:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000393a:	70 08       	ld.w	r8,r8[0x0]
8000393c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003940:	5c 58       	castu.b	r8
80003942:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003946:	5f 08       	sreq	r8
80003948:	f3 e8 10 08 	or	r8,r9,r8
8000394c:	10 9a       	mov	r10,r8
8000394e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003952:	ee f8 ff b8 	ld.w	r8,r7[-72]
80003956:	a7 68       	lsl	r8,0x6
80003958:	f2 08 00 08 	add	r8,r9,r8
8000395c:	2d 88       	sub	r8,-40
8000395e:	91 0a       	st.w	r8[0x0],r10
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80003960:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003964:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003968:	a1 78       	lsl	r8,0x1
8000396a:	2f f8       	sub	r8,-1
8000396c:	a5 78       	lsl	r8,0x5
8000396e:	f2 08 00 08 	add	r8,r9,r8
80003972:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003974:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003978:	30 08       	mov	r8,0
8000397a:	f0 09 18 00 	cp.b	r9,r8
8000397e:	c0 20       	breq	80003982 <tc_configure_interrupts+0x25e>
80003980:	d5 03       	csrf	0x10

  return 0;
80003982:	30 09       	mov	r9,0
80003984:	ef 49 ff b4 	st.w	r7[-76],r9
80003988:	ee f8 ff b4 	ld.w	r8,r7[-76]
}
8000398c:	10 9c       	mov	r12,r8
8000398e:	2e dd       	sub	sp,-76
80003990:	e3 cd 80 80 	ldm	sp++,r7,pc

80003994 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80003994:	eb cd 40 80 	pushm	r7,lr
80003998:	1a 97       	mov	r7,sp
8000399a:	20 3d       	sub	sp,12
8000399c:	ef 4c ff fc 	st.w	r7[-4],r12
800039a0:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800039a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039a8:	70 08       	ld.w	r8,r8[0x0]
800039aa:	58 28       	cp.w	r8,2
800039ac:	e0 88 00 06 	brls	800039b8 <tc_init_waveform+0x24>
    return TC_INVALID_ARGUMENT;
800039b0:	3f f8       	mov	r8,-1
800039b2:	ef 48 ff f4 	st.w	r7[-12],r8
800039b6:	c9 a8       	rjmp	80003aea <tc_init_waveform+0x156>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800039b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039bc:	70 0b       	ld.w	r11,r8[0x0]
800039be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039c2:	70 18       	ld.w	r8,r8[0x4]
800039c4:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800039c8:	5c 58       	castu.b	r8
800039ca:	f0 09 15 1e 	lsl	r9,r8,0x1e
800039ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039d2:	70 18       	ld.w	r8,r8[0x4]
800039d4:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
800039d8:	5c 58       	castu.b	r8
800039da:	bd 68       	lsl	r8,0x1c
800039dc:	10 49       	or	r9,r8
800039de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039e2:	70 18       	ld.w	r8,r8[0x4]
800039e4:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
800039e8:	5c 58       	castu.b	r8
800039ea:	bb 68       	lsl	r8,0x1a
800039ec:	10 49       	or	r9,r8
800039ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039f2:	70 18       	ld.w	r8,r8[0x4]
800039f4:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
800039f8:	5c 58       	castu.b	r8
800039fa:	b9 68       	lsl	r8,0x18
800039fc:	10 49       	or	r9,r8
800039fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a02:	70 18       	ld.w	r8,r8[0x4]
80003a04:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80003a08:	5c 58       	castu.b	r8
80003a0a:	b7 68       	lsl	r8,0x16
80003a0c:	10 49       	or	r9,r8
80003a0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a12:	70 18       	ld.w	r8,r8[0x4]
80003a14:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
80003a18:	5c 58       	castu.b	r8
80003a1a:	b5 68       	lsl	r8,0x14
80003a1c:	10 49       	or	r9,r8
80003a1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a22:	70 18       	ld.w	r8,r8[0x4]
80003a24:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
80003a28:	5c 58       	castu.b	r8
80003a2a:	b3 68       	lsl	r8,0x12
80003a2c:	10 49       	or	r9,r8
80003a2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a32:	70 18       	ld.w	r8,r8[0x4]
80003a34:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80003a38:	5c 58       	castu.b	r8
80003a3a:	b1 68       	lsl	r8,0x10
80003a3c:	f3 e8 10 08 	or	r8,r9,r8
80003a40:	10 99       	mov	r9,r8
80003a42:	af b9       	sbr	r9,0xf
80003a44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a48:	70 18       	ld.w	r8,r8[0x4]
80003a4a:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80003a4e:	5c 58       	castu.b	r8
80003a50:	ad 78       	lsl	r8,0xd
80003a52:	10 49       	or	r9,r8
80003a54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a58:	70 18       	ld.w	r8,r8[0x4]
80003a5a:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80003a5e:	5c 58       	castu.b	r8
80003a60:	ad 68       	lsl	r8,0xc
80003a62:	10 49       	or	r9,r8
80003a64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a68:	70 18       	ld.w	r8,r8[0x4]
80003a6a:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
80003a6e:	5c 58       	castu.b	r8
80003a70:	ab 68       	lsl	r8,0xa
80003a72:	10 49       	or	r9,r8
80003a74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a78:	70 18       	ld.w	r8,r8[0x4]
80003a7a:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
80003a7e:	5c 58       	castu.b	r8
80003a80:	a9 68       	lsl	r8,0x8
80003a82:	10 49       	or	r9,r8
80003a84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a88:	70 18       	ld.w	r8,r8[0x4]
80003a8a:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003a8e:	5c 58       	castu.b	r8
80003a90:	a7 78       	lsl	r8,0x7
80003a92:	10 49       	or	r9,r8
80003a94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a98:	70 18       	ld.w	r8,r8[0x4]
80003a9a:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003a9e:	5c 58       	castu.b	r8
80003aa0:	a7 68       	lsl	r8,0x6
80003aa2:	10 49       	or	r9,r8
80003aa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003aa8:	70 18       	ld.w	r8,r8[0x4]
80003aaa:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80003aae:	5c 58       	castu.b	r8
80003ab0:	a5 68       	lsl	r8,0x4
80003ab2:	10 49       	or	r9,r8
80003ab4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ab8:	70 18       	ld.w	r8,r8[0x4]
80003aba:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003abe:	5c 58       	castu.b	r8
80003ac0:	a3 78       	lsl	r8,0x3
80003ac2:	10 49       	or	r9,r8
80003ac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ac8:	70 18       	ld.w	r8,r8[0x4]
80003aca:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003ace:	5c 58       	castu.b	r8
80003ad0:	f3 e8 10 08 	or	r8,r9,r8
80003ad4:	10 9a       	mov	r10,r8
80003ad6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ada:	f6 08 15 04 	lsl	r8,r11,0x4
80003ade:	2f f8       	sub	r8,-1
80003ae0:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80003ae4:	30 08       	mov	r8,0
80003ae6:	ef 48 ff f4 	st.w	r7[-12],r8
80003aea:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80003aee:	10 9c       	mov	r12,r8
80003af0:	2f dd       	sub	sp,-12
80003af2:	e3 cd 80 80 	ldm	sp++,r7,pc

80003af6 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80003af6:	eb cd 40 80 	pushm	r7,lr
80003afa:	1a 97       	mov	r7,sp
80003afc:	20 3d       	sub	sp,12
80003afe:	ef 4c ff fc 	st.w	r7[-4],r12
80003b02:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003b06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b0a:	58 28       	cp.w	r8,2
80003b0c:	e0 88 00 06 	brls	80003b18 <tc_start+0x22>
    return TC_INVALID_ARGUMENT;
80003b10:	3f f8       	mov	r8,-1
80003b12:	ef 48 ff f4 	st.w	r7[-12],r8
80003b16:	c0 c8       	rjmp	80003b2e <tc_start+0x38>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80003b18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003b20:	a7 68       	lsl	r8,0x6
80003b22:	10 09       	add	r9,r8
80003b24:	30 58       	mov	r8,5
80003b26:	93 08       	st.w	r9[0x0],r8

  return 0;
80003b28:	30 08       	mov	r8,0
80003b2a:	ef 48 ff f4 	st.w	r7[-12],r8
80003b2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80003b32:	10 9c       	mov	r12,r8
80003b34:	2f dd       	sub	sp,-12
80003b36:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b3a <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
80003b3a:	eb cd 40 80 	pushm	r7,lr
80003b3e:	1a 97       	mov	r7,sp
80003b40:	20 3d       	sub	sp,12
80003b42:	ef 4c ff fc 	st.w	r7[-4],r12
80003b46:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003b4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b4e:	58 28       	cp.w	r8,2
80003b50:	e0 88 00 06 	brls	80003b5c <tc_read_sr+0x22>
    return TC_INVALID_ARGUMENT;
80003b54:	3f f8       	mov	r8,-1
80003b56:	ef 48 ff f4 	st.w	r7[-12],r8
80003b5a:	c0 d8       	rjmp	80003b74 <tc_read_sr+0x3a>

  return tc->channel[channel].sr;
80003b5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b60:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003b64:	a1 78       	lsl	r8,0x1
80003b66:	2f f8       	sub	r8,-1
80003b68:	a5 78       	lsl	r8,0x5
80003b6a:	f2 08 00 08 	add	r8,r9,r8
80003b6e:	70 08       	ld.w	r8,r8[0x0]
80003b70:	ef 48 ff f4 	st.w	r7[-12],r8
80003b74:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80003b78:	10 9c       	mov	r12,r8
80003b7a:	2f dd       	sub	sp,-12
80003b7c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b80 <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
80003b80:	eb cd 40 80 	pushm	r7,lr
80003b84:	1a 97       	mov	r7,sp
80003b86:	20 4d       	sub	sp,16
80003b88:	ef 4c ff fc 	st.w	r7[-4],r12
80003b8c:	ef 4b ff f8 	st.w	r7[-8],r11
80003b90:	14 98       	mov	r8,r10
80003b92:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003b96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b9a:	58 28       	cp.w	r8,2
80003b9c:	e0 88 00 06 	brls	80003ba8 <tc_write_rc+0x28>
    return TC_INVALID_ARGUMENT;
80003ba0:	3f f8       	mov	r8,-1
80003ba2:	ef 48 ff f0 	st.w	r7[-16],r8
80003ba6:	c2 a8       	rjmp	80003bfa <tc_write_rc+0x7a>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80003ba8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003bb0:	a5 68       	lsl	r8,0x4
80003bb2:	2f f8       	sub	r8,-1
80003bb4:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80003bb8:	e2 18 80 00 	andl	r8,0x8000,COH
80003bbc:	c1 b0       	breq	80003bf2 <tc_write_rc+0x72>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80003bbe:	ee fb ff f8 	ld.w	r11,r7[-8]
80003bc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bc6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003bca:	a7 68       	lsl	r8,0x6
80003bcc:	f2 08 00 08 	add	r8,r9,r8
80003bd0:	2e 48       	sub	r8,-28
80003bd2:	70 08       	ld.w	r8,r8[0x0]
80003bd4:	10 99       	mov	r9,r8
80003bd6:	e0 19 00 00 	andl	r9,0x0
80003bda:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80003bde:	f3 e8 10 0a 	or	r10,r9,r8
80003be2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003be6:	f6 08 15 06 	lsl	r8,r11,0x6
80003bea:	f2 08 00 08 	add	r8,r9,r8
80003bee:	2e 48       	sub	r8,-28
80003bf0:	91 0a       	st.w	r8[0x0],r10

  return value;
80003bf2:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80003bf6:	ef 48 ff f0 	st.w	r7[-16],r8
80003bfa:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80003bfe:	10 9c       	mov	r12,r8
80003c00:	2f cd       	sub	sp,-16
80003c02:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c06:	d7 03       	nop

80003c08 <pcl_configure_usb_clock>:
#endif
  return PASS;
}

long int pcl_configure_usb_clock(void)
{
80003c08:	eb cd 40 80 	pushm	r7,lr
80003c0c:	1a 97       	mov	r7,sp
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  pm_configure_usb_clock();
80003c0e:	f0 1f 00 04 	mcall	80003c1c <pcl_configure_usb_clock+0x14>
  return PASS;
80003c12:	30 08       	mov	r8,0
    return PASS;
  #else
      return PCL_NOT_SUPPORTED;
  #endif
#endif
}
80003c14:	10 9c       	mov	r12,r8
80003c16:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c1a:	00 00       	add	r0,r0
80003c1c:	80 00       	ld.sh	r0,r0[0x0]
80003c1e:	30 a4       	mov	r4,10

80003c20 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> OK (always)
Bool sd_mmc_spi_internal_init(void)
{
80003c20:	eb cd 40 80 	pushm	r7,lr
80003c24:	1a 97       	mov	r7,sp
80003c26:	20 2d       	sub	sp,8
  U16 retry;

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = FALSE;
80003c28:	4e c9       	lddpc	r9,80003dd8 <sd_mmc_spi_internal_init+0x1b8>
80003c2a:	30 08       	mov	r8,0
80003c2c:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80003c2e:	4e c9       	lddpc	r9,80003ddc <sd_mmc_spi_internal_init+0x1bc>
80003c30:	30 08       	mov	r8,0
80003c32:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
80003c34:	30 08       	mov	r8,0
80003c36:	ef 58 ff fe 	st.h	r7[-2],r8
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80003c3a:	30 0b       	mov	r11,0
80003c3c:	30 0c       	mov	r12,0
80003c3e:	f0 1f 00 69 	mcall	80003de0 <sd_mmc_spi_internal_init+0x1c0>
80003c42:	18 98       	mov	r8,r12
80003c44:	4e 89       	lddpc	r9,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003c46:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003c48:	e0 6b 00 ff 	mov	r11,255
80003c4c:	fe 7c 28 00 	mov	r12,-55296
80003c50:	f0 1f 00 66 	mcall	80003de8 <sd_mmc_spi_internal_init+0x1c8>
    // do retry counter
    retry++;
80003c54:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003c58:	2f f8       	sub	r8,-1
80003c5a:	ef 58 ff fe 	st.h	r7[-2],r8
    if(retry > 100)
80003c5e:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003c62:	36 48       	mov	r8,100
80003c64:	f0 09 19 00 	cp.h	r9,r8
80003c68:	e0 88 00 06 	brls	80003c74 <sd_mmc_spi_internal_init+0x54>
      return KO;
80003c6c:	30 08       	mov	r8,0
80003c6e:	ef 48 ff f8 	st.w	r7[-8],r8
80003c72:	ca c8       	rjmp	80003dca <sd_mmc_spi_internal_init+0x1aa>
  }
  while(r1 != 0x01);   // check memory enters idle_state
80003c74:	4d c8       	lddpc	r8,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003c76:	11 89       	ld.ub	r9,r8[0x0]
80003c78:	30 18       	mov	r8,1
80003c7a:	f0 09 18 00 	cp.b	r9,r8
80003c7e:	cd e1       	brne	80003c3a <sd_mmc_spi_internal_init+0x1a>

  // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
  // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
  r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80003c80:	30 0b       	mov	r11,0
80003c82:	33 7c       	mov	r12,55
80003c84:	f0 1f 00 57 	mcall	80003de0 <sd_mmc_spi_internal_init+0x1c0>
80003c88:	18 98       	mov	r8,r12
80003c8a:	4d 79       	lddpc	r9,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003c8c:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80003c8e:	e0 6b 00 ff 	mov	r11,255
80003c92:	fe 7c 28 00 	mov	r12,-55296
80003c96:	f0 1f 00 55 	mcall	80003de8 <sd_mmc_spi_internal_init+0x1c8>

  r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80003c9a:	30 0b       	mov	r11,0
80003c9c:	32 9c       	mov	r12,41
80003c9e:	f0 1f 00 51 	mcall	80003de0 <sd_mmc_spi_internal_init+0x1c0>
80003ca2:	18 98       	mov	r8,r12
80003ca4:	4d 09       	lddpc	r9,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003ca6:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80003ca8:	e0 6b 00 ff 	mov	r11,255
80003cac:	fe 7c 28 00 	mov	r12,-55296
80003cb0:	f0 1f 00 4e 	mcall	80003de8 <sd_mmc_spi_internal_init+0x1c8>

  if ((r1&0xFE) == 0)   // ignore "in_idle_state" flag bit
80003cb4:	4c c8       	lddpc	r8,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003cb6:	11 88       	ld.ub	r8,r8[0x0]
80003cb8:	e2 18 00 fe 	andl	r8,0xfe,COH
80003cbc:	c0 51       	brne	80003cc6 <sd_mmc_spi_internal_init+0xa6>
  {
    card_type = SD_CARD;    // card has accepted the command, this is a SD card
80003cbe:	4c 89       	lddpc	r9,80003ddc <sd_mmc_spi_internal_init+0x1bc>
80003cc0:	30 18       	mov	r8,1
80003cc2:	b2 88       	st.b	r9[0x0],r8
80003cc4:	c2 a8       	rjmp	80003d18 <sd_mmc_spi_internal_init+0xf8>
  }
  else
  {
    card_type = MMC_CARD;   // card has not responded, this is a MMC card
80003cc6:	4c 68       	lddpc	r8,80003ddc <sd_mmc_spi_internal_init+0x1bc>
80003cc8:	30 09       	mov	r9,0
80003cca:	b0 89       	st.b	r8[0x0],r9
    // reset card again
    retry = 0;
80003ccc:	30 08       	mov	r8,0
80003cce:	ef 58 ff fe 	st.h	r7[-2],r8
    do
    {
      // reset card again
      r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80003cd2:	30 0b       	mov	r11,0
80003cd4:	30 0c       	mov	r12,0
80003cd6:	f0 1f 00 43 	mcall	80003de0 <sd_mmc_spi_internal_init+0x1c0>
80003cda:	18 98       	mov	r8,r12
80003cdc:	4c 29       	lddpc	r9,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003cde:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003ce0:	e0 6b 00 ff 	mov	r11,255
80003ce4:	fe 7c 28 00 	mov	r12,-55296
80003ce8:	f0 1f 00 40 	mcall	80003de8 <sd_mmc_spi_internal_init+0x1c8>
      // do retry counter
      retry++;
80003cec:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003cf0:	2f f8       	sub	r8,-1
80003cf2:	ef 58 ff fe 	st.h	r7[-2],r8
      if(retry > 100)
80003cf6:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003cfa:	36 48       	mov	r8,100
80003cfc:	f0 09 19 00 	cp.h	r9,r8
80003d00:	e0 88 00 06 	brls	80003d0c <sd_mmc_spi_internal_init+0xec>
        return KO;
80003d04:	30 08       	mov	r8,0
80003d06:	ef 48 ff f8 	st.w	r7[-8],r8
80003d0a:	c6 08       	rjmp	80003dca <sd_mmc_spi_internal_init+0x1aa>
    }
    while(r1 != 0x01);   // check memory enters idle_state
80003d0c:	4b 68       	lddpc	r8,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003d0e:	11 89       	ld.ub	r9,r8[0x0]
80003d10:	30 18       	mov	r8,1
80003d12:	f0 09 18 00 	cp.b	r9,r8
80003d16:	cd e1       	brne	80003cd2 <sd_mmc_spi_internal_init+0xb2>
  }

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
80003d18:	30 08       	mov	r8,0
80003d1a:	ef 58 ff fe 	st.h	r7[-2],r8
  do
  {
     // initializing card for operation
     r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
80003d1e:	30 0b       	mov	r11,0
80003d20:	30 1c       	mov	r12,1
80003d22:	f0 1f 00 30 	mcall	80003de0 <sd_mmc_spi_internal_init+0x1c0>
80003d26:	18 98       	mov	r8,r12
80003d28:	4a f9       	lddpc	r9,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003d2a:	b2 88       	st.b	r9[0x0],r8
     spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003d2c:	e0 6b 00 ff 	mov	r11,255
80003d30:	fe 7c 28 00 	mov	r12,-55296
80003d34:	f0 1f 00 2d 	mcall	80003de8 <sd_mmc_spi_internal_init+0x1c8>
     // do retry counter
     retry++;
80003d38:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003d3c:	2f f8       	sub	r8,-1
80003d3e:	ef 58 ff fe 	st.h	r7[-2],r8
     if(retry == 50000)    // measured approx. 500 on several cards
80003d42:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003d46:	fe 78 c3 50 	mov	r8,-15536
80003d4a:	f0 09 19 00 	cp.h	r9,r8
80003d4e:	c0 51       	brne	80003d58 <sd_mmc_spi_internal_init+0x138>
        return KO;
80003d50:	30 08       	mov	r8,0
80003d52:	ef 48 ff f8 	st.w	r7[-8],r8
80003d56:	c3 a8       	rjmp	80003dca <sd_mmc_spi_internal_init+0x1aa>
  }
  while (r1);
80003d58:	4a 38       	lddpc	r8,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003d5a:	11 88       	ld.ub	r8,r8[0x0]
80003d5c:	58 08       	cp.w	r8,0
80003d5e:	ce 01       	brne	80003d1e <sd_mmc_spi_internal_init+0xfe>

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80003d60:	30 0b       	mov	r11,0
80003d62:	33 bc       	mov	r12,59
80003d64:	f0 1f 00 1f 	mcall	80003de0 <sd_mmc_spi_internal_init+0x1c0>
80003d68:	18 98       	mov	r8,r12
80003d6a:	49 f9       	lddpc	r9,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003d6c:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003d6e:	e0 6b 00 ff 	mov	r11,255
80003d72:	fe 7c 28 00 	mov	r12,-55296
80003d76:	f0 1f 00 1d 	mcall	80003de8 <sd_mmc_spi_internal_init+0x1c8>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80003d7a:	e0 6b 02 00 	mov	r11,512
80003d7e:	31 0c       	mov	r12,16
80003d80:	f0 1f 00 18 	mcall	80003de0 <sd_mmc_spi_internal_init+0x1c0>
80003d84:	18 98       	mov	r8,r12
80003d86:	49 89       	lddpc	r9,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003d88:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003d8a:	e0 6b 00 ff 	mov	r11,255
80003d8e:	fe 7c 28 00 	mov	r12,-55296
80003d92:	f0 1f 00 16 	mcall	80003de8 <sd_mmc_spi_internal_init+0x1c8>
  if (r1 != 0x00)
80003d96:	49 48       	lddpc	r8,80003de4 <sd_mmc_spi_internal_init+0x1c4>
80003d98:	11 88       	ld.ub	r8,r8[0x0]
80003d9a:	58 08       	cp.w	r8,0
80003d9c:	c0 50       	breq	80003da6 <sd_mmc_spi_internal_init+0x186>
    return KO;    // card unsupported if block length of 512b is not accepted
80003d9e:	30 08       	mov	r8,0
80003da0:	ef 48 ff f8 	st.w	r7[-8],r8
80003da4:	c1 38       	rjmp	80003dca <sd_mmc_spi_internal_init+0x1aa>

  // GET CARD SPECIFIC DATA
  if (KO ==  sd_mmc_spi_get_csd(csd))
80003da6:	49 2c       	lddpc	r12,80003dec <sd_mmc_spi_internal_init+0x1cc>
80003da8:	f0 1f 00 12 	mcall	80003df0 <sd_mmc_spi_internal_init+0x1d0>
80003dac:	18 98       	mov	r8,r12
80003dae:	58 08       	cp.w	r8,0
80003db0:	c0 51       	brne	80003dba <sd_mmc_spi_internal_init+0x19a>
    return KO;
80003db2:	30 08       	mov	r8,0
80003db4:	ef 48 ff f8 	st.w	r7[-8],r8
80003db8:	c0 98       	rjmp	80003dca <sd_mmc_spi_internal_init+0x1aa>

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80003dba:	f0 1f 00 0f 	mcall	80003df4 <sd_mmc_spi_internal_init+0x1d4>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == ENABLED)
  if (KO ==  sd_mmc_spi_get_cid(cid))
    return KO;
#endif

  sd_mmc_spi_init_done = TRUE;
80003dbe:	48 79       	lddpc	r9,80003dd8 <sd_mmc_spi_internal_init+0x1b8>
80003dc0:	30 18       	mov	r8,1
80003dc2:	b2 88       	st.b	r9[0x0],r8

  return(OK);
80003dc4:	30 18       	mov	r8,1
80003dc6:	ef 48 ff f8 	st.w	r7[-8],r8
80003dca:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003dce:	10 9c       	mov	r12,r8
80003dd0:	2f ed       	sub	sp,-8
80003dd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dd6:	00 00       	add	r0,r0
80003dd8:	00 00       	add	r0,r0
80003dda:	06 4c       	or	r12,r3
80003ddc:	00 00       	add	r0,r0
80003dde:	09 72       	ld.ub	r2,--r4
80003de0:	80 00       	ld.sh	r0,r0[0x0]
80003de2:	3e 2c       	mov	r12,-30
80003de4:	00 00       	add	r0,r0
80003de6:	09 84       	ld.ub	r4,r4[0x0]
80003de8:	80 00       	ld.sh	r0,r0[0x0]
80003dea:	25 9a       	sub	r10,89
80003dec:	00 00       	add	r0,r0
80003dee:	09 74       	ld.ub	r4,--r4
80003df0:	80 00       	ld.sh	r0,r0[0x0]
80003df2:	3f c0       	mov	r0,-4
80003df4:	80 00       	ld.sh	r0,r0[0x0]
80003df6:	41 14       	lddsp	r4,sp[0x44]

80003df8 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> OK (always)
Bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80003df8:	eb cd 40 80 	pushm	r7,lr
80003dfc:	1a 97       	mov	r7,sp
80003dfe:	20 1d       	sub	sp,4
80003e00:	ee c8 ff f8 	sub	r8,r7,-8
80003e04:	ef 4c ff fc 	st.w	r7[-4],r12
  // Setup SPI registers according to spiOptions.
  spi_setupChipReg(SD_MMC_SPI, &spiOptions, pba_hz);
80003e08:	ee fa ff fc 	ld.w	r10,r7[-4]
80003e0c:	10 9b       	mov	r11,r8
80003e0e:	fe 7c 28 00 	mov	r12,-55296
80003e12:	f0 1f 00 05 	mcall	80003e24 <sd_mmc_spi_init+0x2c>

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80003e16:	f0 1f 00 05 	mcall	80003e28 <sd_mmc_spi_init+0x30>
80003e1a:	18 98       	mov	r8,r12
}
80003e1c:	10 9c       	mov	r12,r8
80003e1e:	2f fd       	sub	sp,-4
80003e20:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e24:	80 00       	ld.sh	r0,r0[0x0]
80003e26:	23 d0       	sub	r0,61
80003e28:	80 00       	ld.sh	r0,r0[0x0]
80003e2a:	3c 20       	mov	r0,-62

80003e2c <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return U8
//!         R1 response (R1 == 0xFF if time out error)
U8 sd_mmc_spi_send_command(U8 command, U32 arg)
{
80003e2c:	eb cd 40 80 	pushm	r7,lr
80003e30:	1a 97       	mov	r7,sp
80003e32:	20 2d       	sub	sp,8
80003e34:	18 98       	mov	r8,r12
80003e36:	ef 4b ff f8 	st.w	r7[-8],r11
80003e3a:	ef 68 ff fc 	st.b	r7[-4],r8
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003e3e:	30 1b       	mov	r11,1
80003e40:	fe 7c 28 00 	mov	r12,-55296
80003e44:	f0 1f 00 0c 	mcall	80003e74 <sd_mmc_spi_send_command+0x48>
  r1 = sd_mmc_spi_command(command, arg);
80003e48:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003e4c:	ee fb ff f8 	ld.w	r11,r7[-8]
80003e50:	10 9c       	mov	r12,r8
80003e52:	f0 1f 00 0a 	mcall	80003e78 <sd_mmc_spi_send_command+0x4c>
80003e56:	18 98       	mov	r8,r12
80003e58:	48 99       	lddpc	r9,80003e7c <sd_mmc_spi_send_command+0x50>
80003e5a:	b2 88       	st.b	r9[0x0],r8
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003e5c:	30 1b       	mov	r11,1
80003e5e:	fe 7c 28 00 	mov	r12,-55296
80003e62:	f0 1f 00 08 	mcall	80003e80 <sd_mmc_spi_send_command+0x54>
  return r1;
80003e66:	48 68       	lddpc	r8,80003e7c <sd_mmc_spi_send_command+0x50>
80003e68:	11 88       	ld.ub	r8,r8[0x0]
}
80003e6a:	10 9c       	mov	r12,r8
80003e6c:	2f ed       	sub	sp,-8
80003e6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e72:	00 00       	add	r0,r0
80003e74:	80 00       	ld.sh	r0,r0[0x0]
80003e76:	22 ac       	sub	r12,42
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	3e 84       	mov	r4,-24
80003e7c:	00 00       	add	r0,r0
80003e7e:	09 84       	ld.ub	r4,r4[0x0]
80003e80:	80 00       	ld.sh	r0,r0[0x0]
80003e82:	23 58       	sub	r8,53

80003e84 <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return U8
//!         R1 response (R1 == 0xFF time out error)
U8 sd_mmc_spi_command(U8 command, U32 arg)
{
80003e84:	eb cd 40 80 	pushm	r7,lr
80003e88:	1a 97       	mov	r7,sp
80003e8a:	20 3d       	sub	sp,12
80003e8c:	18 98       	mov	r8,r12
80003e8e:	ef 4b ff f4 	st.w	r7[-12],r11
80003e92:	ef 68 ff f8 	st.b	r7[-8],r8
U8 retry;

  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003e96:	e0 6b 00 ff 	mov	r11,255
80003e9a:	fe 7c 28 00 	mov	r12,-55296
80003e9e:	f0 1f 00 30 	mcall	80003f5c <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,command | 0x40);  // send command
80003ea2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003ea6:	a7 a8       	sbr	r8,0x6
80003ea8:	5c 58       	castu.b	r8
80003eaa:	10 9b       	mov	r11,r8
80003eac:	fe 7c 28 00 	mov	r12,-55296
80003eb0:	f0 1f 00 2b 	mcall	80003f5c <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,arg>>24);         // send parameter
80003eb4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003eb8:	b9 88       	lsr	r8,0x18
80003eba:	5c 88       	casts.h	r8
80003ebc:	5c 78       	castu.h	r8
80003ebe:	10 9b       	mov	r11,r8
80003ec0:	fe 7c 28 00 	mov	r12,-55296
80003ec4:	f0 1f 00 26 	mcall	80003f5c <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,arg>>16);
80003ec8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ecc:	b1 88       	lsr	r8,0x10
80003ece:	5c 88       	casts.h	r8
80003ed0:	5c 78       	castu.h	r8
80003ed2:	10 9b       	mov	r11,r8
80003ed4:	fe 7c 28 00 	mov	r12,-55296
80003ed8:	f0 1f 00 21 	mcall	80003f5c <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,arg>>8 );
80003edc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ee0:	a9 88       	lsr	r8,0x8
80003ee2:	5c 88       	casts.h	r8
80003ee4:	5c 78       	castu.h	r8
80003ee6:	10 9b       	mov	r11,r8
80003ee8:	fe 7c 28 00 	mov	r12,-55296
80003eec:	f0 1f 00 1c 	mcall	80003f5c <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,arg    );
80003ef0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ef4:	5c 88       	casts.h	r8
80003ef6:	5c 78       	castu.h	r8
80003ef8:	10 9b       	mov	r11,r8
80003efa:	fe 7c 28 00 	mov	r12,-55296
80003efe:	f0 1f 00 18 	mcall	80003f5c <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,0x95);            // correct CRC for first command in SPI (CMD0)
80003f02:	e0 6b 00 95 	mov	r11,149
80003f06:	fe 7c 28 00 	mov	r12,-55296
80003f0a:	f0 1f 00 15 	mcall	80003f5c <sd_mmc_spi_command+0xd8>
                                  // after, the CRC is ignored
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
80003f0e:	30 08       	mov	r8,0
80003f10:	ef 68 ff ff 	st.b	r7[-1],r8
  r1    = 0xFF;
80003f14:	49 39       	lddpc	r9,80003f60 <sd_mmc_spi_command+0xdc>
80003f16:	3f f8       	mov	r8,-1
80003f18:	b2 88       	st.b	r9[0x0],r8
80003f1a:	c0 d8       	rjmp	80003f34 <sd_mmc_spi_command+0xb0>
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
    retry++;
80003f1c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003f20:	2f f8       	sub	r8,-1
80003f22:	ef 68 ff ff 	st.b	r7[-1],r8
    if(retry > 10) break;
80003f26:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003f2a:	30 a8       	mov	r8,10
80003f2c:	f0 09 18 00 	cp.b	r9,r8
80003f30:	e0 8b 00 0f 	brhi	80003f4e <sd_mmc_spi_command+0xca>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80003f34:	e0 6c 00 ff 	mov	r12,255
80003f38:	f0 1f 00 0b 	mcall	80003f64 <sd_mmc_spi_command+0xe0>
80003f3c:	18 98       	mov	r8,r12
80003f3e:	48 99       	lddpc	r9,80003f60 <sd_mmc_spi_command+0xdc>
80003f40:	b2 88       	st.b	r9[0x0],r8
80003f42:	48 88       	lddpc	r8,80003f60 <sd_mmc_spi_command+0xdc>
80003f44:	11 89       	ld.ub	r9,r8[0x0]
80003f46:	3f f8       	mov	r8,-1
80003f48:	f0 09 18 00 	cp.b	r9,r8
80003f4c:	ce 80       	breq	80003f1c <sd_mmc_spi_command+0x98>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
80003f4e:	48 58       	lddpc	r8,80003f60 <sd_mmc_spi_command+0xdc>
80003f50:	11 88       	ld.ub	r8,r8[0x0]
}
80003f52:	10 9c       	mov	r12,r8
80003f54:	2f dd       	sub	sp,-12
80003f56:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f5a:	00 00       	add	r0,r0
80003f5c:	80 00       	ld.sh	r0,r0[0x0]
80003f5e:	25 9a       	sub	r10,89
80003f60:	00 00       	add	r0,r0
80003f62:	09 84       	ld.ub	r4,r4[0x0]
80003f64:	80 00       	ld.sh	r0,r0[0x0]
80003f66:	3f 68       	mov	r8,-10

80003f68 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return U8
//!   Byte read from the slave
U8 sd_mmc_spi_send_and_read(U8 data_to_send)
{
80003f68:	eb cd 40 80 	pushm	r7,lr
80003f6c:	1a 97       	mov	r7,sp
80003f6e:	20 3d       	sub	sp,12
80003f70:	18 98       	mov	r8,r12
80003f72:	ef 68 ff f8 	st.b	r7[-8],r8
   unsigned short data_read;
   spi_write(SD_MMC_SPI,data_to_send);
80003f76:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003f7a:	10 9b       	mov	r11,r8
80003f7c:	fe 7c 28 00 	mov	r12,-55296
80003f80:	f0 1f 00 0e 	mcall	80003fb8 <sd_mmc_spi_send_and_read+0x50>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI,&data_read) )
80003f84:	ee c8 00 02 	sub	r8,r7,2
80003f88:	10 9b       	mov	r11,r8
80003f8a:	fe 7c 28 00 	mov	r12,-55296
80003f8e:	f0 1f 00 0c 	mcall	80003fbc <sd_mmc_spi_send_and_read+0x54>
80003f92:	18 98       	mov	r8,r12
80003f94:	58 18       	cp.w	r8,1
80003f96:	c0 61       	brne	80003fa2 <sd_mmc_spi_send_and_read+0x3a>
     return 0xFF;
80003f98:	e0 68 00 ff 	mov	r8,255
80003f9c:	ef 48 ff f4 	st.w	r7[-12],r8
80003fa0:	c0 68       	rjmp	80003fac <sd_mmc_spi_send_and_read+0x44>
   return (data_read);
80003fa2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003fa6:	5c 58       	castu.b	r8
80003fa8:	ef 48 ff f4 	st.w	r7[-12],r8
80003fac:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80003fb0:	10 9c       	mov	r12,r8
80003fb2:	2f dd       	sub	sp,-12
80003fb4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fb8:	80 00       	ld.sh	r0,r0[0x0]
80003fba:	25 9a       	sub	r10,89
80003fbc:	80 00       	ld.sh	r0,r0[0x0]
80003fbe:	26 00       	sub	r0,96

80003fc0 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         OK / KO
Bool sd_mmc_spi_get_csd(U8 *buffer)
{
80003fc0:	eb cd 40 80 	pushm	r7,lr
80003fc4:	1a 97       	mov	r7,sp
80003fc6:	20 3d       	sub	sp,12
80003fc8:	ef 4c ff f8 	st.w	r7[-8],r12
U8 retry;
unsigned short data_read;
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
80003fcc:	f0 1f 00 49 	mcall	800040f0 <sd_mmc_spi_get_csd+0x130>
80003fd0:	18 98       	mov	r8,r12
80003fd2:	58 08       	cp.w	r8,0
80003fd4:	c0 51       	brne	80003fde <sd_mmc_spi_get_csd+0x1e>
    return KO;
80003fd6:	30 08       	mov	r8,0
80003fd8:	ef 48 ff f4 	st.w	r7[-12],r8
80003fdc:	c8 48       	rjmp	800040e4 <sd_mmc_spi_get_csd+0x124>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003fde:	30 1b       	mov	r11,1
80003fe0:	fe 7c 28 00 	mov	r12,-55296
80003fe4:	f0 1f 00 44 	mcall	800040f4 <sd_mmc_spi_get_csd+0x134>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80003fe8:	30 0b       	mov	r11,0
80003fea:	30 9c       	mov	r12,9
80003fec:	f0 1f 00 43 	mcall	800040f8 <sd_mmc_spi_get_csd+0x138>
80003ff0:	18 98       	mov	r8,r12
80003ff2:	4c 39       	lddpc	r9,800040fc <sd_mmc_spi_get_csd+0x13c>
80003ff4:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if(r1 != 0x00)
80003ff6:	4c 28       	lddpc	r8,800040fc <sd_mmc_spi_get_csd+0x13c>
80003ff8:	11 88       	ld.ub	r8,r8[0x0]
80003ffa:	58 08       	cp.w	r8,0
80003ffc:	c0 d0       	breq	80004016 <sd_mmc_spi_get_csd+0x56>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003ffe:	30 1b       	mov	r11,1
80004000:	fe 7c 28 00 	mov	r12,-55296
80004004:	f0 1f 00 3f 	mcall	80004100 <sd_mmc_spi_get_csd+0x140>
    sd_mmc_spi_init_done = FALSE;
80004008:	4b f9       	lddpc	r9,80004104 <sd_mmc_spi_get_csd+0x144>
8000400a:	30 08       	mov	r8,0
8000400c:	b2 88       	st.b	r9[0x0],r8
    return KO;
8000400e:	30 08       	mov	r8,0
80004010:	ef 48 ff f4 	st.w	r7[-12],r8
80004014:	c6 88       	rjmp	800040e4 <sd_mmc_spi_get_csd+0x124>
  }
  // wait for block start
  retry = 0;
80004016:	30 08       	mov	r8,0
80004018:	ef 68 ff ff 	st.b	r7[-1],r8
8000401c:	c1 68       	rjmp	80004048 <sd_mmc_spi_get_csd+0x88>
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000401e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004022:	30 88       	mov	r8,8
80004024:	f0 09 18 00 	cp.b	r9,r8
80004028:	e0 88 00 0b 	brls	8000403e <sd_mmc_spi_get_csd+0x7e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000402c:	30 1b       	mov	r11,1
8000402e:	fe 7c 28 00 	mov	r12,-55296
80004032:	f0 1f 00 34 	mcall	80004100 <sd_mmc_spi_get_csd+0x140>
      return KO;
80004036:	30 08       	mov	r8,0
80004038:	ef 48 ff f4 	st.w	r7[-12],r8
8000403c:	c5 48       	rjmp	800040e4 <sd_mmc_spi_get_csd+0x124>
    }
    retry++;
8000403e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004042:	2f f8       	sub	r8,-1
80004044:	ef 68 ff ff 	st.b	r7[-1],r8
    sd_mmc_spi_init_done = FALSE;
    return KO;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80004048:	e0 6c 00 ff 	mov	r12,255
8000404c:	f0 1f 00 2f 	mcall	80004108 <sd_mmc_spi_get_csd+0x148>
80004050:	18 98       	mov	r8,r12
80004052:	4a b9       	lddpc	r9,800040fc <sd_mmc_spi_get_csd+0x13c>
80004054:	b2 88       	st.b	r9[0x0],r8
80004056:	4a a8       	lddpc	r8,800040fc <sd_mmc_spi_get_csd+0x13c>
80004058:	11 89       	ld.ub	r9,r8[0x0]
8000405a:	3f e8       	mov	r8,-2
8000405c:	f0 09 18 00 	cp.b	r9,r8
80004060:	cd f1       	brne	8000401e <sd_mmc_spi_get_csd+0x5e>
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
      return KO;
    }
    retry++;
  }
  for (retry = 0; retry <16; retry++)
80004062:	30 08       	mov	r8,0
80004064:	ef 68 ff ff 	st.b	r7[-1],r8
80004068:	c1 d8       	rjmp	800040a2 <sd_mmc_spi_get_csd+0xe2>
  {
   spi_write(SD_MMC_SPI,0xFF);
8000406a:	e0 6b 00 ff 	mov	r11,255
8000406e:	fe 7c 28 00 	mov	r12,-55296
80004072:	f0 1f 00 27 	mcall	8000410c <sd_mmc_spi_get_csd+0x14c>
   spi_read(SD_MMC_SPI,&data_read);
80004076:	ee c8 00 04 	sub	r8,r7,4
8000407a:	10 9b       	mov	r11,r8
8000407c:	fe 7c 28 00 	mov	r12,-55296
80004080:	f0 1f 00 24 	mcall	80004110 <sd_mmc_spi_get_csd+0x150>
    buffer[retry] = data_read;
80004084:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004088:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000408c:	f0 09 00 09 	add	r9,r8,r9
80004090:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80004094:	5c 58       	castu.b	r8
80004096:	b2 88       	st.b	r9[0x0],r8
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
      return KO;
    }
    retry++;
  }
  for (retry = 0; retry <16; retry++)
80004098:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000409c:	2f f8       	sub	r8,-1
8000409e:	ef 68 ff ff 	st.b	r7[-1],r8
800040a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800040a6:	30 f8       	mov	r8,15
800040a8:	f0 09 18 00 	cp.b	r9,r8
800040ac:	fe 98 ff df 	brls	8000406a <sd_mmc_spi_get_csd+0xaa>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800040b0:	e0 6b 00 ff 	mov	r11,255
800040b4:	fe 7c 28 00 	mov	r12,-55296
800040b8:	f0 1f 00 15 	mcall	8000410c <sd_mmc_spi_get_csd+0x14c>
   spi_write(SD_MMC_SPI,0xFF);
800040bc:	e0 6b 00 ff 	mov	r11,255
800040c0:	fe 7c 28 00 	mov	r12,-55296
800040c4:	f0 1f 00 12 	mcall	8000410c <sd_mmc_spi_get_csd+0x14c>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800040c8:	e0 6b 00 ff 	mov	r11,255
800040cc:	fe 7c 28 00 	mov	r12,-55296
800040d0:	f0 1f 00 0f 	mcall	8000410c <sd_mmc_spi_get_csd+0x14c>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800040d4:	30 1b       	mov	r11,1
800040d6:	fe 7c 28 00 	mov	r12,-55296
800040da:	f0 1f 00 0a 	mcall	80004100 <sd_mmc_spi_get_csd+0x140>
  return OK;
800040de:	30 18       	mov	r8,1
800040e0:	ef 48 ff f4 	st.w	r7[-12],r8
800040e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
800040e8:	10 9c       	mov	r12,r8
800040ea:	2f dd       	sub	sp,-12
800040ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800040f0:	80 00       	ld.sh	r0,r0[0x0]
800040f2:	42 64       	lddsp	r4,sp[0x98]
800040f4:	80 00       	ld.sh	r0,r0[0x0]
800040f6:	22 ac       	sub	r12,42
800040f8:	80 00       	ld.sh	r0,r0[0x0]
800040fa:	3e 84       	mov	r4,-24
800040fc:	00 00       	add	r0,r0
800040fe:	09 84       	ld.ub	r4,r4[0x0]
80004100:	80 00       	ld.sh	r0,r0[0x0]
80004102:	23 58       	sub	r8,53
80004104:	00 00       	add	r0,r0
80004106:	06 4c       	or	r12,r3
80004108:	80 00       	ld.sh	r0,r0[0x0]
8000410a:	3f 68       	mov	r8,-10
8000410c:	80 00       	ld.sh	r0,r0[0x0]
8000410e:	25 9a       	sub	r10,89
80004110:	80 00       	ld.sh	r0,r0[0x0]
80004112:	26 00       	sub	r0,96

80004114 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         OK
void sd_mmc_spi_get_capacity(void)
{
80004114:	eb cd 40 80 	pushm	r7,lr
80004118:	1a 97       	mov	r7,sp
8000411a:	20 2d       	sub	sp,8
  U8  read_bl_len;
  U8  erase_grp_size;
  U8  erase_grp_mult;

  // extract variables from CSD array
  c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
8000411c:	4c d8       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
8000411e:	11 e8       	ld.ub	r8,r8[0x6]
80004120:	5c 88       	casts.h	r8
80004122:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004126:	ab 68       	lsl	r8,0xa
80004128:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000412c:	4c 98       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
8000412e:	11 f8       	ld.ub	r8,r8[0x7]
80004130:	a3 68       	lsl	r8,0x2
80004132:	5c 88       	casts.h	r8
80004134:	f2 08 00 08 	add	r8,r9,r8
80004138:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000413c:	4c 58       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
8000413e:	f1 38 00 08 	ld.ub	r8,r8[8]
80004142:	a7 88       	lsr	r8,0x6
80004144:	5c 58       	castu.b	r8
80004146:	f2 08 00 08 	add	r8,r9,r8
8000414a:	ef 58 ff fa 	st.h	r7[-6],r8
  c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
8000414e:	4c 18       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
80004150:	f1 38 00 09 	ld.ub	r8,r8[9]
80004154:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004158:	a1 78       	lsl	r8,0x1
8000415a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000415e:	4b d8       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
80004160:	f1 38 00 0a 	ld.ub	r8,r8[10]
80004164:	a7 98       	lsr	r8,0x7
80004166:	5c 58       	castu.b	r8
80004168:	f2 08 00 08 	add	r8,r9,r8
8000416c:	ef 68 ff fc 	st.b	r7[-4],r8
  read_bl_len = csd[5] & 0x0F;
80004170:	4b 88       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
80004172:	11 d8       	ld.ub	r8,r8[0x5]
80004174:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004178:	ef 68 ff fd 	st.b	r7[-3],r8
  if (card_type == MMC_CARD)
8000417c:	4b 68       	lddpc	r8,80004254 <sd_mmc_spi_get_capacity+0x140>
8000417e:	11 88       	ld.ub	r8,r8[0x0]
80004180:	58 08       	cp.w	r8,0
80004182:	c1 c1       	brne	800041ba <sd_mmc_spi_get_capacity+0xa6>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80004184:	4b 38       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
80004186:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000418a:	e2 18 00 7c 	andl	r8,0x7c,COH
8000418e:	a3 48       	asr	r8,0x2
80004190:	ef 68 ff fe 	st.b	r7[-2],r8
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
80004194:	4a f8       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
80004196:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000419a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000419e:	a3 78       	lsl	r8,0x3
800041a0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800041a4:	4a b8       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
800041a6:	f1 38 00 0b 	ld.ub	r8,r8[11]
800041aa:	a5 98       	lsr	r8,0x5
800041ac:	5c 58       	castu.b	r8
800041ae:	f3 e8 10 08 	or	r8,r9,r8
800041b2:	5c 58       	castu.b	r8
800041b4:	ef 68 ff ff 	st.b	r7[-1],r8
800041b8:	c1 58       	rjmp	800041e2 <sd_mmc_spi_get_capacity+0xce>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800041ba:	4a 68       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
800041bc:	f1 38 00 0a 	ld.ub	r8,r8[10]
800041c0:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800041c4:	a1 78       	lsl	r8,0x1
800041c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800041ca:	4a 28       	lddpc	r8,80004250 <sd_mmc_spi_get_capacity+0x13c>
800041cc:	f1 38 00 0b 	ld.ub	r8,r8[11]
800041d0:	a7 98       	lsr	r8,0x7
800041d2:	5c 58       	castu.b	r8
800041d4:	f2 08 00 08 	add	r8,r9,r8
800041d8:	ef 68 ff fe 	st.b	r7[-2],r8
    erase_grp_mult = 0;
800041dc:	30 08       	mov	r8,0
800041de:	ef 68 ff ff 	st.b	r7[-1],r8
  }

  // compute last block addr
  sd_mmc_spi_last_block_address = ((U32)(c_size + 1) * (U32)((1 << (c_size_mult + 2)))) - 1;
800041e2:	ef 18 ff fa 	ld.uh	r8,r7[-6]
800041e6:	2f f8       	sub	r8,-1
800041e8:	10 99       	mov	r9,r8
800041ea:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800041ee:	2f e8       	sub	r8,-2
800041f0:	f2 08 09 48 	lsl	r8,r9,r8
800041f4:	f0 c9 00 01 	sub	r9,r8,1
800041f8:	49 88       	lddpc	r8,80004258 <sd_mmc_spi_get_capacity+0x144>
800041fa:	91 09       	st.w	r8[0x0],r9
  if (read_bl_len > 9)  // 9 means 2^9 = 512b
800041fc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80004200:	30 98       	mov	r8,9
80004202:	f0 09 18 00 	cp.b	r9,r8
80004206:	e0 88 00 0b 	brls	8000421c <sd_mmc_spi_get_capacity+0x108>
    sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
8000420a:	49 48       	lddpc	r8,80004258 <sd_mmc_spi_get_capacity+0x144>
8000420c:	70 09       	ld.w	r9,r8[0x0]
8000420e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004212:	20 98       	sub	r8,9
80004214:	f2 08 09 49 	lsl	r9,r9,r8
80004218:	49 08       	lddpc	r8,80004258 <sd_mmc_spi_get_capacity+0x144>
8000421a:	91 09       	st.w	r8[0x0],r9

  // compute card capacity in bytes
  capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000421c:	48 f8       	lddpc	r8,80004258 <sd_mmc_spi_get_capacity+0x144>
8000421e:	70 08       	ld.w	r8,r8[0x0]
80004220:	f0 c9 ff ff 	sub	r9,r8,-1
80004224:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004228:	f2 08 09 49 	lsl	r9,r9,r8
8000422c:	48 c8       	lddpc	r8,8000425c <sd_mmc_spi_get_capacity+0x148>
8000422e:	91 09       	st.w	r8[0x0],r9

  // compute block group size for erase operation
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
80004230:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004234:	f0 c9 ff ff 	sub	r9,r8,-1
80004238:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000423c:	2f f8       	sub	r8,-1
8000423e:	f2 08 02 48 	mul	r8,r9,r8
80004242:	5c 88       	casts.h	r8
80004244:	48 79       	lddpc	r9,80004260 <sd_mmc_spi_get_capacity+0x14c>
80004246:	b2 08       	st.h	r9[0x0],r8
}
80004248:	2f ed       	sub	sp,-8
8000424a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000424e:	00 00       	add	r0,r0
80004250:	00 00       	add	r0,r0
80004252:	09 74       	ld.ub	r4,--r4
80004254:	00 00       	add	r0,r0
80004256:	09 72       	ld.ub	r2,--r4
80004258:	00 00       	add	r0,r0
8000425a:	09 6c       	ld.uh	r12,--r4
8000425c:	00 00       	add	r0,r0
8000425e:	09 64       	ld.uh	r4,--r4
80004260:	00 00       	add	r0,r0
80004262:	09 68       	ld.uh	r8,--r4

80004264 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          OK when card is not busy
Bool sd_mmc_spi_wait_not_busy(void)
{
80004264:	eb cd 40 80 	pushm	r7,lr
80004268:	1a 97       	mov	r7,sp
8000426a:	20 2d       	sub	sp,8
  U16 retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000426c:	30 1b       	mov	r11,1
8000426e:	fe 7c 28 00 	mov	r12,-55296
80004272:	f0 1f 00 1c 	mcall	800042e0 <sd_mmc_spi_wait_not_busy+0x7c>
  retry = 0;
80004276:	30 08       	mov	r8,0
80004278:	ef 58 ff fe 	st.h	r7[-2],r8
8000427c:	c1 68       	rjmp	800042a8 <sd_mmc_spi_wait_not_busy+0x44>
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
8000427e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80004282:	2f f8       	sub	r8,-1
80004284:	ef 58 ff fe 	st.h	r7[-2],r8
    if (retry == 50000)
80004288:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000428c:	fe 78 c3 50 	mov	r8,-15536
80004290:	f0 09 19 00 	cp.h	r9,r8
80004294:	c0 a1       	brne	800042a8 <sd_mmc_spi_wait_not_busy+0x44>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80004296:	30 1b       	mov	r11,1
80004298:	fe 7c 28 00 	mov	r12,-55296
8000429c:	f0 1f 00 12 	mcall	800042e4 <sd_mmc_spi_wait_not_busy+0x80>
      return KO;
800042a0:	30 08       	mov	r8,0
800042a2:	ef 48 ff f8 	st.w	r7[-8],r8
800042a6:	c1 68       	rjmp	800042d2 <sd_mmc_spi_wait_not_busy+0x6e>
  U16 retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800042a8:	e0 6c 00 ff 	mov	r12,255
800042ac:	f0 1f 00 0f 	mcall	800042e8 <sd_mmc_spi_wait_not_busy+0x84>
800042b0:	18 98       	mov	r8,r12
800042b2:	48 f9       	lddpc	r9,800042ec <sd_mmc_spi_wait_not_busy+0x88>
800042b4:	b2 88       	st.b	r9[0x0],r8
800042b6:	48 e8       	lddpc	r8,800042ec <sd_mmc_spi_wait_not_busy+0x88>
800042b8:	11 89       	ld.ub	r9,r8[0x0]
800042ba:	3f f8       	mov	r8,-1
800042bc:	f0 09 18 00 	cp.b	r9,r8
800042c0:	cd f1       	brne	8000427e <sd_mmc_spi_wait_not_busy+0x1a>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return KO;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800042c2:	30 1b       	mov	r11,1
800042c4:	fe 7c 28 00 	mov	r12,-55296
800042c8:	f0 1f 00 07 	mcall	800042e4 <sd_mmc_spi_wait_not_busy+0x80>
  return OK;
800042cc:	30 18       	mov	r8,1
800042ce:	ef 48 ff f8 	st.w	r7[-8],r8
800042d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800042d6:	10 9c       	mov	r12,r8
800042d8:	2f ed       	sub	sp,-8
800042da:	e3 cd 80 80 	ldm	sp++,r7,pc
800042de:	00 00       	add	r0,r0
800042e0:	80 00       	ld.sh	r0,r0[0x0]
800042e2:	22 ac       	sub	r12,42
800042e4:	80 00       	ld.sh	r0,r0[0x0]
800042e6:	23 58       	sub	r8,53
800042e8:	80 00       	ld.sh	r0,r0[0x0]
800042ea:	3f 68       	mov	r8,-10
800042ec:	00 00       	add	r0,r0
800042ee:	09 84       	ld.ub	r4,r4[0x0]

800042f0 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (OK)
//!   The memory does not respond (disconnected) (KO)
Bool sd_mmc_spi_check_presence(void)
{
800042f0:	eb cd 40 80 	pushm	r7,lr
800042f4:	1a 97       	mov	r7,sp
800042f6:	20 2d       	sub	sp,8
  U16 retry;

  retry = 0;
800042f8:	30 08       	mov	r8,0
800042fa:	ef 58 ff fe 	st.h	r7[-2],r8
  if (sd_mmc_spi_init_done == FALSE)
800042fe:	4a 48       	lddpc	r8,8000438c <sd_mmc_spi_check_presence+0x9c>
80004300:	11 88       	ld.ub	r8,r8[0x0]
80004302:	58 08       	cp.w	r8,0
80004304:	c2 91       	brne	80004356 <sd_mmc_spi_check_presence+0x66>
80004306:	c1 78       	rjmp	80004334 <sd_mmc_spi_check_presence+0x44>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80004308:	e0 6b 00 ff 	mov	r11,255
8000430c:	fe 7c 28 00 	mov	r12,-55296
80004310:	f0 1f 00 20 	mcall	80004390 <sd_mmc_spi_check_presence+0xa0>
      retry++;
80004314:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80004318:	2f f8       	sub	r8,-1
8000431a:	ef 58 ff fe 	st.h	r7[-2],r8
      if (retry > 10)
8000431e:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80004322:	30 a8       	mov	r8,10
80004324:	f0 09 19 00 	cp.h	r9,r8
80004328:	e0 88 00 06 	brls	80004334 <sd_mmc_spi_check_presence+0x44>
        return KO;
8000432c:	30 08       	mov	r8,0
8000432e:	ef 48 ff f8 	st.w	r7[-8],r8
80004332:	c2 78       	rjmp	80004380 <sd_mmc_spi_check_presence+0x90>
  retry = 0;
  if (sd_mmc_spi_init_done == FALSE)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80004334:	30 0b       	mov	r11,0
80004336:	30 0c       	mov	r12,0
80004338:	f0 1f 00 17 	mcall	80004394 <sd_mmc_spi_check_presence+0xa4>
8000433c:	18 98       	mov	r8,r12
8000433e:	49 79       	lddpc	r9,80004398 <sd_mmc_spi_check_presence+0xa8>
80004340:	b2 88       	st.b	r9[0x0],r8
80004342:	49 68       	lddpc	r8,80004398 <sd_mmc_spi_check_presence+0xa8>
80004344:	11 89       	ld.ub	r9,r8[0x0]
80004346:	30 18       	mov	r8,1
80004348:	f0 09 18 00 	cp.b	r9,r8
8000434c:	cd e1       	brne	80004308 <sd_mmc_spi_check_presence+0x18>
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      retry++;
      if (retry > 10)
        return KO;
    }
    return OK;
8000434e:	30 18       	mov	r8,1
80004350:	ef 48 ff f8 	st.w	r7[-8],r8
80004354:	c1 68       	rjmp	80004380 <sd_mmc_spi_check_presence+0x90>
  }
  else
  {
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF,0)) == 0x00)
80004356:	30 0b       	mov	r11,0
80004358:	33 bc       	mov	r12,59
8000435a:	f0 1f 00 0f 	mcall	80004394 <sd_mmc_spi_check_presence+0xa4>
8000435e:	18 98       	mov	r8,r12
80004360:	48 e9       	lddpc	r9,80004398 <sd_mmc_spi_check_presence+0xa8>
80004362:	b2 88       	st.b	r9[0x0],r8
80004364:	48 d8       	lddpc	r8,80004398 <sd_mmc_spi_check_presence+0xa8>
80004366:	11 88       	ld.ub	r8,r8[0x0]
80004368:	58 08       	cp.w	r8,0
8000436a:	c0 51       	brne	80004374 <sd_mmc_spi_check_presence+0x84>
      return OK;
8000436c:	30 18       	mov	r8,1
8000436e:	ef 48 ff f8 	st.w	r7[-8],r8
80004372:	c0 78       	rjmp	80004380 <sd_mmc_spi_check_presence+0x90>
    sd_mmc_spi_init_done = FALSE;
80004374:	48 69       	lddpc	r9,8000438c <sd_mmc_spi_check_presence+0x9c>
80004376:	30 08       	mov	r8,0
80004378:	b2 88       	st.b	r9[0x0],r8
    return KO;
8000437a:	30 08       	mov	r8,0
8000437c:	ef 48 ff f8 	st.w	r7[-8],r8
80004380:	ee f8 ff f8 	ld.w	r8,r7[-8]
  }
}
80004384:	10 9c       	mov	r12,r8
80004386:	2f ed       	sub	sp,-8
80004388:	e3 cd 80 80 	ldm	sp++,r7,pc
8000438c:	00 00       	add	r0,r0
8000438e:	06 4c       	or	r12,r3
80004390:	80 00       	ld.sh	r0,r0[0x0]
80004392:	25 9a       	sub	r10,89
80004394:	80 00       	ld.sh	r0,r0[0x0]
80004396:	3e 2c       	mov	r12,-30
80004398:	00 00       	add	r0,r0
8000439a:	09 84       	ld.ub	r4,r4[0x0]

8000439c <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> OK
//!   The memory check failed -> KO
Bool sd_mmc_spi_mem_check(void)
{
8000439c:	eb cd 40 80 	pushm	r7,lr
800043a0:	1a 97       	mov	r7,sp
800043a2:	20 1d       	sub	sp,4
  if (sd_mmc_spi_check_presence() == OK)
800043a4:	f0 1f 00 13 	mcall	800043f0 <sd_mmc_spi_mem_check+0x54>
800043a8:	18 98       	mov	r8,r12
800043aa:	10 99       	mov	r9,r8
800043ac:	30 18       	mov	r8,1
800043ae:	f0 09 18 00 	cp.b	r9,r8
800043b2:	c1 51       	brne	800043dc <sd_mmc_spi_mem_check+0x40>
  {
    if (sd_mmc_spi_init_done == FALSE)
800043b4:	49 08       	lddpc	r8,800043f4 <sd_mmc_spi_mem_check+0x58>
800043b6:	11 88       	ld.ub	r8,r8[0x0]
800043b8:	58 08       	cp.w	r8,0
800043ba:	c0 31       	brne	800043c0 <sd_mmc_spi_mem_check+0x24>
    {
      sd_mmc_spi_internal_init();
800043bc:	f0 1f 00 0f 	mcall	800043f8 <sd_mmc_spi_mem_check+0x5c>
    }
    if (sd_mmc_spi_init_done == TRUE)
800043c0:	48 d8       	lddpc	r8,800043f4 <sd_mmc_spi_mem_check+0x58>
800043c2:	11 89       	ld.ub	r9,r8[0x0]
800043c4:	30 18       	mov	r8,1
800043c6:	f0 09 18 00 	cp.b	r9,r8
800043ca:	c0 51       	brne	800043d4 <sd_mmc_spi_mem_check+0x38>
      return OK;
800043cc:	30 18       	mov	r8,1
800043ce:	ef 48 ff fc 	st.w	r7[-4],r8
800043d2:	c0 88       	rjmp	800043e2 <sd_mmc_spi_mem_check+0x46>
    else
      return KO;
800043d4:	30 08       	mov	r8,0
800043d6:	ef 48 ff fc 	st.w	r7[-4],r8
800043da:	c0 48       	rjmp	800043e2 <sd_mmc_spi_mem_check+0x46>
  }
  return KO;
800043dc:	30 08       	mov	r8,0
800043de:	ef 48 ff fc 	st.w	r7[-4],r8
800043e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800043e6:	10 9c       	mov	r12,r8
800043e8:	2f fd       	sub	sp,-4
800043ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800043ee:	00 00       	add	r0,r0
800043f0:	80 00       	ld.sh	r0,r0[0x0]
800043f2:	42 f0       	lddsp	r0,sp[0xbc]
800043f4:	00 00       	add	r0,r0
800043f6:	06 4c       	or	r12,r3
800043f8:	80 00       	ld.sh	r0,r0[0x0]
800043fa:	3c 20       	mov	r0,-62

800043fc <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> OK
Bool sd_mmc_spi_read_open (U32 pos)
{
800043fc:	eb cd 40 80 	pushm	r7,lr
80004400:	1a 97       	mov	r7,sp
80004402:	20 1d       	sub	sp,4
80004404:	ef 4c ff fc 	st.w	r7[-4],r12
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
80004408:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000440c:	f0 09 15 09 	lsl	r9,r8,0x9
80004410:	48 58       	lddpc	r8,80004424 <sd_mmc_spi_read_open+0x28>
80004412:	91 09       	st.w	r8[0x0],r9

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80004414:	f0 1f 00 05 	mcall	80004428 <sd_mmc_spi_read_open+0x2c>
80004418:	18 98       	mov	r8,r12
}
8000441a:	10 9c       	mov	r12,r8
8000441c:	2f fd       	sub	sp,-4
8000441e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004422:	00 00       	add	r0,r0
80004424:	00 00       	add	r0,r0
80004426:	06 50       	eor	r0,r3
80004428:	80 00       	ld.sh	r0,r0[0x0]
8000442a:	42 64       	lddsp	r4,sp[0x98]

8000442c <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
void sd_mmc_spi_read_close (void)
{
8000442c:	eb cd 40 80 	pushm	r7,lr
80004430:	1a 97       	mov	r7,sp

}
80004432:	e3 cd 80 80 	ldm	sp++,r7,pc
80004436:	d7 03       	nop

80004438 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> OK
Bool sd_mmc_spi_write_open (U32 pos)
{
80004438:	eb cd 40 80 	pushm	r7,lr
8000443c:	1a 97       	mov	r7,sp
8000443e:	20 1d       	sub	sp,4
80004440:	ef 4c ff fc 	st.w	r7[-4],r12
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;                    // gl_ptr_mem = pos * 512
80004444:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004448:	f0 09 15 09 	lsl	r9,r8,0x9
8000444c:	48 58       	lddpc	r8,80004460 <sd_mmc_spi_write_open+0x28>
8000444e:	91 09       	st.w	r8[0x0],r9

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80004450:	f0 1f 00 05 	mcall	80004464 <sd_mmc_spi_write_open+0x2c>
80004454:	18 98       	mov	r8,r12
}
80004456:	10 9c       	mov	r12,r8
80004458:	2f fd       	sub	sp,-4
8000445a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000445e:	00 00       	add	r0,r0
80004460:	00 00       	add	r0,r0
80004462:	06 50       	eor	r0,r3
80004464:	80 00       	ld.sh	r0,r0[0x0]
80004466:	42 64       	lddsp	r4,sp[0x98]

80004468 <sd_mmc_spi_write_close>:
//!
//! @brief This function fills the end of the logical sector (512B) and launch
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{
80004468:	eb cd 40 80 	pushm	r7,lr
8000446c:	1a 97       	mov	r7,sp

}
8000446e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004472:	d7 03       	nop

80004474 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> OK
//!   The read failed (bad address, etc.)  -> KO
//!/
Bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80004474:	eb cd 40 80 	pushm	r7,lr
80004478:	1a 97       	mov	r7,sp
8000447a:	20 5d       	sub	sp,20
8000447c:	ef 4c ff f0 	st.w	r7[-16],r12
  U8 *_ram = ram;
80004480:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004484:	ef 48 ff f8 	st.w	r7[-8],r8
  U16  i;
  U16  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
80004488:	f0 1f 00 5a 	mcall	800045f0 <sd_mmc_spi_read_sector_to_ram+0x17c>
8000448c:	18 98       	mov	r8,r12
8000448e:	58 08       	cp.w	r8,0
80004490:	c0 51       	brne	8000449a <sd_mmc_spi_read_sector_to_ram+0x26>
    return KO;
80004492:	30 08       	mov	r8,0
80004494:	ef 48 ff ec 	st.w	r7[-20],r8
80004498:	ca 68       	rjmp	800045e4 <sd_mmc_spi_read_sector_to_ram+0x170>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000449a:	30 1b       	mov	r11,1
8000449c:	fe 7c 28 00 	mov	r12,-55296
800044a0:	f0 1f 00 55 	mcall	800045f4 <sd_mmc_spi_read_sector_to_ram+0x180>
  // issue command
  r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
800044a4:	4d 58       	lddpc	r8,800045f8 <sd_mmc_spi_read_sector_to_ram+0x184>
800044a6:	70 08       	ld.w	r8,r8[0x0]
800044a8:	10 9b       	mov	r11,r8
800044aa:	31 1c       	mov	r12,17
800044ac:	f0 1f 00 54 	mcall	800045fc <sd_mmc_spi_read_sector_to_ram+0x188>
800044b0:	18 98       	mov	r8,r12
800044b2:	4d 49       	lddpc	r9,80004600 <sd_mmc_spi_read_sector_to_ram+0x18c>
800044b4:	b2 88       	st.b	r9[0x0],r8

  // check for valid response
  if (r1 != 0x00)
800044b6:	4d 38       	lddpc	r8,80004600 <sd_mmc_spi_read_sector_to_ram+0x18c>
800044b8:	11 88       	ld.ub	r8,r8[0x0]
800044ba:	58 08       	cp.w	r8,0
800044bc:	c0 a0       	breq	800044d0 <sd_mmc_spi_read_sector_to_ram+0x5c>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800044be:	30 1b       	mov	r11,1
800044c0:	fe 7c 28 00 	mov	r12,-55296
800044c4:	f0 1f 00 50 	mcall	80004604 <sd_mmc_spi_read_sector_to_ram+0x190>
    return KO;
800044c8:	30 08       	mov	r8,0
800044ca:	ef 48 ff ec 	st.w	r7[-20],r8
800044ce:	c8 b8       	rjmp	800045e4 <sd_mmc_spi_read_sector_to_ram+0x170>
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
800044d0:	e0 68 75 30 	mov	r8,30000
800044d4:	ef 58 ff fe 	st.h	r7[-2],r8
800044d8:	c1 58       	rjmp	80004502 <sd_mmc_spi_read_sector_to_ram+0x8e>
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
800044da:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800044de:	20 18       	sub	r8,1
800044e0:	ef 58 ff fe 	st.h	r7[-2],r8
     if (read_time_out == 0)   // TIME-OUT
800044e4:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800044e8:	30 08       	mov	r8,0
800044ea:	f0 09 19 00 	cp.h	r9,r8
800044ee:	c0 a1       	brne	80004502 <sd_mmc_spi_read_sector_to_ram+0x8e>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
800044f0:	30 1b       	mov	r11,1
800044f2:	fe 7c 28 00 	mov	r12,-55296
800044f6:	f0 1f 00 44 	mcall	80004604 <sd_mmc_spi_read_sector_to_ram+0x190>
       return KO;
800044fa:	30 08       	mov	r8,0
800044fc:	ef 48 ff ec 	st.w	r7[-20],r8
80004500:	c7 28       	rjmp	800045e4 <sd_mmc_spi_read_sector_to_ram+0x170>
    return KO;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80004502:	e0 6c 00 ff 	mov	r12,255
80004506:	f0 1f 00 41 	mcall	80004608 <sd_mmc_spi_read_sector_to_ram+0x194>
8000450a:	18 98       	mov	r8,r12
8000450c:	4b d9       	lddpc	r9,80004600 <sd_mmc_spi_read_sector_to_ram+0x18c>
8000450e:	b2 88       	st.b	r9[0x0],r8
80004510:	4b c8       	lddpc	r8,80004600 <sd_mmc_spi_read_sector_to_ram+0x18c>
80004512:	11 89       	ld.ub	r9,r8[0x0]
80004514:	3f f8       	mov	r8,-1
80004516:	f0 09 18 00 	cp.b	r9,r8
8000451a:	ce 00       	breq	800044da <sd_mmc_spi_read_sector_to_ram+0x66>
       return KO;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000451c:	4b 98       	lddpc	r8,80004600 <sd_mmc_spi_read_sector_to_ram+0x18c>
8000451e:	11 89       	ld.ub	r9,r8[0x0]
80004520:	3f e8       	mov	r8,-2
80004522:	f0 09 18 00 	cp.b	r9,r8
80004526:	c1 00       	breq	80004546 <sd_mmc_spi_read_sector_to_ram+0xd2>
  {
    spi_write(SD_MMC_SPI,0xFF);
80004528:	e0 6b 00 ff 	mov	r11,255
8000452c:	fe 7c 28 00 	mov	r12,-55296
80004530:	f0 1f 00 37 	mcall	8000460c <sd_mmc_spi_read_sector_to_ram+0x198>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80004534:	30 1b       	mov	r11,1
80004536:	fe 7c 28 00 	mov	r12,-55296
8000453a:	f0 1f 00 33 	mcall	80004604 <sd_mmc_spi_read_sector_to_ram+0x190>
    return KO;
8000453e:	30 08       	mov	r8,0
80004540:	ef 48 ff ec 	st.w	r7[-20],r8
80004544:	c5 08       	rjmp	800045e4 <sd_mmc_spi_read_sector_to_ram+0x170>
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80004546:	30 08       	mov	r8,0
80004548:	ef 58 ff fc 	st.h	r7[-4],r8
8000454c:	c1 e8       	rjmp	80004588 <sd_mmc_spi_read_sector_to_ram+0x114>
  {
    spi_write(SD_MMC_SPI,0xFF);
8000454e:	e0 6b 00 ff 	mov	r11,255
80004552:	fe 7c 28 00 	mov	r12,-55296
80004556:	f0 1f 00 2e 	mcall	8000460c <sd_mmc_spi_read_sector_to_ram+0x198>
    spi_read(SD_MMC_SPI,&data_read);
8000455a:	ee c8 00 0a 	sub	r8,r7,10
8000455e:	10 9b       	mov	r11,r8
80004560:	fe 7c 28 00 	mov	r12,-55296
80004564:	f0 1f 00 2b 	mcall	80004610 <sd_mmc_spi_read_sector_to_ram+0x19c>
    *_ram++=data_read;
80004568:	ef 08 ff f6 	ld.sh	r8,r7[-10]
8000456c:	5c 58       	castu.b	r8
8000456e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004572:	b2 88       	st.b	r9[0x0],r8
80004574:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004578:	2f f8       	sub	r8,-1
8000457a:	ef 48 ff f8 	st.w	r7[-8],r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return KO;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
8000457e:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80004582:	2f f8       	sub	r8,-1
80004584:	ef 58 ff fc 	st.h	r7[-4],r8
80004588:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000458c:	e0 68 01 ff 	mov	r8,511
80004590:	f0 09 19 00 	cp.h	r9,r8
80004594:	fe 98 ff dd 	brls	8000454e <sd_mmc_spi_read_sector_to_ram+0xda>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
80004598:	49 88       	lddpc	r8,800045f8 <sd_mmc_spi_read_sector_to_ram+0x184>
8000459a:	70 08       	ld.w	r8,r8[0x0]
8000459c:	f0 c9 fe 00 	sub	r9,r8,-512
800045a0:	49 68       	lddpc	r8,800045f8 <sd_mmc_spi_read_sector_to_ram+0x184>
800045a2:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800045a4:	e0 6b 00 ff 	mov	r11,255
800045a8:	fe 7c 28 00 	mov	r12,-55296
800045ac:	f0 1f 00 18 	mcall	8000460c <sd_mmc_spi_read_sector_to_ram+0x198>
  spi_write(SD_MMC_SPI,0xFF);
800045b0:	e0 6b 00 ff 	mov	r11,255
800045b4:	fe 7c 28 00 	mov	r12,-55296
800045b8:	f0 1f 00 15 	mcall	8000460c <sd_mmc_spi_read_sector_to_ram+0x198>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800045bc:	e0 6b 00 ff 	mov	r11,255
800045c0:	fe 7c 28 00 	mov	r12,-55296
800045c4:	f0 1f 00 12 	mcall	8000460c <sd_mmc_spi_read_sector_to_ram+0x198>
  spi_write(SD_MMC_SPI,0xFF);
800045c8:	e0 6b 00 ff 	mov	r11,255
800045cc:	fe 7c 28 00 	mov	r12,-55296
800045d0:	f0 1f 00 0f 	mcall	8000460c <sd_mmc_spi_read_sector_to_ram+0x198>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800045d4:	30 1b       	mov	r11,1
800045d6:	fe 7c 28 00 	mov	r12,-55296
800045da:	f0 1f 00 0b 	mcall	80004604 <sd_mmc_spi_read_sector_to_ram+0x190>

  return OK;   // Read done.
800045de:	30 18       	mov	r8,1
800045e0:	ef 48 ff ec 	st.w	r7[-20],r8
800045e4:	ee f8 ff ec 	ld.w	r8,r7[-20]
}
800045e8:	10 9c       	mov	r12,r8
800045ea:	2f bd       	sub	sp,-20
800045ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800045f0:	80 00       	ld.sh	r0,r0[0x0]
800045f2:	42 64       	lddsp	r4,sp[0x98]
800045f4:	80 00       	ld.sh	r0,r0[0x0]
800045f6:	22 ac       	sub	r12,42
800045f8:	00 00       	add	r0,r0
800045fa:	06 50       	eor	r0,r3
800045fc:	80 00       	ld.sh	r0,r0[0x0]
800045fe:	3e 84       	mov	r4,-24
80004600:	00 00       	add	r0,r0
80004602:	09 84       	ld.ub	r4,r4[0x0]
80004604:	80 00       	ld.sh	r0,r0[0x0]
80004606:	23 58       	sub	r8,53
80004608:	80 00       	ld.sh	r0,r0[0x0]
8000460a:	3f 68       	mov	r8,-10
8000460c:	80 00       	ld.sh	r0,r0[0x0]
8000460e:	25 9a       	sub	r10,89
80004610:	80 00       	ld.sh	r0,r0[0x0]
80004612:	26 00       	sub	r0,96

80004614 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> OK
//!   The write failed      -> KO
//!
Bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80004614:	eb cd 40 80 	pushm	r7,lr
80004618:	1a 97       	mov	r7,sp
8000461a:	20 4d       	sub	sp,16
8000461c:	ef 4c ff f4 	st.w	r7[-12],r12
  const U8 *_ram = ram;
80004620:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004624:	ef 48 ff f8 	st.w	r7[-8],r8
  U16 i;

  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
80004628:	f0 1f 00 5b 	mcall	80004794 <sd_mmc_spi_write_sector_from_ram+0x180>
8000462c:	18 98       	mov	r8,r12
8000462e:	58 08       	cp.w	r8,0
80004630:	c0 51       	brne	8000463a <sd_mmc_spi_write_sector_from_ram+0x26>
    return KO;
80004632:	30 08       	mov	r8,0
80004634:	ef 48 ff f0 	st.w	r7[-16],r8
80004638:	ca 78       	rjmp	80004786 <sd_mmc_spi_write_sector_from_ram+0x172>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000463a:	30 1b       	mov	r11,1
8000463c:	fe 7c 28 00 	mov	r12,-55296
80004640:	f0 1f 00 56 	mcall	80004798 <sd_mmc_spi_write_sector_from_ram+0x184>
  // issue command
  r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80004644:	4d 68       	lddpc	r8,8000479c <sd_mmc_spi_write_sector_from_ram+0x188>
80004646:	70 08       	ld.w	r8,r8[0x0]
80004648:	10 9b       	mov	r11,r8
8000464a:	31 8c       	mov	r12,24
8000464c:	f0 1f 00 55 	mcall	800047a0 <sd_mmc_spi_write_sector_from_ram+0x18c>
80004650:	18 98       	mov	r8,r12
80004652:	4d 59       	lddpc	r9,800047a4 <sd_mmc_spi_write_sector_from_ram+0x190>
80004654:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if(r1 != 0x00)
80004656:	4d 48       	lddpc	r8,800047a4 <sd_mmc_spi_write_sector_from_ram+0x190>
80004658:	11 88       	ld.ub	r8,r8[0x0]
8000465a:	58 08       	cp.w	r8,0
8000465c:	c0 a0       	breq	80004670 <sd_mmc_spi_write_sector_from_ram+0x5c>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000465e:	30 1b       	mov	r11,1
80004660:	fe 7c 28 00 	mov	r12,-55296
80004664:	f0 1f 00 51 	mcall	800047a8 <sd_mmc_spi_write_sector_from_ram+0x194>
    return KO;
80004668:	30 08       	mov	r8,0
8000466a:	ef 48 ff f0 	st.w	r7[-16],r8
8000466e:	c8 c8       	rjmp	80004786 <sd_mmc_spi_write_sector_from_ram+0x172>
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80004670:	e0 6b 00 ff 	mov	r11,255
80004674:	fe 7c 28 00 	mov	r12,-55296
80004678:	f0 1f 00 4d 	mcall	800047ac <sd_mmc_spi_write_sector_from_ram+0x198>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
8000467c:	e0 6b 00 fe 	mov	r11,254
80004680:	fe 7c 28 00 	mov	r12,-55296
80004684:	f0 1f 00 4a 	mcall	800047ac <sd_mmc_spi_write_sector_from_ram+0x198>
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80004688:	30 08       	mov	r8,0
8000468a:	ef 58 ff fe 	st.h	r7[-2],r8
8000468e:	c1 48       	rjmp	800046b6 <sd_mmc_spi_write_sector_from_ram+0xa2>
  {
    spi_write(SD_MMC_SPI,*_ram++);
80004690:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004694:	11 88       	ld.ub	r8,r8[0x0]
80004696:	10 99       	mov	r9,r8
80004698:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000469c:	2f f8       	sub	r8,-1
8000469e:	ef 48 ff f8 	st.w	r7[-8],r8
800046a2:	12 9b       	mov	r11,r9
800046a4:	fe 7c 28 00 	mov	r12,-55296
800046a8:	f0 1f 00 41 	mcall	800047ac <sd_mmc_spi_write_sector_from_ram+0x198>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800046ac:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800046b0:	2f f8       	sub	r8,-1
800046b2:	ef 58 ff fe 	st.h	r7[-2],r8
800046b6:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800046ba:	e0 68 01 ff 	mov	r8,511
800046be:	f0 09 19 00 	cp.h	r9,r8
800046c2:	fe 98 ff e7 	brls	80004690 <sd_mmc_spi_write_sector_from_ram+0x7c>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800046c6:	e0 6b 00 ff 	mov	r11,255
800046ca:	fe 7c 28 00 	mov	r12,-55296
800046ce:	f0 1f 00 38 	mcall	800047ac <sd_mmc_spi_write_sector_from_ram+0x198>
  spi_write(SD_MMC_SPI,0xFF);
800046d2:	e0 6b 00 ff 	mov	r11,255
800046d6:	fe 7c 28 00 	mov	r12,-55296
800046da:	f0 1f 00 35 	mcall	800047ac <sd_mmc_spi_write_sector_from_ram+0x198>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
800046de:	e0 6c 00 ff 	mov	r12,255
800046e2:	f0 1f 00 34 	mcall	800047b0 <sd_mmc_spi_write_sector_from_ram+0x19c>
800046e6:	18 98       	mov	r8,r12
800046e8:	4a f9       	lddpc	r9,800047a4 <sd_mmc_spi_write_sector_from_ram+0x190>
800046ea:	b2 88       	st.b	r9[0x0],r8
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
800046ec:	4a e8       	lddpc	r8,800047a4 <sd_mmc_spi_write_sector_from_ram+0x190>
800046ee:	11 88       	ld.ub	r8,r8[0x0]
800046f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046f4:	58 58       	cp.w	r8,5
800046f6:	c1 60       	breq	80004722 <sd_mmc_spi_write_sector_from_ram+0x10e>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
800046f8:	e0 6b 00 ff 	mov	r11,255
800046fc:	fe 7c 28 00 	mov	r12,-55296
80004700:	f0 1f 00 2b 	mcall	800047ac <sd_mmc_spi_write_sector_from_ram+0x198>
    spi_write(SD_MMC_SPI,0xFF);
80004704:	e0 6b 00 ff 	mov	r11,255
80004708:	fe 7c 28 00 	mov	r12,-55296
8000470c:	f0 1f 00 28 	mcall	800047ac <sd_mmc_spi_write_sector_from_ram+0x198>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80004710:	30 1b       	mov	r11,1
80004712:	fe 7c 28 00 	mov	r12,-55296
80004716:	f0 1f 00 25 	mcall	800047a8 <sd_mmc_spi_write_sector_from_ram+0x194>
     return KO;
8000471a:	30 08       	mov	r8,0
8000471c:	ef 48 ff f0 	st.w	r7[-16],r8
80004720:	c3 38       	rjmp	80004786 <sd_mmc_spi_write_sector_from_ram+0x172>
//     return r1;             // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80004722:	e0 6b 00 ff 	mov	r11,255
80004726:	fe 7c 28 00 	mov	r12,-55296
8000472a:	f0 1f 00 21 	mcall	800047ac <sd_mmc_spi_write_sector_from_ram+0x198>
  spi_write(SD_MMC_SPI,0xFF);
8000472e:	e0 6b 00 ff 	mov	r11,255
80004732:	fe 7c 28 00 	mov	r12,-55296
80004736:	f0 1f 00 1e 	mcall	800047ac <sd_mmc_spi_write_sector_from_ram+0x198>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000473a:	30 1b       	mov	r11,1
8000473c:	fe 7c 28 00 	mov	r12,-55296
80004740:	f0 1f 00 1a 	mcall	800047a8 <sd_mmc_spi_write_sector_from_ram+0x194>
  gl_ptr_mem += 512;        // Update the memory pointer.
80004744:	49 68       	lddpc	r8,8000479c <sd_mmc_spi_write_sector_from_ram+0x188>
80004746:	70 08       	ld.w	r8,r8[0x0]
80004748:	f0 c9 fe 00 	sub	r9,r8,-512
8000474c:	49 48       	lddpc	r8,8000479c <sd_mmc_spi_write_sector_from_ram+0x188>
8000474e:	91 09       	st.w	r8[0x0],r9

  // wait card not busy after last programming operation
  i=0;
80004750:	30 08       	mov	r8,0
80004752:	ef 58 ff fe 	st.h	r7[-2],r8
80004756:	c1 08       	rjmp	80004776 <sd_mmc_spi_write_sector_from_ram+0x162>
  while (KO == sd_mmc_spi_wait_not_busy())
  {
    i++;
80004758:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000475c:	2f f8       	sub	r8,-1
8000475e:	ef 58 ff fe 	st.h	r7[-2],r8
    if (i == 10)
80004762:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80004766:	30 a8       	mov	r8,10
80004768:	f0 09 19 00 	cp.h	r9,r8
8000476c:	c0 51       	brne	80004776 <sd_mmc_spi_write_sector_from_ram+0x162>
      return KO;
8000476e:	30 08       	mov	r8,0
80004770:	ef 48 ff f0 	st.w	r7[-16],r8
80004774:	c0 98       	rjmp	80004786 <sd_mmc_spi_write_sector_from_ram+0x172>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (KO == sd_mmc_spi_wait_not_busy())
80004776:	f0 1f 00 08 	mcall	80004794 <sd_mmc_spi_write_sector_from_ram+0x180>
8000477a:	18 98       	mov	r8,r12
8000477c:	58 08       	cp.w	r8,0
8000477e:	ce d0       	breq	80004758 <sd_mmc_spi_write_sector_from_ram+0x144>
    i++;
    if (i == 10)
      return KO;
  }

  return OK;                  // Write done
80004780:	30 18       	mov	r8,1
80004782:	ef 48 ff f0 	st.w	r7[-16],r8
80004786:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
8000478a:	10 9c       	mov	r12,r8
8000478c:	2f cd       	sub	sp,-16
8000478e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004792:	00 00       	add	r0,r0
80004794:	80 00       	ld.sh	r0,r0[0x0]
80004796:	42 64       	lddsp	r4,sp[0x98]
80004798:	80 00       	ld.sh	r0,r0[0x0]
8000479a:	22 ac       	sub	r12,42
8000479c:	00 00       	add	r0,r0
8000479e:	06 50       	eor	r0,r3
800047a0:	80 00       	ld.sh	r0,r0[0x0]
800047a2:	3e 84       	mov	r4,-24
800047a4:	00 00       	add	r0,r0
800047a6:	09 84       	ld.ub	r4,r4[0x0]
800047a8:	80 00       	ld.sh	r0,r0[0x0]
800047aa:	23 58       	sub	r8,53
800047ac:	80 00       	ld.sh	r0,r0[0x0]
800047ae:	25 9a       	sub	r10,89
800047b0:	80 00       	ld.sh	r0,r0[0x0]
800047b2:	3f 68       	mov	r8,-10

800047b4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
800047b4:	eb cd 40 80 	pushm	r7,lr
800047b8:	1a 97       	mov	r7,sp
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
800047ba:	f0 1f 00 03 	mcall	800047c4 <sd_mmc_spi_mem_init+0x10>
}
800047be:	e3 cd 80 80 	ldm	sp++,r7,pc
800047c2:	00 00       	add	r0,r0
800047c4:	80 00       	ld.sh	r0,r0[0x0]
800047c6:	3c 20       	mov	r0,-62

800047c8 <sd_mmc_spi_test_unit_ready>:



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
800047c8:	eb cd 40 80 	pushm	r7,lr
800047cc:	1a 97       	mov	r7,sp
800047ce:	20 2d       	sub	sp,8
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
800047d0:	4a 88       	lddpc	r8,80004870 <sd_mmc_spi_test_unit_ready+0xa8>
800047d2:	11 88       	ld.ub	r8,r8[0x0]
800047d4:	ef 48 ff f8 	st.w	r7[-8],r8
800047d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047dc:	58 18       	cp.w	r8,1
800047de:	c1 f0       	breq	8000481c <sd_mmc_spi_test_unit_ready+0x54>
800047e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047e4:	58 28       	cp.w	r8,2
800047e6:	c3 10       	breq	80004848 <sd_mmc_spi_test_unit_ready+0x80>
800047e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047ec:	58 08       	cp.w	r8,0
800047ee:	c3 41       	brne	80004856 <sd_mmc_spi_test_unit_ready+0x8e>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = FALSE;
800047f0:	4a 19       	lddpc	r9,80004874 <sd_mmc_spi_test_unit_ready+0xac>
800047f2:	30 08       	mov	r8,0
800047f4:	b2 88       	st.b	r9[0x0],r8
      if (OK == sd_mmc_spi_mem_check())
800047f6:	f0 1f 00 21 	mcall	80004878 <sd_mmc_spi_test_unit_ready+0xb0>
800047fa:	18 98       	mov	r8,r12
800047fc:	10 99       	mov	r9,r8
800047fe:	30 18       	mov	r8,1
80004800:	f0 09 18 00 	cp.b	r9,r8
80004804:	c0 81       	brne	80004814 <sd_mmc_spi_test_unit_ready+0x4c>
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80004806:	49 b9       	lddpc	r9,80004870 <sd_mmc_spi_test_unit_ready+0xa8>
80004808:	30 18       	mov	r8,1
8000480a:	b2 88       	st.b	r9[0x0],r8
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
8000480c:	30 38       	mov	r8,3
8000480e:	ef 48 ff fc 	st.w	r7[-4],r8
80004812:	c2 88       	rjmp	80004862 <sd_mmc_spi_test_unit_ready+0x9a>
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80004814:	30 28       	mov	r8,2
80004816:	ef 48 ff fc 	st.w	r7[-4],r8
8000481a:	c2 48       	rjmp	80004862 <sd_mmc_spi_test_unit_ready+0x9a>

    case SD_MMC_INSERTED:
      if (OK != sd_mmc_spi_mem_check())
8000481c:	f0 1f 00 17 	mcall	80004878 <sd_mmc_spi_test_unit_ready+0xb0>
80004820:	18 98       	mov	r8,r12
80004822:	10 99       	mov	r9,r8
80004824:	30 18       	mov	r8,1
80004826:	f0 09 18 00 	cp.b	r9,r8
8000482a:	c0 b0       	breq	80004840 <sd_mmc_spi_test_unit_ready+0x78>
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
8000482c:	49 19       	lddpc	r9,80004870 <sd_mmc_spi_test_unit_ready+0xa8>
8000482e:	30 28       	mov	r8,2
80004830:	b2 88       	st.b	r9[0x0],r8
        sd_mmc_spi_init_done = FALSE;
80004832:	49 19       	lddpc	r9,80004874 <sd_mmc_spi_test_unit_ready+0xac>
80004834:	30 08       	mov	r8,0
80004836:	b2 88       	st.b	r9[0x0],r8
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80004838:	30 38       	mov	r8,3
8000483a:	ef 48 ff fc 	st.w	r7[-4],r8
8000483e:	c1 28       	rjmp	80004862 <sd_mmc_spi_test_unit_ready+0x9a>
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;
80004840:	30 08       	mov	r8,0
80004842:	ef 48 ff fc 	st.w	r7[-4],r8
80004846:	c0 e8       	rjmp	80004862 <sd_mmc_spi_test_unit_ready+0x9a>

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80004848:	48 a9       	lddpc	r9,80004870 <sd_mmc_spi_test_unit_ready+0xa8>
8000484a:	30 08       	mov	r8,0
8000484c:	b2 88       	st.b	r9[0x0],r8
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
8000484e:	30 28       	mov	r8,2
80004850:	ef 48 ff fc 	st.w	r7[-4],r8
80004854:	c0 78       	rjmp	80004862 <sd_mmc_spi_test_unit_ready+0x9a>

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80004856:	48 79       	lddpc	r9,80004870 <sd_mmc_spi_test_unit_ready+0xa8>
80004858:	30 08       	mov	r8,0
8000485a:	b2 88       	st.b	r9[0x0],r8
      Sd_mmc_spi_access_signal_off();
      return CTRL_BUSY;
8000485c:	30 38       	mov	r8,3
8000485e:	ef 48 ff fc 	st.w	r7[-4],r8
80004862:	ee f8 ff fc 	ld.w	r8,r7[-4]
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80004866:	10 9c       	mov	r12,r8
80004868:	2f ed       	sub	sp,-8
8000486a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000486e:	00 00       	add	r0,r0
80004870:	00 00       	add	r0,r0
80004872:	00 28       	rsub	r8,r0
80004874:	00 00       	add	r0,r0
80004876:	06 4c       	or	r12,r3
80004878:	80 00       	ld.sh	r0,r0[0x0]
8000487a:	43 9c       	lddsp	r12,sp[0xe4]

8000487c <sd_mmc_spi_read_capacity>:



Ctrl_status sd_mmc_spi_read_capacity(U32 *u32_nb_sector)
{
8000487c:	eb cd 40 80 	pushm	r7,lr
80004880:	1a 97       	mov	r7,sp
80004882:	20 2d       	sub	sp,8
80004884:	ef 4c ff fc 	st.w	r7[-4],r12
//   sd_mmc_spi_check_presence();   // ommited because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (sd_mmc_spi_init_done == FALSE)
80004888:	49 08       	lddpc	r8,800048c8 <sd_mmc_spi_read_capacity+0x4c>
8000488a:	11 88       	ld.ub	r8,r8[0x0]
8000488c:	58 08       	cp.w	r8,0
8000488e:	c0 31       	brne	80004894 <sd_mmc_spi_read_capacity+0x18>
   {
      sd_mmc_spi_mem_init();
80004890:	f0 1f 00 0f 	mcall	800048cc <sd_mmc_spi_read_capacity+0x50>
   }

   if (sd_mmc_spi_init_done == TRUE)
80004894:	48 d8       	lddpc	r8,800048c8 <sd_mmc_spi_read_capacity+0x4c>
80004896:	11 89       	ld.ub	r9,r8[0x0]
80004898:	30 18       	mov	r8,1
8000489a:	f0 09 18 00 	cp.b	r9,r8
8000489e:	c0 c1       	brne	800048b6 <sd_mmc_spi_read_capacity+0x3a>
   {
     *u32_nb_sector = sd_mmc_spi_last_block_address+1;
800048a0:	48 c8       	lddpc	r8,800048d0 <sd_mmc_spi_read_capacity+0x54>
800048a2:	70 08       	ld.w	r8,r8[0x0]
800048a4:	f0 c9 ff ff 	sub	r9,r8,-1
800048a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048ac:	91 09       	st.w	r8[0x0],r9
     Sd_mmc_spi_access_signal_off();
     return CTRL_GOOD;
800048ae:	30 08       	mov	r8,0
800048b0:	ef 48 ff f8 	st.w	r7[-8],r8
800048b4:	c0 48       	rjmp	800048bc <sd_mmc_spi_read_capacity+0x40>
   }
   else
   {
     Sd_mmc_spi_access_signal_off();
     return CTRL_NO_PRESENT;
800048b6:	30 28       	mov	r8,2
800048b8:	ef 48 ff f8 	st.w	r7[-8],r8
800048bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
   }
}
800048c0:	10 9c       	mov	r12,r8
800048c2:	2f ed       	sub	sp,-8
800048c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800048c8:	00 00       	add	r0,r0
800048ca:	06 4c       	or	r12,r3
800048cc:	80 00       	ld.sh	r0,r0[0x0]
800048ce:	47 b4       	lddsp	r4,sp[0x1ec]
800048d0:	00 00       	add	r0,r0
800048d2:	09 6c       	ld.uh	r12,--r4

800048d4 <sd_mmc_spi_wr_protect>:
//! which cannot be for a SD_MMC.
//!
//! @return FALSE  -> the memory is not write-protected (always)
//!/
Bool  sd_mmc_spi_wr_protect(void)
{
800048d4:	eb cd 40 80 	pushm	r7,lr
800048d8:	1a 97       	mov	r7,sp
   return FALSE;
800048da:	30 08       	mov	r8,0
}
800048dc:	10 9c       	mov	r12,r8
800048de:	e3 cd 80 80 	ldm	sp++,r7,pc

800048e2 <sd_mmc_spi_removal>:
//! @brief This function tells if the memory has been removed or not.
//!
//! @return FALSE  -> The memory isn't removed
//!/
Bool  sd_mmc_spi_removal(void)
{
800048e2:	eb cd 40 80 	pushm	r7,lr
800048e6:	1a 97       	mov	r7,sp
  return FALSE;
800048e8:	30 08       	mov	r8,0
//  return ((OK == sd_mmc_spi_check_presence()) ? FALSE : TRUE);
}
800048ea:	10 9c       	mov	r12,r8
800048ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800048f0 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == ENABLED

Ctrl_status sd_mmc_spi_mem_2_ram(U32 addr, void *ram)
{
800048f0:	eb cd 40 80 	pushm	r7,lr
800048f4:	1a 97       	mov	r7,sp
800048f6:	20 3d       	sub	sp,12
800048f8:	ef 4c ff fc 	st.w	r7[-4],r12
800048fc:	ef 4b ff f8 	st.w	r7[-8],r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80004900:	f0 1f 00 17 	mcall	8000495c <sd_mmc_spi_mem_2_ram+0x6c>

   if (sd_mmc_spi_init_done == FALSE)
80004904:	49 78       	lddpc	r8,80004960 <sd_mmc_spi_mem_2_ram+0x70>
80004906:	11 88       	ld.ub	r8,r8[0x0]
80004908:	58 08       	cp.w	r8,0
8000490a:	c0 31       	brne	80004910 <sd_mmc_spi_mem_2_ram+0x20>
   {
      sd_mmc_spi_mem_init();
8000490c:	f0 1f 00 16 	mcall	80004964 <sd_mmc_spi_mem_2_ram+0x74>
   }

   if (sd_mmc_spi_init_done == TRUE)
80004910:	49 48       	lddpc	r8,80004960 <sd_mmc_spi_mem_2_ram+0x70>
80004912:	11 89       	ld.ub	r9,r8[0x0]
80004914:	30 18       	mov	r8,1
80004916:	f0 09 18 00 	cp.b	r9,r8
8000491a:	c1 81       	brne	8000494a <sd_mmc_spi_mem_2_ram+0x5a>
   {
     sd_mmc_spi_read_open(addr);
8000491c:	ee fc ff fc 	ld.w	r12,r7[-4]
80004920:	f0 1f 00 12 	mcall	80004968 <sd_mmc_spi_mem_2_ram+0x78>
     if (KO == sd_mmc_spi_read_sector_to_ram(ram))
80004924:	ee fc ff f8 	ld.w	r12,r7[-8]
80004928:	f0 1f 00 11 	mcall	8000496c <sd_mmc_spi_mem_2_ram+0x7c>
8000492c:	18 98       	mov	r8,r12
8000492e:	58 08       	cp.w	r8,0
80004930:	c0 71       	brne	8000493e <sd_mmc_spi_mem_2_ram+0x4e>
     {
       sd_mmc_spi_write_close();
80004932:	f0 1f 00 10 	mcall	80004970 <sd_mmc_spi_mem_2_ram+0x80>
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80004936:	30 28       	mov	r8,2
80004938:	ef 48 ff f4 	st.w	r7[-12],r8
8000493c:	c0 a8       	rjmp	80004950 <sd_mmc_spi_mem_2_ram+0x60>
     }
     sd_mmc_spi_read_close();
8000493e:	f0 1f 00 0e 	mcall	80004974 <sd_mmc_spi_mem_2_ram+0x84>
     Sd_mmc_spi_access_signal_off();
     return CTRL_GOOD;
80004942:	30 08       	mov	r8,0
80004944:	ef 48 ff f4 	st.w	r7[-12],r8
80004948:	c0 48       	rjmp	80004950 <sd_mmc_spi_mem_2_ram+0x60>
   }
   Sd_mmc_spi_access_signal_off();

   return CTRL_NO_PRESENT;
8000494a:	30 28       	mov	r8,2
8000494c:	ef 48 ff f4 	st.w	r7[-12],r8
80004950:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80004954:	10 9c       	mov	r12,r8
80004956:	2f dd       	sub	sp,-12
80004958:	e3 cd 80 80 	ldm	sp++,r7,pc
8000495c:	80 00       	ld.sh	r0,r0[0x0]
8000495e:	42 f0       	lddsp	r0,sp[0xbc]
80004960:	00 00       	add	r0,r0
80004962:	06 4c       	or	r12,r3
80004964:	80 00       	ld.sh	r0,r0[0x0]
80004966:	47 b4       	lddsp	r4,sp[0x1ec]
80004968:	80 00       	ld.sh	r0,r0[0x0]
8000496a:	43 fc       	lddsp	r12,sp[0xfc]
8000496c:	80 00       	ld.sh	r0,r0[0x0]
8000496e:	44 74       	lddsp	r4,sp[0x11c]
80004970:	80 00       	ld.sh	r0,r0[0x0]
80004972:	44 68       	lddsp	r8,sp[0x118]
80004974:	80 00       	ld.sh	r0,r0[0x0]
80004976:	44 2c       	lddsp	r12,sp[0x108]

80004978 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(U32 addr, const void *ram)
{
80004978:	eb cd 40 80 	pushm	r7,lr
8000497c:	1a 97       	mov	r7,sp
8000497e:	20 3d       	sub	sp,12
80004980:	ef 4c ff fc 	st.w	r7[-4],r12
80004984:	ef 4b ff f8 	st.w	r7[-8],r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80004988:	f0 1f 00 17 	mcall	800049e4 <sd_mmc_spi_ram_2_mem+0x6c>

   if (sd_mmc_spi_init_done == FALSE)
8000498c:	49 78       	lddpc	r8,800049e8 <sd_mmc_spi_ram_2_mem+0x70>
8000498e:	11 88       	ld.ub	r8,r8[0x0]
80004990:	58 08       	cp.w	r8,0
80004992:	c0 31       	brne	80004998 <sd_mmc_spi_ram_2_mem+0x20>
   {
      sd_mmc_spi_mem_init();
80004994:	f0 1f 00 16 	mcall	800049ec <sd_mmc_spi_ram_2_mem+0x74>
   }

   if (sd_mmc_spi_init_done == TRUE)
80004998:	49 48       	lddpc	r8,800049e8 <sd_mmc_spi_ram_2_mem+0x70>
8000499a:	11 89       	ld.ub	r9,r8[0x0]
8000499c:	30 18       	mov	r8,1
8000499e:	f0 09 18 00 	cp.b	r9,r8
800049a2:	c1 81       	brne	800049d2 <sd_mmc_spi_ram_2_mem+0x5a>
   {
     sd_mmc_spi_write_open(addr);
800049a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800049a8:	f0 1f 00 12 	mcall	800049f0 <sd_mmc_spi_ram_2_mem+0x78>
     if (KO == sd_mmc_spi_write_sector_from_ram(ram))
800049ac:	ee fc ff f8 	ld.w	r12,r7[-8]
800049b0:	f0 1f 00 11 	mcall	800049f4 <sd_mmc_spi_ram_2_mem+0x7c>
800049b4:	18 98       	mov	r8,r12
800049b6:	58 08       	cp.w	r8,0
800049b8:	c0 71       	brne	800049c6 <sd_mmc_spi_ram_2_mem+0x4e>
     {
       sd_mmc_spi_write_close();
800049ba:	f0 1f 00 10 	mcall	800049f8 <sd_mmc_spi_ram_2_mem+0x80>
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
800049be:	30 28       	mov	r8,2
800049c0:	ef 48 ff f4 	st.w	r7[-12],r8
800049c4:	c0 a8       	rjmp	800049d8 <sd_mmc_spi_ram_2_mem+0x60>
     }
     sd_mmc_spi_write_close();
800049c6:	f0 1f 00 0d 	mcall	800049f8 <sd_mmc_spi_ram_2_mem+0x80>
     Sd_mmc_spi_access_signal_off();
     return CTRL_GOOD;
800049ca:	30 08       	mov	r8,0
800049cc:	ef 48 ff f4 	st.w	r7[-12],r8
800049d0:	c0 48       	rjmp	800049d8 <sd_mmc_spi_ram_2_mem+0x60>
   }
   Sd_mmc_spi_access_signal_off();

   return CTRL_NO_PRESENT;
800049d2:	30 28       	mov	r8,2
800049d4:	ef 48 ff f4 	st.w	r7[-12],r8
800049d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
800049dc:	10 9c       	mov	r12,r8
800049de:	2f dd       	sub	sp,-12
800049e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800049e4:	80 00       	ld.sh	r0,r0[0x0]
800049e6:	42 f0       	lddsp	r0,sp[0xbc]
800049e8:	00 00       	add	r0,r0
800049ea:	06 4c       	or	r12,r3
800049ec:	80 00       	ld.sh	r0,r0[0x0]
800049ee:	47 b4       	lddsp	r4,sp[0x1ec]
800049f0:	80 00       	ld.sh	r0,r0[0x0]
800049f2:	44 38       	lddsp	r8,sp[0x10c]
800049f4:	80 00       	ld.sh	r0,r0[0x0]
800049f6:	46 14       	lddsp	r4,sp[0x184]
800049f8:	80 00       	ld.sh	r0,r0[0x0]
800049fa:	44 68       	lddsp	r8,sp[0x118]

800049fc <usb_init_device>:
//!  configures the Default Control Endpoint.
//!
//! @return Status
//!
Status_bool_t usb_init_device(void)
{
800049fc:	eb cd 40 80 	pushm	r7,lr
80004a00:	1a 97       	mov	r7,sp
80004a02:	20 7d       	sub	sp,28
  return Is_usb_id_device() && !Is_usb_endpoint_enabled(EP_CONTROL) &&
80004a04:	fe 68 00 00 	mov	r8,-131072
80004a08:	f0 f8 08 04 	ld.w	r8,r8[2052]
80004a0c:	e2 18 04 00 	andl	r8,0x400,COH
80004a10:	c5 30       	breq	80004ab6 <usb_init_device+0xba>
80004a12:	fe 68 00 00 	mov	r8,-131072
80004a16:	70 78       	ld.w	r8,r8[0x1c]
80004a18:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004a1c:	c4 d1       	brne	80004ab6 <usb_init_device+0xba>
80004a1e:	fe 69 00 00 	mov	r9,-131072
80004a22:	fe 68 00 00 	mov	r8,-131072
80004a26:	70 78       	ld.w	r8,r8[0x1c]
80004a28:	a1 a8       	sbr	r8,0x0
80004a2a:	93 78       	st.w	r9[0x1c],r8
80004a2c:	fe 6a 01 00 	mov	r10,-130816
80004a30:	fe 68 01 00 	mov	r8,-130816
80004a34:	70 08       	ld.w	r8,r8[0x0]
80004a36:	10 9b       	mov	r11,r8
80004a38:	e0 1b e6 83 	andl	r11,0xe683
         Usb_configure_endpoint(EP_CONTROL,
80004a3c:	34 08       	mov	r8,64
80004a3e:	ef 48 ff f8 	st.w	r7[-8],r8
80004a42:	30 88       	mov	r8,8
80004a44:	ef 48 ff fc 	st.w	r7[-4],r8
80004a48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004a4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a50:	f2 08 0c 48 	max	r8,r9,r8
80004a54:	ef 48 ff f4 	st.w	r7[-12],r8
80004a58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a5c:	ef 48 ff ec 	st.w	r7[-20],r8
80004a60:	e0 68 04 00 	mov	r8,1024
80004a64:	ef 48 ff f0 	st.w	r7[-16],r8
80004a68:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004a6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a70:	f2 08 0d 48 	min	r8,r9,r8
80004a74:	ef 48 ff e8 	st.w	r7[-24],r8
80004a78:	ee f8 ff e8 	ld.w	r8,r7[-24]
//!
//! @return Status
//!
Status_bool_t usb_init_device(void)
{
  return Is_usb_id_device() && !Is_usb_endpoint_enabled(EP_CONTROL) &&
80004a7c:	a1 78       	lsl	r8,0x1
80004a7e:	20 18       	sub	r8,1
80004a80:	f0 08 12 00 	clz	r8,r8
80004a84:	f0 08 11 1c 	rsub	r8,r8,28
80004a88:	a5 68       	lsl	r8,0x4
80004a8a:	e2 18 19 7c 	andl	r8,0x197c,COH
80004a8e:	f7 e8 10 08 	or	r8,r11,r8
80004a92:	95 08       	st.w	r10[0x0],r8
80004a94:	fe 69 01 00 	mov	r9,-130816
80004a98:	fe 68 01 00 	mov	r8,-130816
80004a9c:	70 08       	ld.w	r8,r8[0x0]
80004a9e:	a1 b8       	sbr	r8,0x1
80004aa0:	93 08       	st.w	r9[0x0],r8
80004aa2:	fe 68 01 30 	mov	r8,-130768
80004aa6:	70 08       	ld.w	r8,r8[0x0]
80004aa8:	e6 18 00 04 	andh	r8,0x4,COH
80004aac:	c0 50       	breq	80004ab6 <usb_init_device+0xba>
80004aae:	30 18       	mov	r8,1
80004ab0:	ef 48 ff e4 	st.w	r7[-28],r8
80004ab4:	c0 48       	rjmp	80004abc <usb_init_device+0xc0>
80004ab6:	30 08       	mov	r8,0
80004ab8:	ef 48 ff e4 	st.w	r7[-28],r8
80004abc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004ac0:	5c 58       	castu.b	r8
         Usb_configure_endpoint(EP_CONTROL,
                                TYPE_CONTROL,
                                DIRECTION_OUT,
                                EP_CONTROL_LENGTH,
                                SINGLE_BANK);
}
80004ac2:	10 9c       	mov	r12,r8
80004ac4:	2f 9d       	sub	sp,-28
80004ac6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004aca:	d7 03       	nop

80004acc <usb_write_ep_txpacket>:
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
80004acc:	eb cd 40 80 	pushm	r7,lr
80004ad0:	1a 97       	mov	r7,sp
80004ad2:	21 1d       	sub	sp,68
80004ad4:	18 98       	mov	r8,r12
80004ad6:	ef 4b ff c4 	st.w	r7[-60],r11
80004ada:	ef 4a ff c0 	st.w	r7[-64],r10
80004ade:	ef 49 ff bc 	st.w	r7[-68],r9
80004ae2:	ef 68 ff c8 	st.b	r7[-56],r8
#else
  UnionCPtr   txbuf_end;
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
80004ae6:	ef 39 ff c8 	ld.ub	r9,r7[-56]
80004aea:	fe f8 02 26 	ld.w	r8,pc[550]
80004aee:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004af2:	ef 48 ff f0 	st.w	r7[-16],r8
  txbuf_cur.u8ptr = txbuf;
80004af6:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004afa:	ef 48 ff ec 	st.w	r7[-20],r8
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
80004afe:	ee fa ff ec 	ld.w	r10,r7[-20]
                    min(data_length, Usb_get_endpoint_size(ep) - Usb_byte_count(ep));
80004b02:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004b06:	ef 48 ff f8 	st.w	r7[-8],r8
80004b0a:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80004b0e:	a3 68       	lsl	r8,0x2
80004b10:	e0 38 ff 00 	sub	r8,130816
80004b14:	70 08       	ld.w	r8,r8[0x0]
80004b16:	e2 18 00 70 	andl	r8,0x70,COH
80004b1a:	a5 88       	lsr	r8,0x4
80004b1c:	10 99       	mov	r9,r8
80004b1e:	30 88       	mov	r8,8
80004b20:	f0 09 09 48 	lsl	r8,r8,r9
80004b24:	10 99       	mov	r9,r8
80004b26:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80004b2a:	a3 68       	lsl	r8,0x2
80004b2c:	e0 38 fe d0 	sub	r8,130768
80004b30:	70 08       	ld.w	r8,r8[0x0]
80004b32:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80004b36:	b5 88       	lsr	r8,0x14
80004b38:	f2 08 01 08 	sub	r8,r9,r8
80004b3c:	ef 48 ff fc 	st.w	r7[-4],r8
80004b40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b48:	f2 08 0d 48 	min	r8,r9,r8
80004b4c:	ef 48 ff f4 	st.w	r7[-12],r8
80004b50:	ee f8 ff f4 	ld.w	r8,r7[-12]
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  txbuf_cur.u8ptr = txbuf;
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
80004b54:	f4 08 00 08 	add	r8,r10,r8
80004b58:	ef 48 ff e8 	st.w	r7[-24],r8
                    min(data_length, Usb_get_endpoint_size(ep) - Usb_byte_count(ep));
#if (!defined __OPTIMIZE_SIZE__) || !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  txbuf_end.u16ptr = (U16 *)Align_down((U32)txbuf_end.u8ptr, sizeof(U16));
80004b5c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004b60:	a1 c8       	cbr	r8,0x0
80004b62:	ef 48 ff e0 	st.w	r7[-32],r8
  txbuf_end.u32ptr = (U32 *)Align_down((U32)txbuf_end.u16ptr, sizeof(U32));
80004b66:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004b6a:	e0 18 ff fc 	andl	r8,0xfffc
80004b6e:	ef 48 ff d8 	st.w	r7[-40],r8
  txbuf_end.u64ptr = (U64 *)Align_down((U32)txbuf_end.u32ptr, sizeof(U64));
80004b72:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004b76:	e0 18 ff f8 	andl	r8,0xfff8
80004b7a:	ef 48 ff d0 	st.w	r7[-48],r8

  // If all addresses are aligned the same way with respect to 16-bit boundaries
  if (Get_align((U32)txbuf_cur.u8ptr, sizeof(U16)) == Get_align((U32)ep_fifo.u8ptr, sizeof(U16)))
80004b7e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004b82:	10 99       	mov	r9,r8
80004b84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004b88:	f3 e8 20 08 	eor	r8,r9,r8
80004b8c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004b90:	e0 81 00 9a 	brne	80004cc4 <usb_write_ep_txpacket+0x1f8>
  {
    // If pointer to transmission buffer is not 16-bit aligned
    if (!Test_align((U32)txbuf_cur.u8ptr, sizeof(U16)))
80004b94:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004b98:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004b9c:	c1 50       	breq	80004bc6 <usb_write_ep_txpacket+0xfa>
    {
      // Copy 8-bit data to reach 16-bit alignment
      if (txbuf_cur.u8ptr < txbuf_end.u8ptr)
80004b9e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004ba2:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004ba6:	10 39       	cp.w	r9,r8
80004ba8:	c0 f2       	brcc	80004bc6 <usb_write_ep_txpacket+0xfa>
      {
        // 8-bit accesses to FIFO data registers do require pointer post-increment
        *ep_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
80004baa:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004bae:	ee fa ff ec 	ld.w	r10,r7[-20]
80004bb2:	15 88       	ld.ub	r8,r10[0x0]
80004bb4:	b2 88       	st.b	r9[0x0],r8
80004bb6:	f2 c8 ff ff 	sub	r8,r9,-1
80004bba:	ef 48 ff f0 	st.w	r7[-16],r8
80004bbe:	f4 c8 ff ff 	sub	r8,r10,-1
80004bc2:	ef 48 ff ec 	st.w	r7[-20],r8
      }
    }

    // If all addresses are aligned the same way with respect to 32-bit boundaries
    if (Get_align((U32)txbuf_cur.u16ptr, sizeof(U32)) == Get_align((U32)ep_fifo.u16ptr, sizeof(U32)))
80004bc6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004bca:	10 99       	mov	r9,r8
80004bcc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004bd0:	f3 e8 20 08 	eor	r8,r9,r8
80004bd4:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004bd8:	c6 11       	brne	80004c9a <usb_write_ep_txpacket+0x1ce>
    {
      // If pointer to transmission buffer is not 32-bit aligned
      if (!Test_align((U32)txbuf_cur.u16ptr, sizeof(U32)))
80004bda:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004bde:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004be2:	c1 50       	breq	80004c0c <usb_write_ep_txpacket+0x140>
      {
        // Copy 16-bit data to reach 32-bit alignment
        if (txbuf_cur.u16ptr < txbuf_end.u16ptr)
80004be4:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004be8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004bec:	10 39       	cp.w	r9,r8
80004bee:	c0 f2       	brcc	80004c0c <usb_write_ep_txpacket+0x140>
        {
          // 16-bit accesses to FIFO data registers do require pointer post-increment
          *ep_fifo.u16ptr++ = *txbuf_cur.u16ptr++;
80004bf0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004bf4:	ee fa ff ec 	ld.w	r10,r7[-20]
80004bf8:	94 08       	ld.sh	r8,r10[0x0]
80004bfa:	b2 08       	st.h	r9[0x0],r8
80004bfc:	f2 c8 ff fe 	sub	r8,r9,-2
80004c00:	ef 48 ff f0 	st.w	r7[-16],r8
80004c04:	f4 c8 ff fe 	sub	r8,r10,-2
80004c08:	ef 48 ff ec 	st.w	r7[-20],r8
        }
      }

      // If pointer to transmission buffer is not 64-bit aligned
      if (!Test_align((U32)txbuf_cur.u32ptr, sizeof(U64)))
80004c0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004c10:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004c14:	c1 e0       	breq	80004c50 <usb_write_ep_txpacket+0x184>
      {
        // Copy 32-bit data to reach 64-bit alignment
        if (txbuf_cur.u32ptr < txbuf_end.u32ptr)
80004c16:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004c1a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004c1e:	10 39       	cp.w	r9,r8
80004c20:	c1 82       	brcc	80004c50 <usb_write_ep_txpacket+0x184>
        {
          // 32-bit accesses to FIFO data registers do not require pointer post-increment
          *ep_fifo.u32ptr = *txbuf_cur.u32ptr++;
80004c22:	ee fa ff f0 	ld.w	r10,r7[-16]
80004c26:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004c2a:	72 08       	ld.w	r8,r9[0x0]
80004c2c:	95 08       	st.w	r10[0x0],r8
80004c2e:	f2 c8 ff fc 	sub	r8,r9,-4
80004c32:	ef 48 ff ec 	st.w	r7[-20],r8
80004c36:	c0 d8       	rjmp	80004c50 <usb_write_ep_txpacket+0x184>

      // Copy 64-bit-aligned data
      while (txbuf_cur.u64ptr < txbuf_end.u64ptr)
      {
        // 64-bit accesses to FIFO data registers do not require pointer post-increment
        *ep_fifo.u64ptr = *txbuf_cur.u64ptr++;
80004c38:	ee fb ff f0 	ld.w	r11,r7[-16]
80004c3c:	ee fa ff ec 	ld.w	r10,r7[-20]
80004c40:	f4 e8 00 00 	ld.d	r8,r10[0]
80004c44:	f6 e9 00 00 	st.d	r11[0],r8
80004c48:	f4 c8 ff f8 	sub	r8,r10,-8
80004c4c:	ef 48 ff ec 	st.w	r7[-20],r8
          *ep_fifo.u32ptr = *txbuf_cur.u32ptr++;
        }
      }

      // Copy 64-bit-aligned data
      while (txbuf_cur.u64ptr < txbuf_end.u64ptr)
80004c50:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004c54:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004c58:	10 39       	cp.w	r9,r8
80004c5a:	ce f3       	brcs	80004c38 <usb_write_ep_txpacket+0x16c>
        // 64-bit accesses to FIFO data registers do not require pointer post-increment
        *ep_fifo.u64ptr = *txbuf_cur.u64ptr++;
      }

      // Copy 32-bit-aligned data
      if (txbuf_cur.u32ptr < txbuf_end.u32ptr)
80004c5c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004c60:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004c64:	10 39       	cp.w	r9,r8
80004c66:	c1 a2       	brcc	80004c9a <usb_write_ep_txpacket+0x1ce>
      {
        // 32-bit accesses to FIFO data registers do not require pointer post-increment
        *ep_fifo.u32ptr = *txbuf_cur.u32ptr++;
80004c68:	ee fa ff f0 	ld.w	r10,r7[-16]
80004c6c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004c70:	72 08       	ld.w	r8,r9[0x0]
80004c72:	95 08       	st.w	r10[0x0],r8
80004c74:	f2 c8 ff fc 	sub	r8,r9,-4
80004c78:	ef 48 ff ec 	st.w	r7[-20],r8
80004c7c:	c0 f8       	rjmp	80004c9a <usb_write_ep_txpacket+0x1ce>

    // Copy remaining 16-bit data if some
    while (txbuf_cur.u16ptr < txbuf_end.u16ptr)
    {
      // 16-bit accesses to FIFO data registers do require pointer post-increment
      *ep_fifo.u16ptr++ = *txbuf_cur.u16ptr++;
80004c7e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004c82:	ee fa ff ec 	ld.w	r10,r7[-20]
80004c86:	94 08       	ld.sh	r8,r10[0x0]
80004c88:	b2 08       	st.h	r9[0x0],r8
80004c8a:	f2 c8 ff fe 	sub	r8,r9,-2
80004c8e:	ef 48 ff f0 	st.w	r7[-16],r8
80004c92:	f4 c8 ff fe 	sub	r8,r10,-2
80004c96:	ef 48 ff ec 	st.w	r7[-20],r8
        *ep_fifo.u32ptr = *txbuf_cur.u32ptr++;
      }
    }

    // Copy remaining 16-bit data if some
    while (txbuf_cur.u16ptr < txbuf_end.u16ptr)
80004c9a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004c9e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004ca2:	10 39       	cp.w	r9,r8
80004ca4:	ce d3       	brcs	80004c7e <usb_write_ep_txpacket+0x1b2>
80004ca6:	c0 f8       	rjmp	80004cc4 <usb_write_ep_txpacket+0x1f8>

  // Copy remaining 8-bit data if some
  while (txbuf_cur.u8ptr < txbuf_end.u8ptr)
  {
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *ep_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
80004ca8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004cac:	ee fa ff ec 	ld.w	r10,r7[-20]
80004cb0:	15 88       	ld.ub	r8,r10[0x0]
80004cb2:	b2 88       	st.b	r9[0x0],r8
80004cb4:	f2 c8 ff ff 	sub	r8,r9,-1
80004cb8:	ef 48 ff f0 	st.w	r7[-16],r8
80004cbc:	f4 c8 ff ff 	sub	r8,r10,-1
80004cc0:	ef 48 ff ec 	st.w	r7[-20],r8
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (txbuf_cur.u8ptr < txbuf_end.u8ptr)
80004cc4:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004cc8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004ccc:	10 39       	cp.w	r9,r8
80004cce:	ce d3       	brcs	80004ca8 <usb_write_ep_txpacket+0x1dc>
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *ep_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
  }

  // Save current position in FIFO data register
  pep_fifo[ep].u8ptr = ep_fifo.u8ptr;
80004cd0:	ef 3a ff c8 	ld.ub	r10,r7[-56]
80004cd4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004cd8:	48 e8       	lddpc	r8,80004d10 <usb_write_ep_txpacket+0x244>
80004cda:	f0 0a 09 29 	st.w	r8[r10<<0x2],r9

  // Return the updated buffer address and the number of non-copied bytes
  if (ptxbuf) *ptxbuf = txbuf_cur.u8ptr;
80004cde:	ee f8 ff bc 	ld.w	r8,r7[-68]
80004ce2:	58 08       	cp.w	r8,0
80004ce4:	c0 60       	breq	80004cf0 <usb_write_ep_txpacket+0x224>
80004ce6:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004cea:	ee f8 ff bc 	ld.w	r8,r7[-68]
80004cee:	91 09       	st.w	r8[0x0],r9
  return data_length - (txbuf_cur.u8ptr - (U8 *)txbuf);
80004cf0:	ee f9 ff c4 	ld.w	r9,r7[-60]
80004cf4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004cf8:	f2 08 01 08 	sub	r8,r9,r8
80004cfc:	10 99       	mov	r9,r8
80004cfe:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004d02:	f2 08 00 08 	add	r8,r9,r8
}
80004d06:	10 9c       	mov	r12,r8
80004d08:	2e fd       	sub	sp,-68
80004d0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d0e:	00 00       	add	r0,r0
80004d10:	00 00       	add	r0,r0
80004d12:	09 88       	ld.ub	r8,r4[0x0]

80004d14 <host_disable_all_pipes>:
//!  Useful to execute upon disconnection.
//!
//! @return Void
//!
void host_disable_all_pipes(void)
{
80004d14:	eb cd 40 80 	pushm	r7,lr
80004d18:	1a 97       	mov	r7,sp
80004d1a:	20 1d       	sub	sp,4

#if USB_HOST_PIPE_INTERRUPT_TRANSFER == ENABLE
  // Disable global interrupts
  if ((sav_glob_int_en = Is_global_interrupt_enabled())) Disable_global_interrupt();
#endif
  for (p = 0; p < MAX_PEP_NB; p++)
80004d1c:	30 08       	mov	r8,0
80004d1e:	ef 68 ff ff 	st.b	r7[-1],r8
80004d22:	c5 08       	rjmp	80004dc2 <host_disable_all_pipes+0xae>
  { // Disable the pipe <p> (disable interrupt, free memory, reset pipe, ...)
    Host_disable_pipe_interrupt(p);
80004d24:	fe 6a 00 00 	mov	r10,-131072
80004d28:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004d2c:	e0 68 01 00 	mov	r8,256
80004d30:	f0 09 09 48 	lsl	r8,r8,r9
80004d34:	f5 48 04 14 	st.w	r10[1044],r8
    Host_reset_pipe(p);
80004d38:	fe 6b 00 00 	mov	r11,-131072
80004d3c:	fe 68 00 00 	mov	r8,-131072
80004d40:	f0 fa 04 1c 	ld.w	r10,r8[1052]
80004d44:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004d48:	e0 78 00 00 	mov	r8,65536
80004d4c:	f0 09 09 48 	lsl	r8,r8,r9
80004d50:	f5 e8 10 08 	or	r8,r10,r8
80004d54:	f7 48 04 1c 	st.w	r11[1052],r8
80004d58:	fe 6a 00 00 	mov	r10,-131072
80004d5c:	fe 68 00 00 	mov	r8,-131072
80004d60:	f0 fb 04 1c 	ld.w	r11,r8[1052]
80004d64:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004d68:	e0 78 00 00 	mov	r8,65536
80004d6c:	f0 09 09 48 	lsl	r8,r8,r9
80004d70:	5c d8       	com	r8
80004d72:	f7 e8 00 08 	and	r8,r11,r8
80004d76:	f5 48 04 1c 	st.w	r10[1052],r8
    Host_unallocate_memory(p);
80004d7a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d7e:	a3 68       	lsl	r8,0x2
80004d80:	fe 6a 05 00 	mov	r10,-129792
80004d84:	f0 0a 00 09 	add	r9,r8,r10
80004d88:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d8c:	a3 68       	lsl	r8,0x2
80004d8e:	e0 38 fb 00 	sub	r8,129792
80004d92:	70 08       	ld.w	r8,r8[0x0]
80004d94:	a1 d8       	cbr	r8,0x1
80004d96:	93 08       	st.w	r9[0x0],r8
    Host_disable_pipe(p);
80004d98:	fe 6a 00 00 	mov	r10,-131072
80004d9c:	fe 68 00 00 	mov	r8,-131072
80004da0:	f0 fb 04 1c 	ld.w	r11,r8[1052]
80004da4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004da8:	30 18       	mov	r8,1
80004daa:	f0 09 09 48 	lsl	r8,r8,r9
80004dae:	5c d8       	com	r8
80004db0:	f7 e8 00 08 	and	r8,r11,r8
80004db4:	f5 48 04 1c 	st.w	r10[1052],r8

#if USB_HOST_PIPE_INTERRUPT_TRANSFER == ENABLE
  // Disable global interrupts
  if ((sav_glob_int_en = Is_global_interrupt_enabled())) Disable_global_interrupt();
#endif
  for (p = 0; p < MAX_PEP_NB; p++)
80004db8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004dbc:	2f f8       	sub	r8,-1
80004dbe:	ef 68 ff ff 	st.b	r7[-1],r8
80004dc2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004dc6:	30 68       	mov	r8,6
80004dc8:	f0 09 18 00 	cp.b	r9,r8
80004dcc:	fe 98 ff ac 	brls	80004d24 <host_disable_all_pipes+0x10>
#if USB_HOST_PIPE_INTERRUPT_TRANSFER == ENABLE
  (void)Is_host_pipe_enabled(MAX_PEP_NB - 1);
  // Restore the global interrupts to the initial state
  if (sav_glob_int_en) Enable_global_interrupt();
#endif
}
80004dd0:	2f fd       	sub	sp,-4
80004dd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dd6:	d7 03       	nop

80004dd8 <host_write_p_txpacket>:
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 host_write_p_txpacket(U8 p, const void *txbuf, U32 data_length, const void **ptxbuf)
{
80004dd8:	eb cd 40 80 	pushm	r7,lr
80004ddc:	1a 97       	mov	r7,sp
80004dde:	21 1d       	sub	sp,68
80004de0:	18 98       	mov	r8,r12
80004de2:	ef 4b ff c4 	st.w	r7[-60],r11
80004de6:	ef 4a ff c0 	st.w	r7[-64],r10
80004dea:	ef 49 ff bc 	st.w	r7[-68],r9
80004dee:	ef 68 ff c8 	st.b	r7[-56],r8
#else
  UnionCPtr   txbuf_end;
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  p_fifo.u8ptr = pep_fifo[p].u8ptr;
80004df2:	ef 39 ff c8 	ld.ub	r9,r7[-56]
80004df6:	fe f8 02 26 	ld.w	r8,pc[550]
80004dfa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004dfe:	ef 48 ff f0 	st.w	r7[-16],r8
  txbuf_cur.u8ptr = txbuf;
80004e02:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004e06:	ef 48 ff ec 	st.w	r7[-20],r8
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
80004e0a:	ee fa ff ec 	ld.w	r10,r7[-20]
                    min(data_length, Host_get_pipe_size(p) - Host_byte_count(p));
80004e0e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004e12:	ef 48 ff f8 	st.w	r7[-8],r8
80004e16:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80004e1a:	a3 68       	lsl	r8,0x2
80004e1c:	e0 38 fb 00 	sub	r8,129792
80004e20:	70 08       	ld.w	r8,r8[0x0]
80004e22:	e2 18 00 70 	andl	r8,0x70,COH
80004e26:	a5 88       	lsr	r8,0x4
80004e28:	10 99       	mov	r9,r8
80004e2a:	30 88       	mov	r8,8
80004e2c:	f0 09 09 48 	lsl	r8,r8,r9
80004e30:	10 99       	mov	r9,r8
80004e32:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80004e36:	a3 68       	lsl	r8,0x2
80004e38:	e0 38 fa d0 	sub	r8,129744
80004e3c:	70 08       	ld.w	r8,r8[0x0]
80004e3e:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80004e42:	b5 88       	lsr	r8,0x14
80004e44:	f2 08 01 08 	sub	r8,r9,r8
80004e48:	ef 48 ff fc 	st.w	r7[-4],r8
80004e4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004e50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e54:	f2 08 0d 48 	min	r8,r9,r8
80004e58:	ef 48 ff f4 	st.w	r7[-12],r8
80004e5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  p_fifo.u8ptr = pep_fifo[p].u8ptr;
  txbuf_cur.u8ptr = txbuf;
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
80004e60:	f4 08 00 08 	add	r8,r10,r8
80004e64:	ef 48 ff e8 	st.w	r7[-24],r8
                    min(data_length, Host_get_pipe_size(p) - Host_byte_count(p));
#if (!defined __OPTIMIZE_SIZE__) || !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  txbuf_end.u16ptr = (U16 *)Align_down((U32)txbuf_end.u8ptr, sizeof(U16));
80004e68:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004e6c:	a1 c8       	cbr	r8,0x0
80004e6e:	ef 48 ff e0 	st.w	r7[-32],r8
  txbuf_end.u32ptr = (U32 *)Align_down((U32)txbuf_end.u16ptr, sizeof(U32));
80004e72:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004e76:	e0 18 ff fc 	andl	r8,0xfffc
80004e7a:	ef 48 ff d8 	st.w	r7[-40],r8
  txbuf_end.u64ptr = (U64 *)Align_down((U32)txbuf_end.u32ptr, sizeof(U64));
80004e7e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004e82:	e0 18 ff f8 	andl	r8,0xfff8
80004e86:	ef 48 ff d0 	st.w	r7[-48],r8

  // If all addresses are aligned the same way with respect to 16-bit boundaries
  if (Get_align((U32)txbuf_cur.u8ptr, sizeof(U16)) == Get_align((U32)p_fifo.u8ptr, sizeof(U16)))
80004e8a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004e8e:	10 99       	mov	r9,r8
80004e90:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e94:	f3 e8 20 08 	eor	r8,r9,r8
80004e98:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004e9c:	e0 81 00 9a 	brne	80004fd0 <host_write_p_txpacket+0x1f8>
  {
    // If pointer to transmission buffer is not 16-bit aligned
    if (!Test_align((U32)txbuf_cur.u8ptr, sizeof(U16)))
80004ea0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004ea4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004ea8:	c1 50       	breq	80004ed2 <host_write_p_txpacket+0xfa>
    {
      // Copy 8-bit data to reach 16-bit alignment
      if (txbuf_cur.u8ptr < txbuf_end.u8ptr)
80004eaa:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004eae:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004eb2:	10 39       	cp.w	r9,r8
80004eb4:	c0 f2       	brcc	80004ed2 <host_write_p_txpacket+0xfa>
      {
        // 8-bit accesses to FIFO data registers do require pointer post-increment
        *p_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
80004eb6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004eba:	ee fa ff ec 	ld.w	r10,r7[-20]
80004ebe:	15 88       	ld.ub	r8,r10[0x0]
80004ec0:	b2 88       	st.b	r9[0x0],r8
80004ec2:	f2 c8 ff ff 	sub	r8,r9,-1
80004ec6:	ef 48 ff f0 	st.w	r7[-16],r8
80004eca:	f4 c8 ff ff 	sub	r8,r10,-1
80004ece:	ef 48 ff ec 	st.w	r7[-20],r8
      }
    }

    // If all addresses are aligned the same way with respect to 32-bit boundaries
    if (Get_align((U32)txbuf_cur.u16ptr, sizeof(U32)) == Get_align((U32)p_fifo.u16ptr, sizeof(U32)))
80004ed2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004ed6:	10 99       	mov	r9,r8
80004ed8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004edc:	f3 e8 20 08 	eor	r8,r9,r8
80004ee0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004ee4:	c6 11       	brne	80004fa6 <host_write_p_txpacket+0x1ce>
    {
      // If pointer to transmission buffer is not 32-bit aligned
      if (!Test_align((U32)txbuf_cur.u16ptr, sizeof(U32)))
80004ee6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004eea:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004eee:	c1 50       	breq	80004f18 <host_write_p_txpacket+0x140>
      {
        // Copy 16-bit data to reach 32-bit alignment
        if (txbuf_cur.u16ptr < txbuf_end.u16ptr)
80004ef0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004ef4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004ef8:	10 39       	cp.w	r9,r8
80004efa:	c0 f2       	brcc	80004f18 <host_write_p_txpacket+0x140>
        {
          // 16-bit accesses to FIFO data registers do require pointer post-increment
          *p_fifo.u16ptr++ = *txbuf_cur.u16ptr++;
80004efc:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004f00:	ee fa ff ec 	ld.w	r10,r7[-20]
80004f04:	94 08       	ld.sh	r8,r10[0x0]
80004f06:	b2 08       	st.h	r9[0x0],r8
80004f08:	f2 c8 ff fe 	sub	r8,r9,-2
80004f0c:	ef 48 ff f0 	st.w	r7[-16],r8
80004f10:	f4 c8 ff fe 	sub	r8,r10,-2
80004f14:	ef 48 ff ec 	st.w	r7[-20],r8
        }
      }

      // If pointer to transmission buffer is not 64-bit aligned
      if (!Test_align((U32)txbuf_cur.u32ptr, sizeof(U64)))
80004f18:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004f1c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004f20:	c1 e0       	breq	80004f5c <host_write_p_txpacket+0x184>
      {
        // Copy 32-bit data to reach 64-bit alignment
        if (txbuf_cur.u32ptr < txbuf_end.u32ptr)
80004f22:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004f26:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f2a:	10 39       	cp.w	r9,r8
80004f2c:	c1 82       	brcc	80004f5c <host_write_p_txpacket+0x184>
        {
          // 32-bit accesses to FIFO data registers do not require pointer post-increment
          *p_fifo.u32ptr = *txbuf_cur.u32ptr++;
80004f2e:	ee fa ff f0 	ld.w	r10,r7[-16]
80004f32:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004f36:	72 08       	ld.w	r8,r9[0x0]
80004f38:	95 08       	st.w	r10[0x0],r8
80004f3a:	f2 c8 ff fc 	sub	r8,r9,-4
80004f3e:	ef 48 ff ec 	st.w	r7[-20],r8
80004f42:	c0 d8       	rjmp	80004f5c <host_write_p_txpacket+0x184>

      // Copy 64-bit-aligned data
      while (txbuf_cur.u64ptr < txbuf_end.u64ptr)
      {
        // 64-bit accesses to FIFO data registers do not require pointer post-increment
        *p_fifo.u64ptr = *txbuf_cur.u64ptr++;
80004f44:	ee fb ff f0 	ld.w	r11,r7[-16]
80004f48:	ee fa ff ec 	ld.w	r10,r7[-20]
80004f4c:	f4 e8 00 00 	ld.d	r8,r10[0]
80004f50:	f6 e9 00 00 	st.d	r11[0],r8
80004f54:	f4 c8 ff f8 	sub	r8,r10,-8
80004f58:	ef 48 ff ec 	st.w	r7[-20],r8
          *p_fifo.u32ptr = *txbuf_cur.u32ptr++;
        }
      }

      // Copy 64-bit-aligned data
      while (txbuf_cur.u64ptr < txbuf_end.u64ptr)
80004f5c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004f60:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004f64:	10 39       	cp.w	r9,r8
80004f66:	ce f3       	brcs	80004f44 <host_write_p_txpacket+0x16c>
        // 64-bit accesses to FIFO data registers do not require pointer post-increment
        *p_fifo.u64ptr = *txbuf_cur.u64ptr++;
      }

      // Copy 32-bit-aligned data
      if (txbuf_cur.u32ptr < txbuf_end.u32ptr)
80004f68:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004f6c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004f70:	10 39       	cp.w	r9,r8
80004f72:	c1 a2       	brcc	80004fa6 <host_write_p_txpacket+0x1ce>
      {
        // 32-bit accesses to FIFO data registers do not require pointer post-increment
        *p_fifo.u32ptr = *txbuf_cur.u32ptr++;
80004f74:	ee fa ff f0 	ld.w	r10,r7[-16]
80004f78:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004f7c:	72 08       	ld.w	r8,r9[0x0]
80004f7e:	95 08       	st.w	r10[0x0],r8
80004f80:	f2 c8 ff fc 	sub	r8,r9,-4
80004f84:	ef 48 ff ec 	st.w	r7[-20],r8
80004f88:	c0 f8       	rjmp	80004fa6 <host_write_p_txpacket+0x1ce>

    // Copy remaining 16-bit data if some
    while (txbuf_cur.u16ptr < txbuf_end.u16ptr)
    {
      // 16-bit accesses to FIFO data registers do require pointer post-increment
      *p_fifo.u16ptr++ = *txbuf_cur.u16ptr++;
80004f8a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004f8e:	ee fa ff ec 	ld.w	r10,r7[-20]
80004f92:	94 08       	ld.sh	r8,r10[0x0]
80004f94:	b2 08       	st.h	r9[0x0],r8
80004f96:	f2 c8 ff fe 	sub	r8,r9,-2
80004f9a:	ef 48 ff f0 	st.w	r7[-16],r8
80004f9e:	f4 c8 ff fe 	sub	r8,r10,-2
80004fa2:	ef 48 ff ec 	st.w	r7[-20],r8
        *p_fifo.u32ptr = *txbuf_cur.u32ptr++;
      }
    }

    // Copy remaining 16-bit data if some
    while (txbuf_cur.u16ptr < txbuf_end.u16ptr)
80004fa6:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004faa:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004fae:	10 39       	cp.w	r9,r8
80004fb0:	ce d3       	brcs	80004f8a <host_write_p_txpacket+0x1b2>
80004fb2:	c0 f8       	rjmp	80004fd0 <host_write_p_txpacket+0x1f8>

  // Copy remaining 8-bit data if some
  while (txbuf_cur.u8ptr < txbuf_end.u8ptr)
  {
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *p_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
80004fb4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004fb8:	ee fa ff ec 	ld.w	r10,r7[-20]
80004fbc:	15 88       	ld.ub	r8,r10[0x0]
80004fbe:	b2 88       	st.b	r9[0x0],r8
80004fc0:	f2 c8 ff ff 	sub	r8,r9,-1
80004fc4:	ef 48 ff f0 	st.w	r7[-16],r8
80004fc8:	f4 c8 ff ff 	sub	r8,r10,-1
80004fcc:	ef 48 ff ec 	st.w	r7[-20],r8
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (txbuf_cur.u8ptr < txbuf_end.u8ptr)
80004fd0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004fd4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004fd8:	10 39       	cp.w	r9,r8
80004fda:	ce d3       	brcs	80004fb4 <host_write_p_txpacket+0x1dc>
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *p_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
  }

  // Save current position in FIFO data register
  pep_fifo[p].u8ptr = p_fifo.u8ptr;
80004fdc:	ef 3a ff c8 	ld.ub	r10,r7[-56]
80004fe0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004fe4:	48 e8       	lddpc	r8,8000501c <host_write_p_txpacket+0x244>
80004fe6:	f0 0a 09 29 	st.w	r8[r10<<0x2],r9

  // Return the updated buffer address and the number of non-copied bytes
  if (ptxbuf) *ptxbuf = txbuf_cur.u8ptr;
80004fea:	ee f8 ff bc 	ld.w	r8,r7[-68]
80004fee:	58 08       	cp.w	r8,0
80004ff0:	c0 60       	breq	80004ffc <host_write_p_txpacket+0x224>
80004ff2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004ff6:	ee f8 ff bc 	ld.w	r8,r7[-68]
80004ffa:	91 09       	st.w	r8[0x0],r9
  return data_length - (txbuf_cur.u8ptr - (U8 *)txbuf);
80004ffc:	ee f9 ff c4 	ld.w	r9,r7[-60]
80005000:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005004:	f2 08 01 08 	sub	r8,r9,r8
80005008:	10 99       	mov	r9,r8
8000500a:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000500e:	f2 08 00 08 	add	r8,r9,r8
}
80005012:	10 9c       	mov	r12,r8
80005014:	2e fd       	sub	sp,-68
80005016:	e3 cd 80 80 	ldm	sp++,r7,pc
8000501a:	00 00       	add	r0,r0
8000501c:	00 00       	add	r0,r0
8000501e:	09 88       	ld.ub	r8,r4[0x0]

80005020 <host_read_p_rxpacket>:
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 host_read_p_rxpacket(U8 p, void *rxbuf, U32 data_length, void **prxbuf)
{
80005020:	eb cd 40 80 	pushm	r7,lr
80005024:	1a 97       	mov	r7,sp
80005026:	21 1d       	sub	sp,68
80005028:	18 98       	mov	r8,r12
8000502a:	ef 4b ff c4 	st.w	r7[-60],r11
8000502e:	ef 4a ff c0 	st.w	r7[-64],r10
80005032:	ef 49 ff bc 	st.w	r7[-68],r9
80005036:	ef 68 ff c8 	st.b	r7[-56],r8
#else
  UnionCPtr   rxbuf_end;
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  p_fifo.u8ptr = pep_fifo[p].u8ptr;
8000503a:	ef 39 ff c8 	ld.ub	r9,r7[-56]
8000503e:	fe f8 02 0e 	ld.w	r8,pc[526]
80005042:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80005046:	ef 48 ff f0 	st.w	r7[-16],r8
  rxbuf_cur.u8ptr = rxbuf;
8000504a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000504e:	ef 48 ff ec 	st.w	r7[-20],r8
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Host_byte_count(p));
80005052:	ee fa ff ec 	ld.w	r10,r7[-20]
80005056:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000505a:	ef 48 ff f8 	st.w	r7[-8],r8
8000505e:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80005062:	a3 68       	lsl	r8,0x2
80005064:	e0 38 fa d0 	sub	r8,129744
80005068:	70 08       	ld.w	r8,r8[0x0]
8000506a:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000506e:	b5 88       	lsr	r8,0x14
80005070:	ef 48 ff fc 	st.w	r7[-4],r8
80005074:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005078:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000507c:	f2 08 0d 48 	min	r8,r9,r8
80005080:	ef 48 ff f4 	st.w	r7[-12],r8
80005084:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005088:	f4 08 00 08 	add	r8,r10,r8
8000508c:	ef 48 ff e8 	st.w	r7[-24],r8
#if (!defined __OPTIMIZE_SIZE__) || !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  rxbuf_end.u16ptr = (U16 *)Align_down((U32)rxbuf_end.u8ptr, sizeof(U16));
80005090:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005094:	a1 c8       	cbr	r8,0x0
80005096:	ef 48 ff e0 	st.w	r7[-32],r8
  rxbuf_end.u32ptr = (U32 *)Align_down((U32)rxbuf_end.u16ptr, sizeof(U32));
8000509a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000509e:	e0 18 ff fc 	andl	r8,0xfffc
800050a2:	ef 48 ff d8 	st.w	r7[-40],r8
  rxbuf_end.u64ptr = (U64 *)Align_down((U32)rxbuf_end.u32ptr, sizeof(U64));
800050a6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800050aa:	e0 18 ff f8 	andl	r8,0xfff8
800050ae:	ef 48 ff d0 	st.w	r7[-48],r8

  // If all addresses are aligned the same way with respect to 16-bit boundaries
  if (Get_align((U32)rxbuf_cur.u8ptr, sizeof(U16)) == Get_align((U32)p_fifo.u8ptr, sizeof(U16)))
800050b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800050b6:	10 99       	mov	r9,r8
800050b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050bc:	f3 e8 20 08 	eor	r8,r9,r8
800050c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800050c4:	e0 81 00 9e 	brne	80005200 <host_read_p_rxpacket+0x1e0>
  {
    // If pointer to reception buffer is not 16-bit aligned
    if (!Test_align((U32)rxbuf_cur.u8ptr, sizeof(U16)))
800050c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800050cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800050d0:	c1 60       	breq	800050fc <host_read_p_rxpacket+0xdc>
    {
      // Copy 8-bit data to reach 16-bit alignment
      if (rxbuf_cur.u8ptr < rxbuf_end.u8ptr)
800050d2:	ee f9 ff ec 	ld.w	r9,r7[-20]
800050d6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800050da:	10 39       	cp.w	r9,r8
800050dc:	c1 02       	brcc	800050fc <host_read_p_rxpacket+0xdc>
      {
        // 8-bit accesses to FIFO data registers do require pointer post-increment
        *rxbuf_cur.u8ptr++ = *p_fifo.u8ptr++;
800050de:	ee f9 ff ec 	ld.w	r9,r7[-20]
800050e2:	ee fa ff f0 	ld.w	r10,r7[-16]
800050e6:	15 88       	ld.ub	r8,r10[0x0]
800050e8:	5c 58       	castu.b	r8
800050ea:	b2 88       	st.b	r9[0x0],r8
800050ec:	f2 c8 ff ff 	sub	r8,r9,-1
800050f0:	ef 48 ff ec 	st.w	r7[-20],r8
800050f4:	f4 c8 ff ff 	sub	r8,r10,-1
800050f8:	ef 48 ff f0 	st.w	r7[-16],r8
      }
    }

    // If all addresses are aligned the same way with respect to 32-bit boundaries
    if (Get_align((U32)rxbuf_cur.u16ptr, sizeof(U32)) == Get_align((U32)p_fifo.u16ptr, sizeof(U32)))
800050fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005100:	10 99       	mov	r9,r8
80005102:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005106:	f3 e8 20 08 	eor	r8,r9,r8
8000510a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000510e:	c6 31       	brne	800051d4 <host_read_p_rxpacket+0x1b4>
    {
      // If pointer to reception buffer is not 32-bit aligned
      if (!Test_align((U32)rxbuf_cur.u16ptr, sizeof(U32)))
80005110:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005114:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80005118:	c1 60       	breq	80005144 <host_read_p_rxpacket+0x124>
      {
        // Copy 16-bit data to reach 32-bit alignment
        if (rxbuf_cur.u16ptr < rxbuf_end.u16ptr)
8000511a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000511e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005122:	10 39       	cp.w	r9,r8
80005124:	c1 02       	brcc	80005144 <host_read_p_rxpacket+0x124>
        {
          // 16-bit accesses to FIFO data registers do require pointer post-increment
          *rxbuf_cur.u16ptr++ = *p_fifo.u16ptr++;
80005126:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000512a:	ee fa ff f0 	ld.w	r10,r7[-16]
8000512e:	94 08       	ld.sh	r8,r10[0x0]
80005130:	5c 88       	casts.h	r8
80005132:	b2 08       	st.h	r9[0x0],r8
80005134:	f2 c8 ff fe 	sub	r8,r9,-2
80005138:	ef 48 ff ec 	st.w	r7[-20],r8
8000513c:	f4 c8 ff fe 	sub	r8,r10,-2
80005140:	ef 48 ff f0 	st.w	r7[-16],r8
        }
      }

      // If pointer to reception buffer is not 64-bit aligned
      if (!Test_align((U32)rxbuf_cur.u32ptr, sizeof(U64)))
80005144:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005148:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000514c:	c1 e0       	breq	80005188 <host_read_p_rxpacket+0x168>
      {
        // Copy 32-bit data to reach 64-bit alignment
        if (rxbuf_cur.u32ptr < rxbuf_end.u32ptr)
8000514e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005152:	ee f8 ff d8 	ld.w	r8,r7[-40]
80005156:	10 39       	cp.w	r9,r8
80005158:	c1 82       	brcc	80005188 <host_read_p_rxpacket+0x168>
        {
          // 32-bit accesses to FIFO data registers do not require pointer post-increment
          *rxbuf_cur.u32ptr++ = *p_fifo.u32ptr;
8000515a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000515e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005162:	70 08       	ld.w	r8,r8[0x0]
80005164:	93 08       	st.w	r9[0x0],r8
80005166:	f2 c8 ff fc 	sub	r8,r9,-4
8000516a:	ef 48 ff ec 	st.w	r7[-20],r8
8000516e:	c0 d8       	rjmp	80005188 <host_read_p_rxpacket+0x168>

      // Copy 64-bit-aligned data
      while (rxbuf_cur.u64ptr < rxbuf_end.u64ptr)
      {
        // 64-bit accesses to FIFO data registers do not require pointer post-increment
        *rxbuf_cur.u64ptr++ = *p_fifo.u64ptr;
80005170:	ee fa ff ec 	ld.w	r10,r7[-20]
80005174:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005178:	f0 e8 00 00 	ld.d	r8,r8[0]
8000517c:	f4 e9 00 00 	st.d	r10[0],r8
80005180:	f4 c8 ff f8 	sub	r8,r10,-8
80005184:	ef 48 ff ec 	st.w	r7[-20],r8
          *rxbuf_cur.u32ptr++ = *p_fifo.u32ptr;
        }
      }

      // Copy 64-bit-aligned data
      while (rxbuf_cur.u64ptr < rxbuf_end.u64ptr)
80005188:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000518c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005190:	10 39       	cp.w	r9,r8
80005192:	ce f3       	brcs	80005170 <host_read_p_rxpacket+0x150>
        // 64-bit accesses to FIFO data registers do not require pointer post-increment
        *rxbuf_cur.u64ptr++ = *p_fifo.u64ptr;
      }

      // Copy 32-bit-aligned data
      if (rxbuf_cur.u32ptr < rxbuf_end.u32ptr)
80005194:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005198:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000519c:	10 39       	cp.w	r9,r8
8000519e:	c1 b2       	brcc	800051d4 <host_read_p_rxpacket+0x1b4>
      {
        // 32-bit accesses to FIFO data registers do not require pointer post-increment
        *rxbuf_cur.u32ptr++ = *p_fifo.u32ptr;
800051a0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800051a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051a8:	70 08       	ld.w	r8,r8[0x0]
800051aa:	93 08       	st.w	r9[0x0],r8
800051ac:	f2 c8 ff fc 	sub	r8,r9,-4
800051b0:	ef 48 ff ec 	st.w	r7[-20],r8
800051b4:	c1 08       	rjmp	800051d4 <host_read_p_rxpacket+0x1b4>

    // Copy remaining 16-bit data if some
    while (rxbuf_cur.u16ptr < rxbuf_end.u16ptr)
    {
      // 16-bit accesses to FIFO data registers do require pointer post-increment
      *rxbuf_cur.u16ptr++ = *p_fifo.u16ptr++;
800051b6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800051ba:	ee fa ff f0 	ld.w	r10,r7[-16]
800051be:	94 08       	ld.sh	r8,r10[0x0]
800051c0:	5c 88       	casts.h	r8
800051c2:	b2 08       	st.h	r9[0x0],r8
800051c4:	f2 c8 ff fe 	sub	r8,r9,-2
800051c8:	ef 48 ff ec 	st.w	r7[-20],r8
800051cc:	f4 c8 ff fe 	sub	r8,r10,-2
800051d0:	ef 48 ff f0 	st.w	r7[-16],r8
        *rxbuf_cur.u32ptr++ = *p_fifo.u32ptr;
      }
    }

    // Copy remaining 16-bit data if some
    while (rxbuf_cur.u16ptr < rxbuf_end.u16ptr)
800051d4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800051d8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800051dc:	10 39       	cp.w	r9,r8
800051de:	ce c3       	brcs	800051b6 <host_read_p_rxpacket+0x196>
800051e0:	c1 08       	rjmp	80005200 <host_read_p_rxpacket+0x1e0>

  // Copy remaining 8-bit data if some
  while (rxbuf_cur.u8ptr < rxbuf_end.u8ptr)
  {
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *rxbuf_cur.u8ptr++ = *p_fifo.u8ptr++;
800051e2:	ee f9 ff ec 	ld.w	r9,r7[-20]
800051e6:	ee fa ff f0 	ld.w	r10,r7[-16]
800051ea:	15 88       	ld.ub	r8,r10[0x0]
800051ec:	5c 58       	castu.b	r8
800051ee:	b2 88       	st.b	r9[0x0],r8
800051f0:	f2 c8 ff ff 	sub	r8,r9,-1
800051f4:	ef 48 ff ec 	st.w	r7[-20],r8
800051f8:	f4 c8 ff ff 	sub	r8,r10,-1
800051fc:	ef 48 ff f0 	st.w	r7[-16],r8
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (rxbuf_cur.u8ptr < rxbuf_end.u8ptr)
80005200:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005204:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005208:	10 39       	cp.w	r9,r8
8000520a:	ce c3       	brcs	800051e2 <host_read_p_rxpacket+0x1c2>
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *rxbuf_cur.u8ptr++ = *p_fifo.u8ptr++;
  }

  // Save current position in FIFO data register
  pep_fifo[p].u8ptr = (volatile U8 *)p_fifo.u8ptr;
8000520c:	ef 3a ff c8 	ld.ub	r10,r7[-56]
80005210:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005214:	10 99       	mov	r9,r8
80005216:	48 e8       	lddpc	r8,8000524c <host_read_p_rxpacket+0x22c>
80005218:	f0 0a 09 29 	st.w	r8[r10<<0x2],r9

  // Return the updated buffer address and the number of non-copied bytes
  if (prxbuf) *prxbuf = rxbuf_cur.u8ptr;
8000521c:	ee f8 ff bc 	ld.w	r8,r7[-68]
80005220:	58 08       	cp.w	r8,0
80005222:	c0 60       	breq	8000522e <host_read_p_rxpacket+0x20e>
80005224:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005228:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000522c:	91 09       	st.w	r8[0x0],r9
  return data_length - (rxbuf_cur.u8ptr - (U8 *)rxbuf);
8000522e:	ee f9 ff c4 	ld.w	r9,r7[-60]
80005232:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005236:	f2 08 01 08 	sub	r8,r9,r8
8000523a:	10 99       	mov	r9,r8
8000523c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005240:	f2 08 00 08 	add	r8,r9,r8
}
80005244:	10 9c       	mov	r12,r8
80005246:	2e fd       	sub	sp,-68
80005248:	e3 cd 80 80 	ldm	sp++,r7,pc
8000524c:	00 00       	add	r0,r0
8000524e:	09 88       	ld.ub	r8,r4[0x0]

80005250 <usb_task_init>:
//! @brief This function initializes the USB process.
//!
//! Depending on the mode supported (HOST/DEVICE/DUAL_ROLE) the function
//! calls the coresponding USB mode initialization function
void usb_task_init(void)
{
80005250:	eb cd 40 80 	pushm	r7,lr
80005254:	1a 97       	mov	r7,sp
void usb_task(void *pvParameters)
{
#endif  // FREERTOS_USED
  // Register the USB interrupt handler to the interrupt controller and enable
  // the USB interrupt.
  Disable_global_interrupt();
80005256:	d3 03       	ssrf	0x10
  INTC_register_interrupt((__int_handler)&usb_general_interrupt, AVR32_USBB_IRQ, USB_INT_LEVEL);
80005258:	30 0a       	mov	r10,0
8000525a:	e0 6b 02 20 	mov	r11,544
8000525e:	4a 7c       	lddpc	r12,800052f8 <usb_task_init+0xa8>
80005260:	f0 1f 00 27 	mcall	800052fc <usb_task_init+0xac>
  Enable_global_interrupt();
80005264:	d5 03       	csrf	0x10
#if USB_DEVICE_FEATURE == ENABLED && USB_HOST_FEATURE == ENABLED
  #ifdef FREERTOS_USED
    if (usb_device_tsk) vTaskDelete(usb_device_tsk), usb_device_tsk = NULL;
    if (usb_host_tsk) vTaskDelete(usb_host_tsk), usb_host_tsk = NULL;
  #endif
    Usb_input_id_pin();
80005266:	fe 79 10 00 	mov	r9,-61440
8000526a:	e0 68 08 00 	mov	r8,2048
8000526e:	93 58       	st.w	r9[0x14],r8
80005270:	fe 79 10 00 	mov	r9,-61440
80005274:	e0 68 08 00 	mov	r8,2048
80005278:	93 a8       	st.w	r9[0x28],r8
8000527a:	fe 79 10 00 	mov	r9,-61440
8000527e:	e0 68 08 00 	mov	r8,2048
80005282:	93 28       	st.w	r9[0x8],r8
80005284:	fe 79 10 00 	mov	r9,-61440
80005288:	e0 68 08 00 	mov	r8,2048
8000528c:	f3 48 00 74 	st.w	r9[116],r8
    Usb_enable_id_pin();
80005290:	fe 69 00 00 	mov	r9,-131072
80005294:	fe 68 00 00 	mov	r8,-131072
80005298:	f0 f8 08 00 	ld.w	r8,r8[2048]
8000529c:	b9 a8       	sbr	r8,0x18
8000529e:	f3 48 08 00 	st.w	r9[2048],r8
    if (Is_usb_id_device())
800052a2:	fe 68 00 00 	mov	r8,-131072
800052a6:	f0 f8 08 04 	ld.w	r8,r8[2052]
800052aa:	e2 18 04 00 	andl	r8,0x400,COH
800052ae:	c0 70       	breq	800052bc <usb_task_init+0x6c>
    {
      g_usb_mode = USB_MODE_DEVICE;
800052b0:	49 49       	lddpc	r9,80005300 <usb_task_init+0xb0>
800052b2:	30 18       	mov	r8,1
800052b4:	b2 88       	st.b	r9[0x0],r8
      usb_device_task_init();
800052b6:	f0 1f 00 14 	mcall	80005304 <usb_task_init+0xb4>
800052ba:	c0 98       	rjmp	800052cc <usb_task_init+0x7c>
    }
    else
    {
      private_sof_counter = 0;
800052bc:	49 39       	lddpc	r9,80005308 <usb_task_init+0xb8>
800052be:	30 08       	mov	r8,0
800052c0:	93 08       	st.w	r9[0x0],r8
      g_usb_mode = USB_MODE_HOST;
800052c2:	49 09       	lddpc	r9,80005300 <usb_task_init+0xb0>
800052c4:	30 28       	mov	r8,2
800052c6:	b2 88       	st.b	r9[0x0],r8
      usb_host_task_init();
800052c8:	f0 1f 00 11 	mcall	8000530c <usb_task_init+0xbc>
    }
    g_old_usb_mode = g_usb_mode;  // Store current USB mode, for mode change detection
800052cc:	48 d8       	lddpc	r8,80005300 <usb_task_init+0xb0>
800052ce:	11 88       	ld.ub	r8,r8[0x0]
800052d0:	5c 58       	castu.b	r8
800052d2:	49 09       	lddpc	r9,80005310 <usb_task_init+0xc0>
800052d4:	b2 88       	st.b	r9[0x0],r8
    Usb_raise_id_transition();  // Check no ID transition has been missed during initialization
800052d6:	fe 69 00 00 	mov	r9,-131072
800052da:	30 18       	mov	r8,1
800052dc:	f3 48 08 0c 	st.w	r9[2060],r8
    Usb_enable_id_interrupt();
800052e0:	fe 69 00 00 	mov	r9,-131072
800052e4:	fe 68 00 00 	mov	r8,-131072
800052e8:	f0 f8 08 00 	ld.w	r8,r8[2048]
800052ec:	a1 a8       	sbr	r8,0x0
800052ee:	f3 48 08 00 	st.w	r9[2048],r8
    Enable_global_interrupt();
800052f2:	d5 03       	csrf	0x10
#endif
// -----------------------------------------------------------------------------
#ifdef FREERTOS_USED
  }
#endif
}
800052f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800052f8:	80 00       	ld.sh	r0,r0[0x0]
800052fa:	53 b4       	stdsp	sp[0xec],r4
800052fc:	80 00       	ld.sh	r0,r0[0x0]
800052fe:	27 94       	sub	r4,121
80005300:	00 00       	add	r0,r0
80005302:	06 56       	eor	r6,r3
80005304:	80 00       	ld.sh	r0,r0[0x0]
80005306:	58 20       	cp.w	r0,2
80005308:	00 00       	add	r0,r0
8000530a:	09 a4       	ld.ub	r4,r4[0x2]
8000530c:	80 00       	ld.sh	r0,r0[0x0]
8000530e:	65 3c       	ld.w	r12,r2[0x4c]
80005310:	00 00       	add	r0,r0
80005312:	06 57       	eor	r7,r3

80005314 <usb_task>:
//!
//! Depending on the USB mode supported (HOST/DEVICE/DUAL_ROLE) the function
//! calls the coresponding USB management function.
#ifndef FREERTOS_USED
void usb_task(void)
{
80005314:	eb cd 40 80 	pushm	r7,lr
80005318:	1a 97       	mov	r7,sp
8000531a:	20 1d       	sub	sp,4
// ---- DUAL-ROLE DEVICE/HOST USB MODE -----------------------------------------
  #if USB_DEVICE_FEATURE == ENABLED && USB_HOST_FEATURE == ENABLED
    if (g_old_usb_mode != g_usb_mode)
8000531c:	49 f8       	lddpc	r8,80005398 <usb_task+0x84>
8000531e:	11 88       	ld.ub	r8,r8[0x0]
80005320:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80005324:	49 e8       	lddpc	r8,8000539c <usb_task+0x88>
80005326:	11 88       	ld.ub	r8,r8[0x0]
80005328:	5c 58       	castu.b	r8
8000532a:	f0 09 18 00 	cp.b	r9,r8
8000532e:	c1 f0       	breq	8000536c <usb_task+0x58>
    {
      if (Is_usb_id_device())
80005330:	fe 68 00 00 	mov	r8,-131072
80005334:	f0 f8 08 04 	ld.w	r8,r8[2052]
80005338:	e2 18 04 00 	andl	r8,0x400,COH
8000533c:	c0 40       	breq	80005344 <usb_task+0x30>
    {
      usb_device_task_init();
8000533e:	f0 1f 00 19 	mcall	800053a0 <usb_task+0x8c>
80005342:	c0 68       	rjmp	8000534e <usb_task+0x3a>
    }else{
      private_sof_counter = 0;
80005344:	49 89       	lddpc	r9,800053a4 <usb_task+0x90>
80005346:	30 08       	mov	r8,0
80005348:	93 08       	st.w	r9[0x0],r8
      usb_host_task_init();
8000534a:	f0 1f 00 18 	mcall	800053a8 <usb_task+0x94>
    }
      g_old_usb_mode = g_usb_mode;  // Store current USB mode, for mode change detection
8000534e:	49 48       	lddpc	r8,8000539c <usb_task+0x88>
80005350:	11 88       	ld.ub	r8,r8[0x0]
80005352:	5c 58       	castu.b	r8
80005354:	49 19       	lddpc	r9,80005398 <usb_task+0x84>
80005356:	b2 88       	st.b	r9[0x0],r8
      Usb_enable_id_interrupt();
80005358:	fe 69 00 00 	mov	r9,-131072
8000535c:	fe 68 00 00 	mov	r8,-131072
80005360:	f0 f8 08 00 	ld.w	r8,r8[2048]
80005364:	a1 a8       	sbr	r8,0x0
80005366:	f3 48 08 00 	st.w	r9[2048],r8
      Enable_global_interrupt();
8000536a:	d5 03       	csrf	0x10
    }

  // Depending on current USB mode, launch the correct USB task (device or host)
  switch (g_old_usb_mode)
8000536c:	48 b8       	lddpc	r8,80005398 <usb_task+0x84>
8000536e:	11 88       	ld.ub	r8,r8[0x0]
80005370:	5c 58       	castu.b	r8
80005372:	ef 48 ff fc 	st.w	r7[-4],r8
80005376:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000537a:	58 18       	cp.w	r8,1
8000537c:	c0 60       	breq	80005388 <usb_task+0x74>
8000537e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005382:	58 28       	cp.w	r8,2
80005384:	c0 50       	breq	8000538e <usb_task+0x7a>
80005386:	c0 68       	rjmp	80005392 <usb_task+0x7e>
  {
  case USB_MODE_DEVICE:
    usb_device_task();
80005388:	f0 1f 00 09 	mcall	800053ac <usb_task+0x98>
8000538c:	c0 38       	rjmp	80005392 <usb_task+0x7e>
    break;
  case USB_MODE_HOST:
    usb_host_task();
8000538e:	f0 1f 00 09 	mcall	800053b0 <usb_task+0x9c>
    #error At least one of USB_DEVICE_FEATURE and USB_HOST_FEATURE must be enabled
  #endif
// -----------------------------------------------------------------------------


}
80005392:	2f fd       	sub	sp,-4
80005394:	e3 cd 80 80 	ldm	sp++,r7,pc
80005398:	00 00       	add	r0,r0
8000539a:	06 57       	eor	r7,r3
8000539c:	00 00       	add	r0,r0
8000539e:	06 56       	eor	r6,r3
800053a0:	80 00       	ld.sh	r0,r0[0x0]
800053a2:	58 20       	cp.w	r0,2
800053a4:	00 00       	add	r0,r0
800053a6:	09 a4       	ld.ub	r4,r4[0x2]
800053a8:	80 00       	ld.sh	r0,r0[0x0]
800053aa:	65 3c       	ld.w	r12,r2[0x4c]
800053ac:	80 00       	ld.sh	r0,r0[0x0]
800053ae:	59 18       	cp.w	r8,17
800053b0:	80 00       	ld.sh	r0,r0[0x0]
800053b2:	66 4c       	ld.w	r12,r3[0x10]

800053b4 <usb_general_interrupt>:
__interrupt
#endif
static void usb_general_interrupt(void)

#endif
{
800053b4:	eb cd 40 80 	pushm	r7,lr
800053b8:	1a 97       	mov	r7,sp
800053ba:	20 5d       	sub	sp,20
#endif

// ---------- DEVICE/HOST events management ------------------------------------
#if USB_DEVICE_FEATURE == ENABLED && USB_HOST_FEATURE == ENABLED
  // ID pin change detection
  if (Is_usb_id_transition() && Is_usb_id_interrupt_enabled())
800053bc:	fe 68 00 00 	mov	r8,-131072
800053c0:	f0 f8 08 04 	ld.w	r8,r8[2052]
800053c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800053c8:	5c 58       	castu.b	r8
800053ca:	e0 80 00 86 	breq	800054d6 <usb_general_interrupt+0x122>
800053ce:	fe 68 00 00 	mov	r8,-131072
800053d2:	f0 f8 08 00 	ld.w	r8,r8[2048]
800053d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800053da:	5c 58       	castu.b	r8
800053dc:	c7 d0       	breq	800054d6 <usb_general_interrupt+0x122>
  {
    g_usb_mode = (Is_usb_id_device()) ? USB_MODE_DEVICE : USB_MODE_HOST;
800053de:	fe 68 00 00 	mov	r8,-131072
800053e2:	f0 f8 08 04 	ld.w	r8,r8[2052]
800053e6:	e2 18 04 00 	andl	r8,0x400,COH
800053ea:	c0 50       	breq	800053f4 <usb_general_interrupt+0x40>
800053ec:	30 1a       	mov	r10,1
800053ee:	ef 4a ff ec 	st.w	r7[-20],r10
800053f2:	c0 48       	rjmp	800053fa <usb_general_interrupt+0x46>
800053f4:	30 29       	mov	r9,2
800053f6:	ef 49 ff ec 	st.w	r7[-20],r9
800053fa:	fe f9 03 da 	ld.w	r9,pc[986]
800053fe:	ee fa ff ec 	ld.w	r10,r7[-20]
80005402:	14 98       	mov	r8,r10
80005404:	b2 88       	st.b	r9[0x0],r8
    Usb_ack_id_transition();
80005406:	fe 69 00 00 	mov	r9,-131072
8000540a:	30 18       	mov	r8,1
8000540c:	f3 48 08 08 	st.w	r9[2056],r8
    if (g_usb_mode != g_old_usb_mode) // Basic debounce
80005410:	fe f8 03 c4 	ld.w	r8,pc[964]
80005414:	11 88       	ld.ub	r8,r8[0x0]
80005416:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000541a:	fe f8 03 be 	ld.w	r8,pc[958]
8000541e:	11 88       	ld.ub	r8,r8[0x0]
80005420:	5c 58       	castu.b	r8
80005422:	f0 09 18 00 	cp.b	r9,r8
80005426:	c5 80       	breq	800054d6 <usb_general_interrupt+0x122>
    {
      // Previously in device mode, check if disconnection was detected
      if (g_old_usb_mode == USB_MODE_DEVICE)
80005428:	fe f8 03 b0 	ld.w	r8,pc[944]
8000542c:	11 88       	ld.ub	r8,r8[0x0]
8000542e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80005432:	30 18       	mov	r8,1
80005434:	f0 09 18 00 	cp.b	r9,r8
80005438:	c0 f1       	brne	80005456 <usb_general_interrupt+0xa2>
      {
        if (usb_connected)
8000543a:	fe f8 03 a2 	ld.w	r8,pc[930]
8000543e:	11 88       	ld.ub	r8,r8[0x0]
80005440:	5c 58       	castu.b	r8
80005442:	c1 b0       	breq	80005478 <usb_general_interrupt+0xc4>
        {
          // Device mode diconnection actions
          usb_connected = FALSE;
80005444:	fe f9 03 98 	ld.w	r9,pc[920]
80005448:	30 08       	mov	r8,0
8000544a:	b2 88       	st.b	r9[0x0],r8
          usb_configuration_nb = 0;
8000544c:	fe f9 03 94 	ld.w	r9,pc[916]
80005450:	30 08       	mov	r8,0
80005452:	b2 88       	st.b	r9[0x0],r8
80005454:	c1 28       	rjmp	80005478 <usb_general_interrupt+0xc4>
          Usb_vbus_off_action();
        }
      }
      // Previously in host mode, check if disconnection was detected
      else if (Is_host_attached())
80005456:	fe f8 03 8e 	ld.w	r8,pc[910]
8000545a:	11 88       	ld.ub	r8,r8[0x0]
8000545c:	5c 58       	castu.b	r8
8000545e:	c0 d0       	breq	80005478 <usb_general_interrupt+0xc4>
      {
        // Host mode diconnection actions
        device_state = DEVICE_UNATTACHED;
80005460:	fe f9 03 84 	ld.w	r9,pc[900]
80005464:	30 08       	mov	r8,0
80005466:	b2 88       	st.b	r9[0x0],r8
        Host_device_disconnection_action();
80005468:	fe f9 03 80 	ld.w	r9,pc[896]
8000546c:	30 08       	mov	r8,0
8000546e:	b2 88       	st.b	r9[0x0],r8
80005470:	fe f9 03 7c 	ld.w	r9,pc[892]
80005474:	30 08       	mov	r8,0
80005476:	b2 88       	st.b	r9[0x0],r8
      }
      LOG_STR(log_pin_id_changed);
      Usb_send_event((Is_usb_device()) ? EVT_USB_DEVICE_FUNCTION :
80005478:	fe f8 03 5c 	ld.w	r8,pc[860]
8000547c:	11 88       	ld.ub	r8,r8[0x0]
8000547e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80005482:	30 18       	mov	r8,1
80005484:	f0 09 18 00 	cp.b	r9,r8
80005488:	c0 51       	brne	80005492 <usb_general_interrupt+0xde>
8000548a:	30 89       	mov	r9,8
8000548c:	ef 49 ff f0 	st.w	r7[-16],r9
80005490:	c0 48       	rjmp	80005498 <usb_general_interrupt+0xe4>
80005492:	31 08       	mov	r8,16
80005494:	ef 48 ff f0 	st.w	r7[-16],r8
80005498:	fe f8 03 58 	ld.w	r8,pc[856]
8000549c:	90 08       	ld.sh	r8,r8[0x0]
8000549e:	5c 88       	casts.h	r8
800054a0:	5c 88       	casts.h	r8
800054a2:	ee fa ff f0 	ld.w	r10,r7[-16]
800054a6:	f5 e8 10 08 	or	r8,r10,r8
800054aa:	5c 88       	casts.h	r8
800054ac:	fe f9 03 44 	ld.w	r9,pc[836]
800054b0:	b2 08       	st.h	r9[0x0],r8
      Usb_id_transition_action();
      //! @todo ID pin hot state change!!!
      // Preliminary management: HARDWARE RESET!!!
  #if ID_PIN_CHANGE_GENERATE_RESET == ENABLE
      // Hot ID transition generates CPU reset
      Usb_disable();
800054b2:	fe 69 00 00 	mov	r9,-131072
800054b6:	fe 68 00 00 	mov	r8,-131072
800054ba:	f0 f8 08 00 	ld.w	r8,r8[2048]
800054be:	af d8       	cbr	r8,0xf
800054c0:	f3 48 08 00 	st.w	r9[2048],r8
      Usb_disable_otg_pad();
800054c4:	fe 69 00 00 	mov	r9,-131072
800054c8:	fe 68 00 00 	mov	r8,-131072
800054cc:	f0 f8 08 00 	ld.w	r8,r8[2048]
800054d0:	ad c8       	cbr	r8,0xc
800054d2:	f3 48 08 00 	st.w	r9[2048],r8
#if USB_DEVICE_FEATURE == ENABLED
  #if USB_HOST_FEATURE == ENABLED
  // If both device and host features are enabled, check if device mode is engaged
  // (accessing the USB registers of a non-engaged mode, even with load operations,
  // may corrupt USB FIFO data).
  if (Is_usb_device())
800054d6:	fe f8 02 fe 	ld.w	r8,pc[766]
800054da:	11 88       	ld.ub	r8,r8[0x0]
800054dc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800054e0:	30 18       	mov	r8,1
800054e2:	f0 09 18 00 	cp.b	r9,r8
800054e6:	e0 81 00 e9 	brne	800056b8 <usb_general_interrupt+0x304>
  #endif
  {
    // VBus state detection
    if (Is_usb_vbus_transition() && Is_usb_vbus_interrupt_enabled())
800054ea:	fe 68 00 00 	mov	r8,-131072
800054ee:	f0 f8 08 04 	ld.w	r8,r8[2052]
800054f2:	e2 18 00 02 	andl	r8,0x2,COH
800054f6:	c4 10       	breq	80005578 <usb_general_interrupt+0x1c4>
800054f8:	fe 68 00 00 	mov	r8,-131072
800054fc:	f0 f8 08 00 	ld.w	r8,r8[2048]
80005500:	e2 18 00 02 	andl	r8,0x2,COH
80005504:	c3 a0       	breq	80005578 <usb_general_interrupt+0x1c4>
    {
      Usb_ack_vbus_transition();
80005506:	fe 69 00 00 	mov	r9,-131072
8000550a:	30 28       	mov	r8,2
8000550c:	f3 48 08 08 	st.w	r9[2056],r8
      if (Is_usb_vbus_high())
80005510:	fe 68 00 00 	mov	r8,-131072
80005514:	f0 f8 08 04 	ld.w	r8,r8[2052]
80005518:	e2 18 08 00 	andl	r8,0x800,COH
8000551c:	c0 d0       	breq	80005536 <usb_general_interrupt+0x182>
      {
        usb_start_device();
8000551e:	f0 1f 00 b6 	mcall	800057f4 <usb_general_interrupt+0x440>
        Usb_send_event(EVT_USB_POWERED);
80005522:	fe f8 02 ce 	ld.w	r8,pc[718]
80005526:	90 08       	ld.sh	r8,r8[0x0]
80005528:	5c 88       	casts.h	r8
8000552a:	a1 b8       	sbr	r8,0x1
8000552c:	5c 88       	casts.h	r8
8000552e:	fe f9 02 c2 	ld.w	r9,pc[706]
80005532:	b2 08       	st.h	r9[0x0],r8
80005534:	c2 28       	rjmp	80005578 <usb_general_interrupt+0x1c4>
        Usb_vbus_on_action();
      }
      else
      {
        Usb_unfreeze_clock();
80005536:	fe 69 00 00 	mov	r9,-131072
8000553a:	fe 68 00 00 	mov	r8,-131072
8000553e:	f0 f8 08 00 	ld.w	r8,r8[2048]
80005542:	af c8       	cbr	r8,0xe
80005544:	f3 48 08 00 	st.w	r9[2048],r8
        Usb_detach();
80005548:	fe 69 00 00 	mov	r9,-131072
8000554c:	fe 68 00 00 	mov	r8,-131072
80005550:	70 08       	ld.w	r8,r8[0x0]
80005552:	a9 a8       	sbr	r8,0x8
80005554:	93 08       	st.w	r9[0x0],r8
        usb_connected = FALSE;
80005556:	fe f9 02 86 	ld.w	r9,pc[646]
8000555a:	30 08       	mov	r8,0
8000555c:	b2 88       	st.b	r9[0x0],r8
        usb_configuration_nb = 0;
8000555e:	fe f9 02 82 	ld.w	r9,pc[642]
80005562:	30 08       	mov	r8,0
80005564:	b2 88       	st.b	r9[0x0],r8
        Usb_send_event(EVT_USB_UNPOWERED);
80005566:	fe f8 02 8a 	ld.w	r8,pc[650]
8000556a:	90 08       	ld.sh	r8,r8[0x0]
8000556c:	5c 88       	casts.h	r8
8000556e:	a3 a8       	sbr	r8,0x2
80005570:	5c 88       	casts.h	r8
80005572:	fe f9 02 7e 	ld.w	r9,pc[638]
80005576:	b2 08       	st.h	r9[0x0],r8
        taskEXIT_CRITICAL();
  #endif
      }
    }
    // Device Start-of-Frame received
    if (Is_usb_sof() && Is_usb_sof_interrupt_enabled())
80005578:	fe 68 00 00 	mov	r8,-131072
8000557c:	70 18       	ld.w	r8,r8[0x4]
8000557e:	e2 18 00 04 	andl	r8,0x4,COH
80005582:	c0 d0       	breq	8000559c <usb_general_interrupt+0x1e8>
80005584:	fe 68 00 00 	mov	r8,-131072
80005588:	70 48       	ld.w	r8,r8[0x10]
8000558a:	e2 18 00 04 	andl	r8,0x4,COH
8000558e:	c0 70       	breq	8000559c <usb_general_interrupt+0x1e8>
    {
      Usb_ack_sof();
80005590:	fe 69 00 00 	mov	r9,-131072
80005594:	30 48       	mov	r8,4
80005596:	93 28       	st.w	r9[0x8],r8
      Usb_sof_action();
80005598:	f0 1f 00 98 	mcall	800057f8 <usb_general_interrupt+0x444>
    }
    // Device Suspend event (no more USB activity detected)
    if (Is_usb_suspend() && Is_usb_suspend_interrupt_enabled())
8000559c:	fe 68 00 00 	mov	r8,-131072
800055a0:	70 18       	ld.w	r8,r8[0x4]
800055a2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800055a6:	5c 58       	castu.b	r8
800055a8:	c2 50       	breq	800055f2 <usb_general_interrupt+0x23e>
800055aa:	fe 68 00 00 	mov	r8,-131072
800055ae:	70 48       	ld.w	r8,r8[0x10]
800055b0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800055b4:	5c 58       	castu.b	r8
800055b6:	c1 e0       	breq	800055f2 <usb_general_interrupt+0x23e>
    {
      Usb_ack_suspend();
800055b8:	fe 69 00 00 	mov	r9,-131072
800055bc:	30 18       	mov	r8,1
800055be:	93 28       	st.w	r9[0x8],r8
      Usb_enable_wake_up_interrupt();
800055c0:	fe 69 00 00 	mov	r9,-131072
800055c4:	31 08       	mov	r8,16
800055c6:	93 68       	st.w	r9[0x18],r8
      (void)Is_usb_wake_up_interrupt_enabled();
800055c8:	fe 68 00 00 	mov	r8,-131072
800055cc:	70 48       	ld.w	r8,r8[0x10]
      Usb_freeze_clock();
800055ce:	fe 69 00 00 	mov	r9,-131072
800055d2:	fe 68 00 00 	mov	r8,-131072
800055d6:	f0 f8 08 00 	ld.w	r8,r8[2048]
800055da:	af a8       	sbr	r8,0xe
800055dc:	f3 48 08 00 	st.w	r9[2048],r8
      Usb_send_event(EVT_USB_SUSPEND);
800055e0:	fe f8 02 10 	ld.w	r8,pc[528]
800055e4:	90 08       	ld.sh	r8,r8[0x0]
800055e6:	5c 88       	casts.h	r8
800055e8:	a5 b8       	sbr	r8,0x5
800055ea:	5c 88       	casts.h	r8
800055ec:	fe f9 02 04 	ld.w	r9,pc[516]
800055f0:	b2 08       	st.h	r9[0x0],r8
      Usb_suspend_action();
    }
    // Wake-up event (USB activity detected): Used to resume
    if (Is_usb_wake_up() && Is_usb_wake_up_interrupt_enabled())
800055f2:	fe 68 00 00 	mov	r8,-131072
800055f6:	70 18       	ld.w	r8,r8[0x4]
800055f8:	e2 18 00 10 	andl	r8,0x10,COH
800055fc:	c2 30       	breq	80005642 <usb_general_interrupt+0x28e>
800055fe:	fe 68 00 00 	mov	r8,-131072
80005602:	70 48       	ld.w	r8,r8[0x10]
80005604:	e2 18 00 10 	andl	r8,0x10,COH
80005608:	c1 d0       	breq	80005642 <usb_general_interrupt+0x28e>
    {
      Usb_unfreeze_clock();
8000560a:	fe 69 00 00 	mov	r9,-131072
8000560e:	fe 68 00 00 	mov	r8,-131072
80005612:	f0 f8 08 00 	ld.w	r8,r8[2048]
80005616:	af c8       	cbr	r8,0xe
80005618:	f3 48 08 00 	st.w	r9[2048],r8
      (void)Is_usb_clock_frozen();
8000561c:	fe 68 00 00 	mov	r8,-131072
80005620:	f0 f8 08 00 	ld.w	r8,r8[2048]
      Usb_ack_wake_up();
80005624:	fe 69 00 00 	mov	r9,-131072
80005628:	31 08       	mov	r8,16
8000562a:	93 28       	st.w	r9[0x8],r8
      Usb_disable_wake_up_interrupt();
8000562c:	fe 69 00 00 	mov	r9,-131072
80005630:	31 08       	mov	r8,16
80005632:	93 58       	st.w	r9[0x14],r8
      Usb_wake_up_action();
      Usb_send_event(EVT_USB_WAKE_UP);
80005634:	4e f8       	lddpc	r8,800057f0 <usb_general_interrupt+0x43c>
80005636:	90 08       	ld.sh	r8,r8[0x0]
80005638:	5c 88       	casts.h	r8
8000563a:	a7 a8       	sbr	r8,0x6
8000563c:	5c 88       	casts.h	r8
8000563e:	4e d9       	lddpc	r9,800057f0 <usb_general_interrupt+0x43c>
80005640:	b2 08       	st.h	r9[0x0],r8
    }
    // Resume state bus detection
    if (Is_usb_resume() && Is_usb_resume_interrupt_enabled())
80005642:	fe 68 00 00 	mov	r8,-131072
80005646:	70 18       	ld.w	r8,r8[0x4]
80005648:	e2 18 00 20 	andl	r8,0x20,COH
8000564c:	c1 a0       	breq	80005680 <usb_general_interrupt+0x2cc>
8000564e:	fe 68 00 00 	mov	r8,-131072
80005652:	70 48       	ld.w	r8,r8[0x10]
80005654:	e2 18 00 20 	andl	r8,0x20,COH
80005658:	c1 40       	breq	80005680 <usb_general_interrupt+0x2cc>
    {
      Usb_disable_wake_up_interrupt();
8000565a:	fe 69 00 00 	mov	r9,-131072
8000565e:	31 08       	mov	r8,16
80005660:	93 58       	st.w	r9[0x14],r8
      Usb_ack_resume();
80005662:	fe 69 00 00 	mov	r9,-131072
80005666:	32 08       	mov	r8,32
80005668:	93 28       	st.w	r9[0x8],r8
      Usb_disable_resume_interrupt();
8000566a:	fe 69 00 00 	mov	r9,-131072
8000566e:	32 08       	mov	r8,32
80005670:	93 58       	st.w	r9[0x14],r8
      Usb_resume_action();
      Usb_send_event(EVT_USB_RESUME);
80005672:	4e 08       	lddpc	r8,800057f0 <usb_general_interrupt+0x43c>
80005674:	90 08       	ld.sh	r8,r8[0x0]
80005676:	5c 88       	casts.h	r8
80005678:	a7 b8       	sbr	r8,0x7
8000567a:	5c 88       	casts.h	r8
8000567c:	4d d9       	lddpc	r9,800057f0 <usb_general_interrupt+0x43c>
8000567e:	b2 08       	st.h	r9[0x0],r8
    }
    // USB bus reset detection
    if (Is_usb_reset() && Is_usb_reset_interrupt_enabled())
80005680:	fe 68 00 00 	mov	r8,-131072
80005684:	70 18       	ld.w	r8,r8[0x4]
80005686:	e2 18 00 08 	andl	r8,0x8,COH
8000568a:	e0 80 00 a1 	breq	800057cc <usb_general_interrupt+0x418>
8000568e:	fe 68 00 00 	mov	r8,-131072
80005692:	70 48       	ld.w	r8,r8[0x10]
80005694:	e2 18 00 08 	andl	r8,0x8,COH
80005698:	e0 80 00 9a 	breq	800057cc <usb_general_interrupt+0x418>
    {
      Usb_ack_reset();
8000569c:	fe 69 00 00 	mov	r9,-131072
800056a0:	30 88       	mov	r8,8
800056a2:	93 28       	st.w	r9[0x8],r8
      usb_init_device();
800056a4:	f0 1f 00 56 	mcall	800057fc <usb_general_interrupt+0x448>
      Usb_reset_action();
      Usb_send_event(EVT_USB_RESET);
800056a8:	4d 28       	lddpc	r8,800057f0 <usb_general_interrupt+0x43c>
800056aa:	90 08       	ld.sh	r8,r8[0x0]
800056ac:	5c 88       	casts.h	r8
800056ae:	a9 a8       	sbr	r8,0x8
800056b0:	5c 88       	casts.h	r8
800056b2:	4d 09       	lddpc	r9,800057f0 <usb_general_interrupt+0x43c>
800056b4:	b2 08       	st.h	r9[0x0],r8
800056b6:	c8 b8       	rjmp	800057cc <usb_general_interrupt+0x418>
  // may corrupt USB FIFO data).
  else
  #endif
  {
    // The device has been disconnected
    if (Is_host_device_disconnection() && Is_host_device_disconnection_interrupt_enabled())
800056b8:	fe 68 00 00 	mov	r8,-131072
800056bc:	f0 f8 04 04 	ld.w	r8,r8[1028]
800056c0:	e2 18 00 02 	andl	r8,0x2,COH
800056c4:	c1 f0       	breq	80005702 <usb_general_interrupt+0x34e>
800056c6:	fe 68 00 00 	mov	r8,-131072
800056ca:	f0 f8 04 10 	ld.w	r8,r8[1040]
800056ce:	e2 18 00 02 	andl	r8,0x2,COH
800056d2:	c1 80       	breq	80005702 <usb_general_interrupt+0x34e>
    {
      host_disable_all_pipes();
800056d4:	f0 1f 00 4b 	mcall	80005800 <usb_general_interrupt+0x44c>
      Host_ack_device_disconnection();
800056d8:	fe 69 00 00 	mov	r9,-131072
800056dc:	30 28       	mov	r8,2
800056de:	f3 48 04 08 	st.w	r9[1032],r8
  #if USB_HOST_PIPE_INTERRUPT_TRANSFER == ENABLE
      reset_it_pipe_str();
  #endif
      device_state = DEVICE_UNATTACHED;
800056e2:	4c 19       	lddpc	r9,800057e4 <usb_general_interrupt+0x430>
800056e4:	30 08       	mov	r8,0
800056e6:	b2 88       	st.b	r9[0x0],r8
      LOG_STR(log_device_disconnected);
      Usb_send_event(EVT_HOST_DISCONNECTION);
800056e8:	4c 28       	lddpc	r8,800057f0 <usb_general_interrupt+0x43c>
800056ea:	90 08       	ld.sh	r8,r8[0x0]
800056ec:	5c 88       	casts.h	r8
800056ee:	ab b8       	sbr	r8,0xb
800056f0:	5c 88       	casts.h	r8
800056f2:	4c 09       	lddpc	r9,800057f0 <usb_general_interrupt+0x43c>
800056f4:	b2 08       	st.h	r9[0x0],r8
      Host_device_disconnection_action();
800056f6:	4b d9       	lddpc	r9,800057e8 <usb_general_interrupt+0x434>
800056f8:	30 08       	mov	r8,0
800056fa:	b2 88       	st.b	r9[0x0],r8
800056fc:	4b c9       	lddpc	r9,800057ec <usb_general_interrupt+0x438>
800056fe:	30 08       	mov	r8,0
80005700:	b2 88       	st.b	r9[0x0],r8
      xSemaphoreGiveFromISR(usb_tsk_semphr, &task_woken);
      taskEXIT_CRITICAL();
  #endif
    }
    // Device connection
    if (Is_host_device_connection() && Is_host_device_connection_interrupt_enabled())
80005702:	fe 68 00 00 	mov	r8,-131072
80005706:	f0 f8 04 04 	ld.w	r8,r8[1028]
8000570a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000570e:	5c 58       	castu.b	r8
80005710:	c1 00       	breq	80005730 <usb_general_interrupt+0x37c>
80005712:	fe 68 00 00 	mov	r8,-131072
80005716:	f0 f8 04 10 	ld.w	r8,r8[1040]
8000571a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000571e:	5c 58       	castu.b	r8
80005720:	c0 80       	breq	80005730 <usb_general_interrupt+0x37c>
    {
      Host_ack_device_connection();
80005722:	fe 69 00 00 	mov	r9,-131072
80005726:	30 18       	mov	r8,1
80005728:	f3 48 04 08 	st.w	r9[1032],r8
      host_disable_all_pipes();
8000572c:	f0 1f 00 35 	mcall	80005800 <usb_general_interrupt+0x44c>
      Host_device_connection_action();
    }
    // Host Start-of-Frame has been sent
    if (Is_host_sof() && Is_host_sof_interrupt_enabled())
80005730:	fe 68 00 00 	mov	r8,-131072
80005734:	f0 f8 04 04 	ld.w	r8,r8[1028]
80005738:	e2 18 00 20 	andl	r8,0x20,COH
8000573c:	c1 c0       	breq	80005774 <usb_general_interrupt+0x3c0>
8000573e:	fe 68 00 00 	mov	r8,-131072
80005742:	f0 f8 04 10 	ld.w	r8,r8[1040]
80005746:	e2 18 00 20 	andl	r8,0x20,COH
8000574a:	c1 50       	breq	80005774 <usb_general_interrupt+0x3c0>
    {
      Host_ack_sof();
8000574c:	fe 69 00 00 	mov	r9,-131072
80005750:	32 08       	mov	r8,32
80005752:	f3 48 04 08 	st.w	r9[1032],r8
      Usb_send_event(EVT_HOST_SOF);
80005756:	4a 78       	lddpc	r8,800057f0 <usb_general_interrupt+0x43c>
80005758:	90 08       	ld.sh	r8,r8[0x0]
8000575a:	5c 88       	casts.h	r8
8000575c:	a9 b8       	sbr	r8,0x9
8000575e:	5c 88       	casts.h	r8
80005760:	4a 49       	lddpc	r9,800057f0 <usb_general_interrupt+0x43c>
80005762:	b2 08       	st.h	r9[0x0],r8
         {
            private_sof_counter++;
         }
      }
#else
      private_sof_counter++;
80005764:	4a 88       	lddpc	r8,80005804 <usb_general_interrupt+0x450>
80005766:	70 08       	ld.w	r8,r8[0x0]
80005768:	f0 c9 ff ff 	sub	r9,r8,-1
8000576c:	4a 68       	lddpc	r8,80005804 <usb_general_interrupt+0x450>
8000576e:	91 09       	st.w	r8[0x0],r9
            it_pipe_str[i].handler(PIPE_DELAY_TIMEOUT, it_pipe_str[i].nb_byte_processed);
          }
        }
      }
  #endif
      Host_sof_action();
80005770:	f0 1f 00 26 	mcall	80005808 <usb_general_interrupt+0x454>
    }
    // Host Wake-up has been received
    if (Is_host_hwup() && Is_host_hwup_interrupt_enabled())
80005774:	fe 68 00 00 	mov	r8,-131072
80005778:	f0 f8 04 04 	ld.w	r8,r8[1028]
8000577c:	e2 18 00 40 	andl	r8,0x40,COH
80005780:	c2 60       	breq	800057cc <usb_general_interrupt+0x418>
80005782:	fe 68 00 00 	mov	r8,-131072
80005786:	f0 f8 04 10 	ld.w	r8,r8[1040]
8000578a:	e2 18 00 40 	andl	r8,0x40,COH
8000578e:	c1 f0       	breq	800057cc <usb_general_interrupt+0x418>
    {
      // CAUTION: HWUP can be cleared only when USB clock is active (not frozen)!
      //! @todo Implement this on the silicon version
      //Pll_start_auto();               // First Restart the PLL for USB operation
      //Wait_pll_ready();               // Make sure PLL is locked
      Usb_unfreeze_clock();           // Enable clock on USB interface
80005790:	fe 69 00 00 	mov	r9,-131072
80005794:	fe 68 00 00 	mov	r8,-131072
80005798:	f0 f8 08 00 	ld.w	r8,r8[2048]
8000579c:	af c8       	cbr	r8,0xe
8000579e:	f3 48 08 00 	st.w	r9[2048],r8
      (void)Is_usb_clock_frozen();    // Make sure USB interface clock is enabled
800057a2:	fe 68 00 00 	mov	r8,-131072
800057a6:	f0 f8 08 00 	ld.w	r8,r8[2048]
      Host_disable_hwup_interrupt();  // Wake-up interrupt should be disabled as host is now awoken!
800057aa:	fe 69 00 00 	mov	r9,-131072
800057ae:	34 08       	mov	r8,64
800057b0:	f3 48 04 14 	st.w	r9[1044],r8
      Host_ack_hwup();                // Clear HWUP interrupt flag
800057b4:	fe 69 00 00 	mov	r9,-131072
800057b8:	34 08       	mov	r8,64
800057ba:	f3 48 04 08 	st.w	r9[1032],r8
      Usb_send_event(EVT_HOST_HWUP);  // Send software event
800057be:	48 d8       	lddpc	r8,800057f0 <usb_general_interrupt+0x43c>
800057c0:	90 08       	ld.sh	r8,r8[0x0]
800057c2:	5c 88       	casts.h	r8
800057c4:	ab a8       	sbr	r8,0xa
800057c6:	5c 88       	casts.h	r8
800057c8:	48 a9       	lddpc	r9,800057f0 <usb_general_interrupt+0x43c>
800057ca:	b2 08       	st.h	r9[0x0],r8
#endif  // End HOST FEATURE MODE

#ifdef FREERTOS_USED
  return task_woken;
#endif
}
800057cc:	2f bd       	sub	sp,-20
800057ce:	e3 cd 40 80 	ldm	sp++,r7,lr
800057d2:	d6 03       	rete
800057d4:	00 00       	add	r0,r0
800057d6:	06 56       	eor	r6,r3
800057d8:	00 00       	add	r0,r0
800057da:	06 57       	eor	r7,r3
800057dc:	00 00       	add	r0,r0
800057de:	09 a8       	ld.ub	r8,r4[0x2]
800057e0:	00 00       	add	r0,r0
800057e2:	09 ac       	ld.ub	r12,r4[0x2]
800057e4:	00 00       	add	r0,r0
800057e6:	09 b5       	ld.ub	r5,r4[0x3]
800057e8:	00 00       	add	r0,r0
800057ea:	0a f9       	st.b	--r5,r9
800057ec:	00 00       	add	r0,r0
800057ee:	0a f8       	st.b	--r5,r8
800057f0:	00 00       	add	r0,r0
800057f2:	06 54       	eor	r4,r3
800057f4:	80 00       	ld.sh	r0,r0[0x0]
800057f6:	58 cc       	cp.w	r12,12
800057f8:	80 00       	ld.sh	r0,r0[0x0]
800057fa:	82 f4       	ld.uh	r4,r1[0xe]
800057fc:	80 00       	ld.sh	r0,r0[0x0]
800057fe:	49 fc       	lddpc	r12,80005878 <usb_device_task_init+0x58>
80005800:	80 00       	ld.sh	r0,r0[0x0]
80005802:	4d 14       	lddpc	r4,80005944 <usb_device_task+0x2c>
80005804:	00 00       	add	r0,r0
80005806:	09 a4       	ld.ub	r4,r4[0x2]
80005808:	80 00       	ld.sh	r0,r0[0x0]
8000580a:	83 10       	st.w	r1[0x4],r0

8000580c <host_get_timeout>:
  //! @todo Implement this on the silicon version
  //Enter_power_down_mode();  // For example...
}

U32  host_get_timeout( void )
{
8000580c:	eb cd 40 80 	pushm	r7,lr
80005810:	1a 97       	mov	r7,sp
  return private_sof_counter;
80005812:	48 38       	lddpc	r8,8000581c <host_get_timeout+0x10>
80005814:	70 08       	ld.w	r8,r8[0x0]
}
80005816:	10 9c       	mov	r12,r8
80005818:	e3 cd 80 80 	ldm	sp++,r7,pc
8000581c:	00 00       	add	r0,r0
8000581e:	09 a4       	ld.ub	r4,r4[0x2]

80005820 <usb_device_task_init>:
//! This function enables the USB controller and inits the USB interrupts.
//! The aim is to allow the USB connection detection in order to send
//! the appropriate USB event to the operating mode manager.
//!
void usb_device_task_init(void)
{
80005820:	eb cd 40 80 	pushm	r7,lr
80005824:	1a 97       	mov	r7,sp
80005826:	20 2d       	sub	sp,8
  usb_connected = FALSE;
80005828:	4a 79       	lddpc	r9,800058c4 <usb_device_task_init+0xa4>
8000582a:	30 08       	mov	r8,0
8000582c:	b2 88       	st.b	r9[0x0],r8
  usb_configuration_nb = 0;
8000582e:	4a 79       	lddpc	r9,800058c8 <usb_device_task_init+0xa8>
80005830:	30 08       	mov	r8,0
80005832:	b2 88       	st.b	r9[0x0],r8
  //! @todo Implement this on the silicon version
  //Pll_start_auto();
  //Wait_pll_ready();
  Disable_global_interrupt();
80005834:	d3 03       	ssrf	0x10
  Usb_disable();
80005836:	fe 69 00 00 	mov	r9,-131072
8000583a:	fe 68 00 00 	mov	r8,-131072
8000583e:	f0 f8 08 00 	ld.w	r8,r8[2048]
80005842:	af d8       	cbr	r8,0xf
80005844:	f3 48 08 00 	st.w	r9[2048],r8
  (void)Is_usb_enabled();
80005848:	fe 68 00 00 	mov	r8,-131072
8000584c:	f0 f8 08 00 	ld.w	r8,r8[2048]
  Enable_global_interrupt();
80005850:	d5 03       	csrf	0x10
  Usb_disable_otg_pad();
80005852:	fe 69 00 00 	mov	r9,-131072
80005856:	fe 68 00 00 	mov	r8,-131072
8000585a:	f0 f8 08 00 	ld.w	r8,r8[2048]
8000585e:	ad c8       	cbr	r8,0xc
80005860:	f3 48 08 00 	st.w	r9[2048],r8
  Usb_enable_otg_pad();
80005864:	fe 69 00 00 	mov	r9,-131072
80005868:	fe 68 00 00 	mov	r8,-131072
8000586c:	f0 f8 08 00 	ld.w	r8,r8[2048]
80005870:	ad a8       	sbr	r8,0xc
80005872:	f3 48 08 00 	st.w	r9[2048],r8
  Usb_enable();
80005876:	fe 69 00 00 	mov	r9,-131072
8000587a:	fe 68 00 00 	mov	r8,-131072
8000587e:	f0 f8 08 00 	ld.w	r8,r8[2048]
80005882:	af b8       	sbr	r8,0xf
80005884:	f3 48 08 00 	st.w	r9[2048],r8
  Usb_unfreeze_clock();
80005888:	fe 69 00 00 	mov	r9,-131072
8000588c:	fe 68 00 00 	mov	r8,-131072
80005890:	f0 f8 08 00 	ld.w	r8,r8[2048]
80005894:	af c8       	cbr	r8,0xe
80005896:	f3 48 08 00 	st.w	r9[2048],r8
  (void)Is_usb_clock_frozen();
8000589a:	fe 68 00 00 	mov	r8,-131072
8000589e:	f0 f8 08 00 	ld.w	r8,r8[2048]
  Usb_ack_suspend();  // A suspend condition may be detected right after enabling the USB macro
800058a2:	fe 69 00 00 	mov	r9,-131072
800058a6:	30 18       	mov	r8,1
800058a8:	93 28       	st.w	r9[0x8],r8
  Usb_enable_vbus_interrupt();
800058aa:	fe 69 00 00 	mov	r9,-131072
800058ae:	fe 68 00 00 	mov	r8,-131072
800058b2:	f0 f8 08 00 	ld.w	r8,r8[2048]
800058b6:	a1 b8       	sbr	r8,0x1
800058b8:	f3 48 08 00 	st.w	r9[2048],r8
  Enable_global_interrupt();
800058bc:	d5 03       	csrf	0x10
              configTSK_USB_DEV_STACK_SIZE,
              NULL,
              configTSK_USB_DEV_PRIORITY,
              &usb_device_tsk);
#endif  // FREERTOS_USED
}
800058be:	2f ed       	sub	sp,-8
800058c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800058c4:	00 00       	add	r0,r0
800058c6:	09 a8       	ld.ub	r8,r4[0x2]
800058c8:	00 00       	add	r0,r0
800058ca:	09 ac       	ld.ub	r12,r4[0x2]

800058cc <usb_start_device>:
//! the appropriate USB event to the operating mode manager.
//! Start device function is executed once VBus connection has been detected
//! either by the VBus change interrupt or by the VBus high level.
//!
void usb_start_device(void)
{
800058cc:	eb cd 40 80 	pushm	r7,lr
800058d0:	1a 97       	mov	r7,sp
  Usb_enable_suspend_interrupt();
800058d2:	fe 69 00 00 	mov	r9,-131072
800058d6:	30 18       	mov	r8,1
800058d8:	93 68       	st.w	r9[0x18],r8
  Usb_enable_reset_interrupt();
800058da:	fe 69 00 00 	mov	r9,-131072
800058de:	30 88       	mov	r8,8
800058e0:	93 68       	st.w	r9[0x18],r8

#if (USB_HIGH_SPEED_SUPPORT==DISABLED)
  Usb_force_full_speed_mode();
800058e2:	fe 69 00 00 	mov	r9,-131072
800058e6:	fe 68 00 00 	mov	r8,-131072
800058ea:	70 08       	ld.w	r8,r8[0x0]
800058ec:	e8 18 0c 00 	orl	r8,0xc00
800058f0:	93 08       	st.w	r9[0x0],r8
#else
  Usb_use_dual_speed_mode();
#endif
  
  usb_init_device();  // Configure the USB controller EP0
800058f2:	f0 1f 00 08 	mcall	80005910 <usb_start_device+0x44>
  Usb_attach();
800058f6:	fe 69 00 00 	mov	r9,-131072
800058fa:	fe 68 00 00 	mov	r8,-131072
800058fe:	70 08       	ld.w	r8,r8[0x0]
80005900:	a9 c8       	cbr	r8,0x8
80005902:	93 08       	st.w	r9[0x0],r8
  usb_connected = TRUE;
80005904:	48 49       	lddpc	r9,80005914 <usb_start_device+0x48>
80005906:	30 18       	mov	r8,1
80005908:	b2 88       	st.b	r9[0x0],r8
}
8000590a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000590e:	00 00       	add	r0,r0
80005910:	80 00       	ld.sh	r0,r0[0x0]
80005912:	49 fc       	lddpc	r12,8000598c <usb_device_task+0x74>
80005914:	00 00       	add	r0,r0
80005916:	09 a8       	ld.ub	r8,r4[0x2]

80005918 <usb_device_task>:
#ifdef FREERTOS_USED
void usb_device_task(void *pvParameters)
#else
void usb_device_task(void)
#endif
{
80005918:	eb cd 40 80 	pushm	r7,lr
8000591c:	1a 97       	mov	r7,sp
  while (TRUE)
  {
    vTaskDelayUntil(&xLastWakeTime, configTSK_USB_DEV_PERIOD);

#endif  // FREERTOS_USED
    if (!usb_connected && Is_usb_vbus_high())
8000591e:	49 f8       	lddpc	r8,80005998 <usb_device_task+0x80>
80005920:	11 88       	ld.ub	r8,r8[0x0]
80005922:	5c 58       	castu.b	r8
80005924:	c1 11       	brne	80005946 <usb_device_task+0x2e>
80005926:	fe 68 00 00 	mov	r8,-131072
8000592a:	f0 f8 08 04 	ld.w	r8,r8[2052]
8000592e:	e2 18 08 00 	andl	r8,0x800,COH
80005932:	c0 a0       	breq	80005946 <usb_device_task+0x2e>
    {
      usb_start_device();
80005934:	f0 1f 00 1a 	mcall	8000599c <usb_device_task+0x84>
      Usb_send_event(EVT_USB_POWERED);
80005938:	49 a8       	lddpc	r8,800059a0 <usb_device_task+0x88>
8000593a:	90 08       	ld.sh	r8,r8[0x0]
8000593c:	5c 88       	casts.h	r8
8000593e:	a1 b8       	sbr	r8,0x1
80005940:	5c 88       	casts.h	r8
80005942:	49 89       	lddpc	r9,800059a0 <usb_device_task+0x88>
80005944:	b2 08       	st.h	r9[0x0],r8
      Usb_vbus_on_action();
    }

    if (Is_usb_event(EVT_USB_RESET))
80005946:	49 78       	lddpc	r8,800059a0 <usb_device_task+0x88>
80005948:	90 08       	ld.sh	r8,r8[0x0]
8000594a:	5c 88       	casts.h	r8
8000594c:	5c 78       	castu.h	r8
8000594e:	e2 18 01 00 	andl	r8,0x100,COH
80005952:	c1 90       	breq	80005984 <usb_device_task+0x6c>
    {
      Usb_ack_event(EVT_USB_RESET);
80005954:	49 38       	lddpc	r8,800059a0 <usb_device_task+0x88>
80005956:	90 08       	ld.sh	r8,r8[0x0]
80005958:	5c 88       	casts.h	r8
8000595a:	a9 c8       	cbr	r8,0x8
8000595c:	5c 88       	casts.h	r8
8000595e:	49 19       	lddpc	r9,800059a0 <usb_device_task+0x88>
80005960:	b2 08       	st.h	r9[0x0],r8
      Usb_reset_endpoint(EP_CONTROL);
80005962:	fe 69 00 00 	mov	r9,-131072
80005966:	fe 68 00 00 	mov	r8,-131072
8000596a:	70 78       	ld.w	r8,r8[0x1c]
8000596c:	b1 a8       	sbr	r8,0x10
8000596e:	93 78       	st.w	r9[0x1c],r8
80005970:	fe 69 00 00 	mov	r9,-131072
80005974:	fe 68 00 00 	mov	r8,-131072
80005978:	70 78       	ld.w	r8,r8[0x1c]
8000597a:	b1 c8       	cbr	r8,0x10
8000597c:	93 78       	st.w	r9[0x1c],r8
      usb_configuration_nb = 0;
8000597e:	48 a9       	lddpc	r9,800059a4 <usb_device_task+0x8c>
80005980:	30 08       	mov	r8,0
80005982:	b2 88       	st.b	r9[0x0],r8
    }

    // Connection to the device enumeration process
    if (Is_usb_setup_received())
80005984:	fe 68 01 30 	mov	r8,-130768
80005988:	70 08       	ld.w	r8,r8[0x0]
8000598a:	e2 18 00 04 	andl	r8,0x4,COH
8000598e:	c0 30       	breq	80005994 <usb_device_task+0x7c>
    {
      usb_process_request();
80005990:	f0 1f 00 06 	mcall	800059a8 <usb_device_task+0x90>
    }
#ifdef FREERTOS_USED
  }
#endif
}
80005994:	e3 cd 80 80 	ldm	sp++,r7,pc
80005998:	00 00       	add	r0,r0
8000599a:	09 a8       	ld.ub	r8,r4[0x2]
8000599c:	80 00       	ld.sh	r0,r0[0x0]
8000599e:	58 cc       	cp.w	r12,12
800059a0:	00 00       	add	r0,r0
800059a2:	06 54       	eor	r4,r3
800059a4:	00 00       	add	r0,r0
800059a6:	09 ac       	ld.ub	r12,r4[0x2]
800059a8:	80 00       	ld.sh	r0,r0[0x0]
800059aa:	59 ac       	cp.w	r12,26

800059ac <usb_process_request>:
//! CLEAR_FEATURE
//! SET_FEATURE
//! GET_STATUS
//!
void usb_process_request(void)
{
800059ac:	eb cd 40 80 	pushm	r7,lr
800059b0:	1a 97       	mov	r7,sp
800059b2:	20 2d       	sub	sp,8
  U8 bRequest;

  Usb_reset_endpoint_fifo_access(EP_CONTROL);
800059b4:	4c f9       	lddpc	r9,80005af0 <usb_process_request+0x144>
800059b6:	fc 18 e0 00 	movh	r8,0xe000
800059ba:	93 08       	st.w	r9[0x0],r8
  bmRequestType = Usb_read_endpoint_data(EP_CONTROL, 8);
800059bc:	4c d8       	lddpc	r8,80005af0 <usb_process_request+0x144>
800059be:	70 0a       	ld.w	r10,r8[0x0]
800059c0:	15 88       	ld.ub	r8,r10[0x0]
800059c2:	5c 58       	castu.b	r8
800059c4:	4c c9       	lddpc	r9,80005af4 <usb_process_request+0x148>
800059c6:	b2 88       	st.b	r9[0x0],r8
800059c8:	f4 c9 ff ff 	sub	r9,r10,-1
800059cc:	4c 98       	lddpc	r8,80005af0 <usb_process_request+0x144>
800059ce:	91 09       	st.w	r8[0x0],r9
  bRequest      = Usb_read_endpoint_data(EP_CONTROL, 8);
800059d0:	4c 88       	lddpc	r8,80005af0 <usb_process_request+0x144>
800059d2:	70 09       	ld.w	r9,r8[0x0]
800059d4:	13 88       	ld.ub	r8,r9[0x0]
800059d6:	ef 68 ff ff 	st.b	r7[-1],r8
800059da:	2f f9       	sub	r9,-1
800059dc:	4c 58       	lddpc	r8,80005af0 <usb_process_request+0x144>
800059de:	91 09       	st.w	r8[0x0],r9

  switch (bRequest)
800059e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800059e4:	ef 49 ff f8 	st.w	r7[-8],r9
800059e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059ec:	58 b8       	cp.w	r8,11
800059ee:	e0 8b 00 6a 	brhi	80005ac2 <usb_process_request+0x116>
800059f2:	4c 28       	lddpc	r8,80005af8 <usb_process_request+0x14c>
800059f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800059f8:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
  {
  case GET_DESCRIPTOR:
    if (bmRequestType == 0x80) usb_get_descriptor();
800059fc:	4b e8       	lddpc	r8,80005af4 <usb_process_request+0x148>
800059fe:	11 89       	ld.ub	r9,r8[0x0]
80005a00:	38 08       	mov	r8,-128
80005a02:	f0 09 18 00 	cp.b	r9,r8
80005a06:	c5 e1       	brne	80005ac2 <usb_process_request+0x116>
80005a08:	f0 1f 00 3d 	mcall	80005afc <usb_process_request+0x150>
80005a0c:	c6 f8       	rjmp	80005aea <usb_process_request+0x13e>
    else goto unsupported_request;
    break;

  case GET_CONFIGURATION:
    if (bmRequestType == 0x80) usb_get_configuration();
80005a0e:	4b a8       	lddpc	r8,80005af4 <usb_process_request+0x148>
80005a10:	11 89       	ld.ub	r9,r8[0x0]
80005a12:	38 08       	mov	r8,-128
80005a14:	f0 09 18 00 	cp.b	r9,r8
80005a18:	c5 51       	brne	80005ac2 <usb_process_request+0x116>
80005a1a:	f0 1f 00 3a 	mcall	80005b00 <usb_process_request+0x154>
80005a1e:	c6 68       	rjmp	80005aea <usb_process_request+0x13e>
    else goto unsupported_request;
    break;

  case SET_ADDRESS:
    if (bmRequestType == 0x00) usb_set_address();
80005a20:	4b 58       	lddpc	r8,80005af4 <usb_process_request+0x148>
80005a22:	11 88       	ld.ub	r8,r8[0x0]
80005a24:	58 08       	cp.w	r8,0
80005a26:	c4 e1       	brne	80005ac2 <usb_process_request+0x116>
80005a28:	f0 1f 00 37 	mcall	80005b04 <usb_process_request+0x158>
80005a2c:	c5 f8       	rjmp	80005aea <usb_process_request+0x13e>
    else goto unsupported_request;
    break;

  case SET_CONFIGURATION:
    if (bmRequestType == 0x00) usb_set_configuration();
80005a2e:	4b 28       	lddpc	r8,80005af4 <usb_process_request+0x148>
80005a30:	11 88       	ld.ub	r8,r8[0x0]
80005a32:	58 08       	cp.w	r8,0
80005a34:	c4 71       	brne	80005ac2 <usb_process_request+0x116>
80005a36:	f0 1f 00 35 	mcall	80005b08 <usb_process_request+0x15c>
80005a3a:	c5 88       	rjmp	80005aea <usb_process_request+0x13e>
    else goto unsupported_request;
    break;

  case CLEAR_FEATURE:
    if (bmRequestType <= 0x02) usb_clear_feature();
80005a3c:	4a e8       	lddpc	r8,80005af4 <usb_process_request+0x148>
80005a3e:	11 89       	ld.ub	r9,r8[0x0]
80005a40:	30 28       	mov	r8,2
80005a42:	f0 09 18 00 	cp.b	r9,r8
80005a46:	e0 8b 00 3e 	brhi	80005ac2 <usb_process_request+0x116>
80005a4a:	f0 1f 00 31 	mcall	80005b0c <usb_process_request+0x160>
80005a4e:	c4 e8       	rjmp	80005aea <usb_process_request+0x13e>
    else goto unsupported_request;
    break;

  case SET_FEATURE:
    if (bmRequestType <= 0x02) usb_set_feature();
80005a50:	4a 98       	lddpc	r8,80005af4 <usb_process_request+0x148>
80005a52:	11 89       	ld.ub	r9,r8[0x0]
80005a54:	30 28       	mov	r8,2
80005a56:	f0 09 18 00 	cp.b	r9,r8
80005a5a:	e0 8b 00 34 	brhi	80005ac2 <usb_process_request+0x116>
80005a5e:	f0 1f 00 2d 	mcall	80005b10 <usb_process_request+0x164>
80005a62:	c4 48       	rjmp	80005aea <usb_process_request+0x13e>
    else goto unsupported_request;
    break;

  case GET_STATUS:
    if (0x7F < bmRequestType && bmRequestType <= 0x82) usb_get_status();
80005a64:	4a 48       	lddpc	r8,80005af4 <usb_process_request+0x148>
80005a66:	11 88       	ld.ub	r8,r8[0x0]
80005a68:	10 99       	mov	r9,r8
80005a6a:	30 08       	mov	r8,0
80005a6c:	f0 09 18 00 	cp.b	r9,r8
80005a70:	c2 94       	brge	80005ac2 <usb_process_request+0x116>
80005a72:	4a 18       	lddpc	r8,80005af4 <usb_process_request+0x148>
80005a74:	11 89       	ld.ub	r9,r8[0x0]
80005a76:	38 28       	mov	r8,-126
80005a78:	f0 09 18 00 	cp.b	r9,r8
80005a7c:	e0 8b 00 23 	brhi	80005ac2 <usb_process_request+0x116>
80005a80:	f0 1f 00 25 	mcall	80005b14 <usb_process_request+0x168>
80005a84:	c3 38       	rjmp	80005aea <usb_process_request+0x13e>
    else goto unsupported_request;
    break;

  case GET_INTERFACE:
    if (bmRequestType == 0x81)
80005a86:	49 c8       	lddpc	r8,80005af4 <usb_process_request+0x148>
80005a88:	11 89       	ld.ub	r9,r8[0x0]
80005a8a:	38 18       	mov	r8,-127
80005a8c:	f0 09 18 00 	cp.b	r9,r8
80005a90:	c1 91       	brne	80005ac2 <usb_process_request+0x116>
    {
      if(!usb_get_interface())
80005a92:	f0 1f 00 22 	mcall	80005b18 <usb_process_request+0x16c>
80005a96:	18 98       	mov	r8,r12
80005a98:	58 08       	cp.w	r8,0
80005a9a:	c2 81       	brne	80005aea <usb_process_request+0x13e>
      {
        Usb_enable_stall_handshake(EP_CONTROL);
80005a9c:	fe 69 01 f0 	mov	r9,-130576
80005aa0:	e8 68 00 00 	mov	r8,524288
80005aa4:	93 08       	st.w	r9[0x0],r8
        Usb_ack_setup_received_free();
80005aa6:	fe 69 01 60 	mov	r9,-130720
80005aaa:	30 48       	mov	r8,4
80005aac:	93 08       	st.w	r9[0x0],r8
80005aae:	c1 e8       	rjmp	80005aea <usb_process_request+0x13e>
    }
    else goto unsupported_request;
    break;

  case SET_INTERFACE:
    if (bmRequestType == 0x01) usb_set_interface();
80005ab0:	49 18       	lddpc	r8,80005af4 <usb_process_request+0x148>
80005ab2:	11 89       	ld.ub	r9,r8[0x0]
80005ab4:	30 18       	mov	r8,1
80005ab6:	f0 09 18 00 	cp.b	r9,r8
80005aba:	c0 41       	brne	80005ac2 <usb_process_request+0x116>
80005abc:	f0 1f 00 18 	mcall	80005b1c <usb_process_request+0x170>
80005ac0:	c1 58       	rjmp	80005aea <usb_process_request+0x13e>

  case SET_DESCRIPTOR:
  case SYNCH_FRAME:
  default:  //!< unsupported request => call to user read request
unsupported_request:
    if (!usb_user_read_request(bmRequestType, bRequest))
80005ac2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005ac6:	48 c8       	lddpc	r8,80005af4 <usb_process_request+0x148>
80005ac8:	11 88       	ld.ub	r8,r8[0x0]
80005aca:	12 9b       	mov	r11,r9
80005acc:	10 9c       	mov	r12,r8
80005ace:	f0 1f 00 15 	mcall	80005b20 <usb_process_request+0x174>
80005ad2:	18 98       	mov	r8,r12
80005ad4:	58 08       	cp.w	r8,0
80005ad6:	c0 a1       	brne	80005aea <usb_process_request+0x13e>
    {
      Usb_enable_stall_handshake(EP_CONTROL);
80005ad8:	fe 69 01 f0 	mov	r9,-130576
80005adc:	e8 68 00 00 	mov	r8,524288
80005ae0:	93 08       	st.w	r9[0x0],r8
      Usb_ack_setup_received_free();
80005ae2:	fe 69 01 60 	mov	r9,-130720
80005ae6:	30 48       	mov	r8,4
80005ae8:	93 08       	st.w	r9[0x0],r8
    }
    break;
  }
}
80005aea:	2f ed       	sub	sp,-8
80005aec:	e3 cd 80 80 	ldm	sp++,r7,pc
80005af0:	00 00       	add	r0,r0
80005af2:	09 88       	ld.ub	r8,r4[0x0]
80005af4:	00 00       	add	r0,r0
80005af6:	06 58       	eor	r8,r3
80005af8:	80 00       	ld.sh	r0,r0[0x0]
80005afa:	fa b8       	*unknown*
80005afc:	80 00       	ld.sh	r0,r0[0x0]
80005afe:	5c 38       	neg	r8
80005b00:	80 00       	ld.sh	r0,r0[0x0]
80005b02:	5e 0c       	reteq	r12
80005b04:	80 00       	ld.sh	r0,r0[0x0]
80005b06:	5b 24       	cp.w	r4,-14
80005b08:	80 00       	ld.sh	r0,r0[0x0]
80005b0a:	5b 90       	cp.w	r0,-7
80005b0c:	80 00       	ld.sh	r0,r0[0x0]
80005b0e:	60 60       	ld.w	r0,r0[0x18]
80005b10:	80 00       	ld.sh	r0,r0[0x0]
80005b12:	5f 70       	srpl	r0
80005b14:	80 00       	ld.sh	r0,r0[0x0]
80005b16:	5e 5c       	retlt	r12
80005b18:	80 00       	ld.sh	r0,r0[0x0]
80005b1a:	61 b0       	ld.w	r0,r0[0x6c]
80005b1c:	80 00       	ld.sh	r0,r0[0x0]
80005b1e:	62 64       	ld.w	r4,r1[0x18]
80005b20:	80 00       	ld.sh	r0,r0[0x0]
80005b22:	86 c8       	ld.uh	r8,r3[0x8]

80005b24 <usb_set_address>:

//! This function manages the SET ADDRESS request. When complete, the device
//! will filter the requests using the new address.
//!
void usb_set_address(void)
{
80005b24:	eb cd 40 80 	pushm	r7,lr
80005b28:	1a 97       	mov	r7,sp
80005b2a:	20 1d       	sub	sp,4
  U8 addr = Usb_read_endpoint_data(EP_CONTROL, 8);
80005b2c:	49 88       	lddpc	r8,80005b8c <usb_set_address+0x68>
80005b2e:	70 09       	ld.w	r9,r8[0x0]
80005b30:	13 88       	ld.ub	r8,r9[0x0]
80005b32:	ef 68 ff ff 	st.b	r7[-1],r8
80005b36:	2f f9       	sub	r9,-1
80005b38:	49 58       	lddpc	r8,80005b8c <usb_set_address+0x68>
80005b3a:	91 09       	st.w	r8[0x0],r9
  Usb_configure_address(addr);
80005b3c:	fe 6a 00 00 	mov	r10,-131072
80005b40:	fe 68 00 00 	mov	r8,-131072
80005b44:	70 08       	ld.w	r8,r8[0x0]
80005b46:	10 99       	mov	r9,r8
80005b48:	e0 19 ff 80 	andl	r9,0xff80
80005b4c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005b50:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
80005b54:	f3 e8 10 08 	or	r8,r9,r8
80005b58:	95 08       	st.w	r10[0x0],r8

  Usb_ack_setup_received_free();
80005b5a:	fe 69 01 60 	mov	r9,-130720
80005b5e:	30 48       	mov	r8,4
80005b60:	93 08       	st.w	r9[0x0],r8

  Usb_ack_control_in_ready_send();    //!< send a ZLP for STATUS phase
80005b62:	fe 69 01 60 	mov	r9,-130720
80005b66:	30 18       	mov	r8,1
80005b68:	93 08       	st.w	r9[0x0],r8
  while (!Is_usb_control_in_ready()); //!< waits for status phase done
80005b6a:	fe 68 01 30 	mov	r8,-130768
80005b6e:	70 08       	ld.w	r8,r8[0x0]
80005b70:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005b74:	cf b0       	breq	80005b6a <usb_set_address+0x46>
                                      //!< before using the new address
  Usb_enable_address();
80005b76:	fe 69 00 00 	mov	r9,-131072
80005b7a:	fe 68 00 00 	mov	r8,-131072
80005b7e:	70 08       	ld.w	r8,r8[0x0]
80005b80:	a7 b8       	sbr	r8,0x7
80005b82:	93 08       	st.w	r9[0x0],r8
}
80005b84:	2f fd       	sub	sp,-4
80005b86:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b8a:	00 00       	add	r0,r0
80005b8c:	00 00       	add	r0,r0
80005b8e:	09 88       	ld.ub	r8,r4[0x0]

80005b90 <usb_set_configuration>:
//! configuration is valid, this function call the usb_user_endpoint_init()
//! function that will configure the endpoints following the configuration
//! number.
//!
void usb_set_configuration(void)
{
80005b90:	eb cd 40 80 	pushm	r7,lr
80005b94:	1a 97       	mov	r7,sp
80005b96:	20 1d       	sub	sp,4
  U8 configuration_number = Usb_read_endpoint_data(EP_CONTROL, 8);
80005b98:	4a 48       	lddpc	r8,80005c28 <usb_set_configuration+0x98>
80005b9a:	70 09       	ld.w	r9,r8[0x0]
80005b9c:	13 88       	ld.ub	r8,r9[0x0]
80005b9e:	ef 68 ff fe 	st.b	r7[-2],r8
80005ba2:	2f f9       	sub	r9,-1
80005ba4:	4a 18       	lddpc	r8,80005c28 <usb_set_configuration+0x98>
80005ba6:	91 09       	st.w	r8[0x0],r9
  U8 u8_i;

  if (configuration_number <= NB_CONFIGURATION)
80005ba8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005bac:	30 18       	mov	r8,1
80005bae:	f0 09 18 00 	cp.b	r9,r8
80005bb2:	e0 8b 00 2f 	brhi	80005c10 <usb_set_configuration+0x80>
  {
    Usb_ack_setup_received_free();
80005bb6:	fe 69 01 60 	mov	r9,-130720
80005bba:	30 48       	mov	r8,4
80005bbc:	93 08       	st.w	r9[0x0],r8
    usb_configuration_nb = configuration_number;
80005bbe:	49 c9       	lddpc	r9,80005c2c <usb_set_configuration+0x9c>
80005bc0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005bc4:	b2 88       	st.b	r9[0x0],r8
    for( u8_i=0; u8_i<NB_INTERFACE; u8_i++) usb_interface_status[u8_i]=0;
80005bc6:	30 08       	mov	r8,0
80005bc8:	ef 68 ff ff 	st.b	r7[-1],r8
80005bcc:	c0 c8       	rjmp	80005be4 <usb_set_configuration+0x54>
80005bce:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80005bd2:	49 89       	lddpc	r9,80005c30 <usb_set_configuration+0xa0>
80005bd4:	30 08       	mov	r8,0
80005bd6:	f2 0a 0b 08 	st.b	r9[r10],r8
80005bda:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005bde:	2f f8       	sub	r8,-1
80005be0:	ef 68 ff ff 	st.b	r7[-1],r8
80005be4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005be8:	30 18       	mov	r8,1
80005bea:	f0 09 18 00 	cp.b	r9,r8
80005bee:	fe 98 ff f0 	brls	80005bce <usb_set_configuration+0x3e>
   
    usb_user_endpoint_init(usb_configuration_nb); //!< endpoint configuration
80005bf2:	48 f8       	lddpc	r8,80005c2c <usb_set_configuration+0x9c>
80005bf4:	11 88       	ld.ub	r8,r8[0x0]
80005bf6:	5c 58       	castu.b	r8
80005bf8:	10 9c       	mov	r12,r8
80005bfa:	f0 1f 00 0f 	mcall	80005c34 <usb_set_configuration+0xa4>
    Usb_set_configuration_action();
80005bfe:	fe 69 00 00 	mov	r9,-131072
80005c02:	30 48       	mov	r8,4
80005c04:	93 68       	st.w	r9[0x18],r8
 
    Usb_ack_control_in_ready_send();              //!< send a ZLP for STATUS phase
80005c06:	fe 69 01 60 	mov	r9,-130720
80005c0a:	30 18       	mov	r8,1
80005c0c:	93 08       	st.w	r9[0x0],r8
80005c0e:	c0 a8       	rjmp	80005c22 <usb_set_configuration+0x92>
  }
  else
  {
    //!< keep that order (set StallRq/clear RxSetup) or a
    //!< OUT request following the SETUP may be acknowledged
    Usb_enable_stall_handshake(EP_CONTROL);
80005c10:	fe 69 01 f0 	mov	r9,-130576
80005c14:	e8 68 00 00 	mov	r8,524288
80005c18:	93 08       	st.w	r9[0x0],r8
    Usb_ack_setup_received_free();
80005c1a:	fe 69 01 60 	mov	r9,-130720
80005c1e:	30 48       	mov	r8,4
80005c20:	93 08       	st.w	r9[0x0],r8
  }
}
80005c22:	2f fd       	sub	sp,-4
80005c24:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c28:	00 00       	add	r0,r0
80005c2a:	09 88       	ld.ub	r8,r4[0x0]
80005c2c:	00 00       	add	r0,r0
80005c2e:	09 ac       	ld.ub	r12,r4[0x2]
80005c30:	00 00       	add	r0,r0
80005c32:	06 5c       	eor	r12,r3
80005c34:	80 00       	ld.sh	r0,r0[0x0]
80005c36:	85 08       	st.w	r2[0x0],r8

80005c38 <usb_get_descriptor>:
//! other descriptors must be supported by the usb_user_get_descriptor
//! function.
//! Only 1 configuration is supported.
//!
void usb_get_descriptor(void)
{
80005c38:	eb cd 40 80 	pushm	r7,lr
80005c3c:	1a 97       	mov	r7,sp
80005c3e:	20 4d       	sub	sp,16
  Union32 temp;
#if (USB_HIGH_SPEED_SUPPORT==ENABLED)
  Bool    b_first_data = TRUE;
#endif
  
  zlp             = FALSE;                                  /* no zero length packet */
80005c40:	30 08       	mov	r8,0
80005c42:	ef 68 ff fb 	st.b	r7[-5],r8
  string_type     = Usb_read_endpoint_data(EP_CONTROL, 8);  /* read LSB of wValue    */
80005c46:	4e b8       	lddpc	r8,80005df0 <usb_get_descriptor+0x1b8>
80005c48:	70 09       	ld.w	r9,r8[0x0]
80005c4a:	13 88       	ld.ub	r8,r9[0x0]
80005c4c:	ef 68 ff ff 	st.b	r7[-1],r8
80005c50:	2f f9       	sub	r9,-1
80005c52:	4e 88       	lddpc	r8,80005df0 <usb_get_descriptor+0x1b8>
80005c54:	91 09       	st.w	r8[0x0],r9
  descriptor_type = Usb_read_endpoint_data(EP_CONTROL, 8);  /* read MSB of wValue    */
80005c56:	4e 78       	lddpc	r8,80005df0 <usb_get_descriptor+0x1b8>
80005c58:	70 09       	ld.w	r9,r8[0x0]
80005c5a:	13 88       	ld.ub	r8,r9[0x0]
80005c5c:	ef 68 ff fe 	st.b	r7[-2],r8
80005c60:	2f f9       	sub	r9,-1
80005c62:	4e 48       	lddpc	r8,80005df0 <usb_get_descriptor+0x1b8>
80005c64:	91 09       	st.w	r8[0x0],r9

  switch (descriptor_type)
80005c66:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005c6a:	ef 48 ff f0 	st.w	r7[-16],r8
80005c6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005c72:	58 18       	cp.w	r8,1
80005c74:	c0 60       	breq	80005c80 <usb_get_descriptor+0x48>
80005c76:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005c7a:	58 28       	cp.w	r8,2
80005c7c:	c0 90       	breq	80005c8e <usb_get_descriptor+0x56>
80005c7e:	c0 f8       	rjmp	80005c9c <usb_get_descriptor+0x64>
  {
  case DEVICE_DESCRIPTOR:
    data_to_transfer = Usb_get_dev_desc_length();   //!< sizeof(usb_dev_desc);
80005c80:	4d d9       	lddpc	r9,80005df4 <usb_get_descriptor+0x1bc>
80005c82:	31 28       	mov	r8,18
80005c84:	b2 08       	st.h	r9[0x0],r8
    pbuffer          = Usb_get_dev_desc_pointer();
80005c86:	4d d9       	lddpc	r9,80005df8 <usb_get_descriptor+0x1c0>
80005c88:	4d d8       	lddpc	r8,80005dfc <usb_get_descriptor+0x1c4>
80005c8a:	93 08       	st.w	r9[0x0],r8
80005c8c:	c1 d8       	rjmp	80005cc6 <usb_get_descriptor+0x8e>
    break;

#if (USB_HIGH_SPEED_SUPPORT==DISABLED)
  case CONFIGURATION_DESCRIPTOR:
    data_to_transfer = Usb_get_conf_desc_length();  //!< sizeof(usb_conf_desc);
80005c8e:	4d a9       	lddpc	r9,80005df4 <usb_get_descriptor+0x1bc>
80005c90:	34 38       	mov	r8,67
80005c92:	b2 08       	st.h	r9[0x0],r8
    pbuffer          = Usb_get_conf_desc_pointer();
80005c94:	4d 99       	lddpc	r9,80005df8 <usb_get_descriptor+0x1c0>
80005c96:	4d b8       	lddpc	r8,80005e00 <usb_get_descriptor+0x1c8>
80005c98:	93 08       	st.w	r9[0x0],r8
80005c9a:	c1 68       	rjmp	80005cc6 <usb_get_descriptor+0x8e>
    break;
    
#endif

  default:
    if (!usb_user_get_descriptor(descriptor_type, string_type))
80005c9c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005ca0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005ca4:	10 9b       	mov	r11,r8
80005ca6:	12 9c       	mov	r12,r9
80005ca8:	f0 1f 00 57 	mcall	80005e04 <usb_get_descriptor+0x1cc>
80005cac:	18 98       	mov	r8,r12
80005cae:	58 08       	cp.w	r8,0
80005cb0:	c0 b1       	brne	80005cc6 <usb_get_descriptor+0x8e>
    {
      Usb_enable_stall_handshake(EP_CONTROL);
80005cb2:	fe 69 01 f0 	mov	r9,-130576
80005cb6:	e8 68 00 00 	mov	r8,524288
80005cba:	93 08       	st.w	r9[0x0],r8
      Usb_ack_setup_received_free();
80005cbc:	fe 69 01 60 	mov	r9,-130720
80005cc0:	30 48       	mov	r8,4
80005cc2:	93 08       	st.w	r9[0x0],r8
80005cc4:	c9 28       	rjmp	80005de8 <usb_get_descriptor+0x1b0>
      return;
    }
    break;
  }

  temp.u32 = Usb_read_endpoint_data(EP_CONTROL, 32);      //!< read wIndex and wLength with a 32-bit access
80005cc6:	4c b8       	lddpc	r8,80005df0 <usb_get_descriptor+0x1b8>
80005cc8:	70 08       	ld.w	r8,r8[0x0]
80005cca:	70 08       	ld.w	r8,r8[0x0]
80005ccc:	ef 48 ff f4 	st.w	r7[-12],r8
                                                          //!< since this access is aligned with a 32-bit
                                                          //!< boundary from the beginning of the endpoint
  wLength = usb_format_usb_to_mcu_data(16, temp.u16[1]);  //!< ignore wIndex, keep and format wLength
80005cd0:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80005cd4:	5c 88       	casts.h	r8
80005cd6:	5c c8       	swap.bh	r8
80005cd8:	5c 88       	casts.h	r8
80005cda:	ef 58 ff fc 	st.h	r7[-4],r8
  Usb_ack_setup_received_free();                          //!< clear the setup received flag
80005cde:	fe 69 01 60 	mov	r9,-130720
80005ce2:	30 48       	mov	r8,4
80005ce4:	93 08       	st.w	r9[0x0],r8

  if (wLength > data_to_transfer)
80005ce6:	4c 48       	lddpc	r8,80005df4 <usb_get_descriptor+0x1bc>
80005ce8:	90 09       	ld.sh	r9,r8[0x0]
80005cea:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80005cee:	f2 08 19 00 	cp.h	r8,r9
80005cf2:	e0 88 00 0b 	brls	80005d08 <usb_get_descriptor+0xd0>
  {
    zlp = !(data_to_transfer % EP_CONTROL_LENGTH);  //!< zero length packet condition
80005cf6:	4c 08       	lddpc	r8,80005df4 <usb_get_descriptor+0x1bc>
80005cf8:	90 08       	ld.sh	r8,r8[0x0]
80005cfa:	5c 78       	castu.h	r8
80005cfc:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80005d00:	5f 08       	sreq	r8
80005d02:	ef 68 ff fb 	st.b	r7[-5],r8
80005d06:	c0 58       	rjmp	80005d10 <usb_get_descriptor+0xd8>
  }
  else
  {
    // No need to test ZLP sending since we send the exact number of bytes as
    // expected by the host.
    data_to_transfer = wLength; //!< send only requested number of data bytes
80005d08:	4b b9       	lddpc	r9,80005df4 <usb_get_descriptor+0x1bc>
80005d0a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80005d0e:	b2 08       	st.h	r9[0x0],r8
  }

  Usb_ack_nak_out(EP_CONTROL);
80005d10:	fe 69 01 60 	mov	r9,-130720
80005d14:	30 88       	mov	r8,8
80005d16:	93 08       	st.w	r9[0x0],r8
80005d18:	c3 48       	rjmp	80005d80 <usb_get_descriptor+0x148>

  while (data_to_transfer && !Is_usb_nak_out(EP_CONTROL))
  {
    while (!Is_usb_control_in_ready() && !Is_usb_nak_out(EP_CONTROL));
80005d1a:	fe 68 01 30 	mov	r8,-130768
80005d1e:	70 08       	ld.w	r8,r8[0x0]
80005d20:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005d24:	c0 71       	brne	80005d32 <usb_get_descriptor+0xfa>
80005d26:	fe 68 01 30 	mov	r8,-130768
80005d2a:	70 08       	ld.w	r8,r8[0x0]
80005d2c:	e2 18 00 08 	andl	r8,0x8,COH
80005d30:	cf 50       	breq	80005d1a <usb_get_descriptor+0xe2>

    if (Is_usb_nak_out(EP_CONTROL))
80005d32:	fe 68 01 30 	mov	r8,-130768
80005d36:	70 08       	ld.w	r8,r8[0x0]
80005d38:	e2 18 00 08 	andl	r8,0x8,COH
80005d3c:	c2 c1       	brne	80005d94 <usb_get_descriptor+0x15c>
      break;  // don't clear the flag now, it will be cleared after

    Usb_reset_endpoint_fifo_access(EP_CONTROL);
80005d3e:	4a d9       	lddpc	r9,80005df0 <usb_get_descriptor+0x1b8>
80005d40:	fc 18 e0 00 	movh	r8,0xe000
80005d44:	93 08       	st.w	r9[0x0],r8
        pbuffer = ((const U8*)pbuffer)+1;
        data_to_transfer--;
      }
    }
#endif
    if( 0!= data_to_transfer ) {
80005d46:	4a c8       	lddpc	r8,80005df4 <usb_get_descriptor+0x1bc>
80005d48:	90 08       	ld.sh	r8,r8[0x0]
80005d4a:	58 08       	cp.w	r8,0
80005d4c:	c1 00       	breq	80005d6c <usb_get_descriptor+0x134>
       data_to_transfer = usb_write_ep_txpacket(EP_CONTROL, pbuffer,
80005d4e:	4a a8       	lddpc	r8,80005df4 <usb_get_descriptor+0x1bc>
80005d50:	90 08       	ld.sh	r8,r8[0x0]
80005d52:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80005d56:	4a 98       	lddpc	r8,80005df8 <usb_get_descriptor+0x1c0>
80005d58:	70 08       	ld.w	r8,r8[0x0]
80005d5a:	4a 89       	lddpc	r9,80005df8 <usb_get_descriptor+0x1c0>
80005d5c:	10 9b       	mov	r11,r8
80005d5e:	30 0c       	mov	r12,0
80005d60:	f0 1f 00 2a 	mcall	80005e08 <usb_get_descriptor+0x1d0>
80005d64:	18 98       	mov	r8,r12
80005d66:	5c 88       	casts.h	r8
80005d68:	4a 39       	lddpc	r9,80005df4 <usb_get_descriptor+0x1bc>
80005d6a:	b2 08       	st.h	r9[0x0],r8
                                                data_to_transfer, &pbuffer);
    }
    if (Is_usb_nak_out(EP_CONTROL))
80005d6c:	fe 68 01 30 	mov	r8,-130768
80005d70:	70 08       	ld.w	r8,r8[0x0]
80005d72:	e2 18 00 08 	andl	r8,0x8,COH
80005d76:	c0 f1       	brne	80005d94 <usb_get_descriptor+0x15c>
      break;
    
    Usb_ack_control_in_ready_send();  //!< Send data until necessary
80005d78:	fe 69 01 60 	mov	r9,-130720
80005d7c:	30 18       	mov	r8,1
80005d7e:	93 08       	st.w	r9[0x0],r8
    data_to_transfer = wLength; //!< send only requested number of data bytes
  }

  Usb_ack_nak_out(EP_CONTROL);

  while (data_to_transfer && !Is_usb_nak_out(EP_CONTROL))
80005d80:	49 d8       	lddpc	r8,80005df4 <usb_get_descriptor+0x1bc>
80005d82:	90 08       	ld.sh	r8,r8[0x0]
80005d84:	58 08       	cp.w	r8,0
80005d86:	c0 70       	breq	80005d94 <usb_get_descriptor+0x15c>
80005d88:	fe 68 01 30 	mov	r8,-130768
80005d8c:	70 08       	ld.w	r8,r8[0x0]
80005d8e:	e2 18 00 08 	andl	r8,0x8,COH
80005d92:	cc 40       	breq	80005d1a <usb_get_descriptor+0xe2>
      break;
    
    Usb_ack_control_in_ready_send();  //!< Send data until necessary
  }

  if (zlp && !Is_usb_nak_out(EP_CONTROL))
80005d94:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80005d98:	30 08       	mov	r8,0
80005d9a:	f0 09 18 00 	cp.b	r9,r8
80005d9e:	c1 10       	breq	80005dc0 <usb_get_descriptor+0x188>
80005da0:	fe 68 01 30 	mov	r8,-130768
80005da4:	70 08       	ld.w	r8,r8[0x0]
80005da6:	e2 18 00 08 	andl	r8,0x8,COH
80005daa:	c0 b1       	brne	80005dc0 <usb_get_descriptor+0x188>
  {
    while (!Is_usb_control_in_ready());
80005dac:	fe 68 01 30 	mov	r8,-130768
80005db0:	70 08       	ld.w	r8,r8[0x0]
80005db2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005db6:	cf b0       	breq	80005dac <usb_get_descriptor+0x174>
    Usb_ack_control_in_ready_send();
80005db8:	fe 69 01 60 	mov	r9,-130720
80005dbc:	30 18       	mov	r8,1
80005dbe:	93 08       	st.w	r9[0x0],r8
  }

  while (!Is_usb_nak_out(EP_CONTROL));
80005dc0:	fe 68 01 30 	mov	r8,-130768
80005dc4:	70 08       	ld.w	r8,r8[0x0]
80005dc6:	e2 18 00 08 	andl	r8,0x8,COH
80005dca:	cf b0       	breq	80005dc0 <usb_get_descriptor+0x188>
  Usb_ack_nak_out(EP_CONTROL);
80005dcc:	fe 69 01 60 	mov	r9,-130720
80005dd0:	30 88       	mov	r8,8
80005dd2:	93 08       	st.w	r9[0x0],r8
  while (!Is_usb_control_out_received());
80005dd4:	fe 68 01 30 	mov	r8,-130768
80005dd8:	70 08       	ld.w	r8,r8[0x0]
80005dda:	e2 18 00 02 	andl	r8,0x2,COH
80005dde:	cf b0       	breq	80005dd4 <usb_get_descriptor+0x19c>
  Usb_ack_control_out_received_free();
80005de0:	fe 69 01 60 	mov	r9,-130720
80005de4:	30 28       	mov	r8,2
80005de6:	93 08       	st.w	r9[0x0],r8
}
80005de8:	2f cd       	sub	sp,-16
80005dea:	e3 cd 80 80 	ldm	sp++,r7,pc
80005dee:	00 00       	add	r0,r0
80005df0:	00 00       	add	r0,r0
80005df2:	09 88       	ld.ub	r8,r4[0x0]
80005df4:	00 00       	add	r0,r0
80005df6:	09 ae       	ld.ub	lr,r4[0x2]
80005df8:	00 00       	add	r0,r0
80005dfa:	09 b0       	ld.ub	r0,r4[0x3]
80005dfc:	80 00       	ld.sh	r0,r0[0x0]
80005dfe:	fb 20 80 00 	ld.sb	r0,sp[-32768]
80005e02:	fb 32 80 00 	ld.ub	r2,sp[-32768]
80005e06:	87 48       	st.w	r3[0x10],r8
80005e08:	80 00       	ld.sh	r0,r0[0x0]
80005e0a:	4a cc       	lddpc	r12,80005eb8 <usb_get_status+0x5c>

80005e0c <usb_get_configuration>:

//! This function manages the GET CONFIGURATION request. The current
//! configuration number is returned.
//!
void usb_get_configuration(void)
{
80005e0c:	eb cd 40 80 	pushm	r7,lr
80005e10:	1a 97       	mov	r7,sp
  Usb_ack_setup_received_free();
80005e12:	fe 69 01 60 	mov	r9,-130720
80005e16:	30 48       	mov	r8,4
80005e18:	93 08       	st.w	r9[0x0],r8

  Usb_reset_endpoint_fifo_access(EP_CONTROL);
80005e1a:	48 f9       	lddpc	r9,80005e54 <usb_get_configuration+0x48>
80005e1c:	fc 18 e0 00 	movh	r8,0xe000
80005e20:	93 08       	st.w	r9[0x0],r8
  Usb_write_endpoint_data(EP_CONTROL, 8, usb_configuration_nb);
80005e22:	48 d8       	lddpc	r8,80005e54 <usb_get_configuration+0x48>
80005e24:	70 09       	ld.w	r9,r8[0x0]
80005e26:	48 d8       	lddpc	r8,80005e58 <usb_get_configuration+0x4c>
80005e28:	11 88       	ld.ub	r8,r8[0x0]
80005e2a:	5c 58       	castu.b	r8
80005e2c:	b2 88       	st.b	r9[0x0],r8
80005e2e:	2f f9       	sub	r9,-1
80005e30:	48 98       	lddpc	r8,80005e54 <usb_get_configuration+0x48>
80005e32:	91 09       	st.w	r8[0x0],r9
  Usb_ack_control_in_ready_send();
80005e34:	fe 69 01 60 	mov	r9,-130720
80005e38:	30 18       	mov	r8,1
80005e3a:	93 08       	st.w	r9[0x0],r8

  while (!Is_usb_control_out_received());
80005e3c:	fe 68 01 30 	mov	r8,-130768
80005e40:	70 08       	ld.w	r8,r8[0x0]
80005e42:	e2 18 00 02 	andl	r8,0x2,COH
80005e46:	cf b0       	breq	80005e3c <usb_get_configuration+0x30>
  Usb_ack_control_out_received_free();
80005e48:	fe 69 01 60 	mov	r9,-130720
80005e4c:	30 28       	mov	r8,2
80005e4e:	93 08       	st.w	r9[0x0],r8
}
80005e50:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e54:	00 00       	add	r0,r0
80005e56:	09 88       	ld.ub	r8,r4[0x0]
80005e58:	00 00       	add	r0,r0
80005e5a:	09 ac       	ld.ub	r12,r4[0x2]

80005e5c <usb_get_status>:

//! This function manages the GET STATUS request. The device, interface or
//! endpoint status is returned.
//!
void usb_get_status(void)
{
80005e5c:	eb cd 40 80 	pushm	r7,lr
80005e60:	1a 97       	mov	r7,sp
80005e62:	20 3d       	sub	sp,12
  U8 wIndex;

  switch (bmRequestType)
80005e64:	4c 18       	lddpc	r8,80005f68 <usb_get_status+0x10c>
80005e66:	11 88       	ld.ub	r8,r8[0x0]
80005e68:	ef 48 ff f8 	st.w	r7[-8],r8
80005e6c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e70:	e0 49 00 81 	cp.w	r9,129
80005e74:	c1 b0       	breq	80005eaa <usb_get_status+0x4e>
80005e76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e7a:	e0 48 00 82 	cp.w	r8,130
80005e7e:	c2 60       	breq	80005eca <usb_get_status+0x6e>
80005e80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e84:	e0 49 00 80 	cp.w	r9,128
80005e88:	c4 e1       	brne	80005f24 <usb_get_status+0xc8>
  {
  case REQUEST_DEVICE_STATUS:
    Usb_ack_setup_received_free();
80005e8a:	fe 69 01 60 	mov	r9,-130720
80005e8e:	30 48       	mov	r8,4
80005e90:	93 08       	st.w	r9[0x0],r8
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
80005e92:	4b 79       	lddpc	r9,80005f6c <usb_get_status+0x110>
80005e94:	fc 18 e0 00 	movh	r8,0xe000
80005e98:	93 08       	st.w	r9[0x0],r8
    Usb_write_endpoint_data(EP_CONTROL, 8, DEVICE_STATUS);
80005e9a:	4b 58       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005e9c:	70 09       	ld.w	r9,r8[0x0]
80005e9e:	30 18       	mov	r8,1
80005ea0:	b2 88       	st.b	r9[0x0],r8
80005ea2:	2f f9       	sub	r9,-1
80005ea4:	4b 28       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005ea6:	91 09       	st.w	r8[0x0],r9
80005ea8:	c4 88       	rjmp	80005f38 <usb_get_status+0xdc>
    break;

  case REQUEST_INTERFACE_STATUS:
    Usb_ack_setup_received_free();
80005eaa:	fe 69 01 60 	mov	r9,-130720
80005eae:	30 48       	mov	r8,4
80005eb0:	93 08       	st.w	r9[0x0],r8
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
80005eb2:	4a f9       	lddpc	r9,80005f6c <usb_get_status+0x110>
80005eb4:	fc 18 e0 00 	movh	r8,0xe000
80005eb8:	93 08       	st.w	r9[0x0],r8
    Usb_write_endpoint_data(EP_CONTROL, 8, INTERFACE_STATUS);
80005eba:	4a d8       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005ebc:	70 09       	ld.w	r9,r8[0x0]
80005ebe:	30 08       	mov	r8,0
80005ec0:	b2 88       	st.b	r9[0x0],r8
80005ec2:	2f f9       	sub	r9,-1
80005ec4:	4a a8       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005ec6:	91 09       	st.w	r8[0x0],r9
80005ec8:	c3 88       	rjmp	80005f38 <usb_get_status+0xdc>
    break;

  case REQUEST_ENDPOINT_STATUS:
    Usb_read_endpoint_data(EP_CONTROL, 16); //!< dummy read (wValue)
80005eca:	4a 98       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005ecc:	70 08       	ld.w	r8,r8[0x0]
80005ece:	90 09       	ld.sh	r9,r8[0x0]
80005ed0:	f0 c9 ff fe 	sub	r9,r8,-2
80005ed4:	4a 68       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005ed6:	91 09       	st.w	r8[0x0],r9
    wIndex = Usb_read_endpoint_data(EP_CONTROL, 8);
80005ed8:	4a 58       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005eda:	70 09       	ld.w	r9,r8[0x0]
80005edc:	13 88       	ld.ub	r8,r9[0x0]
80005ede:	ef 68 ff ff 	st.b	r7[-1],r8
80005ee2:	2f f9       	sub	r9,-1
80005ee4:	4a 28       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005ee6:	91 09       	st.w	r8[0x0],r9
    wIndex = Get_desc_ep_nbr(wIndex);
80005ee8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005eec:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005ef0:	ef 68 ff ff 	st.b	r7[-1],r8
    Usb_ack_setup_received_free();
80005ef4:	fe 69 01 60 	mov	r9,-130720
80005ef8:	30 48       	mov	r8,4
80005efa:	93 08       	st.w	r9[0x0],r8
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
80005efc:	49 c9       	lddpc	r9,80005f6c <usb_get_status+0x110>
80005efe:	fc 18 e0 00 	movh	r8,0xe000
80005f02:	93 08       	st.w	r9[0x0],r8
    Usb_write_endpoint_data(EP_CONTROL, 8, Is_usb_endpoint_stall_requested(wIndex) );
80005f04:	49 a8       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005f06:	70 09       	ld.w	r9,r8[0x0]
80005f08:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005f0c:	a3 68       	lsl	r8,0x2
80005f0e:	e0 38 fe 40 	sub	r8,130624
80005f12:	70 08       	ld.w	r8,r8[0x0]
80005f14:	e6 18 00 08 	andh	r8,0x8,COH
80005f18:	5f 18       	srne	r8
80005f1a:	b2 88       	st.b	r9[0x0],r8
80005f1c:	2f f9       	sub	r9,-1
80005f1e:	49 48       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005f20:	91 09       	st.w	r8[0x0],r9
80005f22:	c0 b8       	rjmp	80005f38 <usb_get_status+0xdc>
    break;

  default:
    Usb_enable_stall_handshake(EP_CONTROL);
80005f24:	fe 69 01 f0 	mov	r9,-130576
80005f28:	e8 68 00 00 	mov	r8,524288
80005f2c:	93 08       	st.w	r9[0x0],r8
    Usb_ack_setup_received_free();
80005f2e:	fe 69 01 60 	mov	r9,-130720
80005f32:	30 48       	mov	r8,4
80005f34:	93 08       	st.w	r9[0x0],r8
80005f36:	c1 68       	rjmp	80005f62 <usb_get_status+0x106>
    return;
  }

  Usb_write_endpoint_data(EP_CONTROL, 8, 0x00);
80005f38:	48 d8       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005f3a:	70 09       	ld.w	r9,r8[0x0]
80005f3c:	30 08       	mov	r8,0
80005f3e:	b2 88       	st.b	r9[0x0],r8
80005f40:	2f f9       	sub	r9,-1
80005f42:	48 b8       	lddpc	r8,80005f6c <usb_get_status+0x110>
80005f44:	91 09       	st.w	r8[0x0],r9
  Usb_ack_control_in_ready_send();
80005f46:	fe 69 01 60 	mov	r9,-130720
80005f4a:	30 18       	mov	r8,1
80005f4c:	93 08       	st.w	r9[0x0],r8

  while (!Is_usb_control_out_received());
80005f4e:	fe 68 01 30 	mov	r8,-130768
80005f52:	70 08       	ld.w	r8,r8[0x0]
80005f54:	e2 18 00 02 	andl	r8,0x2,COH
80005f58:	cf b0       	breq	80005f4e <usb_get_status+0xf2>
  Usb_ack_control_out_received_free();
80005f5a:	fe 69 01 60 	mov	r9,-130720
80005f5e:	30 28       	mov	r8,2
80005f60:	93 08       	st.w	r9[0x0],r8
}
80005f62:	2f dd       	sub	sp,-12
80005f64:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f68:	00 00       	add	r0,r0
80005f6a:	06 58       	eor	r8,r3
80005f6c:	00 00       	add	r0,r0
80005f6e:	09 88       	ld.ub	r8,r4[0x0]

80005f70 <usb_set_feature>:

//! This function manages the SET FEATURE request. The USB test modes are
//! supported by this function.
//!
void usb_set_feature(void)
{
80005f70:	eb cd 40 80 	pushm	r7,lr
80005f74:	1a 97       	mov	r7,sp
80005f76:	20 2d       	sub	sp,8
  U16 wValue  = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80005f78:	4b 88       	lddpc	r8,80006058 <usb_set_feature+0xe8>
80005f7a:	70 09       	ld.w	r9,r8[0x0]
80005f7c:	92 08       	ld.sh	r8,r9[0x0]
80005f7e:	5c 88       	casts.h	r8
80005f80:	5c 88       	casts.h	r8
80005f82:	10 9a       	mov	r10,r8
80005f84:	2f e9       	sub	r9,-2
80005f86:	4b 58       	lddpc	r8,80006058 <usb_set_feature+0xe8>
80005f88:	91 09       	st.w	r8[0x0],r9
80005f8a:	14 98       	mov	r8,r10
80005f8c:	5c c8       	swap.bh	r8
80005f8e:	5c 88       	casts.h	r8
80005f90:	ef 58 ff fa 	st.h	r7[-6],r8
  U16 wIndex  = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80005f94:	4b 18       	lddpc	r8,80006058 <usb_set_feature+0xe8>
80005f96:	70 09       	ld.w	r9,r8[0x0]
80005f98:	92 08       	ld.sh	r8,r9[0x0]
80005f9a:	5c 88       	casts.h	r8
80005f9c:	5c 88       	casts.h	r8
80005f9e:	10 9a       	mov	r10,r8
80005fa0:	2f e9       	sub	r9,-2
80005fa2:	4a e8       	lddpc	r8,80006058 <usb_set_feature+0xe8>
80005fa4:	91 09       	st.w	r8[0x0],r9
80005fa6:	14 98       	mov	r8,r10
80005fa8:	5c c8       	swap.bh	r8
80005faa:	5c 88       	casts.h	r8
80005fac:	ef 58 ff fc 	st.h	r7[-4],r8
  U16 wLength = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80005fb0:	4a a8       	lddpc	r8,80006058 <usb_set_feature+0xe8>
80005fb2:	70 09       	ld.w	r9,r8[0x0]
80005fb4:	92 08       	ld.sh	r8,r9[0x0]
80005fb6:	5c 88       	casts.h	r8
80005fb8:	5c 88       	casts.h	r8
80005fba:	10 9a       	mov	r10,r8
80005fbc:	2f e9       	sub	r9,-2
80005fbe:	4a 78       	lddpc	r8,80006058 <usb_set_feature+0xe8>
80005fc0:	91 09       	st.w	r8[0x0],r9
80005fc2:	14 98       	mov	r8,r10
80005fc4:	5c c8       	swap.bh	r8
80005fc6:	5c 88       	casts.h	r8
80005fc8:	ef 58 ff fe 	st.h	r7[-2],r8

  if (wLength)
80005fcc:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80005fd0:	30 08       	mov	r8,0
80005fd2:	f0 09 19 00 	cp.h	r9,r8
80005fd6:	c3 51       	brne	80006040 <usb_set_feature+0xd0>
    goto unsupported_request;

  switch (wValue)
80005fd8:	ef 18 ff fa 	ld.uh	r8,r7[-6]
80005fdc:	58 08       	cp.w	r8,0
80005fde:	c3 11       	brne	80006040 <usb_set_feature+0xd0>
  {
  case FEATURE_ENDPOINT_HALT:
    wIndex = Get_desc_ep_nbr(wIndex);  // clear direction flag
80005fe0:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80005fe4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005fe8:	ef 58 ff fc 	st.h	r7[-4],r8
    if (bmRequestType != ENDPOINT_TYPE ||
80005fec:	49 c8       	lddpc	r8,8000605c <usb_set_feature+0xec>
80005fee:	11 89       	ld.ub	r9,r8[0x0]
80005ff0:	30 28       	mov	r8,2
80005ff2:	f0 09 18 00 	cp.b	r9,r8
80005ff6:	c2 51       	brne	80006040 <usb_set_feature+0xd0>
80005ff8:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80005ffc:	30 08       	mov	r8,0
80005ffe:	f0 09 19 00 	cp.h	r9,r8
80006002:	c1 f0       	breq	80006040 <usb_set_feature+0xd0>
80006004:	fe 68 00 00 	mov	r8,-131072
80006008:	70 7a       	ld.w	r10,r8[0x1c]
8000600a:	ef 19 ff fc 	ld.uh	r9,r7[-4]
8000600e:	30 18       	mov	r8,1
80006010:	f0 09 09 48 	lsl	r8,r8,r9
80006014:	f5 e8 00 08 	and	r8,r10,r8
80006018:	c1 40       	breq	80006040 <usb_set_feature+0xd0>
        wIndex == EP_CONTROL ||
        !Is_usb_endpoint_enabled(wIndex))
      goto unsupported_request;

    Usb_enable_stall_handshake(wIndex);
8000601a:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8000601e:	a3 68       	lsl	r8,0x2
80006020:	fe 6a 01 f0 	mov	r10,-130576
80006024:	f0 0a 00 09 	add	r9,r8,r10
80006028:	e8 68 00 00 	mov	r8,524288
8000602c:	93 08       	st.w	r9[0x0],r8
    Usb_ack_setup_received_free();
8000602e:	fe 69 01 60 	mov	r9,-130720
80006032:	30 48       	mov	r8,4
80006034:	93 08       	st.w	r9[0x0],r8
    Usb_ack_control_in_ready_send();
80006036:	fe 69 01 60 	mov	r9,-130720
8000603a:	30 18       	mov	r8,1
8000603c:	93 08       	st.w	r9[0x0],r8
8000603e:	c0 a8       	rjmp	80006052 <usb_set_feature+0xe2>
  }

  return;

unsupported_request:
  Usb_enable_stall_handshake(EP_CONTROL);
80006040:	fe 69 01 f0 	mov	r9,-130576
80006044:	e8 68 00 00 	mov	r8,524288
80006048:	93 08       	st.w	r9[0x0],r8
  Usb_ack_setup_received_free();
8000604a:	fe 69 01 60 	mov	r9,-130720
8000604e:	30 48       	mov	r8,4
80006050:	93 08       	st.w	r9[0x0],r8
}
80006052:	2f ed       	sub	sp,-8
80006054:	e3 cd 80 80 	ldm	sp++,r7,pc
80006058:	00 00       	add	r0,r0
8000605a:	09 88       	ld.ub	r8,r4[0x0]
8000605c:	00 00       	add	r0,r0
8000605e:	06 58       	eor	r8,r3

80006060 <usb_clear_feature>:


//! This function manages the CLEAR FEATURE request.
//!
void usb_clear_feature(void)
{
80006060:	eb cd 40 80 	pushm	r7,lr
80006064:	1a 97       	mov	r7,sp
80006066:	20 2d       	sub	sp,8
  U8 wValue;
  U8 wIndex;

  if (bmRequestType == DEVICE_TYPE || bmRequestType == INTERFACE_TYPE)
80006068:	4d 08       	lddpc	r8,800061a8 <usb_clear_feature+0x148>
8000606a:	11 88       	ld.ub	r8,r8[0x0]
8000606c:	58 08       	cp.w	r8,0
8000606e:	c0 70       	breq	8000607c <usb_clear_feature+0x1c>
80006070:	4c e8       	lddpc	r8,800061a8 <usb_clear_feature+0x148>
80006072:	11 89       	ld.ub	r9,r8[0x0]
80006074:	30 18       	mov	r8,1
80006076:	f0 09 18 00 	cp.b	r9,r8
8000607a:	c0 b1       	brne	80006090 <usb_clear_feature+0x30>
  {
    //!< keep that order (set StallRq/clear RxSetup) or a
    //!< OUT request following the SETUP may be acknowledged
    Usb_enable_stall_handshake(EP_CONTROL);
8000607c:	fe 69 01 f0 	mov	r9,-130576
80006080:	e8 68 00 00 	mov	r8,524288
80006084:	93 08       	st.w	r9[0x0],r8
    Usb_ack_setup_received_free();
80006086:	fe 69 01 60 	mov	r9,-130720
8000608a:	30 48       	mov	r8,4
8000608c:	93 08       	st.w	r9[0x0],r8
8000608e:	c8 98       	rjmp	800061a0 <usb_clear_feature+0x140>
  }
  else if (bmRequestType == ENDPOINT_TYPE)
80006090:	4c 68       	lddpc	r8,800061a8 <usb_clear_feature+0x148>
80006092:	11 89       	ld.ub	r9,r8[0x0]
80006094:	30 28       	mov	r8,2
80006096:	f0 09 18 00 	cp.b	r9,r8
8000609a:	e0 81 00 83 	brne	800061a0 <usb_clear_feature+0x140>
  {
    wValue = Usb_read_endpoint_data(EP_CONTROL, 8);
8000609e:	4c 48       	lddpc	r8,800061ac <usb_clear_feature+0x14c>
800060a0:	70 09       	ld.w	r9,r8[0x0]
800060a2:	13 88       	ld.ub	r8,r9[0x0]
800060a4:	ef 68 ff fe 	st.b	r7[-2],r8
800060a8:	2f f9       	sub	r9,-1
800060aa:	4c 18       	lddpc	r8,800061ac <usb_clear_feature+0x14c>
800060ac:	91 09       	st.w	r8[0x0],r9

    if (wValue == FEATURE_ENDPOINT_HALT)
800060ae:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800060b2:	30 08       	mov	r8,0
800060b4:	f0 09 18 00 	cp.b	r9,r8
800060b8:	c6 b1       	brne	8000618e <usb_clear_feature+0x12e>
    {
      Usb_read_endpoint_data(EP_CONTROL, 8);  //!< dummy read (MSB of wValue)
800060ba:	4b d8       	lddpc	r8,800061ac <usb_clear_feature+0x14c>
800060bc:	70 08       	ld.w	r8,r8[0x0]
800060be:	11 8a       	ld.ub	r10,r8[0x0]
800060c0:	f0 c9 ff ff 	sub	r9,r8,-1
800060c4:	4b a8       	lddpc	r8,800061ac <usb_clear_feature+0x14c>
800060c6:	91 09       	st.w	r8[0x0],r9
      wIndex = Usb_read_endpoint_data(EP_CONTROL, 8);
800060c8:	4b 98       	lddpc	r8,800061ac <usb_clear_feature+0x14c>
800060ca:	70 09       	ld.w	r9,r8[0x0]
800060cc:	13 88       	ld.ub	r8,r9[0x0]
800060ce:	ef 68 ff ff 	st.b	r7[-1],r8
800060d2:	2f f9       	sub	r9,-1
800060d4:	4b 68       	lddpc	r8,800061ac <usb_clear_feature+0x14c>
800060d6:	91 09       	st.w	r8[0x0],r9
      wIndex = Get_desc_ep_nbr(wIndex);
800060d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800060dc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800060e0:	ef 68 ff ff 	st.b	r7[-1],r8

      if (Is_usb_endpoint_enabled(wIndex))
800060e4:	fe 68 00 00 	mov	r8,-131072
800060e8:	70 7a       	ld.w	r10,r8[0x1c]
800060ea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800060ee:	30 18       	mov	r8,1
800060f0:	f0 09 09 48 	lsl	r8,r8,r9
800060f4:	f5 e8 00 08 	and	r8,r10,r8
800060f8:	c4 10       	breq	8000617a <usb_clear_feature+0x11a>
      {
        if (wIndex != EP_CONTROL)
800060fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800060fe:	30 08       	mov	r8,0
80006100:	f0 09 18 00 	cp.b	r9,r8
80006104:	c3 20       	breq	80006168 <usb_clear_feature+0x108>
        {
          Usb_disable_stall_handshake(wIndex);
80006106:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000610a:	a3 68       	lsl	r8,0x2
8000610c:	fe 6a 02 20 	mov	r10,-130528
80006110:	f0 0a 00 09 	add	r9,r8,r10
80006114:	e8 68 00 00 	mov	r8,524288
80006118:	93 08       	st.w	r9[0x0],r8
          Usb_reset_endpoint(wIndex);
8000611a:	fe 6b 00 00 	mov	r11,-131072
8000611e:	fe 68 00 00 	mov	r8,-131072
80006122:	70 7a       	ld.w	r10,r8[0x1c]
80006124:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006128:	e0 78 00 00 	mov	r8,65536
8000612c:	f0 09 09 48 	lsl	r8,r8,r9
80006130:	f5 e8 10 08 	or	r8,r10,r8
80006134:	97 78       	st.w	r11[0x1c],r8
80006136:	fe 6a 00 00 	mov	r10,-131072
8000613a:	fe 68 00 00 	mov	r8,-131072
8000613e:	70 7b       	ld.w	r11,r8[0x1c]
80006140:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006144:	e0 78 00 00 	mov	r8,65536
80006148:	f0 09 09 48 	lsl	r8,r8,r9
8000614c:	5c d8       	com	r8
8000614e:	f7 e8 00 08 	and	r8,r11,r8
80006152:	95 78       	st.w	r10[0x1c],r8
          Usb_reset_data_toggle(wIndex);
80006154:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006158:	a3 68       	lsl	r8,0x2
8000615a:	fe 6a 01 f0 	mov	r10,-130576
8000615e:	f0 0a 00 09 	add	r9,r8,r10
80006162:	e4 68 00 00 	mov	r8,262144
80006166:	93 08       	st.w	r9[0x0],r8
        }
        Usb_ack_setup_received_free();
80006168:	fe 69 01 60 	mov	r9,-130720
8000616c:	30 48       	mov	r8,4
8000616e:	93 08       	st.w	r9[0x0],r8
        Usb_ack_control_in_ready_send();
80006170:	fe 69 01 60 	mov	r9,-130720
80006174:	30 18       	mov	r8,1
80006176:	93 08       	st.w	r9[0x0],r8
80006178:	c1 48       	rjmp	800061a0 <usb_clear_feature+0x140>
      }
      else
      {
        Usb_enable_stall_handshake(EP_CONTROL);
8000617a:	fe 69 01 f0 	mov	r9,-130576
8000617e:	e8 68 00 00 	mov	r8,524288
80006182:	93 08       	st.w	r9[0x0],r8
        Usb_ack_setup_received_free();
80006184:	fe 69 01 60 	mov	r9,-130720
80006188:	30 48       	mov	r8,4
8000618a:	93 08       	st.w	r9[0x0],r8
8000618c:	c0 a8       	rjmp	800061a0 <usb_clear_feature+0x140>
      }
    }
    else
    {
      Usb_enable_stall_handshake(EP_CONTROL);
8000618e:	fe 69 01 f0 	mov	r9,-130576
80006192:	e8 68 00 00 	mov	r8,524288
80006196:	93 08       	st.w	r9[0x0],r8
      Usb_ack_setup_received_free();
80006198:	fe 69 01 60 	mov	r9,-130720
8000619c:	30 48       	mov	r8,4
8000619e:	93 08       	st.w	r9[0x0],r8
    }
  }
}
800061a0:	2f ed       	sub	sp,-8
800061a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800061a6:	00 00       	add	r0,r0
800061a8:	00 00       	add	r0,r0
800061aa:	06 58       	eor	r8,r3
800061ac:	00 00       	add	r0,r0
800061ae:	09 88       	ld.ub	r8,r4[0x0]

800061b0 <usb_get_interface>:


//! This function manages the SETUP_GET_INTERFACE request.
//!
Bool usb_get_interface (void)
{
800061b0:	eb cd 40 80 	pushm	r7,lr
800061b4:	1a 97       	mov	r7,sp
800061b6:	20 2d       	sub	sp,8
   U16   wInterface;
   U16   wValue;
 
   // Read wValue
   wValue = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
800061b8:	4a 98       	lddpc	r8,8000625c <usb_get_interface+0xac>
800061ba:	70 09       	ld.w	r9,r8[0x0]
800061bc:	92 08       	ld.sh	r8,r9[0x0]
800061be:	5c 88       	casts.h	r8
800061c0:	5c 88       	casts.h	r8
800061c2:	10 9a       	mov	r10,r8
800061c4:	2f e9       	sub	r9,-2
800061c6:	4a 68       	lddpc	r8,8000625c <usb_get_interface+0xac>
800061c8:	91 09       	st.w	r8[0x0],r9
800061ca:	14 98       	mov	r8,r10
800061cc:	5c c8       	swap.bh	r8
800061ce:	5c 88       	casts.h	r8
800061d0:	ef 58 ff fe 	st.h	r7[-2],r8
   // wValue = Alternate Setting
   // wIndex = Interface
   wInterface=usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
800061d4:	4a 28       	lddpc	r8,8000625c <usb_get_interface+0xac>
800061d6:	70 09       	ld.w	r9,r8[0x0]
800061d8:	92 08       	ld.sh	r8,r9[0x0]
800061da:	5c 88       	casts.h	r8
800061dc:	5c 88       	casts.h	r8
800061de:	10 9a       	mov	r10,r8
800061e0:	2f e9       	sub	r9,-2
800061e2:	49 f8       	lddpc	r8,8000625c <usb_get_interface+0xac>
800061e4:	91 09       	st.w	r8[0x0],r9
800061e6:	14 98       	mov	r8,r10
800061e8:	5c c8       	swap.bh	r8
800061ea:	5c 88       	casts.h	r8
800061ec:	ef 58 ff fc 	st.h	r7[-4],r8
   if(0!=wValue)
800061f0:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800061f4:	30 08       	mov	r8,0
800061f6:	f0 09 19 00 	cp.h	r9,r8
800061fa:	c0 50       	breq	80006204 <usb_get_interface+0x54>
      return FALSE;
800061fc:	30 08       	mov	r8,0
800061fe:	ef 48 ff f8 	st.w	r7[-8],r8
80006202:	c2 68       	rjmp	8000624e <usb_get_interface+0x9e>
   Usb_ack_setup_received_free();
80006204:	fe 69 01 60 	mov	r9,-130720
80006208:	30 48       	mov	r8,4
8000620a:	93 08       	st.w	r9[0x0],r8

   Usb_reset_endpoint_fifo_access(EP_CONTROL);
8000620c:	49 49       	lddpc	r9,8000625c <usb_get_interface+0xac>
8000620e:	fc 18 e0 00 	movh	r8,0xe000
80006212:	93 08       	st.w	r9[0x0],r8
   Usb_write_endpoint_data(EP_CONTROL, 8, usb_interface_status[wInterface] );
80006214:	49 28       	lddpc	r8,8000625c <usb_get_interface+0xac>
80006216:	70 0a       	ld.w	r10,r8[0x0]
80006218:	ef 19 ff fc 	ld.uh	r9,r7[-4]
8000621c:	49 18       	lddpc	r8,80006260 <usb_get_interface+0xb0>
8000621e:	f0 09 07 08 	ld.ub	r8,r8[r9]
80006222:	b4 88       	st.b	r10[0x0],r8
80006224:	f4 c9 ff ff 	sub	r9,r10,-1
80006228:	48 d8       	lddpc	r8,8000625c <usb_get_interface+0xac>
8000622a:	91 09       	st.w	r8[0x0],r9
   Usb_ack_control_in_ready_send();
8000622c:	fe 69 01 60 	mov	r9,-130720
80006230:	30 18       	mov	r8,1
80006232:	93 08       	st.w	r9[0x0],r8

   while( !Is_usb_control_out_received() );
80006234:	fe 68 01 30 	mov	r8,-130768
80006238:	70 08       	ld.w	r8,r8[0x0]
8000623a:	e2 18 00 02 	andl	r8,0x2,COH
8000623e:	cf b0       	breq	80006234 <usb_get_interface+0x84>
   Usb_ack_control_out_received_free();
80006240:	fe 69 01 60 	mov	r9,-130720
80006244:	30 28       	mov	r8,2
80006246:	93 08       	st.w	r9[0x0],r8
   return TRUE;
80006248:	30 18       	mov	r8,1
8000624a:	ef 48 ff f8 	st.w	r7[-8],r8
8000624e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80006252:	10 9c       	mov	r12,r8
80006254:	2f ed       	sub	sp,-8
80006256:	e3 cd 80 80 	ldm	sp++,r7,pc
8000625a:	00 00       	add	r0,r0
8000625c:	00 00       	add	r0,r0
8000625e:	09 88       	ld.ub	r8,r4[0x0]
80006260:	00 00       	add	r0,r0
80006262:	06 5c       	eor	r12,r3

80006264 <usb_set_interface>:


//! This function manages the SET INTERFACE request.
//!
void usb_set_interface(void)
{
80006264:	eb cd 40 80 	pushm	r7,lr
80006268:	1a 97       	mov	r7,sp
8000626a:	20 2d       	sub	sp,8
   U8 u8_i;
   
   // wValue = Alternate Setting
   // wIndex = Interface
   U16 wValue  = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
8000626c:	fe f8 02 b8 	ld.w	r8,pc[696]
80006270:	70 09       	ld.w	r9,r8[0x0]
80006272:	92 08       	ld.sh	r8,r9[0x0]
80006274:	5c 88       	casts.h	r8
80006276:	5c 88       	casts.h	r8
80006278:	10 9a       	mov	r10,r8
8000627a:	2f e9       	sub	r9,-2
8000627c:	fe f8 02 a8 	ld.w	r8,pc[680]
80006280:	91 09       	st.w	r8[0x0],r9
80006282:	14 98       	mov	r8,r10
80006284:	5c c8       	swap.bh	r8
80006286:	5c 88       	casts.h	r8
80006288:	ef 58 ff fc 	st.h	r7[-4],r8
   U16 wIndex  = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
8000628c:	fe f8 02 98 	ld.w	r8,pc[664]
80006290:	70 09       	ld.w	r9,r8[0x0]
80006292:	92 08       	ld.sh	r8,r9[0x0]
80006294:	5c 88       	casts.h	r8
80006296:	5c 88       	casts.h	r8
80006298:	10 9a       	mov	r10,r8
8000629a:	2f e9       	sub	r9,-2
8000629c:	fe f8 02 88 	ld.w	r8,pc[648]
800062a0:	91 09       	st.w	r8[0x0],r9
800062a2:	14 98       	mov	r8,r10
800062a4:	5c c8       	swap.bh	r8
800062a6:	5c 88       	casts.h	r8
800062a8:	ef 58 ff fe 	st.h	r7[-2],r8
   Usb_ack_setup_received_free(); 
800062ac:	fe 69 01 60 	mov	r9,-130720
800062b0:	30 48       	mov	r8,4
800062b2:	93 08       	st.w	r9[0x0],r8
   }else{
      data_to_transfer = Usb_get_conf_desc_hs_length();  //!< sizeof(usb_conf_desc_hs);
      pbuffer          = Usb_get_conf_desc_hs_pointer();
   }
#else
   data_to_transfer = Usb_get_conf_desc_length();  //!< sizeof(usb_conf_desc);
800062b4:	fe f9 02 74 	ld.w	r9,pc[628]
800062b8:	34 38       	mov	r8,67
800062ba:	b2 08       	st.h	r9[0x0],r8
   pbuffer          = Usb_get_conf_desc_pointer();
800062bc:	fe f9 02 70 	ld.w	r9,pc[624]
800062c0:	fe f8 02 70 	ld.w	r8,pc[624]
800062c4:	93 08       	st.w	r9[0x0],r8
#endif
   
   //** Scan descriptor
   
   //* Find configuration selected
   if( usb_configuration_nb == 0 )
800062c6:	fe f8 02 6e 	ld.w	r8,pc[622]
800062ca:	11 88       	ld.ub	r8,r8[0x0]
800062cc:	5c 58       	castu.b	r8
800062ce:	c0 b1       	brne	800062e4 <usb_set_interface+0x80>
   {
      // No configuration selected then no interface enable
      Usb_enable_stall_handshake(EP_CONTROL);
800062d0:	fe 69 01 f0 	mov	r9,-130576
800062d4:	e8 68 00 00 	mov	r8,524288
800062d8:	93 08       	st.w	r9[0x0],r8
      Usb_ack_setup_received_free();
800062da:	fe 69 01 60 	mov	r9,-130720
800062de:	30 48       	mov	r8,4
800062e0:	93 08       	st.w	r9[0x0],r8
800062e2:	c1 e9       	rjmp	8000651e <usb_set_interface+0x2ba>
      return;
   }
   u8_i = usb_configuration_nb;
800062e4:	fe f8 02 50 	ld.w	r8,pc[592]
800062e8:	11 88       	ld.ub	r8,r8[0x0]
800062ea:	ef 68 ff fb 	st.b	r7[-5],r8
800062ee:	c4 d8       	rjmp	80006388 <usb_set_interface+0x124>
   while( u8_i != 0 )
   {
      if( CONFIGURATION_DESCRIPTOR != ((S_usb_configuration_descriptor*)pbuffer)->bDescriptorType )
800062f0:	fe f8 02 3c 	ld.w	r8,pc[572]
800062f4:	70 08       	ld.w	r8,r8[0x0]
800062f6:	11 99       	ld.ub	r9,r8[0x1]
800062f8:	30 28       	mov	r8,2
800062fa:	f0 09 18 00 	cp.b	r9,r8
800062fe:	c1 a0       	breq	80006332 <usb_set_interface+0xce>
      {
         data_to_transfer -=  ((S_usb_configuration_descriptor*)pbuffer)->bLength;
80006300:	fe f8 02 28 	ld.w	r8,pc[552]
80006304:	90 09       	ld.sh	r9,r8[0x0]
80006306:	fe f8 02 26 	ld.w	r8,pc[550]
8000630a:	70 08       	ld.w	r8,r8[0x0]
8000630c:	11 88       	ld.ub	r8,r8[0x0]
8000630e:	f2 08 01 08 	sub	r8,r9,r8
80006312:	5c 88       	casts.h	r8
80006314:	fe f9 02 14 	ld.w	r9,pc[532]
80006318:	b2 08       	st.h	r9[0x0],r8
         pbuffer =  (U8*)pbuffer + ((S_usb_configuration_descriptor*)pbuffer)->bLength;
8000631a:	fe f8 02 12 	ld.w	r8,pc[530]
8000631e:	70 09       	ld.w	r9,r8[0x0]
80006320:	fe f8 02 0c 	ld.w	r8,pc[524]
80006324:	70 08       	ld.w	r8,r8[0x0]
80006326:	11 88       	ld.ub	r8,r8[0x0]
80006328:	10 09       	add	r9,r8
8000632a:	fe f8 02 02 	ld.w	r8,pc[514]
8000632e:	91 09       	st.w	r8[0x0],r9
80006330:	c2 c8       	rjmp	80006388 <usb_set_interface+0x124>
         continue;
      }
      u8_i--;
80006332:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006336:	20 18       	sub	r8,1
80006338:	ef 68 ff fb 	st.b	r7[-5],r8
      if( u8_i != 0 )
8000633c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006340:	30 08       	mov	r8,0
80006342:	f0 09 18 00 	cp.b	r9,r8
80006346:	c2 10       	breq	80006388 <usb_set_interface+0x124>
      {
         data_to_transfer -=  ((S_usb_configuration_descriptor*)pbuffer)->wTotalLength;
80006348:	4f 88       	lddpc	r8,80006528 <usb_set_interface+0x2c4>
8000634a:	90 0b       	ld.sh	r11,r8[0x0]
8000634c:	4f 88       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
8000634e:	70 08       	ld.w	r8,r8[0x0]
80006350:	10 99       	mov	r9,r8
80006352:	13 a8       	ld.ub	r8,r9[0x2]
80006354:	f0 0a 15 08 	lsl	r10,r8,0x8
80006358:	13 b8       	ld.ub	r8,r9[0x3]
8000635a:	14 48       	or	r8,r10
8000635c:	5c 88       	casts.h	r8
8000635e:	f6 08 01 08 	sub	r8,r11,r8
80006362:	5c 88       	casts.h	r8
80006364:	4f 19       	lddpc	r9,80006528 <usb_set_interface+0x2c4>
80006366:	b2 08       	st.h	r9[0x0],r8
         pbuffer =  (U8*)pbuffer + ((S_usb_configuration_descriptor*)pbuffer)->wTotalLength;
80006368:	4f 18       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
8000636a:	70 0b       	ld.w	r11,r8[0x0]
8000636c:	4f 08       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
8000636e:	70 08       	ld.w	r8,r8[0x0]
80006370:	10 99       	mov	r9,r8
80006372:	13 a8       	ld.ub	r8,r9[0x2]
80006374:	f0 0a 15 08 	lsl	r10,r8,0x8
80006378:	13 b8       	ld.ub	r8,r9[0x3]
8000637a:	14 48       	or	r8,r10
8000637c:	5c 88       	casts.h	r8
8000637e:	5c 78       	castu.h	r8
80006380:	f6 08 00 09 	add	r9,r11,r8
80006384:	4e a8       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
80006386:	91 09       	st.w	r8[0x0],r9
      Usb_enable_stall_handshake(EP_CONTROL);
      Usb_ack_setup_received_free();
      return;
   }
   u8_i = usb_configuration_nb;
   while( u8_i != 0 )
80006388:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000638c:	30 08       	mov	r8,0
8000638e:	f0 09 18 00 	cp.b	r9,r8
80006392:	ca f1       	brne	800062f0 <usb_set_interface+0x8c>
         pbuffer =  (U8*)pbuffer + ((S_usb_configuration_descriptor*)pbuffer)->wTotalLength;
      }
   }
   
   // Find interface selected
   if( wIndex >= ((S_usb_configuration_descriptor*)pbuffer)->bNumInterfaces )
80006394:	4e 68       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
80006396:	70 08       	ld.w	r8,r8[0x0]
80006398:	11 c8       	ld.ub	r8,r8[0x4]
8000639a:	10 99       	mov	r9,r8
8000639c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800063a0:	f2 08 19 00 	cp.h	r8,r9
800063a4:	c0 b3       	brcs	800063ba <usb_set_interface+0x156>
   {
      // Interface number unknow
      Usb_enable_stall_handshake(EP_CONTROL);
800063a6:	fe 69 01 f0 	mov	r9,-130576
800063aa:	e8 68 00 00 	mov	r8,524288
800063ae:	93 08       	st.w	r9[0x0],r8
      Usb_ack_setup_received_free();
800063b0:	fe 69 01 60 	mov	r9,-130720
800063b4:	30 48       	mov	r8,4
800063b6:	93 08       	st.w	r9[0x0],r8
800063b8:	cb 38       	rjmp	8000651e <usb_set_interface+0x2ba>
      return;
   }
   while( 1 )
   {
      if( data_to_transfer <= ((S_usb_interface_descriptor*)pbuffer)->bLength )
800063ba:	4d d8       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
800063bc:	70 08       	ld.w	r8,r8[0x0]
800063be:	11 88       	ld.ub	r8,r8[0x0]
800063c0:	10 99       	mov	r9,r8
800063c2:	4d a8       	lddpc	r8,80006528 <usb_set_interface+0x2c4>
800063c4:	90 08       	ld.sh	r8,r8[0x0]
800063c6:	f0 09 19 00 	cp.h	r9,r8
800063ca:	c0 b3       	brcs	800063e0 <usb_set_interface+0x17c>
      {
         // Interface unknow
         Usb_enable_stall_handshake(EP_CONTROL);
800063cc:	fe 69 01 f0 	mov	r9,-130576
800063d0:	e8 68 00 00 	mov	r8,524288
800063d4:	93 08       	st.w	r9[0x0],r8
         Usb_ack_setup_received_free();
800063d6:	fe 69 01 60 	mov	r9,-130720
800063da:	30 48       	mov	r8,4
800063dc:	93 08       	st.w	r9[0x0],r8
800063de:	ca 08       	rjmp	8000651e <usb_set_interface+0x2ba>
         return;
      }
      data_to_transfer -=  ((S_usb_interface_descriptor*)pbuffer)->bLength;
800063e0:	4d 28       	lddpc	r8,80006528 <usb_set_interface+0x2c4>
800063e2:	90 09       	ld.sh	r9,r8[0x0]
800063e4:	4d 28       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
800063e6:	70 08       	ld.w	r8,r8[0x0]
800063e8:	11 88       	ld.ub	r8,r8[0x0]
800063ea:	f2 08 01 08 	sub	r8,r9,r8
800063ee:	5c 88       	casts.h	r8
800063f0:	4c e9       	lddpc	r9,80006528 <usb_set_interface+0x2c4>
800063f2:	b2 08       	st.h	r9[0x0],r8
      pbuffer =  (U8*)pbuffer + ((S_usb_interface_descriptor*)pbuffer)->bLength;
800063f4:	4c e8       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
800063f6:	70 09       	ld.w	r9,r8[0x0]
800063f8:	4c d8       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
800063fa:	70 08       	ld.w	r8,r8[0x0]
800063fc:	11 88       	ld.ub	r8,r8[0x0]
800063fe:	10 09       	add	r9,r8
80006400:	4c b8       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
80006402:	91 09       	st.w	r8[0x0],r9
      if( INTERFACE_DESCRIPTOR != ((S_usb_interface_descriptor*)pbuffer)->bDescriptorType )
80006404:	4c a8       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
80006406:	70 08       	ld.w	r8,r8[0x0]
80006408:	11 99       	ld.ub	r9,r8[0x1]
8000640a:	30 48       	mov	r8,4
8000640c:	f0 09 18 00 	cp.b	r9,r8
80006410:	cd 51       	brne	800063ba <usb_set_interface+0x156>
         continue;
      if( wIndex != ((S_usb_interface_descriptor*)pbuffer)->bInterfaceNumber )
80006412:	4c 78       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
80006414:	70 08       	ld.w	r8,r8[0x0]
80006416:	11 a8       	ld.ub	r8,r8[0x2]
80006418:	10 99       	mov	r9,r8
8000641a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000641e:	f2 08 19 00 	cp.h	r8,r9
80006422:	cc c1       	brne	800063ba <usb_set_interface+0x156>
         continue;
      if( wValue != ((S_usb_interface_descriptor*)pbuffer)->bAlternateSetting )
80006424:	4c 28       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
80006426:	70 08       	ld.w	r8,r8[0x0]
80006428:	11 b8       	ld.ub	r8,r8[0x3]
8000642a:	10 99       	mov	r9,r8
8000642c:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80006430:	f2 08 19 00 	cp.h	r8,r9
80006434:	cc 31       	brne	800063ba <usb_set_interface+0x156>
         continue;
      usb_interface_status[wIndex] = wValue;
80006436:	ef 1a ff fe 	ld.uh	r10,r7[-2]
8000643a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000643e:	5c 58       	castu.b	r8
80006440:	4b e9       	lddpc	r9,80006538 <usb_set_interface+0x2d4>
80006442:	f2 0a 0b 08 	st.b	r9[r10],r8
   }
   
   //* Find endpoints of interface and reset it
   while( 1 )
   {
      if( data_to_transfer <= ((S_usb_endpoint_descriptor*)pbuffer)->bLength )
80006446:	4b a8       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
80006448:	70 08       	ld.w	r8,r8[0x0]
8000644a:	11 88       	ld.ub	r8,r8[0x0]
8000644c:	10 99       	mov	r9,r8
8000644e:	4b 78       	lddpc	r8,80006528 <usb_set_interface+0x2c4>
80006450:	90 08       	ld.sh	r8,r8[0x0]
80006452:	f0 09 19 00 	cp.h	r9,r8
80006456:	c5 a2       	brcc	8000650a <usb_set_interface+0x2a6>
         break;    // End of interface
      data_to_transfer -=  ((S_usb_endpoint_descriptor*)pbuffer)->bLength;
80006458:	4b 48       	lddpc	r8,80006528 <usb_set_interface+0x2c4>
8000645a:	90 09       	ld.sh	r9,r8[0x0]
8000645c:	4b 48       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
8000645e:	70 08       	ld.w	r8,r8[0x0]
80006460:	11 88       	ld.ub	r8,r8[0x0]
80006462:	f2 08 01 08 	sub	r8,r9,r8
80006466:	5c 88       	casts.h	r8
80006468:	4b 09       	lddpc	r9,80006528 <usb_set_interface+0x2c4>
8000646a:	b2 08       	st.h	r9[0x0],r8
      pbuffer =  (U8*)pbuffer + ((S_usb_endpoint_descriptor*)pbuffer)->bLength;
8000646c:	4b 08       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
8000646e:	70 09       	ld.w	r9,r8[0x0]
80006470:	4a f8       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
80006472:	70 08       	ld.w	r8,r8[0x0]
80006474:	11 88       	ld.ub	r8,r8[0x0]
80006476:	10 09       	add	r9,r8
80006478:	4a d8       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
8000647a:	91 09       	st.w	r8[0x0],r9
      if( INTERFACE_DESCRIPTOR == ((S_usb_endpoint_descriptor*)pbuffer)->bDescriptorType )
8000647c:	4a c8       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
8000647e:	70 08       	ld.w	r8,r8[0x0]
80006480:	11 99       	ld.ub	r9,r8[0x1]
80006482:	30 48       	mov	r8,4
80006484:	f0 09 18 00 	cp.b	r9,r8
80006488:	c4 10       	breq	8000650a <usb_set_interface+0x2a6>
         break;    // End of interface
      if( ENDPOINT_DESCRIPTOR == ((S_usb_endpoint_descriptor*)pbuffer)->bDescriptorType )
8000648a:	4a 98       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
8000648c:	70 08       	ld.w	r8,r8[0x0]
8000648e:	11 99       	ld.ub	r9,r8[0x1]
80006490:	30 58       	mov	r8,5
80006492:	f0 09 18 00 	cp.b	r9,r8
80006496:	cd 81       	brne	80006446 <usb_set_interface+0x1e2>
      {
         // Reset endpoint
         u8_i = ((S_usb_endpoint_descriptor*)pbuffer)->bEndpointAddress & (~MSK_EP_DIR);
80006498:	4a 58       	lddpc	r8,8000652c <usb_set_interface+0x2c8>
8000649a:	70 08       	ld.w	r8,r8[0x0]
8000649c:	11 a8       	ld.ub	r8,r8[0x2]
8000649e:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
800064a2:	ef 68 ff fb 	st.b	r7[-5],r8
         Usb_disable_stall_handshake(u8_i);
800064a6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800064aa:	a3 68       	lsl	r8,0x2
800064ac:	fe 6a 02 20 	mov	r10,-130528
800064b0:	f0 0a 00 09 	add	r9,r8,r10
800064b4:	e8 68 00 00 	mov	r8,524288
800064b8:	93 08       	st.w	r9[0x0],r8
         Usb_reset_endpoint(u8_i);
800064ba:	fe 6b 00 00 	mov	r11,-131072
800064be:	fe 68 00 00 	mov	r8,-131072
800064c2:	70 7a       	ld.w	r10,r8[0x1c]
800064c4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800064c8:	e0 78 00 00 	mov	r8,65536
800064cc:	f0 09 09 48 	lsl	r8,r8,r9
800064d0:	f5 e8 10 08 	or	r8,r10,r8
800064d4:	97 78       	st.w	r11[0x1c],r8
800064d6:	fe 6a 00 00 	mov	r10,-131072
800064da:	fe 68 00 00 	mov	r8,-131072
800064de:	70 7b       	ld.w	r11,r8[0x1c]
800064e0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800064e4:	e0 78 00 00 	mov	r8,65536
800064e8:	f0 09 09 48 	lsl	r8,r8,r9
800064ec:	5c d8       	com	r8
800064ee:	f7 e8 00 08 	and	r8,r11,r8
800064f2:	95 78       	st.w	r10[0x1c],r8
         Usb_reset_data_toggle(u8_i);
800064f4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800064f8:	a3 68       	lsl	r8,0x2
800064fa:	fe 6a 01 f0 	mov	r10,-130576
800064fe:	f0 0a 00 09 	add	r9,r8,r10
80006502:	e4 68 00 00 	mov	r8,262144
80006506:	93 08       	st.w	r9[0x0],r8
80006508:	c9 fb       	rjmp	80006446 <usb_set_interface+0x1e2>
      }
   }

   // send a ZLP for STATUS phase
   Usb_ack_control_in_ready_send();
8000650a:	fe 69 01 60 	mov	r9,-130720
8000650e:	30 18       	mov	r8,1
80006510:	93 08       	st.w	r9[0x0],r8
   while (!Is_usb_control_in_ready());
80006512:	fe 68 01 30 	mov	r8,-130768
80006516:	70 08       	ld.w	r8,r8[0x0]
80006518:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000651c:	cf b0       	breq	80006512 <usb_set_interface+0x2ae>
}
8000651e:	2f ed       	sub	sp,-8
80006520:	e3 cd 80 80 	ldm	sp++,r7,pc
80006524:	00 00       	add	r0,r0
80006526:	09 88       	ld.ub	r8,r4[0x0]
80006528:	00 00       	add	r0,r0
8000652a:	09 ae       	ld.ub	lr,r4[0x2]
8000652c:	00 00       	add	r0,r0
8000652e:	09 b0       	ld.ub	r0,r4[0x3]
80006530:	80 00       	ld.sh	r0,r0[0x0]
80006532:	fb 32 00 00 	ld.ub	r2,sp[0]
80006536:	09 ac       	ld.ub	r12,r4[0x2]
80006538:	00 00       	add	r0,r0
8000653a:	06 5c       	eor	r12,r3

8000653c <usb_host_task_init>:
//! @brief This function initializes the USB host controller.
//!
//! This function enables the USB controller for host-mode operation.
//!
void usb_host_task_init(void)
{
8000653c:	eb cd 40 80 	pushm	r7,lr
80006540:	1a 97       	mov	r7,sp
80006542:	20 2d       	sub	sp,8
  //! @todo Implement this on the silicon version
  //Pll_start_auto();
  //Wait_pll_ready();
  Disable_global_interrupt();
80006544:	d3 03       	ssrf	0x10
  Usb_disable();
80006546:	fe 69 00 00 	mov	r9,-131072
8000654a:	fe 68 00 00 	mov	r8,-131072
8000654e:	f0 f8 08 00 	ld.w	r8,r8[2048]
80006552:	af d8       	cbr	r8,0xf
80006554:	f3 48 08 00 	st.w	r9[2048],r8
  (void)Is_usb_enabled();
80006558:	fe 68 00 00 	mov	r8,-131072
8000655c:	f0 f8 08 00 	ld.w	r8,r8[2048]
  Enable_global_interrupt();
80006560:	d5 03       	csrf	0x10
  Usb_disable_otg_pad();
80006562:	fe 69 00 00 	mov	r9,-131072
80006566:	fe 68 00 00 	mov	r8,-131072
8000656a:	f0 f8 08 00 	ld.w	r8,r8[2048]
8000656e:	ad c8       	cbr	r8,0xc
80006570:	f3 48 08 00 	st.w	r9[2048],r8
  Usb_enable_otg_pad();
80006574:	fe 69 00 00 	mov	r9,-131072
80006578:	fe 68 00 00 	mov	r8,-131072
8000657c:	f0 f8 08 00 	ld.w	r8,r8[2048]
80006580:	ad a8       	sbr	r8,0xc
80006582:	f3 48 08 00 	st.w	r9[2048],r8
  Usb_enable();
80006586:	fe 69 00 00 	mov	r9,-131072
8000658a:	fe 68 00 00 	mov	r8,-131072
8000658e:	f0 f8 08 00 	ld.w	r8,r8[2048]
80006592:	af b8       	sbr	r8,0xf
80006594:	f3 48 08 00 	st.w	r9[2048],r8
  Usb_unfreeze_clock();
80006598:	fe 69 00 00 	mov	r9,-131072
8000659c:	fe 68 00 00 	mov	r8,-131072
800065a0:	f0 f8 08 00 	ld.w	r8,r8[2048]
800065a4:	af c8       	cbr	r8,0xe
800065a6:	f3 48 08 00 	st.w	r9[2048],r8
  (void)Is_usb_clock_frozen();
800065aa:	fe 68 00 00 	mov	r8,-131072
800065ae:	f0 f8 08 00 	ld.w	r8,r8[2048]
#if USB_VBOF_ACTIVE_LEVEL == HIGH
  Usb_set_vbof_active_high();
#else // USB_VBOF_ACTIVE_LEVEL == LOW
  Usb_set_vbof_active_low();
800065b2:	fe 69 00 00 	mov	r9,-131072
800065b6:	fe 68 00 00 	mov	r8,-131072
800065ba:	f0 f8 08 00 	ld.w	r8,r8[2048]
800065be:	ad b8       	sbr	r8,0xd
800065c0:	f3 48 08 00 	st.w	r9[2048],r8
#endif
  Usb_output_vbof_pin();
800065c4:	fe 79 10 00 	mov	r9,-61440
800065c8:	e2 68 00 00 	mov	r8,131072
800065cc:	f3 48 01 14 	st.w	r9[276],r8
800065d0:	fe 79 10 00 	mov	r9,-61440
800065d4:	e2 68 00 00 	mov	r8,131072
800065d8:	f3 48 01 28 	st.w	r9[296],r8
800065dc:	fe 79 10 00 	mov	r9,-61440
800065e0:	e2 68 00 00 	mov	r8,131072
800065e4:	f3 48 01 08 	st.w	r9[264],r8
800065e8:	fe 79 10 00 	mov	r9,-61440
800065ec:	e2 68 00 00 	mov	r8,131072
800065f0:	f3 48 01 88 	st.w	r9[392],r8
800065f4:	fe 79 10 00 	mov	r9,-61440
800065f8:	e2 68 00 00 	mov	r8,131072
800065fc:	f3 48 01 78 	st.w	r9[376],r8
  Usb_disable_vbus_hw_control();  // Force VBus generation without time-out
80006600:	fe 69 00 00 	mov	r9,-131072
80006604:	fe 68 00 00 	mov	r8,-131072
80006608:	f0 f8 08 00 	ld.w	r8,r8[2048]
8000660c:	a9 a8       	sbr	r8,0x8
8000660e:	f3 48 08 00 	st.w	r9[2048],r8
  Host_enable_device_disconnection_interrupt();
80006612:	fe 69 00 00 	mov	r9,-131072
80006616:	30 28       	mov	r8,2
80006618:	f3 48 04 18 	st.w	r9[1048],r8
#if USB_HOST_PIPE_INTERRUPT_TRANSFER == ENABLE
  reset_it_pipe_str();
#endif
  device_state = DEVICE_UNATTACHED;
8000661c:	48 89       	lddpc	r9,8000663c <usb_host_task_init+0x100>
8000661e:	30 08       	mov	r8,0
80006620:	b2 88       	st.b	r9[0x0],r8
  Host_clear_device_status();
80006622:	48 89       	lddpc	r9,80006640 <usb_host_task_init+0x104>
80006624:	30 08       	mov	r8,0
80006626:	b2 88       	st.b	r9[0x0],r8
  Host_ack_request_resume();
80006628:	48 79       	lddpc	r9,80006644 <usb_host_task_init+0x108>
8000662a:	30 08       	mov	r8,0
8000662c:	b2 88       	st.b	r9[0x0],r8
  sof_cnt = 0;
8000662e:	48 79       	lddpc	r9,80006648 <usb_host_task_init+0x10c>
80006630:	30 08       	mov	r8,0
80006632:	b2 08       	st.h	r9[0x0],r8
              configTSK_USB_HST_STACK_SIZE,
              NULL,
              configTSK_USB_HST_PRIORITY,
              &usb_host_tsk);
#endif  // FREERTOS_USED
}
80006634:	2f ed       	sub	sp,-8
80006636:	e3 cd 80 80 	ldm	sp++,r7,pc
8000663a:	00 00       	add	r0,r0
8000663c:	00 00       	add	r0,r0
8000663e:	09 b5       	ld.ub	r5,r4[0x3]
80006640:	00 00       	add	r0,r0
80006642:	09 b4       	ld.ub	r4,r4[0x3]
80006644:	00 00       	add	r0,r0
80006646:	0a bc       	st.h	r5++,r12
80006648:	00 00       	add	r0,r0
8000664a:	06 62       	and	r2,r3

8000664c <usb_host_task>:
#ifdef FREERTOS_USED
void usb_host_task(void *pvParameters)
#else
void usb_host_task(void)
#endif
{
8000664c:	eb cd 40 80 	pushm	r7,lr
80006650:	1a 97       	mov	r7,sp
80006652:	21 6d       	sub	sp,88
  while (TRUE)
  {
    vTaskDelayUntil(&xLastWakeTime, configTSK_USB_HST_PERIOD);

#endif  // FREERTOS_USED
    switch (device_state)
80006654:	fe f8 0b 48 	ld.w	r8,pc[2888]
80006658:	11 88       	ld.ub	r8,r8[0x0]
8000665a:	5c 58       	castu.b	r8
8000665c:	ef 48 ff a8 	st.w	r7[-88],r8
80006660:	ee f9 ff a8 	ld.w	r9,r7[-88]
80006664:	58 99       	cp.w	r9,9
80006666:	e0 8b 05 94 	brhi	8000718e <usb_host_task+0xb42>
8000666a:	fe f8 0b 36 	ld.w	r8,pc[2870]
8000666e:	ee f9 ff a8 	ld.w	r9,r7[-88]
80006672:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
    //
    //   - Default init state
    //   - Try to give device power supply
    //
    case DEVICE_UNATTACHED:
      nb_interface_supported = 0;
80006676:	fe f9 0b 2e 	ld.w	r9,pc[2862]
8000667a:	30 08       	mov	r8,0
8000667c:	b2 88       	st.b	r9[0x0],r8
      Host_clear_device_status();     // Reset device status
8000667e:	fe f9 0b 2a 	ld.w	r9,pc[2858]
80006682:	30 08       	mov	r8,0
80006684:	b2 88       	st.b	r9[0x0],r8
      Usb_clear_all_event();          // Clear all software events
80006686:	fe f9 0b 26 	ld.w	r9,pc[2854]
8000668a:	30 08       	mov	r8,0
8000668c:	b2 08       	st.h	r9[0x0],r8
      Host_disable_sof();
8000668e:	fe 69 00 00 	mov	r9,-131072
80006692:	fe 68 00 00 	mov	r8,-131072
80006696:	f0 f8 04 00 	ld.w	r8,r8[1024]
8000669a:	a9 c8       	cbr	r8,0x8
8000669c:	f3 48 04 00 	st.w	r9[1024],r8
      host_disable_all_pipes();
800066a0:	f0 1f 02 c4 	mcall	800071b0 <usb_host_task+0xb64>
      Usb_enable_vbus();              // Give at least device power supply!
800066a4:	fe 69 00 00 	mov	r9,-131072
800066a8:	e0 68 02 00 	mov	r8,512
800066ac:	f3 48 08 0c 	st.w	r9[2060],r8
      // If VBus OK, wait for device connection
      if (Is_usb_vbus_high()) device_state = DEVICE_ATTACHED;
800066b0:	fe 68 00 00 	mov	r8,-131072
800066b4:	f0 f8 08 04 	ld.w	r8,r8[2052]
800066b8:	e2 18 08 00 	andl	r8,0x800,COH
800066bc:	e0 80 05 6c 	breq	80007194 <usb_host_task+0xb48>
800066c0:	fe f9 0a dc 	ld.w	r9,pc[2780]
800066c4:	30 18       	mov	r8,1
800066c6:	b2 88       	st.b	r9[0x0],r8
800066c8:	e0 8f 05 66 	bral	80007194 <usb_host_task+0xb48>
    //
    //   - VBus is on
    //   - Try to detect device connection
    //
    case DEVICE_ATTACHED:
      if (Is_host_device_connection())  // Device pull-up detected
800066cc:	fe 68 00 00 	mov	r8,-131072
800066d0:	f0 f8 04 04 	ld.w	r8,r8[1028]
800066d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800066d8:	5c 58       	castu.b	r8
800066da:	e0 80 01 35 	breq	80006944 <usb_host_task+0x2f8>
      {
        Usb_ack_bconnection_error_interrupt();
800066de:	fe 69 00 00 	mov	r9,-131072
800066e2:	31 08       	mov	r8,16
800066e4:	f3 48 08 08 	st.w	r9[2056],r8
        Usb_ack_vbus_error_interrupt();
800066e8:	fe 69 00 00 	mov	r9,-131072
800066ec:	30 88       	mov	r8,8
800066ee:	f3 48 08 08 	st.w	r9[2056],r8
        Host_ack_device_connection();
800066f2:	fe 69 00 00 	mov	r9,-131072
800066f6:	30 18       	mov	r8,1
800066f8:	f3 48 04 08 	st.w	r9[1032],r8

        // Now device is connected, enable disconnection interrupt
        Host_enable_device_disconnection_interrupt();
800066fc:	fe 69 00 00 	mov	r9,-131072
80006700:	30 28       	mov	r8,2
80006702:	f3 48 04 18 	st.w	r9[1048],r8
        Enable_global_interrupt();
80006706:	d5 03       	csrf	0x10
        Host_clear_device_status();   // Reset device status
80006708:	fe f9 0a a0 	ld.w	r9,pc[2720]
8000670c:	30 08       	mov	r8,0
8000670e:	b2 88       	st.b	r9[0x0],r8
        Host_enable_sof();            // Start SOF generation
80006710:	fe 69 00 00 	mov	r9,-131072
80006714:	fe 68 00 00 	mov	r8,-131072
80006718:	f0 f8 04 00 	ld.w	r8,r8[1024]
8000671c:	a9 a8       	sbr	r8,0x8
8000671e:	f3 48 04 00 	st.w	r9[1024],r8
        Host_enable_sof_interrupt();  // SOF will be detected under interrupt
80006722:	fe 69 00 00 	mov	r9,-131072
80006726:	32 08       	mov	r8,32
80006728:	f3 48 04 18 	st.w	r9[1048],r8
        sof_cnt = 0;
8000672c:	fe f9 0a 88 	ld.w	r9,pc[2696]
80006730:	30 08       	mov	r8,0
80006732:	b2 08       	st.h	r9[0x0],r8
80006734:	c3 e8       	rjmp	800067b0 <usb_host_task+0x164>
        while (sof_cnt < 100)         // Wait 100 ms before USB reset
        {
          if (Is_usb_event(EVT_HOST_SOF)) Usb_ack_event(EVT_HOST_SOF), sof_cnt++; // Count SOFs
80006736:	fe f8 0a 76 	ld.w	r8,pc[2678]
8000673a:	90 08       	ld.sh	r8,r8[0x0]
8000673c:	5c 88       	casts.h	r8
8000673e:	5c 78       	castu.h	r8
80006740:	e2 18 02 00 	andl	r8,0x200,COH
80006744:	c1 20       	breq	80006768 <usb_host_task+0x11c>
80006746:	fe f8 0a 66 	ld.w	r8,pc[2662]
8000674a:	90 08       	ld.sh	r8,r8[0x0]
8000674c:	5c 88       	casts.h	r8
8000674e:	a9 d8       	cbr	r8,0x9
80006750:	5c 88       	casts.h	r8
80006752:	fe f9 0a 5a 	ld.w	r9,pc[2650]
80006756:	b2 08       	st.h	r9[0x0],r8
80006758:	fe f8 0a 5c 	ld.w	r8,pc[2652]
8000675c:	90 08       	ld.sh	r8,r8[0x0]
8000675e:	2f f8       	sub	r8,-1
80006760:	5c 88       	casts.h	r8
80006762:	fe f9 0a 52 	ld.w	r9,pc[2642]
80006766:	b2 08       	st.h	r9[0x0],r8
          if (Is_host_emergency_exit() || Is_usb_bconnection_error_interrupt()) goto device_attached_error;
80006768:	fe f8 0a 50 	ld.w	r8,pc[2640]
8000676c:	11 88       	ld.ub	r8,r8[0x0]
8000676e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006772:	30 18       	mov	r8,1
80006774:	f0 09 18 00 	cp.b	r9,r8
80006778:	e0 80 00 e6 	breq	80006944 <usb_host_task+0x2f8>
8000677c:	fe f8 0a 30 	ld.w	r8,pc[2608]
80006780:	90 08       	ld.sh	r8,r8[0x0]
80006782:	5c 88       	casts.h	r8
80006784:	5c 78       	castu.h	r8
80006786:	e2 18 08 00 	andl	r8,0x800,COH
8000678a:	e0 81 00 dd 	brne	80006944 <usb_host_task+0x2f8>
8000678e:	fe f8 0a 1e 	ld.w	r8,pc[2590]
80006792:	90 08       	ld.sh	r8,r8[0x0]
80006794:	5c 88       	casts.h	r8
80006796:	5c 78       	castu.h	r8
80006798:	e2 18 00 08 	andl	r8,0x8,COH
8000679c:	e0 81 00 d4 	brne	80006944 <usb_host_task+0x2f8>
800067a0:	fe 68 00 00 	mov	r8,-131072
800067a4:	f0 f8 08 04 	ld.w	r8,r8[2052]
800067a8:	e2 18 00 10 	andl	r8,0x10,COH
800067ac:	e0 81 00 cc 	brne	80006944 <usb_host_task+0x2f8>
        Enable_global_interrupt();
        Host_clear_device_status();   // Reset device status
        Host_enable_sof();            // Start SOF generation
        Host_enable_sof_interrupt();  // SOF will be detected under interrupt
        sof_cnt = 0;
        while (sof_cnt < 100)         // Wait 100 ms before USB reset
800067b0:	fe f8 0a 04 	ld.w	r8,pc[2564]
800067b4:	90 09       	ld.sh	r9,r8[0x0]
800067b6:	36 38       	mov	r8,99
800067b8:	f0 09 19 00 	cp.h	r9,r8
800067bc:	fe 98 ff bd 	brls	80006736 <usb_host_task+0xea>
        {
          if (Is_usb_event(EVT_HOST_SOF)) Usb_ack_event(EVT_HOST_SOF), sof_cnt++; // Count SOFs
          if (Is_host_emergency_exit() || Is_usb_bconnection_error_interrupt()) goto device_attached_error;
        }
        Disable_global_interrupt();
800067c0:	d3 03       	ssrf	0x10
        Host_disable_device_disconnection_interrupt();
800067c2:	fe 69 00 00 	mov	r9,-131072
800067c6:	30 28       	mov	r8,2
800067c8:	f3 48 04 14 	st.w	r9[1044],r8
        Host_send_reset();            // First USB reset
800067cc:	fe 69 00 00 	mov	r9,-131072
800067d0:	fe 68 00 00 	mov	r8,-131072
800067d4:	f0 f8 04 00 	ld.w	r8,r8[1024]
800067d8:	a9 b8       	sbr	r8,0x9
800067da:	f3 48 04 00 	st.w	r9[1024],r8
        (void)Is_host_sending_reset();
800067de:	fe 68 00 00 	mov	r8,-131072
800067e2:	f0 f8 04 00 	ld.w	r8,r8[1024]
        Enable_global_interrupt();
800067e6:	d5 03       	csrf	0x10
        Usb_ack_event(EVT_HOST_SOF);
800067e8:	fe f8 09 c4 	ld.w	r8,pc[2500]
800067ec:	90 08       	ld.sh	r8,r8[0x0]
800067ee:	5c 88       	casts.h	r8
800067f0:	a9 d8       	cbr	r8,0x9
800067f2:	5c 88       	casts.h	r8
800067f4:	fe f9 09 b8 	ld.w	r9,pc[2488]
800067f8:	b2 08       	st.h	r9[0x0],r8
800067fa:	c1 18       	rjmp	8000681c <usb_host_task+0x1d0>
        // Active wait for end of reset send
        while (Is_host_sending_reset())
        {
          // The USB macro does not signal the end of reset when a disconnection occurs
          if (Is_host_device_disconnection())
800067fc:	fe 68 00 00 	mov	r8,-131072
80006800:	f0 f8 04 04 	ld.w	r8,r8[1028]
80006804:	e2 18 00 02 	andl	r8,0x2,COH
80006808:	c0 a0       	breq	8000681c <usb_host_task+0x1d0>
          {
            // Stop sending USB reset
            Host_stop_sending_reset();
8000680a:	fe 69 00 00 	mov	r9,-131072
8000680e:	fe 68 00 00 	mov	r8,-131072
80006812:	f0 f8 04 00 	ld.w	r8,r8[1024]
80006816:	a9 d8       	cbr	r8,0x9
80006818:	f3 48 04 00 	st.w	r9[1024],r8
        Host_send_reset();            // First USB reset
        (void)Is_host_sending_reset();
        Enable_global_interrupt();
        Usb_ack_event(EVT_HOST_SOF);
        // Active wait for end of reset send
        while (Is_host_sending_reset())
8000681c:	fe 68 00 00 	mov	r8,-131072
80006820:	f0 f8 04 00 	ld.w	r8,r8[1024]
80006824:	e2 18 02 00 	andl	r8,0x200,COH
80006828:	ce a1       	brne	800067fc <usb_host_task+0x1b0>
          {
            // Stop sending USB reset
            Host_stop_sending_reset();
          }
        }
        Host_ack_reset_sent();
8000682a:	fe 69 00 00 	mov	r9,-131072
8000682e:	30 48       	mov	r8,4
80006830:	f3 48 04 08 	st.w	r9[1032],r8
        if (!Is_host_device_disconnection())
80006834:	fe 68 00 00 	mov	r8,-131072
80006838:	f0 f8 04 04 	ld.w	r8,r8[1028]
8000683c:	e2 18 00 02 	andl	r8,0x2,COH
80006840:	c2 f1       	brne	8000689e <usb_host_task+0x252>
        {
          // Workaround for some buggy devices with powerless pull-up
          // usually low-speed where data line rises slowly and can be interpreted as disconnection
          for (sof_cnt = 0; sof_cnt < 0xFFFF; sof_cnt++)  // Basic time-out counter
80006842:	fe f9 09 72 	ld.w	r9,pc[2418]
80006846:	30 08       	mov	r8,0
80006848:	b2 08       	st.h	r9[0x0],r8
8000684a:	c2 38       	rjmp	80006890 <usb_host_task+0x244>
          {
            // If we detect SOF, device is still alive and connected, just clear false disconnect flag
            if (Is_usb_event(EVT_HOST_SOF) && Is_host_device_disconnection())
8000684c:	fe f8 09 60 	ld.w	r8,pc[2400]
80006850:	90 08       	ld.sh	r8,r8[0x0]
80006852:	5c 88       	casts.h	r8
80006854:	5c 78       	castu.h	r8
80006856:	e2 18 02 00 	andl	r8,0x200,COH
8000685a:	c1 30       	breq	80006880 <usb_host_task+0x234>
8000685c:	fe 68 00 00 	mov	r8,-131072
80006860:	f0 f8 04 04 	ld.w	r8,r8[1028]
80006864:	e2 18 00 02 	andl	r8,0x2,COH
80006868:	c0 c0       	breq	80006880 <usb_host_task+0x234>
            {
              Host_ack_device_connection();
8000686a:	fe 69 00 00 	mov	r9,-131072
8000686e:	30 18       	mov	r8,1
80006870:	f3 48 04 08 	st.w	r9[1032],r8
              Host_ack_device_disconnection();
80006874:	fe 69 00 00 	mov	r9,-131072
80006878:	30 28       	mov	r8,2
8000687a:	f3 48 04 08 	st.w	r9[1032],r8
8000687e:	c1 08       	rjmp	8000689e <usb_host_task+0x252>
        Host_ack_reset_sent();
        if (!Is_host_device_disconnection())
        {
          // Workaround for some buggy devices with powerless pull-up
          // usually low-speed where data line rises slowly and can be interpreted as disconnection
          for (sof_cnt = 0; sof_cnt < 0xFFFF; sof_cnt++)  // Basic time-out counter
80006880:	fe f8 09 34 	ld.w	r8,pc[2356]
80006884:	90 08       	ld.sh	r8,r8[0x0]
80006886:	2f f8       	sub	r8,-1
80006888:	5c 88       	casts.h	r8
8000688a:	fe f9 09 2a 	ld.w	r9,pc[2346]
8000688e:	b2 08       	st.h	r9[0x0],r8
80006890:	fe f8 09 24 	ld.w	r8,pc[2340]
80006894:	90 09       	ld.sh	r9,r8[0x0]
80006896:	3f f8       	mov	r8,-1
80006898:	f0 09 19 00 	cp.h	r9,r8
8000689c:	cd 81       	brne	8000684c <usb_host_task+0x200>
              Host_ack_device_disconnection();
              break;
            }
          }
        }
        Host_enable_device_disconnection_interrupt();
8000689e:	fe 69 00 00 	mov	r9,-131072
800068a2:	30 28       	mov	r8,2
800068a4:	f3 48 04 18 	st.w	r9[1048],r8
        sof_cnt = 0;
800068a8:	fe f9 09 0c 	ld.w	r9,pc[2316]
800068ac:	30 08       	mov	r8,0
800068ae:	b2 08       	st.h	r9[0x0],r8
800068b0:	c3 a8       	rjmp	80006924 <usb_host_task+0x2d8>
        while (sof_cnt < 100)         // Wait 100 ms after USB reset
        {
          if (Is_usb_event(EVT_HOST_SOF)) Usb_ack_event(EVT_HOST_SOF), sof_cnt++; // Count SOFs
800068b2:	fe f8 08 fa 	ld.w	r8,pc[2298]
800068b6:	90 08       	ld.sh	r8,r8[0x0]
800068b8:	5c 88       	casts.h	r8
800068ba:	5c 78       	castu.h	r8
800068bc:	e2 18 02 00 	andl	r8,0x200,COH
800068c0:	c1 20       	breq	800068e4 <usb_host_task+0x298>
800068c2:	fe f8 08 ea 	ld.w	r8,pc[2282]
800068c6:	90 08       	ld.sh	r8,r8[0x0]
800068c8:	5c 88       	casts.h	r8
800068ca:	a9 d8       	cbr	r8,0x9
800068cc:	5c 88       	casts.h	r8
800068ce:	fe f9 08 de 	ld.w	r9,pc[2270]
800068d2:	b2 08       	st.h	r9[0x0],r8
800068d4:	fe f8 08 e0 	ld.w	r8,pc[2272]
800068d8:	90 08       	ld.sh	r8,r8[0x0]
800068da:	2f f8       	sub	r8,-1
800068dc:	5c 88       	casts.h	r8
800068de:	fe f9 08 d6 	ld.w	r9,pc[2262]
800068e2:	b2 08       	st.h	r9[0x0],r8
          if (Is_host_emergency_exit() || Is_usb_bconnection_error_interrupt()) goto device_attached_error;
800068e4:	fe f8 08 d4 	ld.w	r8,pc[2260]
800068e8:	11 88       	ld.ub	r8,r8[0x0]
800068ea:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800068ee:	30 18       	mov	r8,1
800068f0:	f0 09 18 00 	cp.b	r9,r8
800068f4:	c2 80       	breq	80006944 <usb_host_task+0x2f8>
800068f6:	fe f8 08 b6 	ld.w	r8,pc[2230]
800068fa:	90 08       	ld.sh	r8,r8[0x0]
800068fc:	5c 88       	casts.h	r8
800068fe:	5c 78       	castu.h	r8
80006900:	e2 18 08 00 	andl	r8,0x800,COH
80006904:	c2 01       	brne	80006944 <usb_host_task+0x2f8>
80006906:	fe f8 08 a6 	ld.w	r8,pc[2214]
8000690a:	90 08       	ld.sh	r8,r8[0x0]
8000690c:	5c 88       	casts.h	r8
8000690e:	5c 78       	castu.h	r8
80006910:	e2 18 00 08 	andl	r8,0x8,COH
80006914:	c1 81       	brne	80006944 <usb_host_task+0x2f8>
80006916:	fe 68 00 00 	mov	r8,-131072
8000691a:	f0 f8 08 04 	ld.w	r8,r8[2052]
8000691e:	e2 18 00 10 	andl	r8,0x10,COH
80006922:	c1 11       	brne	80006944 <usb_host_task+0x2f8>
            }
          }
        }
        Host_enable_device_disconnection_interrupt();
        sof_cnt = 0;
        while (sof_cnt < 100)         // Wait 100 ms after USB reset
80006924:	fe f8 08 90 	ld.w	r8,pc[2192]
80006928:	90 09       	ld.sh	r9,r8[0x0]
8000692a:	36 38       	mov	r8,99
8000692c:	f0 09 19 00 	cp.h	r9,r8
80006930:	fe 98 ff c1 	brls	800068b2 <usb_host_task+0x266>
        {
          if (Is_usb_event(EVT_HOST_SOF)) Usb_ack_event(EVT_HOST_SOF), sof_cnt++; // Count SOFs
          if (Is_host_emergency_exit() || Is_usb_bconnection_error_interrupt()) goto device_attached_error;
        }
        device_state = DEVICE_POWERED;
80006934:	fe f9 08 68 	ld.w	r9,pc[2152]
80006938:	30 28       	mov	r8,2
8000693a:	b2 88       	st.b	r9[0x0],r8
        LOG_STR(log_device_connected);
        Host_device_connection_action();
        sof_cnt = 0;
8000693c:	fe f9 08 78 	ld.w	r9,pc[2168]
80006940:	30 08       	mov	r8,0
80006942:	b2 08       	st.h	r9[0x0],r8
      }
device_attached_error:
      // Device connection error, or VBus pb -> Retry the connection process from the beginning
      if (Is_usb_bconnection_error_interrupt() || Is_usb_vbus_error_interrupt() || Is_usb_vbus_low())
80006944:	fe 68 00 00 	mov	r8,-131072
80006948:	f0 f8 08 04 	ld.w	r8,r8[2052]
8000694c:	e2 18 00 10 	andl	r8,0x10,COH
80006950:	c1 01       	brne	80006970 <usb_host_task+0x324>
80006952:	fe 68 00 00 	mov	r8,-131072
80006956:	f0 f8 08 04 	ld.w	r8,r8[2052]
8000695a:	e2 18 00 08 	andl	r8,0x8,COH
8000695e:	c0 91       	brne	80006970 <usb_host_task+0x324>
80006960:	fe 68 00 00 	mov	r8,-131072
80006964:	f0 f8 08 04 	ld.w	r8,r8[2052]
80006968:	e2 18 08 00 	andl	r8,0x800,COH
8000696c:	e0 81 04 14 	brne	80007194 <usb_host_task+0xb48>
      {
        device_state = DEVICE_UNATTACHED;
80006970:	fe f9 08 2c 	ld.w	r9,pc[2092]
80006974:	30 08       	mov	r8,0
80006976:	b2 88       	st.b	r9[0x0],r8
        Usb_ack_bconnection_error_interrupt();
80006978:	fe 69 00 00 	mov	r9,-131072
8000697c:	31 08       	mov	r8,16
8000697e:	f3 48 08 08 	st.w	r9[2056],r8
        Usb_ack_vbus_error_interrupt();
80006982:	fe 69 00 00 	mov	r9,-131072
80006986:	30 88       	mov	r8,8
80006988:	f3 48 08 08 	st.w	r9[2056],r8
        Host_disable_sof();
8000698c:	fe 69 00 00 	mov	r9,-131072
80006990:	fe 68 00 00 	mov	r8,-131072
80006994:	f0 f8 04 00 	ld.w	r8,r8[1024]
80006998:	a9 c8       	cbr	r8,0x8
8000699a:	f3 48 04 00 	st.w	r9[1024],r8
8000699e:	e0 8f 03 fb 	bral	80007194 <usb_host_task+0xb48>
    //
    //   - Device connection (attach) has been detected,
    //   - Wait 100 ms and configure default control pipe
    //
    case DEVICE_POWERED:
      if (Is_usb_event(EVT_HOST_SOF))
800069a2:	fe f8 08 0a 	ld.w	r8,pc[2058]
800069a6:	90 08       	ld.sh	r8,r8[0x0]
800069a8:	5c 88       	casts.h	r8
800069aa:	5c 78       	castu.h	r8
800069ac:	e2 18 02 00 	andl	r8,0x200,COH
800069b0:	e0 80 03 f2 	breq	80007194 <usb_host_task+0xb48>
      {
        Usb_ack_event(EVT_HOST_SOF);
800069b4:	fe f8 07 f8 	ld.w	r8,pc[2040]
800069b8:	90 08       	ld.sh	r8,r8[0x0]
800069ba:	5c 88       	casts.h	r8
800069bc:	a9 d8       	cbr	r8,0x9
800069be:	5c 88       	casts.h	r8
800069c0:	fe f9 07 ec 	ld.w	r9,pc[2028]
800069c4:	b2 08       	st.h	r9[0x0],r8
        if (sof_cnt++ >= 100)         // Wait 100 ms
800069c6:	fe f8 07 ee 	ld.w	r8,pc[2030]
800069ca:	90 09       	ld.sh	r9,r8[0x0]
800069cc:	36 38       	mov	r8,99
800069ce:	f0 09 19 00 	cp.h	r9,r8
800069d2:	5f b8       	srhi	r8
800069d4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800069d8:	f2 c8 ff ff 	sub	r8,r9,-1
800069dc:	5c 88       	casts.h	r8
800069de:	fe f9 07 d6 	ld.w	r9,pc[2006]
800069e2:	b2 08       	st.h	r9[0x0],r8
800069e4:	58 0a       	cp.w	r10,0
800069e6:	e0 80 03 d7 	breq	80007194 <usb_host_task+0xb48>
        {
          Host_enable_pipe(P_CONTROL);
800069ea:	fe 69 00 00 	mov	r9,-131072
800069ee:	fe 68 00 00 	mov	r8,-131072
800069f2:	f0 f8 04 1c 	ld.w	r8,r8[1052]
800069f6:	a1 a8       	sbr	r8,0x0
800069f8:	f3 48 04 1c 	st.w	r9[1052],r8
          (void)Host_configure_pipe(P_CONTROL,
800069fc:	fe 69 00 00 	mov	r9,-131072
80006a00:	fe 68 00 00 	mov	r8,-131072
80006a04:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80006a08:	a1 a8       	sbr	r8,0x0
80006a0a:	f3 48 04 1c 	st.w	r9[1052],r8
80006a0e:	fe 6a 05 00 	mov	r10,-129792
80006a12:	fe 68 05 00 	mov	r8,-129792
80006a16:	70 08       	ld.w	r8,r8[0x0]
80006a18:	10 9b       	mov	r11,r8
80006a1a:	e4 1b 00 f0 	andh	r11,0xf0
80006a1e:	e0 1b cc 83 	andl	r11,0xcc83
80006a22:	30 88       	mov	r8,8
80006a24:	ef 48 ff e0 	st.w	r7[-32],r8
80006a28:	30 88       	mov	r8,8
80006a2a:	ef 48 ff e4 	st.w	r7[-28],r8
80006a2e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006a32:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006a36:	f2 08 0c 48 	max	r8,r9,r8
80006a3a:	ef 48 ff dc 	st.w	r7[-36],r8
80006a3e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006a42:	ef 48 ff d4 	st.w	r7[-44],r8
80006a46:	e0 68 04 00 	mov	r8,1024
80006a4a:	ef 48 ff d8 	st.w	r7[-40],r8
80006a4e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80006a52:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006a56:	f2 08 0d 48 	min	r8,r9,r8
80006a5a:	ef 48 ff d0 	st.w	r7[-48],r8
80006a5e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006a62:	a1 78       	lsl	r8,0x1
80006a64:	20 18       	sub	r8,1
80006a66:	f0 08 12 00 	clz	r8,r8
80006a6a:	f0 08 11 1c 	rsub	r8,r8,28
80006a6e:	a5 68       	lsl	r8,0x4
80006a70:	e4 18 ff 0f 	andh	r8,0xff0f
80006a74:	e0 18 33 7c 	andl	r8,0x337c
80006a78:	f7 e8 10 08 	or	r8,r11,r8
80006a7c:	95 08       	st.w	r10[0x0],r8
80006a7e:	fe 69 05 00 	mov	r9,-129792
80006a82:	fe 68 05 00 	mov	r8,-129792
80006a86:	70 08       	ld.w	r8,r8[0x0]
80006a88:	a1 b8       	sbr	r8,0x1
80006a8a:	93 08       	st.w	r9[0x0],r8
80006a8c:	fe 68 05 30 	mov	r8,-129744
80006a90:	70 08       	ld.w	r8,r8[0x0]
                                    EP_CONTROL,
                                    TYPE_CONTROL,
                                    TOKEN_SETUP,
                                    8,
                                    SINGLE_BANK);
          device_state = DEVICE_DEFAULT;
80006a92:	fe f9 07 0a 	ld.w	r9,pc[1802]
80006a96:	30 38       	mov	r8,3
80006a98:	b2 88       	st.b	r9[0x0],r8
80006a9a:	e0 8f 03 7d 	bral	80007194 <usb_host_task+0xb48>
    //   - Reconfigure control pipe according to device control endpoint
    //   - Assign device address
    //
    case DEVICE_DEFAULT:
      // Get first device descriptor
      if (host_get_device_descriptor_incomplete() == CONTROL_GOOD)
80006a9e:	fe f9 07 1e 	ld.w	r9,pc[1822]
80006aa2:	38 08       	mov	r8,-128
80006aa4:	b2 88       	st.b	r9[0x0],r8
80006aa6:	fe f9 07 16 	ld.w	r9,pc[1814]
80006aaa:	30 68       	mov	r8,6
80006aac:	b2 98       	st.b	r9[0x1],r8
80006aae:	fe f9 07 0e 	ld.w	r9,pc[1806]
80006ab2:	e0 68 01 00 	mov	r8,256
80006ab6:	b2 18       	st.h	r9[0x2],r8
80006ab8:	fe f9 07 04 	ld.w	r9,pc[1796]
80006abc:	30 08       	mov	r8,0
80006abe:	b2 28       	st.h	r9[0x4],r8
80006ac0:	fe f9 06 fc 	ld.w	r9,pc[1788]
80006ac4:	34 08       	mov	r8,64
80006ac6:	b2 38       	st.h	r9[0x6],r8
80006ac8:	fe f9 06 f4 	ld.w	r9,pc[1780]
80006acc:	30 18       	mov	r8,1
80006ace:	f3 68 00 08 	st.b	r9[8],r8
80006ad2:	fe fc 06 ee 	ld.w	r12,pc[1774]
80006ad6:	f0 1f 01 bc 	mcall	800071c4 <usb_host_task+0xb78>
80006ada:	18 98       	mov	r8,r12
80006adc:	58 08       	cp.w	r8,0
80006ade:	e0 81 01 e0 	brne	80006e9e <usb_host_task+0x852>
      {
        sof_cnt = 0;
80006ae2:	fe f9 06 d2 	ld.w	r9,pc[1746]
80006ae6:	30 08       	mov	r8,0
80006ae8:	b2 08       	st.h	r9[0x0],r8
80006aea:	c3 a8       	rjmp	80006b5e <usb_host_task+0x512>
        while (sof_cnt < 20)          // Wait 20 ms before USB reset (special buggy devices...)
        {
          if (Is_usb_event(EVT_HOST_SOF)) Usb_ack_event(EVT_HOST_SOF), sof_cnt++;
80006aec:	fe f8 06 c0 	ld.w	r8,pc[1728]
80006af0:	90 08       	ld.sh	r8,r8[0x0]
80006af2:	5c 88       	casts.h	r8
80006af4:	5c 78       	castu.h	r8
80006af6:	e2 18 02 00 	andl	r8,0x200,COH
80006afa:	c1 20       	breq	80006b1e <usb_host_task+0x4d2>
80006afc:	fe f8 06 b0 	ld.w	r8,pc[1712]
80006b00:	90 08       	ld.sh	r8,r8[0x0]
80006b02:	5c 88       	casts.h	r8
80006b04:	a9 d8       	cbr	r8,0x9
80006b06:	5c 88       	casts.h	r8
80006b08:	fe f9 06 a4 	ld.w	r9,pc[1700]
80006b0c:	b2 08       	st.h	r9[0x0],r8
80006b0e:	fe f8 06 a6 	ld.w	r8,pc[1702]
80006b12:	90 08       	ld.sh	r8,r8[0x0]
80006b14:	2f f8       	sub	r8,-1
80006b16:	5c 88       	casts.h	r8
80006b18:	fe f9 06 9c 	ld.w	r9,pc[1692]
80006b1c:	b2 08       	st.h	r9[0x0],r8
          if (Is_host_emergency_exit() || Is_usb_bconnection_error_interrupt()) break;
80006b1e:	fe f8 06 9a 	ld.w	r8,pc[1690]
80006b22:	11 88       	ld.ub	r8,r8[0x0]
80006b24:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006b28:	30 18       	mov	r8,1
80006b2a:	f0 09 18 00 	cp.b	r9,r8
80006b2e:	c2 00       	breq	80006b6e <usb_host_task+0x522>
80006b30:	fe f8 06 7c 	ld.w	r8,pc[1660]
80006b34:	90 08       	ld.sh	r8,r8[0x0]
80006b36:	5c 88       	casts.h	r8
80006b38:	5c 78       	castu.h	r8
80006b3a:	e2 18 08 00 	andl	r8,0x800,COH
80006b3e:	c1 81       	brne	80006b6e <usb_host_task+0x522>
80006b40:	fe f8 06 6c 	ld.w	r8,pc[1644]
80006b44:	90 08       	ld.sh	r8,r8[0x0]
80006b46:	5c 88       	casts.h	r8
80006b48:	5c 78       	castu.h	r8
80006b4a:	e2 18 00 08 	andl	r8,0x8,COH
80006b4e:	c1 01       	brne	80006b6e <usb_host_task+0x522>
80006b50:	fe 68 00 00 	mov	r8,-131072
80006b54:	f0 f8 08 04 	ld.w	r8,r8[2052]
80006b58:	e2 18 00 10 	andl	r8,0x10,COH
80006b5c:	c0 91       	brne	80006b6e <usb_host_task+0x522>
    case DEVICE_DEFAULT:
      // Get first device descriptor
      if (host_get_device_descriptor_incomplete() == CONTROL_GOOD)
      {
        sof_cnt = 0;
        while (sof_cnt < 20)          // Wait 20 ms before USB reset (special buggy devices...)
80006b5e:	fe f8 06 56 	ld.w	r8,pc[1622]
80006b62:	90 09       	ld.sh	r9,r8[0x0]
80006b64:	31 38       	mov	r8,19
80006b66:	f0 09 19 00 	cp.h	r9,r8
80006b6a:	fe 98 ff c1 	brls	80006aec <usb_host_task+0x4a0>
        {
          if (Is_usb_event(EVT_HOST_SOF)) Usb_ack_event(EVT_HOST_SOF), sof_cnt++;
          if (Is_host_emergency_exit() || Is_usb_bconnection_error_interrupt()) break;
        }
        Disable_global_interrupt();
80006b6e:	d3 03       	ssrf	0x10
        Host_disable_device_disconnection_interrupt();
80006b70:	fe 69 00 00 	mov	r9,-131072
80006b74:	30 28       	mov	r8,2
80006b76:	f3 48 04 14 	st.w	r9[1044],r8
        Host_send_reset();            // First USB reset
80006b7a:	fe 69 00 00 	mov	r9,-131072
80006b7e:	fe 68 00 00 	mov	r8,-131072
80006b82:	f0 f8 04 00 	ld.w	r8,r8[1024]
80006b86:	a9 b8       	sbr	r8,0x9
80006b88:	f3 48 04 00 	st.w	r9[1024],r8
        (void)Is_host_sending_reset();
80006b8c:	fe 68 00 00 	mov	r8,-131072
80006b90:	f0 f8 04 00 	ld.w	r8,r8[1024]
        Enable_global_interrupt();
80006b94:	d5 03       	csrf	0x10
        Usb_ack_event(EVT_HOST_SOF);
80006b96:	fe f8 06 16 	ld.w	r8,pc[1558]
80006b9a:	90 08       	ld.sh	r8,r8[0x0]
80006b9c:	5c 88       	casts.h	r8
80006b9e:	a9 d8       	cbr	r8,0x9
80006ba0:	5c 88       	casts.h	r8
80006ba2:	fe f9 06 0a 	ld.w	r9,pc[1546]
80006ba6:	b2 08       	st.h	r9[0x0],r8
80006ba8:	c1 18       	rjmp	80006bca <usb_host_task+0x57e>
        // Active wait for end of reset send
        while (Is_host_sending_reset())
        {
          // The USB macro does not signal the end of reset when a disconnection occurs
          if (Is_host_device_disconnection())
80006baa:	fe 68 00 00 	mov	r8,-131072
80006bae:	f0 f8 04 04 	ld.w	r8,r8[1028]
80006bb2:	e2 18 00 02 	andl	r8,0x2,COH
80006bb6:	c0 a0       	breq	80006bca <usb_host_task+0x57e>
          {
            // Stop sending USB reset
            Host_stop_sending_reset();
80006bb8:	fe 69 00 00 	mov	r9,-131072
80006bbc:	fe 68 00 00 	mov	r8,-131072
80006bc0:	f0 f8 04 00 	ld.w	r8,r8[1024]
80006bc4:	a9 d8       	cbr	r8,0x9
80006bc6:	f3 48 04 00 	st.w	r9[1024],r8
        Host_send_reset();            // First USB reset
        (void)Is_host_sending_reset();
        Enable_global_interrupt();
        Usb_ack_event(EVT_HOST_SOF);
        // Active wait for end of reset send
        while (Is_host_sending_reset())
80006bca:	fe 68 00 00 	mov	r8,-131072
80006bce:	f0 f8 04 00 	ld.w	r8,r8[1024]
80006bd2:	e2 18 02 00 	andl	r8,0x200,COH
80006bd6:	ce a1       	brne	80006baa <usb_host_task+0x55e>
          {
            // Stop sending USB reset
            Host_stop_sending_reset();
          }
        }
        Host_ack_reset_sent();
80006bd8:	fe 69 00 00 	mov	r9,-131072
80006bdc:	30 48       	mov	r8,4
80006bde:	f3 48 04 08 	st.w	r9[1032],r8
        if (!Is_host_device_disconnection())
80006be2:	fe 68 00 00 	mov	r8,-131072
80006be6:	f0 f8 04 04 	ld.w	r8,r8[1028]
80006bea:	e2 18 00 02 	andl	r8,0x2,COH
80006bee:	c2 f1       	brne	80006c4c <usb_host_task+0x600>
        {
          // Workaround for some buggy devices with powerless pull-up
          // usually low-speed where data line rises slowly and can be interpreted as disconnection
          for (sof_cnt = 0; sof_cnt < 0xFFFF; sof_cnt++)  // Basic time-out counter
80006bf0:	fe f9 05 c4 	ld.w	r9,pc[1476]
80006bf4:	30 08       	mov	r8,0
80006bf6:	b2 08       	st.h	r9[0x0],r8
80006bf8:	c2 38       	rjmp	80006c3e <usb_host_task+0x5f2>
          {
            // If we detect SOF, device is still alive and connected, just clear false disconnect flag
            if (Is_usb_event(EVT_HOST_SOF) && Is_host_device_disconnection())
80006bfa:	fe f8 05 b2 	ld.w	r8,pc[1458]
80006bfe:	90 08       	ld.sh	r8,r8[0x0]
80006c00:	5c 88       	casts.h	r8
80006c02:	5c 78       	castu.h	r8
80006c04:	e2 18 02 00 	andl	r8,0x200,COH
80006c08:	c1 30       	breq	80006c2e <usb_host_task+0x5e2>
80006c0a:	fe 68 00 00 	mov	r8,-131072
80006c0e:	f0 f8 04 04 	ld.w	r8,r8[1028]
80006c12:	e2 18 00 02 	andl	r8,0x2,COH
80006c16:	c0 c0       	breq	80006c2e <usb_host_task+0x5e2>
            {
              Host_ack_device_connection();
80006c18:	fe 69 00 00 	mov	r9,-131072
80006c1c:	30 18       	mov	r8,1
80006c1e:	f3 48 04 08 	st.w	r9[1032],r8
              Host_ack_device_disconnection();
80006c22:	fe 69 00 00 	mov	r9,-131072
80006c26:	30 28       	mov	r8,2
80006c28:	f3 48 04 08 	st.w	r9[1032],r8
80006c2c:	c1 08       	rjmp	80006c4c <usb_host_task+0x600>
        Host_ack_reset_sent();
        if (!Is_host_device_disconnection())
        {
          // Workaround for some buggy devices with powerless pull-up
          // usually low-speed where data line rises slowly and can be interpreted as disconnection
          for (sof_cnt = 0; sof_cnt < 0xFFFF; sof_cnt++)  // Basic time-out counter
80006c2e:	fe f8 05 86 	ld.w	r8,pc[1414]
80006c32:	90 08       	ld.sh	r8,r8[0x0]
80006c34:	2f f8       	sub	r8,-1
80006c36:	5c 88       	casts.h	r8
80006c38:	fe f9 05 7c 	ld.w	r9,pc[1404]
80006c3c:	b2 08       	st.h	r9[0x0],r8
80006c3e:	fe f8 05 76 	ld.w	r8,pc[1398]
80006c42:	90 09       	ld.sh	r9,r8[0x0]
80006c44:	3f f8       	mov	r8,-1
80006c46:	f0 09 19 00 	cp.h	r9,r8
80006c4a:	cd 81       	brne	80006bfa <usb_host_task+0x5ae>
              Host_ack_device_disconnection();
              break;
            }
          }
        }
        Host_enable_device_disconnection_interrupt();
80006c4c:	fe 69 00 00 	mov	r9,-131072
80006c50:	30 28       	mov	r8,2
80006c52:	f3 48 04 18 	st.w	r9[1048],r8
        sof_cnt = 0;
80006c56:	fe f9 05 5e 	ld.w	r9,pc[1374]
80006c5a:	30 08       	mov	r8,0
80006c5c:	b2 08       	st.h	r9[0x0],r8
80006c5e:	c3 a8       	rjmp	80006cd2 <usb_host_task+0x686>
        while (sof_cnt < 200)         // Wait 200 ms after USB reset
        {
          if (Is_usb_event(EVT_HOST_SOF)) Usb_ack_event(EVT_HOST_SOF), sof_cnt++;
80006c60:	fe f8 05 4c 	ld.w	r8,pc[1356]
80006c64:	90 08       	ld.sh	r8,r8[0x0]
80006c66:	5c 88       	casts.h	r8
80006c68:	5c 78       	castu.h	r8
80006c6a:	e2 18 02 00 	andl	r8,0x200,COH
80006c6e:	c1 20       	breq	80006c92 <usb_host_task+0x646>
80006c70:	fe f8 05 3c 	ld.w	r8,pc[1340]
80006c74:	90 08       	ld.sh	r8,r8[0x0]
80006c76:	5c 88       	casts.h	r8
80006c78:	a9 d8       	cbr	r8,0x9
80006c7a:	5c 88       	casts.h	r8
80006c7c:	fe f9 05 30 	ld.w	r9,pc[1328]
80006c80:	b2 08       	st.h	r9[0x0],r8
80006c82:	fe f8 05 32 	ld.w	r8,pc[1330]
80006c86:	90 08       	ld.sh	r8,r8[0x0]
80006c88:	2f f8       	sub	r8,-1
80006c8a:	5c 88       	casts.h	r8
80006c8c:	fe f9 05 28 	ld.w	r9,pc[1320]
80006c90:	b2 08       	st.h	r9[0x0],r8
          if (Is_host_emergency_exit() || Is_usb_bconnection_error_interrupt()) break;
80006c92:	fe f8 05 26 	ld.w	r8,pc[1318]
80006c96:	11 88       	ld.ub	r8,r8[0x0]
80006c98:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006c9c:	30 18       	mov	r8,1
80006c9e:	f0 09 18 00 	cp.b	r9,r8
80006ca2:	c2 10       	breq	80006ce4 <usb_host_task+0x698>
80006ca4:	fe f8 05 08 	ld.w	r8,pc[1288]
80006ca8:	90 08       	ld.sh	r8,r8[0x0]
80006caa:	5c 88       	casts.h	r8
80006cac:	5c 78       	castu.h	r8
80006cae:	e2 18 08 00 	andl	r8,0x800,COH
80006cb2:	c1 91       	brne	80006ce4 <usb_host_task+0x698>
80006cb4:	fe f8 04 f8 	ld.w	r8,pc[1272]
80006cb8:	90 08       	ld.sh	r8,r8[0x0]
80006cba:	5c 88       	casts.h	r8
80006cbc:	5c 78       	castu.h	r8
80006cbe:	e2 18 00 08 	andl	r8,0x8,COH
80006cc2:	c1 11       	brne	80006ce4 <usb_host_task+0x698>
80006cc4:	fe 68 00 00 	mov	r8,-131072
80006cc8:	f0 f8 08 04 	ld.w	r8,r8[2052]
80006ccc:	e2 18 00 10 	andl	r8,0x10,COH
80006cd0:	c0 a1       	brne	80006ce4 <usb_host_task+0x698>
            }
          }
        }
        Host_enable_device_disconnection_interrupt();
        sof_cnt = 0;
        while (sof_cnt < 200)         // Wait 200 ms after USB reset
80006cd2:	fe f8 04 e2 	ld.w	r8,pc[1250]
80006cd6:	90 09       	ld.sh	r9,r8[0x0]
80006cd8:	e0 68 00 c7 	mov	r8,199
80006cdc:	f0 09 19 00 	cp.h	r9,r8
80006ce0:	fe 98 ff c0 	brls	80006c60 <usb_host_task+0x614>
        {
          if (Is_usb_event(EVT_HOST_SOF)) Usb_ack_event(EVT_HOST_SOF), sof_cnt++;
          if (Is_host_emergency_exit() || Is_usb_bconnection_error_interrupt()) break;
        }
        Host_disable_pipe(P_CONTROL);
80006ce4:	fe 69 00 00 	mov	r9,-131072
80006ce8:	fe 68 00 00 	mov	r8,-131072
80006cec:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80006cf0:	a1 c8       	cbr	r8,0x0
80006cf2:	f3 48 04 1c 	st.w	r9[1052],r8
        Host_unallocate_memory(P_CONTROL);
80006cf6:	fe 69 05 00 	mov	r9,-129792
80006cfa:	fe 68 05 00 	mov	r8,-129792
80006cfe:	70 08       	ld.w	r8,r8[0x0]
80006d00:	a1 d8       	cbr	r8,0x1
80006d02:	93 08       	st.w	r9[0x0],r8
        Host_enable_pipe(P_CONTROL);
80006d04:	fe 69 00 00 	mov	r9,-131072
80006d08:	fe 68 00 00 	mov	r8,-131072
80006d0c:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80006d10:	a1 a8       	sbr	r8,0x0
80006d12:	f3 48 04 1c 	st.w	r9[1052],r8
        // Reconfigure the control pipe according to the device control endpoint
        (void)Host_configure_pipe(P_CONTROL,
80006d16:	fe 69 00 00 	mov	r9,-131072
80006d1a:	fe 68 00 00 	mov	r8,-131072
80006d1e:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80006d22:	a1 a8       	sbr	r8,0x0
80006d24:	f3 48 04 1c 	st.w	r9[1052],r8
80006d28:	fe 6a 05 00 	mov	r10,-129792
80006d2c:	fe 68 05 00 	mov	r8,-129792
80006d30:	70 08       	ld.w	r8,r8[0x0]
80006d32:	10 9b       	mov	r11,r8
80006d34:	e4 1b 00 f0 	andh	r11,0xf0
80006d38:	e0 1b cc 83 	andl	r11,0xcc83
80006d3c:	fe f8 04 84 	ld.w	r8,pc[1156]
80006d40:	11 f8       	ld.ub	r8,r8[0x7]
80006d42:	ef 48 ff f8 	st.w	r7[-8],r8
80006d46:	30 88       	mov	r8,8
80006d48:	ef 48 ff fc 	st.w	r7[-4],r8
80006d4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006d50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006d54:	f2 08 0c 48 	max	r8,r9,r8
80006d58:	ef 48 ff f4 	st.w	r7[-12],r8
80006d5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d60:	ef 48 ff ec 	st.w	r7[-20],r8
80006d64:	e0 68 04 00 	mov	r8,1024
80006d68:	ef 48 ff f0 	st.w	r7[-16],r8
80006d6c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006d70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006d74:	f2 08 0d 48 	min	r8,r9,r8
80006d78:	ef 48 ff e8 	st.w	r7[-24],r8
80006d7c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006d80:	a1 78       	lsl	r8,0x1
80006d82:	20 18       	sub	r8,1
80006d84:	f0 08 12 00 	clz	r8,r8
80006d88:	f0 08 11 1c 	rsub	r8,r8,28
80006d8c:	a5 68       	lsl	r8,0x4
80006d8e:	e4 18 ff 0f 	andh	r8,0xff0f
80006d92:	e0 18 33 7c 	andl	r8,0x337c
80006d96:	f7 e8 10 08 	or	r8,r11,r8
80006d9a:	95 08       	st.w	r10[0x0],r8
80006d9c:	fe 69 05 00 	mov	r9,-129792
80006da0:	fe 68 05 00 	mov	r8,-129792
80006da4:	70 08       	ld.w	r8,r8[0x0]
80006da6:	a1 b8       	sbr	r8,0x1
80006da8:	93 08       	st.w	r9[0x0],r8
80006daa:	fe 68 05 30 	mov	r8,-129744
80006dae:	70 08       	ld.w	r8,r8[0x0]
                                  TYPE_CONTROL,
                                  TOKEN_SETUP,
                                  data_stage[OFFSET_FIELD_MAXPACKETSIZE],
                                  SINGLE_BANK);
        // Give an absolute device address
        if (host_set_address(DEVICE_ADDRESS) == CONTROL_GOOD)
80006db0:	fe f9 04 0c 	ld.w	r9,pc[1036]
80006db4:	30 08       	mov	r8,0
80006db6:	b2 88       	st.b	r9[0x0],r8
80006db8:	fe f9 04 04 	ld.w	r9,pc[1028]
80006dbc:	30 58       	mov	r8,5
80006dbe:	b2 98       	st.b	r9[0x1],r8
80006dc0:	fe f9 03 fc 	ld.w	r9,pc[1020]
80006dc4:	30 58       	mov	r8,5
80006dc6:	b2 18       	st.h	r9[0x2],r8
80006dc8:	fe f9 03 f4 	ld.w	r9,pc[1012]
80006dcc:	30 08       	mov	r8,0
80006dce:	b2 28       	st.h	r9[0x4],r8
80006dd0:	fe f9 03 ec 	ld.w	r9,pc[1004]
80006dd4:	30 08       	mov	r8,0
80006dd6:	b2 38       	st.h	r9[0x6],r8
80006dd8:	fe f9 03 e4 	ld.w	r9,pc[996]
80006ddc:	30 08       	mov	r8,0
80006dde:	f3 68 00 08 	st.b	r9[8],r8
80006de2:	fe fc 03 de 	ld.w	r12,pc[990]
80006de6:	f0 1f 00 f8 	mcall	800071c4 <usb_host_task+0xb78>
80006dea:	18 98       	mov	r8,r12
80006dec:	58 08       	cp.w	r8,0
80006dee:	c5 21       	brne	80006e92 <usb_host_task+0x846>
        {
          for (pipe = 0; pipe < MAX_PEP_NB; pipe++)
80006df0:	30 08       	mov	r8,0
80006df2:	ef 68 ff cf 	st.b	r7[-49],r8
80006df6:	c4 18       	rjmp	80006e78 <usb_host_task+0x82c>
            Host_configure_address(pipe, DEVICE_ADDRESS);
80006df8:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006dfc:	a3 88       	lsr	r8,0x2
80006dfe:	5c 58       	castu.b	r8
80006e00:	a3 68       	lsl	r8,0x2
80006e02:	fe 69 04 24 	mov	r9,-130012
80006e06:	f0 09 00 0b 	add	r11,r8,r9
80006e0a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006e0e:	a3 88       	lsr	r8,0x2
80006e10:	5c 58       	castu.b	r8
80006e12:	a3 68       	lsl	r8,0x2
80006e14:	e0 38 fb dc 	sub	r8,130012
80006e18:	70 0a       	ld.w	r10,r8[0x0]
80006e1a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006e1e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80006e22:	f0 09 15 03 	lsl	r9,r8,0x3
80006e26:	37 f8       	mov	r8,127
80006e28:	f0 09 09 48 	lsl	r8,r8,r9
80006e2c:	5c d8       	com	r8
80006e2e:	f5 e8 00 0c 	and	r12,r10,r8
80006e32:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006e36:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80006e3a:	f0 09 15 03 	lsl	r9,r8,0x3
80006e3e:	37 f8       	mov	r8,127
80006e40:	f0 09 09 48 	lsl	r8,r8,r9
80006e44:	10 99       	mov	r9,r8
80006e46:	5c 99       	brev	r9
80006e48:	f2 09 12 00 	clz	r9,r9
80006e4c:	30 58       	mov	r8,5
80006e4e:	f0 09 09 4a 	lsl	r10,r8,r9
80006e52:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006e56:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80006e5a:	f0 09 15 03 	lsl	r9,r8,0x3
80006e5e:	37 f8       	mov	r8,127
80006e60:	f0 09 09 48 	lsl	r8,r8,r9
80006e64:	f5 e8 00 08 	and	r8,r10,r8
80006e68:	f9 e8 10 08 	or	r8,r12,r8
80006e6c:	97 08       	st.w	r11[0x0],r8
                                  data_stage[OFFSET_FIELD_MAXPACKETSIZE],
                                  SINGLE_BANK);
        // Give an absolute device address
        if (host_set_address(DEVICE_ADDRESS) == CONTROL_GOOD)
        {
          for (pipe = 0; pipe < MAX_PEP_NB; pipe++)
80006e6e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80006e72:	2f f8       	sub	r8,-1
80006e74:	ef 68 ff cf 	st.b	r7[-49],r8
80006e78:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80006e7c:	30 68       	mov	r8,6
80006e7e:	f0 09 18 00 	cp.b	r9,r8
80006e82:	fe 98 ff bb 	brls	80006df8 <usb_host_task+0x7ac>
            Host_configure_address(pipe, DEVICE_ADDRESS);
          device_state = DEVICE_ADDRESSED;
80006e86:	fe f9 03 16 	ld.w	r9,pc[790]
80006e8a:	30 48       	mov	r8,4
80006e8c:	b2 88       	st.b	r9[0x0],r8
80006e8e:	e0 8f 01 83 	bral	80007194 <usb_host_task+0xb48>
        }
        else device_state = DEVICE_ERROR;
80006e92:	fe f9 03 0a 	ld.w	r9,pc[778]
80006e96:	30 78       	mov	r8,7
80006e98:	b2 88       	st.b	r9[0x0],r8
80006e9a:	e0 8f 01 7d 	bral	80007194 <usb_host_task+0xb48>
      }
      else device_state = DEVICE_ERROR;
80006e9e:	fe f9 02 fe 	ld.w	r9,pc[766]
80006ea2:	30 78       	mov	r8,7
80006ea4:	b2 88       	st.b	r9[0x0],r8
80006ea6:	e0 8f 01 77 	bral	80007194 <usb_host_task+0xb48>
    //   DEVICE_ADDRESSED state
    //
    //   - Check if VID PID is in supported list
    //
    case DEVICE_ADDRESSED:
      if (host_get_device_descriptor() == CONTROL_GOOD)
80006eaa:	fe f9 03 12 	ld.w	r9,pc[786]
80006eae:	38 08       	mov	r8,-128
80006eb0:	b2 88       	st.b	r9[0x0],r8
80006eb2:	fe f9 03 0a 	ld.w	r9,pc[778]
80006eb6:	30 68       	mov	r8,6
80006eb8:	b2 98       	st.b	r9[0x1],r8
80006eba:	fe f9 03 02 	ld.w	r9,pc[770]
80006ebe:	e0 68 01 00 	mov	r8,256
80006ec2:	b2 18       	st.h	r9[0x2],r8
80006ec4:	fe f9 02 f8 	ld.w	r9,pc[760]
80006ec8:	30 08       	mov	r8,0
80006eca:	b2 28       	st.h	r9[0x4],r8
80006ecc:	fe f9 02 f0 	ld.w	r9,pc[752]
80006ed0:	31 28       	mov	r8,18
80006ed2:	b2 38       	st.h	r9[0x6],r8
80006ed4:	fe f9 02 e8 	ld.w	r9,pc[744]
80006ed8:	30 08       	mov	r8,0
80006eda:	f3 68 00 08 	st.b	r9[8],r8
80006ede:	fe fc 02 e2 	ld.w	r12,pc[738]
80006ee2:	f0 1f 00 b9 	mcall	800071c4 <usb_host_task+0xb78>
80006ee6:	18 98       	mov	r8,r12
80006ee8:	58 08       	cp.w	r8,0
80006eea:	c1 a1       	brne	80006f1e <usb_host_task+0x8d2>
      {
        // Detect if the device connected belongs to the supported devices table
        if (host_check_VID_PID())
80006eec:	f0 1f 00 b7 	mcall	800071c8 <usb_host_task+0xb7c>
80006ef0:	18 98       	mov	r8,r12
80006ef2:	58 08       	cp.w	r8,0
80006ef4:	c1 00       	breq	80006f14 <usb_host_task+0x8c8>
        {
          Host_set_device_supported();
80006ef6:	fe f8 02 b2 	ld.w	r8,pc[690]
80006efa:	11 88       	ld.ub	r8,r8[0x0]
80006efc:	5c 58       	castu.b	r8
80006efe:	a1 a8       	sbr	r8,0x0
80006f00:	5c 58       	castu.b	r8
80006f02:	fe f9 02 a6 	ld.w	r9,pc[678]
80006f06:	b2 88       	st.b	r9[0x0],r8
          Host_device_supported_action();
          device_state = DEVICE_CONFIGURED;
80006f08:	fe f9 02 94 	ld.w	r9,pc[660]
80006f0c:	30 58       	mov	r8,5
80006f0e:	b2 88       	st.b	r9[0x0],r8
80006f10:	e0 8f 01 42 	bral	80007194 <usb_host_task+0xb48>
        {
#if HOST_STRICT_VID_PID_TABLE == ENABLE
          device_state = DEVICE_ERROR;
          LOG_STR(log_unsupported_device);
#else
          device_state = DEVICE_CONFIGURED;
80006f14:	fe f9 02 88 	ld.w	r9,pc[648]
80006f18:	30 58       	mov	r8,5
80006f1a:	b2 88       	st.b	r9[0x0],r8
80006f1c:	c3 c9       	rjmp	80007194 <usb_host_task+0xb48>
#endif
          Host_device_not_supported_action();
        }
      }
      else device_state = DEVICE_ERROR; // Can not get device descriptor
80006f1e:	fe f9 02 7e 	ld.w	r9,pc[638]
80006f22:	30 78       	mov	r8,7
80006f24:	b2 88       	st.b	r9[0x0],r8
80006f26:	c3 79       	rjmp	80007194 <usb_host_task+0xb48>
    //   - Configure pipes for the supported interface
    //   - Send Set_configuration() request
    //   - Go to full operating mode (device ready)
    //
    case DEVICE_CONFIGURED:
      if (host_get_configuration_descriptor(0) == CONTROL_GOOD)
80006f28:	fe f9 02 94 	ld.w	r9,pc[660]
80006f2c:	38 08       	mov	r8,-128
80006f2e:	b2 88       	st.b	r9[0x0],r8
80006f30:	fe f9 02 8c 	ld.w	r9,pc[652]
80006f34:	30 68       	mov	r8,6
80006f36:	b2 98       	st.b	r9[0x1],r8
80006f38:	fe f9 02 84 	ld.w	r9,pc[644]
80006f3c:	e0 68 02 00 	mov	r8,512
80006f40:	b2 18       	st.h	r9[0x2],r8
80006f42:	fe f9 02 7a 	ld.w	r9,pc[634]
80006f46:	30 08       	mov	r8,0
80006f48:	b2 28       	st.h	r9[0x4],r8
80006f4a:	fe f9 02 72 	ld.w	r9,pc[626]
80006f4e:	e0 68 00 fa 	mov	r8,250
80006f52:	b2 38       	st.h	r9[0x6],r8
80006f54:	fe f9 02 68 	ld.w	r9,pc[616]
80006f58:	30 08       	mov	r8,0
80006f5a:	f3 68 00 08 	st.b	r9[8],r8
80006f5e:	fe fc 02 62 	ld.w	r12,pc[610]
80006f62:	f0 1f 00 99 	mcall	800071c4 <usb_host_task+0xb78>
80006f66:	18 98       	mov	r8,r12
80006f68:	58 08       	cp.w	r8,0
80006f6a:	c4 31       	brne	80006ff0 <usb_host_task+0x9a4>
      {
        if (host_check_class())       // Class support OK?
80006f6c:	f0 1f 00 98 	mcall	800071cc <usb_host_task+0xb80>
80006f70:	18 98       	mov	r8,r12
80006f72:	58 08       	cp.w	r8,0
80006f74:	c3 a0       	breq	80006fe8 <usb_host_task+0x99c>
        {
#if HOST_AUTO_CFG_ENDPOINT == DISABLE
          User_configure_endpoint();  // User call here instead of autoconfig
          Host_set_configured();      // Assumes config is OK with user config
#endif
          if (Is_host_configured())
80006f76:	fe f8 02 32 	ld.w	r8,pc[562]
80006f7a:	11 88       	ld.ub	r8,r8[0x0]
80006f7c:	5c 58       	castu.b	r8
80006f7e:	e2 18 00 04 	andl	r8,0x4,COH
80006f82:	e0 80 01 09 	breq	80007194 <usb_host_task+0xb48>
          {
            if (host_set_configuration(1) == CONTROL_GOOD)  // Send Set_configuration
80006f86:	fe f9 02 36 	ld.w	r9,pc[566]
80006f8a:	30 08       	mov	r8,0
80006f8c:	b2 88       	st.b	r9[0x0],r8
80006f8e:	fe f9 02 2e 	ld.w	r9,pc[558]
80006f92:	30 98       	mov	r8,9
80006f94:	b2 98       	st.b	r9[0x1],r8
80006f96:	fe f9 02 26 	ld.w	r9,pc[550]
80006f9a:	30 18       	mov	r8,1
80006f9c:	b2 18       	st.h	r9[0x2],r8
80006f9e:	fe f9 02 1e 	ld.w	r9,pc[542]
80006fa2:	30 08       	mov	r8,0
80006fa4:	b2 28       	st.h	r9[0x4],r8
80006fa6:	fe f9 02 16 	ld.w	r9,pc[534]
80006faa:	30 08       	mov	r8,0
80006fac:	b2 38       	st.h	r9[0x6],r8
80006fae:	fe f9 02 0e 	ld.w	r9,pc[526]
80006fb2:	30 08       	mov	r8,0
80006fb4:	f3 68 00 08 	st.b	r9[8],r8
80006fb8:	fe fc 02 08 	ld.w	r12,pc[520]
80006fbc:	f0 1f 00 82 	mcall	800071c4 <usb_host_task+0xb78>
80006fc0:	18 98       	mov	r8,r12
80006fc2:	58 08       	cp.w	r8,0
80006fc4:	c0 e1       	brne	80006fe0 <usb_host_task+0x994>
            {
              // Device and host are now fully configured
              // go to DEVICE_READY normal operation
              device_state = DEVICE_READY;
80006fc6:	4f 69       	lddpc	r9,8000719c <usb_host_task+0xb50>
80006fc8:	30 68       	mov	r8,6
80006fca:	b2 88       	st.b	r9[0x0],r8
              // Monitor device disconnection under interrupt
              Host_enable_device_disconnection_interrupt();
80006fcc:	fe 69 00 00 	mov	r9,-131072
80006fd0:	30 28       	mov	r8,2
80006fd2:	f3 48 04 18 	st.w	r9[1048],r8
              Disable_global_interrupt();
              Host_disable_sof_interrupt();
              (void)Is_host_sof_interrupt_enabled();
              Enable_global_interrupt();
#endif
              Host_new_device_connection_action();
80006fd6:	4f f9       	lddpc	r9,800071d0 <usb_host_task+0xb84>
80006fd8:	30 18       	mov	r8,1
80006fda:	b2 88       	st.b	r9[0x0],r8
              Enable_global_interrupt();
80006fdc:	d5 03       	csrf	0x10
80006fde:	cd b8       	rjmp	80007194 <usb_host_task+0xb48>
              LOG_STR(log_device_enumerated);
            }
            else device_state = DEVICE_ERROR; // Problem during Set_configuration request...
80006fe0:	4e f9       	lddpc	r9,8000719c <usb_host_task+0xb50>
80006fe2:	30 78       	mov	r8,7
80006fe4:	b2 88       	st.b	r9[0x0],r8
80006fe6:	cd 78       	rjmp	80007194 <usb_host_task+0xb48>
          }
        }
        else  // Device class not supported...
        {
          device_state = DEVICE_ERROR;
80006fe8:	4e d9       	lddpc	r9,8000719c <usb_host_task+0xb50>
80006fea:	30 78       	mov	r8,7
80006fec:	b2 88       	st.b	r9[0x0],r8
80006fee:	cd 38       	rjmp	80007194 <usb_host_task+0xb48>
          LOG_STR(log_unsupported_device);
          Host_device_class_not_supported_action();
        }
      }
      else device_state = DEVICE_ERROR; // Can not get configuration descriptors...
80006ff0:	4e b9       	lddpc	r9,8000719c <usb_host_task+0xb50>
80006ff2:	30 78       	mov	r8,7
80006ff4:	b2 88       	st.b	r9[0x0],r8
80006ff6:	cc f8       	rjmp	80007194 <usb_host_task+0xb48>
    //   - Error state
    //   - Do custom action call (probably go to default mode...)
    //
    case DEVICE_ERROR:                //! @todo
#if HOST_ERROR_RESTART == ENABLE
      device_state = DEVICE_UNATTACHED;
80006ff8:	4e 99       	lddpc	r9,8000719c <usb_host_task+0xb50>
80006ffa:	30 08       	mov	r8,0
80006ffc:	b2 88       	st.b	r9[0x0],r8
80006ffe:	cc b8       	rjmp	80007194 <usb_host_task+0xb48>
    //
    //   - Host application request to suspend the device activity
    //   - State machine comes here thanks to Host_request_suspend()
    //
    case DEVICE_SUSPENDED:
      if (Is_device_supports_remote_wakeup()) // If the connected device supports remote wake-up
80007000:	4f 58       	lddpc	r8,800071d4 <usb_host_task+0xb88>
80007002:	11 88       	ld.ub	r8,r8[0x0]
80007004:	5c 58       	castu.b	r8
80007006:	e2 18 00 20 	andl	r8,0x20,COH
8000700a:	c1 70       	breq	80007038 <usb_host_task+0x9ec>
      {
        host_set_feature_remote_wakeup(); // Enable this feature...
8000700c:	4e c9       	lddpc	r9,800071bc <usb_host_task+0xb70>
8000700e:	30 08       	mov	r8,0
80007010:	b2 88       	st.b	r9[0x0],r8
80007012:	4e b9       	lddpc	r9,800071bc <usb_host_task+0xb70>
80007014:	30 38       	mov	r8,3
80007016:	b2 98       	st.b	r9[0x1],r8
80007018:	4e 99       	lddpc	r9,800071bc <usb_host_task+0xb70>
8000701a:	30 18       	mov	r8,1
8000701c:	b2 18       	st.h	r9[0x2],r8
8000701e:	4e 89       	lddpc	r9,800071bc <usb_host_task+0xb70>
80007020:	30 18       	mov	r8,1
80007022:	b2 28       	st.h	r9[0x4],r8
80007024:	4e 69       	lddpc	r9,800071bc <usb_host_task+0xb70>
80007026:	30 08       	mov	r8,0
80007028:	b2 38       	st.h	r9[0x6],r8
8000702a:	4e 59       	lddpc	r9,800071bc <usb_host_task+0xb70>
8000702c:	30 08       	mov	r8,0
8000702e:	f3 68 00 08 	st.b	r9[8],r8
80007032:	4e 4c       	lddpc	r12,800071c0 <usb_host_task+0xb74>
80007034:	f0 1f 00 64 	mcall	800071c4 <usb_host_task+0xb78>
      }
      LOG_STR(log_usb_suspended);
      sav_int_sof_enable = Is_host_sof_interrupt_enabled(); //Save current SOF interrupt enable state
80007038:	fe 68 00 00 	mov	r8,-131072
8000703c:	f0 f8 04 10 	ld.w	r8,r8[1040]
80007040:	e2 18 00 20 	andl	r8,0x20,COH
80007044:	5f 18       	srne	r8
80007046:	4e 59       	lddpc	r9,800071d8 <usb_host_task+0xb8c>
80007048:	b2 88       	st.b	r9[0x0],r8
      Disable_global_interrupt();
8000704a:	d3 03       	ssrf	0x10
      Host_disable_sof_interrupt();
8000704c:	fe 69 00 00 	mov	r9,-131072
80007050:	32 08       	mov	r8,32
80007052:	f3 48 04 14 	st.w	r9[1044],r8
      (void)Is_host_sof_interrupt_enabled();
80007056:	fe 68 00 00 	mov	r8,-131072
8000705a:	f0 f8 04 10 	ld.w	r8,r8[1040]
      Enable_global_interrupt();
8000705e:	d5 03       	csrf	0x10
      Host_ack_sof();
80007060:	fe 69 00 00 	mov	r9,-131072
80007064:	32 08       	mov	r8,32
80007066:	f3 48 04 08 	st.w	r9[1032],r8
      Host_disable_sof();             // Stop SOF generation, this generates the suspend state
8000706a:	fe 69 00 00 	mov	r9,-131072
8000706e:	fe 68 00 00 	mov	r8,-131072
80007072:	f0 f8 04 00 	ld.w	r8,r8[1024]
80007076:	a9 c8       	cbr	r8,0x8
80007078:	f3 48 04 00 	st.w	r9[1024],r8
      Host_ack_hwup();
8000707c:	fe 69 00 00 	mov	r9,-131072
80007080:	34 08       	mov	r8,64
80007082:	f3 48 04 08 	st.w	r9[1032],r8
      Host_enable_hwup_interrupt();   // Enable host wake-up interrupt
80007086:	fe 69 00 00 	mov	r9,-131072
8000708a:	34 08       	mov	r8,64
8000708c:	f3 48 04 18 	st.w	r9[1048],r8
                                      // (this is the unique USB interrupt able to wake up the CPU core from power-down mode)
      (void)Is_host_hwup_interrupt_enabled(); // Make sure host wake-up interrupt is enabled
80007090:	fe 68 00 00 	mov	r8,-131072
80007094:	f0 f8 04 10 	ld.w	r8,r8[1040]
      Usb_freeze_clock();
80007098:	fe 69 00 00 	mov	r9,-131072
8000709c:	fe 68 00 00 	mov	r8,-131072
800070a0:	f0 f8 08 00 	ld.w	r8,r8[2048]
800070a4:	af a8       	sbr	r8,0xe
800070a6:	f3 48 08 00 	st.w	r9[2048],r8
      //! @todo Implement this on the silicon version
      //Stop_pll();
      Host_suspend_action();          // Custom action here! (e.g. go to power-save mode...)
      device_state = DEVICE_WAIT_RESUME;  // Wait for device resume event
800070aa:	4b d9       	lddpc	r9,8000719c <usb_host_task+0xb50>
800070ac:	30 98       	mov	r8,9
800070ae:	b2 88       	st.b	r9[0x0],r8
800070b0:	c7 28       	rjmp	80007194 <usb_host_task+0xb48>
    //   Wait in this state till:
    //   - the host receives an upstream resume from the device
    //   - or the host software request the device to resume
    //
    case DEVICE_WAIT_RESUME:
      if (Is_usb_event(EVT_HOST_HWUP) || Is_host_request_resume())  // Remote wake-up has been detected
800070b2:	4b f8       	lddpc	r8,800071ac <usb_host_task+0xb60>
800070b4:	90 08       	ld.sh	r8,r8[0x0]
800070b6:	5c 88       	casts.h	r8
800070b8:	5c 78       	castu.h	r8
800070ba:	e2 18 04 00 	andl	r8,0x400,COH
800070be:	c0 91       	brne	800070d0 <usb_host_task+0xa84>
800070c0:	4c 78       	lddpc	r8,800071dc <usb_host_task+0xb90>
800070c2:	11 88       	ld.ub	r8,r8[0x0]
800070c4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800070c8:	30 18       	mov	r8,1
800070ca:	f0 09 18 00 	cp.b	r9,r8
800070ce:	c6 31       	brne	80007194 <usb_host_task+0xb48>
                                                                    // or local resume request has been received
      {
        if (Is_host_request_resume())     // Not a remote wake-up, but a host application request
800070d0:	4c 38       	lddpc	r8,800071dc <usb_host_task+0xb90>
800070d2:	11 88       	ld.ub	r8,r8[0x0]
800070d4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800070d8:	30 18       	mov	r8,1
800070da:	f0 09 18 00 	cp.b	r9,r8
800070de:	c1 e1       	brne	8000711a <usb_host_task+0xace>
        {
          // CAUTION: HWUP can be cleared only when USB clock is active
          //! @todo Implement this on the silicon version
          //Pll_start_auto();               // First Restart the PLL for USB operation
          //Wait_pll_ready();               // Make sure PLL is locked
          Usb_unfreeze_clock();           // Enable clock on USB interface
800070e0:	fe 69 00 00 	mov	r9,-131072
800070e4:	fe 68 00 00 	mov	r8,-131072
800070e8:	f0 f8 08 00 	ld.w	r8,r8[2048]
800070ec:	af c8       	cbr	r8,0xe
800070ee:	f3 48 08 00 	st.w	r9[2048],r8
          (void)Is_usb_clock_frozen();    // Make sure USB interface clock is enabled
800070f2:	fe 68 00 00 	mov	r8,-131072
800070f6:	f0 f8 08 00 	ld.w	r8,r8[2048]
          Disable_global_interrupt();
800070fa:	d3 03       	ssrf	0x10
          Host_disable_hwup_interrupt();  // Wake-up interrupt should be disabled as host is now awoken!
800070fc:	fe 69 00 00 	mov	r9,-131072
80007100:	34 08       	mov	r8,64
80007102:	f3 48 04 14 	st.w	r9[1044],r8
          (void)Is_host_hwup_interrupt_enabled();
80007106:	fe 68 00 00 	mov	r8,-131072
8000710a:	f0 f8 04 10 	ld.w	r8,r8[1040]
          Enable_global_interrupt();
8000710e:	d5 03       	csrf	0x10
          Host_ack_hwup();                // Clear HWUP interrupt flag
80007110:	fe 69 00 00 	mov	r9,-131072
80007114:	34 08       	mov	r8,64
80007116:	f3 48 04 08 	st.w	r9[1032],r8
        }
        Host_enable_sof();
8000711a:	fe 69 00 00 	mov	r9,-131072
8000711e:	fe 68 00 00 	mov	r8,-131072
80007122:	f0 f8 04 00 	ld.w	r8,r8[1024]
80007126:	a9 a8       	sbr	r8,0x8
80007128:	f3 48 04 00 	st.w	r9[1024],r8
        Host_send_resume();               // Send downstream resume
8000712c:	fe 69 00 00 	mov	r9,-131072
80007130:	fe 68 00 00 	mov	r8,-131072
80007134:	f0 f8 04 00 	ld.w	r8,r8[1024]
80007138:	ab a8       	sbr	r8,0xa
8000713a:	f3 48 04 00 	st.w	r9[1024],r8
        while (!Is_host_down_stream_resume());  // Wait for downstream resume sent
8000713e:	fe 68 00 00 	mov	r8,-131072
80007142:	f0 f8 04 04 	ld.w	r8,r8[1028]
80007146:	e2 18 00 08 	andl	r8,0x8,COH
8000714a:	cf a0       	breq	8000713e <usb_host_task+0xaf2>
        Host_ack_remote_wakeup();         // Ack remote wake-up reception
8000714c:	fe 69 00 00 	mov	r9,-131072
80007150:	31 08       	mov	r8,16
80007152:	f3 48 04 08 	st.w	r9[1032],r8
        Host_ack_request_resume();        // Ack software request
80007156:	4a 29       	lddpc	r9,800071dc <usb_host_task+0xb90>
80007158:	30 08       	mov	r8,0
8000715a:	b2 88       	st.b	r9[0x0],r8
        Host_ack_down_stream_resume();    // Ack downstream resume sent
8000715c:	fe 69 00 00 	mov	r9,-131072
80007160:	30 88       	mov	r8,8
80007162:	f3 48 04 08 	st.w	r9[1032],r8
        Usb_ack_event(EVT_HOST_HWUP);     // Ack software event
80007166:	49 28       	lddpc	r8,800071ac <usb_host_task+0xb60>
80007168:	90 08       	ld.sh	r8,r8[0x0]
8000716a:	5c 88       	casts.h	r8
8000716c:	ab c8       	cbr	r8,0xa
8000716e:	5c 88       	casts.h	r8
80007170:	48 f9       	lddpc	r9,800071ac <usb_host_task+0xb60>
80007172:	b2 08       	st.h	r9[0x0],r8
        if (sav_int_sof_enable) Host_enable_sof_interrupt();  // Restore SOF interrupt enable state before suspend
80007174:	49 98       	lddpc	r8,800071d8 <usb_host_task+0xb8c>
80007176:	11 88       	ld.ub	r8,r8[0x0]
80007178:	58 08       	cp.w	r8,0
8000717a:	c0 60       	breq	80007186 <usb_host_task+0xb3a>
8000717c:	fe 69 00 00 	mov	r9,-131072
80007180:	32 08       	mov	r8,32
80007182:	f3 48 04 18 	st.w	r9[1048],r8
        device_state = DEVICE_READY;      // Come back to full operating mode
80007186:	48 69       	lddpc	r9,8000719c <usb_host_task+0xb50>
80007188:	30 68       	mov	r8,6
8000718a:	b2 88       	st.b	r9[0x0],r8
8000718c:	c0 48       	rjmp	80007194 <usb_host_task+0xb48>
    //
    //   - Default case: ERROR
    //   - Go to DEVICE_UNATTACHED state
    //
    default:
      device_state = DEVICE_UNATTACHED;
8000718e:	48 49       	lddpc	r9,8000719c <usb_host_task+0xb50>
80007190:	30 08       	mov	r8,0
80007192:	b2 88       	st.b	r9[0x0],r8
      break;
    }
#ifdef FREERTOS_USED
  }
#endif
}
80007194:	2e ad       	sub	sp,-88
80007196:	e3 cd 80 80 	ldm	sp++,r7,pc
8000719a:	00 00       	add	r0,r0
8000719c:	00 00       	add	r0,r0
8000719e:	09 b5       	ld.ub	r5,r4[0x3]
800071a0:	80 00       	ld.sh	r0,r0[0x0]
800071a2:	fa e8 00 00 	ld.d	r8,sp[0]
800071a6:	06 64       	and	r4,r3
800071a8:	00 00       	add	r0,r0
800071aa:	09 b4       	ld.ub	r4,r4[0x3]
800071ac:	00 00       	add	r0,r0
800071ae:	06 54       	eor	r4,r3
800071b0:	80 00       	ld.sh	r0,r0[0x0]
800071b2:	4d 14       	lddpc	r4,800072f4 <host_check_class+0x1c>
800071b4:	00 00       	add	r0,r0
800071b6:	06 62       	and	r2,r3
800071b8:	00 00       	add	r0,r0
800071ba:	06 56       	eor	r6,r3
800071bc:	00 00       	add	r0,r0
800071be:	0a b2       	st.h	r5++,r2
800071c0:	00 00       	add	r0,r0
800071c2:	09 b8       	ld.ub	r8,r4[0x3]
800071c4:	80 00       	ld.sh	r0,r0[0x0]
800071c6:	78 88       	ld.w	r8,r12[0x20]
800071c8:	80 00       	ld.sh	r0,r0[0x0]
800071ca:	71 e0       	ld.w	r0,r8[0x78]
800071cc:	80 00       	ld.sh	r0,r0[0x0]
800071ce:	72 d8       	ld.w	r8,r9[0x34]
800071d0:	00 00       	add	r0,r0
800071d2:	0a f9       	st.b	--r5,r9
800071d4:	00 00       	add	r0,r0
800071d6:	0a be       	st.h	r5++,lr
800071d8:	00 00       	add	r0,r0
800071da:	06 60       	and	r0,r3
800071dc:	00 00       	add	r0,r0
800071de:	0a bc       	st.h	r5++,r12

800071e0 <host_check_VID_PID>:
//! (if the VID & PID belong to the VID_PID table).
//!
//! @return Bool: Status
//!
Bool host_check_VID_PID(void)
{
800071e0:	eb cd 40 80 	pushm	r7,lr
800071e4:	1a 97       	mov	r7,sp
800071e6:	20 2d       	sub	sp,8
  U8 c, d;

  // Rebuild VID & PID from data stage
  device_VID = usb_format_usb_to_mcu_data(16, *(U16 *)(data_stage + OFFSET_FIELD_VID));
800071e8:	4b 88       	lddpc	r8,800072c8 <host_check_VID_PID+0xe8>
800071ea:	2f 88       	sub	r8,-8
800071ec:	90 08       	ld.sh	r8,r8[0x0]
800071ee:	5c 88       	casts.h	r8
800071f0:	5c c8       	swap.bh	r8
800071f2:	5c 88       	casts.h	r8
800071f4:	4b 69       	lddpc	r9,800072cc <host_check_VID_PID+0xec>
800071f6:	b2 08       	st.h	r9[0x0],r8
  device_PID = usb_format_usb_to_mcu_data(16, *(U16 *)(data_stage + OFFSET_FIELD_PID));
800071f8:	4b 48       	lddpc	r8,800072c8 <host_check_VID_PID+0xe8>
800071fa:	2f 68       	sub	r8,-10
800071fc:	90 08       	ld.sh	r8,r8[0x0]
800071fe:	5c 88       	casts.h	r8
80007200:	5c c8       	swap.bh	r8
80007202:	5c 88       	casts.h	r8
80007204:	4b 39       	lddpc	r9,800072d0 <host_check_VID_PID+0xf0>
80007206:	b2 08       	st.h	r9[0x0],r8

  // Look for received VID & PID in supported table
  for (c = 0; c < REG_VID_PID_CNT; )
80007208:	30 08       	mov	r8,0
8000720a:	ef 68 ff fe 	st.b	r7[-2],r8
8000720e:	c4 c8       	rjmp	800072a6 <host_check_VID_PID+0xc6>
  {
    if (registered_VID_PID[c] == device_VID)  // VID is correct
80007210:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007214:	4b 08       	lddpc	r8,800072d4 <host_check_VID_PID+0xf4>
80007216:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000721a:	4a d8       	lddpc	r8,800072cc <host_check_VID_PID+0xec>
8000721c:	90 08       	ld.sh	r8,r8[0x0]
8000721e:	5c 88       	casts.h	r8
80007220:	f0 09 19 00 	cp.h	r9,r8
80007224:	c3 11       	brne	80007286 <host_check_VID_PID+0xa6>
    {
      for (c += 2, d = c + registered_VID_PID[c - 1]; c < d; c++)
80007226:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000722a:	2f e8       	sub	r8,-2
8000722c:	ef 68 ff fe 	st.b	r7[-2],r8
80007230:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007234:	f0 c9 00 01 	sub	r9,r8,1
80007238:	4a 78       	lddpc	r8,800072d4 <host_check_VID_PID+0xf4>
8000723a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000723e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007242:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007246:	12 08       	add	r8,r9
80007248:	ef 68 ff ff 	st.b	r7[-1],r8
8000724c:	c1 58       	rjmp	80007276 <host_check_VID_PID+0x96>
      {
        if (registered_VID_PID[c] == device_PID) return TRUE; // PID is correct
8000724e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007252:	4a 18       	lddpc	r8,800072d4 <host_check_VID_PID+0xf4>
80007254:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80007258:	49 e8       	lddpc	r8,800072d0 <host_check_VID_PID+0xf0>
8000725a:	90 08       	ld.sh	r8,r8[0x0]
8000725c:	5c 88       	casts.h	r8
8000725e:	f0 09 19 00 	cp.h	r9,r8
80007262:	c0 51       	brne	8000726c <host_check_VID_PID+0x8c>
80007264:	30 18       	mov	r8,1
80007266:	ef 48 ff f8 	st.w	r7[-8],r8
8000726a:	c2 88       	rjmp	800072ba <host_check_VID_PID+0xda>
  // Look for received VID & PID in supported table
  for (c = 0; c < REG_VID_PID_CNT; )
  {
    if (registered_VID_PID[c] == device_VID)  // VID is correct
    {
      for (c += 2, d = c + registered_VID_PID[c - 1]; c < d; c++)
8000726c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007270:	2f f8       	sub	r8,-1
80007272:	ef 68 ff fe 	st.b	r7[-2],r8
80007276:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000727a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000727e:	f0 09 18 00 	cp.b	r9,r8
80007282:	ce 63       	brcs	8000724e <host_check_VID_PID+0x6e>
80007284:	c1 18       	rjmp	800072a6 <host_check_VID_PID+0xc6>
      {
        if (registered_VID_PID[c] == device_PID) return TRUE; // PID is correct
      }
    }
    else c += 2 + registered_VID_PID[c + 1];
80007286:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000728a:	f0 c9 ff ff 	sub	r9,r8,-1
8000728e:	49 28       	lddpc	r8,800072d4 <host_check_VID_PID+0xf4>
80007290:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80007294:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007298:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000729c:	12 08       	add	r8,r9
8000729e:	5c 58       	castu.b	r8
800072a0:	2f e8       	sub	r8,-2
800072a2:	ef 68 ff fe 	st.b	r7[-2],r8
  // Rebuild VID & PID from data stage
  device_VID = usb_format_usb_to_mcu_data(16, *(U16 *)(data_stage + OFFSET_FIELD_VID));
  device_PID = usb_format_usb_to_mcu_data(16, *(U16 *)(data_stage + OFFSET_FIELD_PID));

  // Look for received VID & PID in supported table
  for (c = 0; c < REG_VID_PID_CNT; )
800072a6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800072aa:	30 28       	mov	r8,2
800072ac:	f0 09 18 00 	cp.b	r9,r8
800072b0:	fe 98 ff b0 	brls	80007210 <host_check_VID_PID+0x30>
      }
    }
    else c += 2 + registered_VID_PID[c + 1];
  }

  return FALSE;
800072b4:	30 08       	mov	r8,0
800072b6:	ef 48 ff f8 	st.w	r7[-8],r8
800072ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800072be:	10 9c       	mov	r12,r8
800072c0:	2f ed       	sub	sp,-8
800072c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800072c6:	00 00       	add	r0,r0
800072c8:	00 00       	add	r0,r0
800072ca:	09 b8       	ld.ub	r8,r4[0x3]
800072cc:	00 00       	add	r0,r0
800072ce:	0a c0       	st.b	r5++,r0
800072d0:	00 00       	add	r0,r0
800072d2:	0a de       	st.w	--r5,lr
800072d4:	80 00       	ld.sh	r0,r0[0x0]
800072d6:	fb 10 eb cd 	ld.uh	r0,sp[-5171]

800072d8 <host_check_class>:
//! of supported interfaces.
//!
//! @return Bool: Status
//!
Bool host_check_class(void)
{
800072d8:	eb cd 40 80 	pushm	r7,lr
800072dc:	1a 97       	mov	r7,sp
800072de:	21 9d       	sub	sp,100
  U8 *descriptor, *conf_end;
  U8 device_class, device_subclass, device_protocol;
  U8 c;
#if HOST_AUTO_CFG_ENDPOINT == ENABLE
  U8 nb_endpoint_to_configure = 0;
800072e0:	30 08       	mov	r8,0
800072e2:	ef 68 ff cd 	st.b	r7[-51],r8
  U8 ep_index = 0;
800072e6:	30 08       	mov	r8,0
800072e8:	ef 68 ff ce 	st.b	r7[-50],r8
  U8 physical_pipe = P_1;   // P_1 because physical pipe 0 is reserved for control
800072ec:	30 18       	mov	r8,1
800072ee:	ef 68 ff cf 	st.b	r7[-49],r8

  // By default, the host is configured when returning
  Host_set_configured();
800072f2:	fe f8 05 7a 	ld.w	r8,pc[1402]
800072f6:	11 88       	ld.ub	r8,r8[0x0]
800072f8:	5c 58       	castu.b	r8
800072fa:	a3 a8       	sbr	r8,0x2
800072fc:	5c 58       	castu.b	r8
800072fe:	fe f9 05 6e 	ld.w	r9,pc[1390]
80007302:	b2 88       	st.b	r9[0x0],r8
#endif

  // First, assume no interface is supported
  nb_interface_supported = 0;
80007304:	fe f9 05 6c 	ld.w	r9,pc[1388]
80007308:	30 08       	mov	r8,0
8000730a:	b2 88       	st.b	r9[0x0],r8

  // Check if configuration descriptor
  if (data_stage[OFFSET_FIELD_DESCRIPTOR_TYPE] != CONFIGURATION_DESCRIPTOR) return FALSE;
8000730c:	fe f8 05 68 	ld.w	r8,pc[1384]
80007310:	11 99       	ld.ub	r9,r8[0x1]
80007312:	30 28       	mov	r8,2
80007314:	f0 09 18 00 	cp.b	r9,r8
80007318:	c0 60       	breq	80007324 <host_check_class+0x4c>
8000731a:	30 0a       	mov	r10,0
8000731c:	ef 4a ff 9c 	st.w	r7[-100],r10
80007320:	e0 8f 02 9f 	bral	8000785e <host_check_class+0x586>

  bmattributes = data_stage[OFFSET_FIELD_BMATTRIBUTES];
80007324:	fe f8 05 50 	ld.w	r8,pc[1360]
80007328:	11 f8       	ld.ub	r8,r8[0x7]
8000732a:	fe f9 05 4e 	ld.w	r9,pc[1358]
8000732e:	b2 88       	st.b	r9[0x0],r8
  maxpower     = data_stage[OFFSET_FIELD_MAXPOWER];
80007330:	fe f8 05 44 	ld.w	r8,pc[1348]
80007334:	f1 38 00 08 	ld.ub	r8,r8[8]
80007338:	fe f9 05 44 	ld.w	r9,pc[1348]
8000733c:	b2 88       	st.b	r9[0x0],r8

  conf_end = data_stage +
             min(usb_format_usb_to_mcu_data(16, *(U16 *)(data_stage + OFFSET_FIELD_TOTAL_LENGTH)),
8000733e:	fe f8 05 36 	ld.w	r8,pc[1334]
80007342:	2f e8       	sub	r8,-2
80007344:	90 08       	ld.sh	r8,r8[0x0]
80007346:	5c 88       	casts.h	r8
80007348:	5c c8       	swap.bh	r8
8000734a:	5c 88       	casts.h	r8
8000734c:	5c 78       	castu.h	r8
8000734e:	ef 48 ff d4 	st.w	r7[-44],r8
80007352:	e0 68 00 f3 	mov	r8,243
80007356:	ef 48 ff d8 	st.w	r7[-40],r8
8000735a:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000735e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80007362:	f2 08 0d 48 	min	r8,r9,r8
80007366:	ef 48 ff d0 	st.w	r7[-48],r8
8000736a:	ee f8 ff d0 	ld.w	r8,r7[-48]
  if (data_stage[OFFSET_FIELD_DESCRIPTOR_TYPE] != CONFIGURATION_DESCRIPTOR) return FALSE;

  bmattributes = data_stage[OFFSET_FIELD_BMATTRIBUTES];
  maxpower     = data_stage[OFFSET_FIELD_MAXPOWER];

  conf_end = data_stage +
8000736e:	10 99       	mov	r9,r8
80007370:	fe f8 05 04 	ld.w	r8,pc[1284]
80007374:	f2 08 00 08 	add	r8,r9,r8
80007378:	ef 48 ff c4 	st.w	r7[-60],r8
             min(usb_format_usb_to_mcu_data(16, *(U16 *)(data_stage + OFFSET_FIELD_TOTAL_LENGTH)),
                 SIZEOF_DATA_STAGE - OFFSET_FIELD_PROTOCOL);

  // Look in all interfaces declared in the configuration
  for (descriptor = data_stage + data_stage[OFFSET_DESCRIPTOR_LENGTH]; descriptor < conf_end;
8000737c:	fe f8 04 f8 	ld.w	r8,pc[1272]
80007380:	11 88       	ld.ub	r8,r8[0x0]
80007382:	10 99       	mov	r9,r8
80007384:	fe f8 04 f0 	ld.w	r8,pc[1264]
80007388:	f2 08 00 08 	add	r8,r9,r8
8000738c:	ef 48 ff c0 	st.w	r7[-64],r8
80007390:	e0 8f 02 49 	bral	80007822 <host_check_class+0x54a>
       descriptor += descriptor[OFFSET_DESCRIPTOR_LENGTH])
  {
    // Find next interface descriptor
    switch (descriptor[OFFSET_FIELD_DESCRIPTOR_TYPE])
80007394:	ee f8 ff c0 	ld.w	r8,r7[-64]
80007398:	2f f8       	sub	r8,-1
8000739a:	11 88       	ld.ub	r8,r8[0x0]
8000739c:	ef 48 ff a0 	st.w	r7[-96],r8
800073a0:	ee f9 ff a0 	ld.w	r9,r7[-96]
800073a4:	58 49       	cp.w	r9,4
800073a6:	c0 80       	breq	800073b6 <host_check_class+0xde>
800073a8:	ee f8 ff a0 	ld.w	r8,r7[-96]
800073ac:	58 58       	cp.w	r8,5
800073ae:	e0 80 01 06 	breq	800075ba <host_check_class+0x2e2>
800073b2:	e0 8f 02 2f 	bral	80007810 <host_check_class+0x538>
    {
    case INTERFACE_DESCRIPTOR:
      // Check the number of supported interfaces does not exceed the maximum
      if (nb_interface_supported >= MAX_INTERFACE_SUPPORTED) return TRUE;
800073b6:	fe f8 04 ba 	ld.w	r8,pc[1210]
800073ba:	11 88       	ld.ub	r8,r8[0x0]
800073bc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800073c0:	30 28       	mov	r8,2
800073c2:	f0 09 18 00 	cp.b	r9,r8
800073c6:	e0 88 00 07 	brls	800073d4 <host_check_class+0xfc>
800073ca:	30 1a       	mov	r10,1
800073cc:	ef 4a ff 9c 	st.w	r7[-100],r10
800073d0:	e0 8f 02 47 	bral	8000785e <host_check_class+0x586>

#if HOST_AUTO_CFG_ENDPOINT == ENABLE
      // If there are still endpoints to configure although a new interface descriptor has been found
      if (nb_endpoint_to_configure)
800073d4:	ef 39 ff cd 	ld.ub	r9,r7[-51]
800073d8:	30 08       	mov	r8,0
800073da:	f0 09 18 00 	cp.b	r9,r8
800073de:	c0 d0       	breq	800073f8 <host_check_class+0x120>
      {
        // Mark the host as not configured
        Host_clear_configured();
800073e0:	fe f8 04 8c 	ld.w	r8,pc[1164]
800073e4:	11 88       	ld.ub	r8,r8[0x0]
800073e6:	5c 58       	castu.b	r8
800073e8:	e2 18 00 fb 	andl	r8,0xfb,COH
800073ec:	fe f9 04 80 	ld.w	r9,pc[1152]
800073f0:	b2 88       	st.b	r9[0x0],r8

        // Reset the number of endpoints to configure
        nb_endpoint_to_configure = 0;
800073f2:	30 08       	mov	r8,0
800073f4:	ef 68 ff cd 	st.b	r7[-51],r8
      }
#endif

      // Found an interface descriptor
      // Get charateristics of this interface
      device_class    = descriptor[OFFSET_FIELD_CLASS];
800073f8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800073fc:	2f b8       	sub	r8,-5
800073fe:	11 88       	ld.ub	r8,r8[0x0]
80007400:	ef 68 ff c9 	st.b	r7[-55],r8
      device_subclass = descriptor[OFFSET_FIELD_SUB_CLASS];
80007404:	ee f8 ff c0 	ld.w	r8,r7[-64]
80007408:	2f a8       	sub	r8,-6
8000740a:	11 88       	ld.ub	r8,r8[0x0]
8000740c:	ef 68 ff ca 	st.b	r7[-54],r8
      device_protocol = descriptor[OFFSET_FIELD_PROTOCOL];
80007410:	ee f8 ff c0 	ld.w	r8,r7[-64]
80007414:	2f 98       	sub	r8,-7
80007416:	11 88       	ld.ub	r8,r8[0x0]
80007418:	ef 68 ff cb 	st.b	r7[-53],r8

      // Look in registered class table for match
      for (c = 0; c < REG_CLASS_CNT; c += 3)
8000741c:	30 08       	mov	r8,0
8000741e:	ef 68 ff cc 	st.b	r7[-52],r8
80007422:	cc 48       	rjmp	800075aa <host_check_class+0x2d2>
      {
        if (registered_class[c]     == device_class    &&   // Class is correct
80007424:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80007428:	fe f8 04 58 	ld.w	r8,pc[1112]
8000742c:	f0 09 07 09 	ld.ub	r9,r8[r9]
80007430:	ef 38 ff c9 	ld.ub	r8,r7[-55]
80007434:	f2 08 18 00 	cp.b	r8,r9
80007438:	e0 81 00 b4 	brne	800075a0 <host_check_class+0x2c8>
8000743c:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80007440:	f0 c9 ff ff 	sub	r9,r8,-1
80007444:	fe f8 04 3c 	ld.w	r8,pc[1084]
80007448:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000744c:	ef 38 ff ca 	ld.ub	r8,r7[-54]
80007450:	f2 08 18 00 	cp.b	r8,r9
80007454:	e0 81 00 a6 	brne	800075a0 <host_check_class+0x2c8>
80007458:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8000745c:	f0 c9 ff fe 	sub	r9,r8,-2
80007460:	fe f8 04 20 	ld.w	r8,pc[1056]
80007464:	f0 09 07 09 	ld.ub	r9,r8[r9]
80007468:	ef 38 ff cb 	ld.ub	r8,r7[-53]
8000746c:	f2 08 18 00 	cp.b	r8,r9
80007470:	e0 81 00 98 	brne	800075a0 <host_check_class+0x2c8>
            registered_class[c + 1] == device_subclass &&   // Subclass is correct
            registered_class[c + 2] == device_protocol)     // Protocol is correct
        {
          // Store this interface as supported interface
          // Memorize its interface nb
          interface_supported[nb_interface_supported].interface_nb = descriptor[OFFSET_FIELD_INTERFACE_NB];
80007474:	fe f8 03 fc 	ld.w	r8,pc[1020]
80007478:	11 88       	ld.ub	r8,r8[0x0]
8000747a:	5c 58       	castu.b	r8
8000747c:	10 99       	mov	r9,r8
8000747e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80007482:	2f e8       	sub	r8,-2
80007484:	11 8b       	ld.ub	r11,r8[0x0]
80007486:	fe fa 03 fe 	ld.w	r10,pc[1022]
8000748a:	12 98       	mov	r8,r9
8000748c:	a3 78       	lsl	r8,0x3
8000748e:	12 08       	add	r8,r9
80007490:	f4 08 00 09 	add	r9,r10,r8
80007494:	16 98       	mov	r8,r11
80007496:	b2 88       	st.b	r9[0x0],r8
          //          its alternate setting
          interface_supported[nb_interface_supported].altset_nb    = descriptor[OFFSET_FIELD_ALT];
80007498:	fe f8 03 d8 	ld.w	r8,pc[984]
8000749c:	11 88       	ld.ub	r8,r8[0x0]
8000749e:	5c 58       	castu.b	r8
800074a0:	10 99       	mov	r9,r8
800074a2:	ee f8 ff c0 	ld.w	r8,r7[-64]
800074a6:	2f d8       	sub	r8,-3
800074a8:	11 8b       	ld.ub	r11,r8[0x0]
800074aa:	fe fa 03 da 	ld.w	r10,pc[986]
800074ae:	12 98       	mov	r8,r9
800074b0:	a3 78       	lsl	r8,0x3
800074b2:	12 08       	add	r8,r9
800074b4:	f4 08 00 08 	add	r8,r10,r8
800074b8:	f0 c9 ff ff 	sub	r9,r8,-1
800074bc:	16 98       	mov	r8,r11
800074be:	b2 88       	st.b	r9[0x0],r8
          //          its USB class
          interface_supported[nb_interface_supported].uclass        = device_class;
800074c0:	fe f8 03 b0 	ld.w	r8,pc[944]
800074c4:	11 88       	ld.ub	r8,r8[0x0]
800074c6:	5c 58       	castu.b	r8
800074c8:	10 99       	mov	r9,r8
800074ca:	fe fa 03 ba 	ld.w	r10,pc[954]
800074ce:	12 98       	mov	r8,r9
800074d0:	a3 78       	lsl	r8,0x3
800074d2:	12 08       	add	r8,r9
800074d4:	f4 08 00 08 	add	r8,r10,r8
800074d8:	f0 c9 ff fd 	sub	r9,r8,-3
800074dc:	ef 38 ff c9 	ld.ub	r8,r7[-55]
800074e0:	b2 88       	st.b	r9[0x0],r8
          //          its USB subclass
          interface_supported[nb_interface_supported].subclass     = device_subclass;
800074e2:	fe f8 03 8e 	ld.w	r8,pc[910]
800074e6:	11 88       	ld.ub	r8,r8[0x0]
800074e8:	5c 58       	castu.b	r8
800074ea:	10 99       	mov	r9,r8
800074ec:	fe fa 03 98 	ld.w	r10,pc[920]
800074f0:	12 98       	mov	r8,r9
800074f2:	a3 78       	lsl	r8,0x3
800074f4:	12 08       	add	r8,r9
800074f6:	f4 08 00 08 	add	r8,r10,r8
800074fa:	f0 c9 ff fc 	sub	r9,r8,-4
800074fe:	ef 38 ff ca 	ld.ub	r8,r7[-54]
80007502:	b2 88       	st.b	r9[0x0],r8
          //          its USB protocol
          interface_supported[nb_interface_supported].protocol     = device_protocol;
80007504:	fe f8 03 6c 	ld.w	r8,pc[876]
80007508:	11 88       	ld.ub	r8,r8[0x0]
8000750a:	5c 58       	castu.b	r8
8000750c:	10 99       	mov	r9,r8
8000750e:	fe fa 03 76 	ld.w	r10,pc[886]
80007512:	12 98       	mov	r8,r9
80007514:	a3 78       	lsl	r8,0x3
80007516:	12 08       	add	r8,r9
80007518:	f4 08 00 08 	add	r8,r10,r8
8000751c:	f0 c9 ff fb 	sub	r9,r8,-5
80007520:	ef 38 ff cb 	ld.ub	r8,r7[-53]
80007524:	b2 88       	st.b	r9[0x0],r8
          //          the number of endpoints associated with this interface
#if HOST_AUTO_CFG_ENDPOINT == ENABLE
          ep_index = 0;
80007526:	30 08       	mov	r8,0
80007528:	ef 68 ff ce 	st.b	r7[-50],r8
          nb_endpoint_to_configure =
8000752c:	fe f8 03 44 	ld.w	r8,pc[836]
80007530:	11 88       	ld.ub	r8,r8[0x0]
80007532:	5c 58       	castu.b	r8
80007534:	10 9a       	mov	r10,r8
#endif
          interface_supported[nb_interface_supported].nb_ep        = min(descriptor[OFFSET_FIELD_NB_OF_EP], MAX_EP_PER_INTERFACE);
80007536:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000753a:	2f c8       	sub	r8,-4
8000753c:	11 88       	ld.ub	r8,r8[0x0]
8000753e:	ef 48 ff e0 	st.w	r7[-32],r8
80007542:	30 38       	mov	r8,3
80007544:	ef 48 ff e4 	st.w	r7[-28],r8
80007548:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000754c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007550:	f2 08 0d 48 	min	r8,r9,r8
80007554:	ef 48 ff dc 	st.w	r7[-36],r8
80007558:	ee f8 ff dc 	ld.w	r8,r7[-36]
          //          its USB protocol
          interface_supported[nb_interface_supported].protocol     = device_protocol;
          //          the number of endpoints associated with this interface
#if HOST_AUTO_CFG_ENDPOINT == ENABLE
          ep_index = 0;
          nb_endpoint_to_configure =
8000755c:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007560:	fe f9 03 24 	ld.w	r9,pc[804]
80007564:	14 98       	mov	r8,r10
80007566:	a3 78       	lsl	r8,0x3
80007568:	14 08       	add	r8,r10
8000756a:	f2 08 00 08 	add	r8,r9,r8
8000756e:	f0 c9 ff fe 	sub	r9,r8,-2
80007572:	16 98       	mov	r8,r11
80007574:	b2 88       	st.b	r9[0x0],r8
80007576:	fe f9 03 0e 	ld.w	r9,pc[782]
8000757a:	14 98       	mov	r8,r10
8000757c:	a3 78       	lsl	r8,0x3
8000757e:	14 08       	add	r8,r10
80007580:	f2 08 00 08 	add	r8,r9,r8
80007584:	2f e8       	sub	r8,-2
80007586:	11 88       	ld.ub	r8,r8[0x0]
80007588:	ef 68 ff cd 	st.b	r7[-51],r8
#endif
          interface_supported[nb_interface_supported].nb_ep        = min(descriptor[OFFSET_FIELD_NB_OF_EP], MAX_EP_PER_INTERFACE);

          // Update the number of supported interfaces
          nb_interface_supported++;
8000758c:	fe f8 02 e4 	ld.w	r8,pc[740]
80007590:	11 88       	ld.ub	r8,r8[0x0]
80007592:	5c 58       	castu.b	r8
80007594:	2f f8       	sub	r8,-1
80007596:	5c 58       	castu.b	r8
80007598:	fe f9 02 d8 	ld.w	r9,pc[728]
8000759c:	b2 88       	st.b	r9[0x0],r8
8000759e:	c3 99       	rjmp	80007810 <host_check_class+0x538>
      device_class    = descriptor[OFFSET_FIELD_CLASS];
      device_subclass = descriptor[OFFSET_FIELD_SUB_CLASS];
      device_protocol = descriptor[OFFSET_FIELD_PROTOCOL];

      // Look in registered class table for match
      for (c = 0; c < REG_CLASS_CNT; c += 3)
800075a0:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800075a4:	2f d8       	sub	r8,-3
800075a6:	ef 68 ff cc 	st.b	r7[-52],r8
800075aa:	ef 39 ff cc 	ld.ub	r9,r7[-52]
800075ae:	30 58       	mov	r8,5
800075b0:	f0 09 18 00 	cp.b	r9,r8
800075b4:	fe 98 ff 38 	brls	80007424 <host_check_class+0x14c>
800075b8:	c2 c9       	rjmp	80007810 <host_check_class+0x538>
      break;

#if HOST_AUTO_CFG_ENDPOINT == ENABLE
    case ENDPOINT_DESCRIPTOR:
      // If there are still endpoints to configure while there are free pipes
      if (physical_pipe < MAX_PEP_NB && nb_endpoint_to_configure)
800075ba:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800075be:	30 68       	mov	r8,6
800075c0:	f0 09 18 00 	cp.b	r9,r8
800075c4:	e0 8b 01 26 	brhi	80007810 <host_check_class+0x538>
800075c8:	ef 39 ff cd 	ld.ub	r9,r7[-51]
800075cc:	30 08       	mov	r8,0
800075ce:	f0 09 18 00 	cp.b	r9,r8
800075d2:	e0 80 01 1f 	breq	80007810 <host_check_class+0x538>
      {
        nb_endpoint_to_configure--;
800075d6:	ef 38 ff cd 	ld.ub	r8,r7[-51]
800075da:	20 18       	sub	r8,1
800075dc:	ef 68 ff cd 	st.b	r7[-51],r8

        // Reconfigure the new physical pipe to get rid of any previous configuration
  #if USB_HOST_PIPE_INTERRUPT_TRANSFER == ENABLE
        Disable_global_interrupt();
  #endif
        Host_disable_pipe(physical_pipe);
800075e0:	fe 6a 00 00 	mov	r10,-131072
800075e4:	fe 68 00 00 	mov	r8,-131072
800075e8:	f0 fb 04 1c 	ld.w	r11,r8[1052]
800075ec:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800075f0:	30 18       	mov	r8,1
800075f2:	f0 09 09 48 	lsl	r8,r8,r9
800075f6:	5c d8       	com	r8
800075f8:	f7 e8 00 08 	and	r8,r11,r8
800075fc:	f5 48 04 1c 	st.w	r10[1052],r8
  #if USB_HOST_PIPE_INTERRUPT_TRANSFER == ENABLE
        (void)Is_host_pipe_enabled(physical_pipe);
        Enable_global_interrupt();
  #endif
        Host_unallocate_memory(physical_pipe);
80007600:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80007604:	a3 68       	lsl	r8,0x2
80007606:	fe 6a 05 00 	mov	r10,-129792
8000760a:	f0 0a 00 09 	add	r9,r8,r10
8000760e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80007612:	a3 68       	lsl	r8,0x2
80007614:	e0 38 fb 00 	sub	r8,129792
80007618:	70 08       	ld.w	r8,r8[0x0]
8000761a:	a1 d8       	cbr	r8,0x1
8000761c:	93 08       	st.w	r9[0x0],r8
        Host_enable_pipe(physical_pipe);
8000761e:	fe 6b 00 00 	mov	r11,-131072
80007622:	fe 68 00 00 	mov	r8,-131072
80007626:	f0 fa 04 1c 	ld.w	r10,r8[1052]
8000762a:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000762e:	30 18       	mov	r8,1
80007630:	f0 09 09 48 	lsl	r8,r8,r9
80007634:	f5 e8 10 08 	or	r8,r10,r8
80007638:	f7 48 04 1c 	st.w	r11[1052],r8

        // Fix HW, set freq at 0 in case of no interrupt endpoint
        if( TYPE_INTERRUPT != descriptor[OFFSET_FIELD_EP_TYPE] ) descriptor[OFFSET_FIELD_EP_INTERVAL] = 0;
8000763c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80007640:	2f d8       	sub	r8,-3
80007642:	11 89       	ld.ub	r9,r8[0x0]
80007644:	30 38       	mov	r8,3
80007646:	f0 09 18 00 	cp.b	r9,r8
8000764a:	c0 70       	breq	80007658 <host_check_class+0x380>
8000764c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80007650:	f0 c9 ff fa 	sub	r9,r8,-6
80007654:	30 08       	mov	r8,0
80007656:	b2 88       	st.b	r9[0x0],r8

        // Build the pipe configuration according to the endpoint descriptor fields received
        (void)Host_configure_pipe(
80007658:	fe 6b 00 00 	mov	r11,-131072
8000765c:	fe 68 00 00 	mov	r8,-131072
80007660:	f0 fa 04 1c 	ld.w	r10,r8[1052]
80007664:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80007668:	30 18       	mov	r8,1
8000766a:	f0 09 09 48 	lsl	r8,r8,r9
8000766e:	f5 e8 10 08 	or	r8,r10,r8
80007672:	f7 48 04 1c 	st.w	r11[1052],r8
80007676:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000767a:	a3 68       	lsl	r8,0x2
8000767c:	fe 69 05 00 	mov	r9,-129792
80007680:	f0 09 00 09 	add	r9,r8,r9
80007684:	ef 49 ff a4 	st.w	r7[-92],r9
80007688:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000768c:	a3 68       	lsl	r8,0x2
8000768e:	e0 38 fb 00 	sub	r8,129792
80007692:	70 08       	ld.w	r8,r8[0x0]
80007694:	10 9a       	mov	r10,r8
80007696:	e4 1a 00 f0 	andh	r10,0xf0
8000769a:	e0 1a cc 83 	andl	r10,0xcc83
8000769e:	ef 4a ff a8 	st.w	r7[-88],r10
800076a2:	ee f8 ff c0 	ld.w	r8,r7[-64]
800076a6:	2f a8       	sub	r8,-6
800076a8:	11 88       	ld.ub	r8,r8[0x0]
800076aa:	f0 09 15 18 	lsl	r9,r8,0x18
800076ae:	ee f8 ff c0 	ld.w	r8,r7[-64]
800076b2:	2f e8       	sub	r8,-2
800076b4:	11 88       	ld.ub	r8,r8[0x0]
800076b6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800076ba:	b1 68       	lsl	r8,0x10
800076bc:	e6 18 00 0f 	andh	r8,0xf,COH
800076c0:	10 49       	or	r9,r8
800076c2:	ee f8 ff c0 	ld.w	r8,r7[-64]
800076c6:	2f d8       	sub	r8,-3
800076c8:	11 88       	ld.ub	r8,r8[0x0]
800076ca:	ad 68       	lsl	r8,0xc
800076cc:	e2 18 30 00 	andl	r8,0x3000,COH
800076d0:	10 49       	or	r9,r8
800076d2:	ef 49 ff ac 	st.w	r7[-84],r9
800076d6:	ee f8 ff c0 	ld.w	r8,r7[-64]
800076da:	2f e8       	sub	r8,-2
800076dc:	11 88       	ld.ub	r8,r8[0x0]
800076de:	10 99       	mov	r9,r8
800076e0:	30 08       	mov	r8,0
800076e2:	f0 09 18 00 	cp.b	r9,r8
800076e6:	c0 64       	brge	800076f2 <host_check_class+0x41a>
800076e8:	e0 69 01 00 	mov	r9,256
800076ec:	ef 49 ff b0 	st.w	r7[-80],r9
800076f0:	c0 58       	rjmp	800076fa <host_check_class+0x422>
800076f2:	e0 68 02 00 	mov	r8,512
800076f6:	ef 48 ff b0 	st.w	r7[-80],r8
800076fa:	ee fa ff ac 	ld.w	r10,r7[-84]
800076fe:	ee f9 ff b0 	ld.w	r9,r7[-80]
80007702:	12 4a       	or	r10,r9
80007704:	ee f8 ff c0 	ld.w	r8,r7[-64]
80007708:	2f c8       	sub	r8,-4
8000770a:	11 88       	ld.ub	r8,r8[0x0]
8000770c:	10 99       	mov	r9,r8
8000770e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80007712:	2f b8       	sub	r8,-5
80007714:	11 88       	ld.ub	r8,r8[0x0]
80007716:	a9 68       	lsl	r8,0x8
80007718:	f3 e8 10 08 	or	r8,r9,r8
8000771c:	ef 48 ff f8 	st.w	r7[-8],r8
80007720:	30 88       	mov	r8,8
80007722:	ef 48 ff fc 	st.w	r7[-4],r8
80007726:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000772a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000772e:	f2 08 0c 48 	max	r8,r9,r8
80007732:	ef 48 ff f4 	st.w	r7[-12],r8
80007736:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000773a:	ef 48 ff ec 	st.w	r7[-20],r8
8000773e:	e0 68 04 00 	mov	r8,1024
80007742:	ef 48 ff f0 	st.w	r7[-16],r8
80007746:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000774a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000774e:	f2 08 0d 48 	min	r8,r9,r8
80007752:	ef 48 ff e8 	st.w	r7[-24],r8
80007756:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000775a:	a1 78       	lsl	r8,0x1
8000775c:	20 18       	sub	r8,1
8000775e:	f0 08 12 00 	clz	r8,r8
80007762:	f0 08 11 1c 	rsub	r8,r8,28
80007766:	a5 68       	lsl	r8,0x4
80007768:	10 4a       	or	r10,r8
8000776a:	ef 4a ff b4 	st.w	r7[-76],r10
8000776e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80007772:	2f d8       	sub	r8,-3
80007774:	11 89       	ld.ub	r9,r8[0x0]
80007776:	30 28       	mov	r8,2
80007778:	f0 09 18 00 	cp.b	r9,r8
8000777c:	c0 51       	brne	80007786 <host_check_class+0x4ae>
8000777e:	30 48       	mov	r8,4
80007780:	ef 48 ff b8 	st.w	r7[-72],r8
80007784:	c0 48       	rjmp	8000778c <host_check_class+0x4b4>
80007786:	30 0a       	mov	r10,0
80007788:	ef 4a ff b8 	st.w	r7[-72],r10
8000778c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80007790:	ee f9 ff b8 	ld.w	r9,r7[-72]
80007794:	12 48       	or	r8,r9
80007796:	e4 18 ff 0f 	andh	r8,0xff0f
8000779a:	e0 18 33 7c 	andl	r8,0x337c
8000779e:	ee fa ff a8 	ld.w	r10,r7[-88]
800077a2:	f5 e8 10 08 	or	r8,r10,r8
800077a6:	ee f9 ff a4 	ld.w	r9,r7[-92]
800077aa:	93 08       	st.w	r9[0x0],r8
800077ac:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800077b0:	a3 68       	lsl	r8,0x2
800077b2:	fe 6a 05 00 	mov	r10,-129792
800077b6:	f0 0a 00 09 	add	r9,r8,r10
800077ba:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800077be:	a3 68       	lsl	r8,0x2
800077c0:	e0 38 fb 00 	sub	r8,129792
800077c4:	70 08       	ld.w	r8,r8[0x0]
800077c6:	a1 b8       	sbr	r8,0x1
800077c8:	93 08       	st.w	r9[0x0],r8
800077ca:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800077ce:	a3 68       	lsl	r8,0x2
800077d0:	e0 38 fa d0 	sub	r8,129744
800077d4:	70 08       	ld.w	r8,r8[0x0]
           }
        }
#endif

        // Update endpoint pipe table in supported interface structure
        interface_supported[nb_interface_supported - 1].ep_pipe[ep_index++] = physical_pipe++;
800077d6:	4a 78       	lddpc	r8,80007870 <host_check_class+0x598>
800077d8:	11 88       	ld.ub	r8,r8[0x0]
800077da:	5c 58       	castu.b	r8
800077dc:	f0 c9 00 01 	sub	r9,r8,1
800077e0:	ef 3b ff ce 	ld.ub	r11,r7[-50]
800077e4:	4a 8a       	lddpc	r10,80007884 <host_check_class+0x5ac>
800077e6:	12 98       	mov	r8,r9
800077e8:	a3 78       	lsl	r8,0x3
800077ea:	12 08       	add	r8,r9
800077ec:	f4 08 00 08 	add	r8,r10,r8
800077f0:	16 08       	add	r8,r11
800077f2:	f0 c9 ff fa 	sub	r9,r8,-6
800077f6:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800077fa:	b2 88       	st.b	r9[0x0],r8
800077fc:	ef 38 ff ce 	ld.ub	r8,r7[-50]
80007800:	2f f8       	sub	r8,-1
80007802:	ef 68 ff ce 	st.b	r7[-50],r8
80007806:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000780a:	2f f8       	sub	r8,-1
8000780c:	ef 68 ff cf 	st.b	r7[-49],r8
             min(usb_format_usb_to_mcu_data(16, *(U16 *)(data_stage + OFFSET_FIELD_TOTAL_LENGTH)),
                 SIZEOF_DATA_STAGE - OFFSET_FIELD_PROTOCOL);

  // Look in all interfaces declared in the configuration
  for (descriptor = data_stage + data_stage[OFFSET_DESCRIPTOR_LENGTH]; descriptor < conf_end;
       descriptor += descriptor[OFFSET_DESCRIPTOR_LENGTH])
80007810:	ee f8 ff c0 	ld.w	r8,r7[-64]
80007814:	11 88       	ld.ub	r8,r8[0x0]
80007816:	10 99       	mov	r9,r8
80007818:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000781c:	12 08       	add	r8,r9
8000781e:	ef 48 ff c0 	st.w	r7[-64],r8
  conf_end = data_stage +
             min(usb_format_usb_to_mcu_data(16, *(U16 *)(data_stage + OFFSET_FIELD_TOTAL_LENGTH)),
                 SIZEOF_DATA_STAGE - OFFSET_FIELD_PROTOCOL);

  // Look in all interfaces declared in the configuration
  for (descriptor = data_stage + data_stage[OFFSET_DESCRIPTOR_LENGTH]; descriptor < conf_end;
80007822:	ee f9 ff c0 	ld.w	r9,r7[-64]
80007826:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000782a:	10 39       	cp.w	r9,r8
8000782c:	fe 93 fd b4 	brlo	80007394 <host_check_class+0xbc>
    Host_user_check_class_action(descriptor);
  }

#if HOST_AUTO_CFG_ENDPOINT == ENABLE
  // If there are still endpoints to configure although all descriptors have been parsed
  if (nb_endpoint_to_configure)
80007830:	ef 39 ff cd 	ld.ub	r9,r7[-51]
80007834:	30 08       	mov	r8,0
80007836:	f0 09 18 00 	cp.b	r9,r8
8000783a:	c0 80       	breq	8000784a <host_check_class+0x572>
  {
    // Mark the host as not configured
    Host_clear_configured();
8000783c:	48 c8       	lddpc	r8,8000786c <host_check_class+0x594>
8000783e:	11 88       	ld.ub	r8,r8[0x0]
80007840:	5c 58       	castu.b	r8
80007842:	e2 18 00 fb 	andl	r8,0xfb,COH
80007846:	48 a9       	lddpc	r9,8000786c <host_check_class+0x594>
80007848:	b2 88       	st.b	r9[0x0],r8
  }
#endif

  return (nb_interface_supported > 0);
8000784a:	48 a8       	lddpc	r8,80007870 <host_check_class+0x598>
8000784c:	11 88       	ld.ub	r8,r8[0x0]
8000784e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007852:	30 08       	mov	r8,0
80007854:	f0 09 18 00 	cp.b	r9,r8
80007858:	5f 19       	srne	r9
8000785a:	ef 49 ff 9c 	st.w	r7[-100],r9
8000785e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
}
80007862:	10 9c       	mov	r12,r8
80007864:	2e 7d       	sub	sp,-100
80007866:	e3 cd 80 80 	ldm	sp++,r7,pc
8000786a:	00 00       	add	r0,r0
8000786c:	00 00       	add	r0,r0
8000786e:	09 b4       	ld.ub	r4,r4[0x3]
80007870:	00 00       	add	r0,r0
80007872:	06 64       	and	r4,r3
80007874:	00 00       	add	r0,r0
80007876:	09 b8       	ld.ub	r8,r4[0x3]
80007878:	00 00       	add	r0,r0
8000787a:	0a be       	st.h	r5++,lr
8000787c:	00 00       	add	r0,r0
8000787e:	0a dd       	st.w	--r5,sp
80007880:	80 00       	ld.sh	r0,r0[0x0]
80007882:	fb 18 00 00 	ld.uh	r8,sp[0]
80007886:	0a c2       	st.b	r5++,r2

80007888 <host_transfer_control>:
//!
//! @note This function uses the usb_request global structure. Hence, this
//! structure should be filled before calling this function.
//!
Status_t host_transfer_control(void *data_pointer)
{
80007888:	eb cd 40 80 	pushm	r7,lr
8000788c:	1a 97       	mov	r7,sp
8000788e:	20 8d       	sub	sp,32
80007890:	ef 4c ff f4 	st.w	r7[-12],r12
  Bool sav_int_sof_enable;
  Bool sav_glob_int_en;
  U16 data_length;
  U8 c;

  Usb_ack_event(EVT_HOST_SOF);
80007894:	fe f8 0a 08 	ld.w	r8,pc[2568]
80007898:	90 08       	ld.sh	r8,r8[0x0]
8000789a:	5c 88       	casts.h	r8
8000789c:	a9 d8       	cbr	r8,0x9
8000789e:	5c 88       	casts.h	r8
800078a0:	fe f9 09 fc 	ld.w	r9,pc[2556]
800078a4:	b2 08       	st.h	r9[0x0],r8
  sav_int_sof_enable = Is_host_sof_interrupt_enabled();
800078a6:	fe 68 00 00 	mov	r8,-131072
800078aa:	f0 f8 04 10 	ld.w	r8,r8[1040]
800078ae:	e2 18 00 20 	andl	r8,0x20,COH
800078b2:	5f 18       	srne	r8
800078b4:	ef 68 ff fa 	st.b	r7[-6],r8
  Host_enable_sof_interrupt();                // SOF software detection is in interrupt subroutine
800078b8:	fe 69 00 00 	mov	r9,-131072
800078bc:	32 08       	mov	r8,32
800078be:	f3 48 04 18 	st.w	r9[1048],r8
800078c2:	c3 68       	rjmp	8000792e <host_transfer_control+0xa6>
  while (!Is_usb_event(EVT_HOST_SOF))         // Wait 1 SOF
  {
    if (Is_host_emergency_exit())
800078c4:	fe f8 09 dc 	ld.w	r8,pc[2524]
800078c8:	11 88       	ld.ub	r8,r8[0x0]
800078ca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800078ce:	30 18       	mov	r8,1
800078d0:	f0 09 18 00 	cp.b	r9,r8
800078d4:	c1 10       	breq	800078f6 <host_transfer_control+0x6e>
800078d6:	fe f8 09 c6 	ld.w	r8,pc[2502]
800078da:	90 08       	ld.sh	r8,r8[0x0]
800078dc:	5c 88       	casts.h	r8
800078de:	5c 78       	castu.h	r8
800078e0:	e2 18 08 00 	andl	r8,0x800,COH
800078e4:	c0 91       	brne	800078f6 <host_transfer_control+0x6e>
800078e6:	fe f8 09 b6 	ld.w	r8,pc[2486]
800078ea:	90 08       	ld.sh	r8,r8[0x0]
800078ec:	5c 88       	casts.h	r8
800078ee:	5c 78       	castu.h	r8
800078f0:	e2 18 00 08 	andl	r8,0x8,COH
800078f4:	c1 d0       	breq	8000792e <host_transfer_control+0xa6>
    {
      Host_freeze_pipe(P_CONTROL);
800078f6:	fe 69 05 f0 	mov	r9,-129552
800078fa:	e2 68 00 00 	mov	r8,131072
800078fe:	93 08       	st.w	r9[0x0],r8
      Host_reset_pipe(P_CONTROL);
80007900:	fe 69 00 00 	mov	r9,-131072
80007904:	fe 68 00 00 	mov	r8,-131072
80007908:	f0 f8 04 1c 	ld.w	r8,r8[1052]
8000790c:	b1 a8       	sbr	r8,0x10
8000790e:	f3 48 04 1c 	st.w	r9[1052],r8
80007912:	fe 69 00 00 	mov	r9,-131072
80007916:	fe 68 00 00 	mov	r8,-131072
8000791a:	f0 f8 04 1c 	ld.w	r8,r8[1052]
8000791e:	b1 c8       	cbr	r8,0x10
80007920:	f3 48 04 1c 	st.w	r9[1052],r8
      return CONTROL_TIMEOUT;
80007924:	30 88       	mov	r8,8
80007926:	ef 48 ff e0 	st.w	r7[-32],r8
8000792a:	e0 8f 04 b3 	bral	80008290 <host_transfer_control+0xa08>
  U8 c;

  Usb_ack_event(EVT_HOST_SOF);
  sav_int_sof_enable = Is_host_sof_interrupt_enabled();
  Host_enable_sof_interrupt();                // SOF software detection is in interrupt subroutine
  while (!Is_usb_event(EVT_HOST_SOF))         // Wait 1 SOF
8000792e:	fe f8 09 6e 	ld.w	r8,pc[2414]
80007932:	90 08       	ld.sh	r8,r8[0x0]
80007934:	5c 88       	casts.h	r8
80007936:	5c 78       	castu.h	r8
80007938:	e2 18 02 00 	andl	r8,0x200,COH
8000793c:	cc 40       	breq	800078c4 <host_transfer_control+0x3c>
      Host_freeze_pipe(P_CONTROL);
      Host_reset_pipe(P_CONTROL);
      return CONTROL_TIMEOUT;
    }
  }
  if (!sav_int_sof_enable)                    // Restore SOF interrupt enable
8000793e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80007942:	30 08       	mov	r8,0
80007944:	f0 09 18 00 	cp.b	r9,r8
80007948:	c1 f1       	brne	80007986 <host_transfer_control+0xfe>
  {
    if ((sav_glob_int_en = Is_global_interrupt_enabled())) Disable_global_interrupt();
8000794a:	e1 b8 00 00 	mfsr	r8,0x0
8000794e:	e6 18 00 01 	andh	r8,0x1,COH
80007952:	5f 08       	sreq	r8
80007954:	ef 68 ff fb 	st.b	r7[-5],r8
80007958:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000795c:	30 08       	mov	r8,0
8000795e:	f0 09 18 00 	cp.b	r9,r8
80007962:	c0 20       	breq	80007966 <host_transfer_control+0xde>
80007964:	d3 03       	ssrf	0x10
    Host_disable_sof_interrupt();
80007966:	fe 69 00 00 	mov	r9,-131072
8000796a:	32 08       	mov	r8,32
8000796c:	f3 48 04 14 	st.w	r9[1044],r8
    (void)Is_host_sof_interrupt_enabled();
80007970:	fe 68 00 00 	mov	r8,-131072
80007974:	f0 f8 04 10 	ld.w	r8,r8[1040]
    if (sav_glob_int_en) Enable_global_interrupt();
80007978:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000797c:	30 08       	mov	r8,0
8000797e:	f0 09 18 00 	cp.b	r9,r8
80007982:	c0 20       	breq	80007986 <host_transfer_control+0xfe>
80007984:	d5 03       	csrf	0x10
  }

  Host_configure_pipe_token(P_CONTROL, TOKEN_SETUP);
80007986:	fe 69 05 00 	mov	r9,-129792
8000798a:	fe 68 05 00 	mov	r8,-129792
8000798e:	70 08       	ld.w	r8,r8[0x0]
80007990:	e0 18 fc ff 	andl	r8,0xfcff
80007994:	93 08       	st.w	r9[0x0],r8
  Host_ack_setup_ready();
80007996:	fe 69 05 60 	mov	r9,-129696
8000799a:	30 48       	mov	r8,4
8000799c:	93 08       	st.w	r9[0x0],r8
  Host_unfreeze_pipe(P_CONTROL);
8000799e:	fe 69 06 20 	mov	r9,-129504
800079a2:	e2 68 00 00 	mov	r8,131072
800079a6:	93 08       	st.w	r9[0x0],r8

  // Build and send the setup request fields
  Host_reset_pipe_fifo_access(P_CONTROL);
800079a8:	fe f9 08 fc 	ld.w	r9,pc[2300]
800079ac:	fc 18 e0 00 	movh	r8,0xe000
800079b0:	93 08       	st.w	r9[0x0],r8
  Host_write_pipe_data(P_CONTROL, 8, usb_request.bmRequestType);
800079b2:	fe f8 08 f2 	ld.w	r8,pc[2290]
800079b6:	70 09       	ld.w	r9,r8[0x0]
800079b8:	fe f8 08 f0 	ld.w	r8,pc[2288]
800079bc:	11 88       	ld.ub	r8,r8[0x0]
800079be:	5c 58       	castu.b	r8
800079c0:	b2 88       	st.b	r9[0x0],r8
800079c2:	2f f9       	sub	r9,-1
800079c4:	fe f8 08 e0 	ld.w	r8,pc[2272]
800079c8:	91 09       	st.w	r8[0x0],r9
  Host_write_pipe_data(P_CONTROL, 8, usb_request.bRequest);
800079ca:	fe f8 08 da 	ld.w	r8,pc[2266]
800079ce:	70 09       	ld.w	r9,r8[0x0]
800079d0:	fe f8 08 d8 	ld.w	r8,pc[2264]
800079d4:	11 98       	ld.ub	r8,r8[0x1]
800079d6:	5c 58       	castu.b	r8
800079d8:	b2 88       	st.b	r9[0x0],r8
800079da:	2f f9       	sub	r9,-1
800079dc:	fe f8 08 c8 	ld.w	r8,pc[2248]
800079e0:	91 09       	st.w	r8[0x0],r9
  Host_write_pipe_data(P_CONTROL, 16, usb_format_mcu_to_usb_data(16, usb_request.wValue));
800079e2:	fe f8 08 c2 	ld.w	r8,pc[2242]
800079e6:	70 09       	ld.w	r9,r8[0x0]
800079e8:	fe f8 08 c0 	ld.w	r8,pc[2240]
800079ec:	90 18       	ld.sh	r8,r8[0x2]
800079ee:	5c 88       	casts.h	r8
800079f0:	5c 88       	casts.h	r8
800079f2:	5c c8       	swap.bh	r8
800079f4:	5c 88       	casts.h	r8
800079f6:	b2 08       	st.h	r9[0x0],r8
800079f8:	2f e9       	sub	r9,-2
800079fa:	fe f8 08 aa 	ld.w	r8,pc[2218]
800079fe:	91 09       	st.w	r8[0x0],r9
  Host_write_pipe_data(P_CONTROL, 16, usb_format_mcu_to_usb_data(16, usb_request.wIndex));
80007a00:	fe f8 08 a4 	ld.w	r8,pc[2212]
80007a04:	70 09       	ld.w	r9,r8[0x0]
80007a06:	fe f8 08 a2 	ld.w	r8,pc[2210]
80007a0a:	90 28       	ld.sh	r8,r8[0x4]
80007a0c:	5c 88       	casts.h	r8
80007a0e:	5c 88       	casts.h	r8
80007a10:	5c c8       	swap.bh	r8
80007a12:	5c 88       	casts.h	r8
80007a14:	b2 08       	st.h	r9[0x0],r8
80007a16:	2f e9       	sub	r9,-2
80007a18:	fe f8 08 8c 	ld.w	r8,pc[2188]
80007a1c:	91 09       	st.w	r8[0x0],r9
  Host_write_pipe_data(P_CONTROL, 16, usb_format_mcu_to_usb_data(16, usb_request.wLength));
80007a1e:	fe f8 08 86 	ld.w	r8,pc[2182]
80007a22:	70 09       	ld.w	r9,r8[0x0]
80007a24:	fe f8 08 84 	ld.w	r8,pc[2180]
80007a28:	90 38       	ld.sh	r8,r8[0x6]
80007a2a:	5c 88       	casts.h	r8
80007a2c:	5c 88       	casts.h	r8
80007a2e:	5c c8       	swap.bh	r8
80007a30:	5c 88       	casts.h	r8
80007a32:	b2 08       	st.h	r9[0x0],r8
80007a34:	2f e9       	sub	r9,-2
80007a36:	fe f8 08 6e 	ld.w	r8,pc[2158]
80007a3a:	91 09       	st.w	r8[0x0],r9
  Host_send_setup();
80007a3c:	fe 69 06 20 	mov	r9,-129504
80007a40:	e0 68 40 00 	mov	r8,16384
80007a44:	93 08       	st.w	r9[0x0],r8
80007a46:	c5 28       	rjmp	80007aea <host_transfer_control+0x262>

  while (!Is_host_setup_ready())  // Wait for SETUP ack
  {
    if (Is_host_emergency_exit())
80007a48:	fe f8 08 58 	ld.w	r8,pc[2136]
80007a4c:	11 88       	ld.ub	r8,r8[0x0]
80007a4e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007a52:	30 18       	mov	r8,1
80007a54:	f0 09 18 00 	cp.b	r9,r8
80007a58:	c1 10       	breq	80007a7a <host_transfer_control+0x1f2>
80007a5a:	fe f8 08 42 	ld.w	r8,pc[2114]
80007a5e:	90 08       	ld.sh	r8,r8[0x0]
80007a60:	5c 88       	casts.h	r8
80007a62:	5c 78       	castu.h	r8
80007a64:	e2 18 08 00 	andl	r8,0x800,COH
80007a68:	c0 91       	brne	80007a7a <host_transfer_control+0x1f2>
80007a6a:	fe f8 08 32 	ld.w	r8,pc[2098]
80007a6e:	90 08       	ld.sh	r8,r8[0x0]
80007a70:	5c 88       	casts.h	r8
80007a72:	5c 78       	castu.h	r8
80007a74:	e2 18 00 08 	andl	r8,0x8,COH
80007a78:	c1 d0       	breq	80007ab2 <host_transfer_control+0x22a>
    {
      Host_freeze_pipe(P_CONTROL);
80007a7a:	fe 69 05 f0 	mov	r9,-129552
80007a7e:	e2 68 00 00 	mov	r8,131072
80007a82:	93 08       	st.w	r9[0x0],r8
      Host_reset_pipe(P_CONTROL);
80007a84:	fe 69 00 00 	mov	r9,-131072
80007a88:	fe 68 00 00 	mov	r8,-131072
80007a8c:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007a90:	b1 a8       	sbr	r8,0x10
80007a92:	f3 48 04 1c 	st.w	r9[1052],r8
80007a96:	fe 69 00 00 	mov	r9,-131072
80007a9a:	fe 68 00 00 	mov	r8,-131072
80007a9e:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007aa2:	b1 c8       	cbr	r8,0x10
80007aa4:	f3 48 04 1c 	st.w	r9[1052],r8
      return CONTROL_TIMEOUT;
80007aa8:	30 88       	mov	r8,8
80007aaa:	ef 48 ff e0 	st.w	r7[-32],r8
80007aae:	e0 8f 03 f1 	bral	80008290 <host_transfer_control+0xa08>
    }
    if (Is_host_pipe_error(P_CONTROL))  // Any error?
80007ab2:	fe 68 05 30 	mov	r8,-129744
80007ab6:	70 08       	ld.w	r8,r8[0x0]
80007ab8:	e2 18 00 08 	andl	r8,0x8,COH
80007abc:	c1 70       	breq	80007aea <host_transfer_control+0x262>
    {
      c = Host_error_status(P_CONTROL);
80007abe:	fe 68 06 80 	mov	r8,-129408
80007ac2:	70 08       	ld.w	r8,r8[0x0]
80007ac4:	5c 58       	castu.b	r8
80007ac6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007aca:	ef 68 ff ff 	st.b	r7[-1],r8
      Host_ack_all_errors(P_CONTROL);
80007ace:	fe 69 06 80 	mov	r9,-129408
80007ad2:	fe 68 06 80 	mov	r8,-129408
80007ad6:	70 08       	ld.w	r8,r8[0x0]
80007ad8:	e0 18 ff 80 	andl	r8,0xff80
80007adc:	93 08       	st.w	r9[0x0],r8
      return c;   // Send error status
80007ade:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007ae2:	ef 48 ff e0 	st.w	r7[-32],r8
80007ae6:	e0 8f 03 d5 	bral	80008290 <host_transfer_control+0xa08>
  Host_write_pipe_data(P_CONTROL, 16, usb_format_mcu_to_usb_data(16, usb_request.wValue));
  Host_write_pipe_data(P_CONTROL, 16, usb_format_mcu_to_usb_data(16, usb_request.wIndex));
  Host_write_pipe_data(P_CONTROL, 16, usb_format_mcu_to_usb_data(16, usb_request.wLength));
  Host_send_setup();

  while (!Is_host_setup_ready())  // Wait for SETUP ack
80007aea:	fe 68 05 30 	mov	r8,-129744
80007aee:	70 08       	ld.w	r8,r8[0x0]
80007af0:	e2 18 00 04 	andl	r8,0x4,COH
80007af4:	ca a0       	breq	80007a48 <host_transfer_control+0x1c0>
    }
  }

  // Setup token sent; now send IN or OUT token
  // Before just wait 1 SOF
  Usb_ack_event(EVT_HOST_SOF);
80007af6:	fe f8 07 a6 	ld.w	r8,pc[1958]
80007afa:	90 08       	ld.sh	r8,r8[0x0]
80007afc:	5c 88       	casts.h	r8
80007afe:	a9 d8       	cbr	r8,0x9
80007b00:	5c 88       	casts.h	r8
80007b02:	fe f9 07 9a 	ld.w	r9,pc[1946]
80007b06:	b2 08       	st.h	r9[0x0],r8
  sav_int_sof_enable = Is_host_sof_interrupt_enabled();
80007b08:	fe 68 00 00 	mov	r8,-131072
80007b0c:	f0 f8 04 10 	ld.w	r8,r8[1040]
80007b10:	e2 18 00 20 	andl	r8,0x20,COH
80007b14:	5f 18       	srne	r8
80007b16:	ef 68 ff fa 	st.b	r7[-6],r8
  Host_enable_sof_interrupt();
80007b1a:	fe 69 00 00 	mov	r9,-131072
80007b1e:	32 08       	mov	r8,32
80007b20:	f3 48 04 18 	st.w	r9[1048],r8
  Host_freeze_pipe(P_CONTROL);
80007b24:	fe 69 05 f0 	mov	r9,-129552
80007b28:	e2 68 00 00 	mov	r8,131072
80007b2c:	93 08       	st.w	r9[0x0],r8
  data_length = usb_request.wLength;
80007b2e:	fe f8 07 7a 	ld.w	r8,pc[1914]
80007b32:	90 38       	ld.sh	r8,r8[0x6]
80007b34:	ef 58 ff fc 	st.h	r7[-4],r8
80007b38:	c3 68       	rjmp	80007ba4 <host_transfer_control+0x31c>
  while (!Is_usb_event(EVT_HOST_SOF))         // Wait 1 SOF
  {
    if (Is_host_emergency_exit())
80007b3a:	fe f8 07 66 	ld.w	r8,pc[1894]
80007b3e:	11 88       	ld.ub	r8,r8[0x0]
80007b40:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007b44:	30 18       	mov	r8,1
80007b46:	f0 09 18 00 	cp.b	r9,r8
80007b4a:	c1 10       	breq	80007b6c <host_transfer_control+0x2e4>
80007b4c:	fe f8 07 50 	ld.w	r8,pc[1872]
80007b50:	90 08       	ld.sh	r8,r8[0x0]
80007b52:	5c 88       	casts.h	r8
80007b54:	5c 78       	castu.h	r8
80007b56:	e2 18 08 00 	andl	r8,0x800,COH
80007b5a:	c0 91       	brne	80007b6c <host_transfer_control+0x2e4>
80007b5c:	fe f8 07 40 	ld.w	r8,pc[1856]
80007b60:	90 08       	ld.sh	r8,r8[0x0]
80007b62:	5c 88       	casts.h	r8
80007b64:	5c 78       	castu.h	r8
80007b66:	e2 18 00 08 	andl	r8,0x8,COH
80007b6a:	c1 d0       	breq	80007ba4 <host_transfer_control+0x31c>
    {
      Host_freeze_pipe(P_CONTROL);
80007b6c:	fe 69 05 f0 	mov	r9,-129552
80007b70:	e2 68 00 00 	mov	r8,131072
80007b74:	93 08       	st.w	r9[0x0],r8
      Host_reset_pipe(P_CONTROL);
80007b76:	fe 69 00 00 	mov	r9,-131072
80007b7a:	fe 68 00 00 	mov	r8,-131072
80007b7e:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007b82:	b1 a8       	sbr	r8,0x10
80007b84:	f3 48 04 1c 	st.w	r9[1052],r8
80007b88:	fe 69 00 00 	mov	r9,-131072
80007b8c:	fe 68 00 00 	mov	r8,-131072
80007b90:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007b94:	b1 c8       	cbr	r8,0x10
80007b96:	f3 48 04 1c 	st.w	r9[1052],r8
      return CONTROL_TIMEOUT;
80007b9a:	30 88       	mov	r8,8
80007b9c:	ef 48 ff e0 	st.w	r7[-32],r8
80007ba0:	e0 8f 03 78 	bral	80008290 <host_transfer_control+0xa08>
  Usb_ack_event(EVT_HOST_SOF);
  sav_int_sof_enable = Is_host_sof_interrupt_enabled();
  Host_enable_sof_interrupt();
  Host_freeze_pipe(P_CONTROL);
  data_length = usb_request.wLength;
  while (!Is_usb_event(EVT_HOST_SOF))         // Wait 1 SOF
80007ba4:	fe f8 06 f8 	ld.w	r8,pc[1784]
80007ba8:	90 08       	ld.sh	r8,r8[0x0]
80007baa:	5c 88       	casts.h	r8
80007bac:	5c 78       	castu.h	r8
80007bae:	e2 18 02 00 	andl	r8,0x200,COH
80007bb2:	cc 40       	breq	80007b3a <host_transfer_control+0x2b2>
      Host_freeze_pipe(P_CONTROL);
      Host_reset_pipe(P_CONTROL);
      return CONTROL_TIMEOUT;
    }
  }
  if (!sav_int_sof_enable)                    // Restore SOF interrupt enable
80007bb4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80007bb8:	30 08       	mov	r8,0
80007bba:	f0 09 18 00 	cp.b	r9,r8
80007bbe:	c1 f1       	brne	80007bfc <host_transfer_control+0x374>
  {
    if ((sav_glob_int_en = Is_global_interrupt_enabled())) Disable_global_interrupt();
80007bc0:	e1 b8 00 00 	mfsr	r8,0x0
80007bc4:	e6 18 00 01 	andh	r8,0x1,COH
80007bc8:	5f 08       	sreq	r8
80007bca:	ef 68 ff fb 	st.b	r7[-5],r8
80007bce:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007bd2:	30 08       	mov	r8,0
80007bd4:	f0 09 18 00 	cp.b	r9,r8
80007bd8:	c0 20       	breq	80007bdc <host_transfer_control+0x354>
80007bda:	d3 03       	ssrf	0x10
    Host_disable_sof_interrupt();
80007bdc:	fe 69 00 00 	mov	r9,-131072
80007be0:	32 08       	mov	r8,32
80007be2:	f3 48 04 14 	st.w	r9[1044],r8
    (void)Is_host_sof_interrupt_enabled();
80007be6:	fe 68 00 00 	mov	r8,-131072
80007bea:	f0 f8 04 10 	ld.w	r8,r8[1040]
    if (sav_glob_int_en) Enable_global_interrupt();
80007bee:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007bf2:	30 08       	mov	r8,0
80007bf4:	f0 09 18 00 	cp.b	r9,r8
80007bf8:	c0 20       	breq	80007bfc <host_transfer_control+0x374>
80007bfa:	d5 03       	csrf	0x10
  }

  // IN request management ---------------------------------------------
  if (usb_request.bmRequestType & 0x80)       // Data stage IN (bmRequestType.D7 == 1)
80007bfc:	fe f8 06 ac 	ld.w	r8,pc[1708]
80007c00:	11 88       	ld.ub	r8,r8[0x0]
80007c02:	5c 58       	castu.b	r8
80007c04:	10 99       	mov	r9,r8
80007c06:	30 08       	mov	r8,0
80007c08:	f0 09 18 00 	cp.b	r9,r8
80007c0c:	e0 84 02 1d 	brge	80008046 <host_transfer_control+0x7be>
  {
    Host_disable_continuous_in_mode(P_CONTROL);
80007c10:	fe 69 06 50 	mov	r9,-129456
80007c14:	fe 68 06 50 	mov	r8,-129456
80007c18:	70 08       	ld.w	r8,r8[0x0]
80007c1a:	a9 c8       	cbr	r8,0x8
80007c1c:	93 08       	st.w	r9[0x0],r8
    Host_configure_pipe_token(P_CONTROL, TOKEN_IN);
80007c1e:	fe 69 05 00 	mov	r9,-129792
80007c22:	fe 68 05 00 	mov	r8,-129792
80007c26:	70 08       	ld.w	r8,r8[0x0]
80007c28:	e0 18 fc ff 	andl	r8,0xfcff
80007c2c:	a9 a8       	sbr	r8,0x8
80007c2e:	93 08       	st.w	r9[0x0],r8
    Host_ack_control_in_received_free();
80007c30:	fe 69 05 60 	mov	r9,-129696
80007c34:	30 18       	mov	r8,1
80007c36:	93 08       	st.w	r9[0x0],r8
80007c38:	fe 69 06 20 	mov	r9,-129504
80007c3c:	e0 68 40 00 	mov	r8,16384
80007c40:	93 08       	st.w	r9[0x0],r8
80007c42:	c7 b9       	rjmp	80007f38 <host_transfer_control+0x6b0>
    while (data_length)
    {
      Host_unfreeze_pipe(P_CONTROL);
80007c44:	fe 69 06 20 	mov	r9,-129504
80007c48:	e2 68 00 00 	mov	r8,131072
80007c4c:	93 08       	st.w	r9[0x0],r8
      private_sof_counter = 0;        // Reset the counter in SOF detection subroutine
80007c4e:	fe f9 06 5e 	ld.w	r9,pc[1630]
80007c52:	30 08       	mov	r8,0
80007c54:	93 08       	st.w	r9[0x0],r8
80007c56:	c8 48       	rjmp	80007d5e <host_transfer_control+0x4d6>
      while (!Is_host_control_in_received())
      {
        if (Is_host_emergency_exit())
80007c58:	fe f8 06 48 	ld.w	r8,pc[1608]
80007c5c:	11 88       	ld.ub	r8,r8[0x0]
80007c5e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007c62:	30 18       	mov	r8,1
80007c64:	f0 09 18 00 	cp.b	r9,r8
80007c68:	c1 10       	breq	80007c8a <host_transfer_control+0x402>
80007c6a:	fe f8 06 32 	ld.w	r8,pc[1586]
80007c6e:	90 08       	ld.sh	r8,r8[0x0]
80007c70:	5c 88       	casts.h	r8
80007c72:	5c 78       	castu.h	r8
80007c74:	e2 18 08 00 	andl	r8,0x800,COH
80007c78:	c0 91       	brne	80007c8a <host_transfer_control+0x402>
80007c7a:	fe f8 06 22 	ld.w	r8,pc[1570]
80007c7e:	90 08       	ld.sh	r8,r8[0x0]
80007c80:	5c 88       	casts.h	r8
80007c82:	5c 78       	castu.h	r8
80007c84:	e2 18 00 08 	andl	r8,0x8,COH
80007c88:	c1 d0       	breq	80007cc2 <host_transfer_control+0x43a>
        {
          Host_freeze_pipe(P_CONTROL);
80007c8a:	fe 69 05 f0 	mov	r9,-129552
80007c8e:	e2 68 00 00 	mov	r8,131072
80007c92:	93 08       	st.w	r9[0x0],r8
          Host_reset_pipe(P_CONTROL);
80007c94:	fe 69 00 00 	mov	r9,-131072
80007c98:	fe 68 00 00 	mov	r8,-131072
80007c9c:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007ca0:	b1 a8       	sbr	r8,0x10
80007ca2:	f3 48 04 1c 	st.w	r9[1052],r8
80007ca6:	fe 69 00 00 	mov	r9,-131072
80007caa:	fe 68 00 00 	mov	r8,-131072
80007cae:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007cb2:	b1 c8       	cbr	r8,0x10
80007cb4:	f3 48 04 1c 	st.w	r9[1052],r8
          return CONTROL_TIMEOUT;
80007cb8:	30 88       	mov	r8,8
80007cba:	ef 48 ff e0 	st.w	r7[-32],r8
80007cbe:	e0 8f 02 e9 	bral	80008290 <host_transfer_control+0xa08>
        }
        if (Is_host_pipe_error(P_CONTROL))  // Any error?
80007cc2:	fe 68 05 30 	mov	r8,-129744
80007cc6:	70 08       	ld.w	r8,r8[0x0]
80007cc8:	e2 18 00 08 	andl	r8,0x8,COH
80007ccc:	c1 70       	breq	80007cfa <host_transfer_control+0x472>
        {
          c = Host_error_status(P_CONTROL);
80007cce:	fe 68 06 80 	mov	r8,-129408
80007cd2:	70 08       	ld.w	r8,r8[0x0]
80007cd4:	5c 58       	castu.b	r8
80007cd6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007cda:	ef 68 ff ff 	st.b	r7[-1],r8
          Host_ack_all_errors(P_CONTROL);
80007cde:	fe 69 06 80 	mov	r9,-129408
80007ce2:	fe 68 06 80 	mov	r8,-129408
80007ce6:	70 08       	ld.w	r8,r8[0x0]
80007ce8:	e0 18 ff 80 	andl	r8,0xff80
80007cec:	93 08       	st.w	r9[0x0],r8
          return c;   // Send error status
80007cee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007cf2:	ef 48 ff e0 	st.w	r7[-32],r8
80007cf6:	e0 8f 02 cd 	bral	80008290 <host_transfer_control+0xa08>
        }
        if (Is_host_stall(P_CONTROL))
80007cfa:	fe 68 05 30 	mov	r8,-129744
80007cfe:	70 08       	ld.w	r8,r8[0x0]
80007d00:	e2 18 00 40 	andl	r8,0x40,COH
80007d04:	c0 a0       	breq	80007d18 <host_transfer_control+0x490>
        {
          Host_ack_stall(P_CONTROL);
80007d06:	fe 69 05 60 	mov	r9,-129696
80007d0a:	34 08       	mov	r8,64
80007d0c:	93 08       	st.w	r9[0x0],r8
          return CONTROL_STALL;
80007d0e:	32 08       	mov	r8,32
80007d10:	ef 48 ff e0 	st.w	r7[-32],r8
80007d14:	e0 8f 02 be 	bral	80008290 <host_transfer_control+0xa08>
        }
#if TIMEOUT_DELAY_ENABLE == ENABLE
      if (1000 < host_get_timeout()) // Count 1s
80007d18:	f0 1f 01 66 	mcall	800082b0 <host_transfer_control+0xa28>
80007d1c:	18 98       	mov	r8,r12
80007d1e:	e0 48 03 e8 	cp.w	r8,1000
80007d22:	e0 88 00 1e 	brls	80007d5e <host_transfer_control+0x4d6>
      {
          Host_freeze_pipe(P_CONTROL);
80007d26:	fe 69 05 f0 	mov	r9,-129552
80007d2a:	e2 68 00 00 	mov	r8,131072
80007d2e:	93 08       	st.w	r9[0x0],r8
          Host_reset_pipe(P_CONTROL);
80007d30:	fe 69 00 00 	mov	r9,-131072
80007d34:	fe 68 00 00 	mov	r8,-131072
80007d38:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007d3c:	b1 a8       	sbr	r8,0x10
80007d3e:	f3 48 04 1c 	st.w	r9[1052],r8
80007d42:	fe 69 00 00 	mov	r9,-131072
80007d46:	fe 68 00 00 	mov	r8,-131072
80007d4a:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007d4e:	b1 c8       	cbr	r8,0x10
80007d50:	f3 48 04 1c 	st.w	r9[1052],r8
          return CONTROL_TIMEOUT;
80007d54:	30 88       	mov	r8,8
80007d56:	ef 48 ff e0 	st.w	r7[-32],r8
80007d5a:	e0 8f 02 9b 	bral	80008290 <host_transfer_control+0xa08>
    Host_ack_control_in_received_free();
    while (data_length)
    {
      Host_unfreeze_pipe(P_CONTROL);
      private_sof_counter = 0;        // Reset the counter in SOF detection subroutine
      while (!Is_host_control_in_received())
80007d5e:	fe 68 05 30 	mov	r8,-129744
80007d62:	70 08       	ld.w	r8,r8[0x0]
80007d64:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007d68:	fe 90 ff 78 	breq	80007c58 <host_transfer_control+0x3d0>
          Host_reset_pipe(P_CONTROL);
          return CONTROL_TIMEOUT;
      }
#endif
      }
      Host_reset_pipe_fifo_access(P_CONTROL);
80007d6c:	fe f9 05 38 	ld.w	r9,pc[1336]
80007d70:	fc 18 e0 00 	movh	r8,0xe000
80007d74:	93 08       	st.w	r9[0x0],r8
      c = Host_get_pipe_size(P_CONTROL) - Host_byte_count(P_CONTROL);
80007d76:	fe 68 05 00 	mov	r8,-129792
80007d7a:	70 08       	ld.w	r8,r8[0x0]
80007d7c:	e2 18 00 70 	andl	r8,0x70,COH
80007d80:	a5 88       	lsr	r8,0x4
80007d82:	10 99       	mov	r9,r8
80007d84:	30 88       	mov	r8,8
80007d86:	f0 09 09 48 	lsl	r8,r8,r9
80007d8a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007d8e:	fe 68 05 30 	mov	r8,-129744
80007d92:	70 08       	ld.w	r8,r8[0x0]
80007d94:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007d98:	b5 88       	lsr	r8,0x14
80007d9a:	5c 58       	castu.b	r8
80007d9c:	10 19       	sub	r9,r8
80007d9e:	ef 69 ff ff 	st.b	r7[-1],r9
      data_length = host_read_p_rxpacket(P_CONTROL, data_pointer, data_length, &data_pointer);
80007da2:	ef 1a ff fc 	ld.uh	r10,r7[-4]
80007da6:	ee fb ff f4 	ld.w	r11,r7[-12]
80007daa:	ee c8 00 0c 	sub	r8,r7,12
80007dae:	10 99       	mov	r9,r8
80007db0:	30 0c       	mov	r12,0
80007db2:	f0 1f 01 41 	mcall	800082b4 <host_transfer_control+0xa2c>
80007db6:	18 98       	mov	r8,r12
80007db8:	ef 58 ff fc 	st.h	r7[-4],r8
      if (usb_request.incomplete_read || c) data_length = 0;
80007dbc:	fe f8 04 ec 	ld.w	r8,pc[1260]
80007dc0:	f1 38 00 08 	ld.ub	r8,r8[8]
80007dc4:	5c 58       	castu.b	r8
80007dc6:	c0 71       	brne	80007dd4 <host_transfer_control+0x54c>
80007dc8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007dcc:	30 08       	mov	r8,0
80007dce:	f0 09 18 00 	cp.b	r9,r8
80007dd2:	c0 40       	breq	80007dda <host_transfer_control+0x552>
80007dd4:	30 08       	mov	r8,0
80007dd6:	ef 58 ff fc 	st.h	r7[-4],r8
      Host_freeze_pipe(P_CONTROL);
80007dda:	fe 69 05 f0 	mov	r9,-129552
80007dde:	e2 68 00 00 	mov	r8,131072
80007de2:	93 08       	st.w	r9[0x0],r8
      Host_ack_control_in_received_free();
80007de4:	fe 69 05 60 	mov	r9,-129696
80007de8:	30 18       	mov	r8,1
80007dea:	93 08       	st.w	r9[0x0],r8
80007dec:	fe 69 06 20 	mov	r9,-129504
80007df0:	e0 68 40 00 	mov	r8,16384
80007df4:	93 08       	st.w	r9[0x0],r8
      // In low-speed mode, the USB IP may have not yet sent the ACK at this
      // point. The USB IP does not support a new start of transaction request
      // from the firmware if the ACK has not been sent. The only means of
      // making sure the ACK has been sent is to wait for the next Keep-Alive
      // before starting a new transaction.
      if (Is_usb_low_speed_mode())
80007df6:	fe 68 00 00 	mov	r8,-131072
80007dfa:	f0 f8 08 04 	ld.w	r8,r8[2052]
80007dfe:	e2 18 30 00 	andl	r8,0x3000,COH
80007e02:	ad 88       	lsr	r8,0xc
80007e04:	58 28       	cp.w	r8,2
80007e06:	e0 81 00 99 	brne	80007f38 <host_transfer_control+0x6b0>
      {
        Usb_ack_event(EVT_HOST_SOF);
80007e0a:	fe f8 04 92 	ld.w	r8,pc[1170]
80007e0e:	90 08       	ld.sh	r8,r8[0x0]
80007e10:	5c 88       	casts.h	r8
80007e12:	a9 d8       	cbr	r8,0x9
80007e14:	5c 88       	casts.h	r8
80007e16:	fe f9 04 86 	ld.w	r9,pc[1158]
80007e1a:	b2 08       	st.h	r9[0x0],r8
        sav_int_sof_enable = Is_host_sof_interrupt_enabled();
80007e1c:	fe 68 00 00 	mov	r8,-131072
80007e20:	f0 f8 04 10 	ld.w	r8,r8[1040]
80007e24:	e2 18 00 20 	andl	r8,0x20,COH
80007e28:	5f 18       	srne	r8
80007e2a:	ef 68 ff fa 	st.b	r7[-6],r8
        if ((sav_glob_int_en = Is_global_interrupt_enabled())) Disable_global_interrupt();
80007e2e:	e1 b8 00 00 	mfsr	r8,0x0
80007e32:	e6 18 00 01 	andh	r8,0x1,COH
80007e36:	5f 08       	sreq	r8
80007e38:	ef 68 ff fb 	st.b	r7[-5],r8
80007e3c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007e40:	30 08       	mov	r8,0
80007e42:	f0 09 18 00 	cp.b	r9,r8
80007e46:	c0 20       	breq	80007e4a <host_transfer_control+0x5c2>
80007e48:	d3 03       	ssrf	0x10
        Host_ack_sof();
80007e4a:	fe 69 00 00 	mov	r9,-131072
80007e4e:	32 08       	mov	r8,32
80007e50:	f3 48 04 08 	st.w	r9[1032],r8
        (void)Is_host_sof_interrupt_enabled();
80007e54:	fe 68 00 00 	mov	r8,-131072
80007e58:	f0 f8 04 10 	ld.w	r8,r8[1040]
        if (sav_glob_int_en) Enable_global_interrupt();
80007e5c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007e60:	30 08       	mov	r8,0
80007e62:	f0 09 18 00 	cp.b	r9,r8
80007e66:	c0 20       	breq	80007e6a <host_transfer_control+0x5e2>
80007e68:	d5 03       	csrf	0x10
        Host_enable_sof_interrupt();
80007e6a:	fe 69 00 00 	mov	r9,-131072
80007e6e:	32 08       	mov	r8,32
80007e70:	f3 48 04 18 	st.w	r9[1048],r8
80007e74:	c3 68       	rjmp	80007ee0 <host_transfer_control+0x658>
        while (!Is_usb_event(EVT_HOST_SOF))         // Wait for next Keep-Alive
        {
          if (Is_host_emergency_exit())
80007e76:	fe f8 04 2a 	ld.w	r8,pc[1066]
80007e7a:	11 88       	ld.ub	r8,r8[0x0]
80007e7c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007e80:	30 18       	mov	r8,1
80007e82:	f0 09 18 00 	cp.b	r9,r8
80007e86:	c1 10       	breq	80007ea8 <host_transfer_control+0x620>
80007e88:	fe f8 04 14 	ld.w	r8,pc[1044]
80007e8c:	90 08       	ld.sh	r8,r8[0x0]
80007e8e:	5c 88       	casts.h	r8
80007e90:	5c 78       	castu.h	r8
80007e92:	e2 18 08 00 	andl	r8,0x800,COH
80007e96:	c0 91       	brne	80007ea8 <host_transfer_control+0x620>
80007e98:	fe f8 04 04 	ld.w	r8,pc[1028]
80007e9c:	90 08       	ld.sh	r8,r8[0x0]
80007e9e:	5c 88       	casts.h	r8
80007ea0:	5c 78       	castu.h	r8
80007ea2:	e2 18 00 08 	andl	r8,0x8,COH
80007ea6:	c1 d0       	breq	80007ee0 <host_transfer_control+0x658>
          {
            Host_freeze_pipe(P_CONTROL);
80007ea8:	fe 69 05 f0 	mov	r9,-129552
80007eac:	e2 68 00 00 	mov	r8,131072
80007eb0:	93 08       	st.w	r9[0x0],r8
            Host_reset_pipe(P_CONTROL);
80007eb2:	fe 69 00 00 	mov	r9,-131072
80007eb6:	fe 68 00 00 	mov	r8,-131072
80007eba:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007ebe:	b1 a8       	sbr	r8,0x10
80007ec0:	f3 48 04 1c 	st.w	r9[1052],r8
80007ec4:	fe 69 00 00 	mov	r9,-131072
80007ec8:	fe 68 00 00 	mov	r8,-131072
80007ecc:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007ed0:	b1 c8       	cbr	r8,0x10
80007ed2:	f3 48 04 1c 	st.w	r9[1052],r8
            return CONTROL_TIMEOUT;
80007ed6:	30 88       	mov	r8,8
80007ed8:	ef 48 ff e0 	st.w	r7[-32],r8
80007edc:	e0 8f 01 da 	bral	80008290 <host_transfer_control+0xa08>
        if ((sav_glob_int_en = Is_global_interrupt_enabled())) Disable_global_interrupt();
        Host_ack_sof();
        (void)Is_host_sof_interrupt_enabled();
        if (sav_glob_int_en) Enable_global_interrupt();
        Host_enable_sof_interrupt();
        while (!Is_usb_event(EVT_HOST_SOF))         // Wait for next Keep-Alive
80007ee0:	fe f8 03 bc 	ld.w	r8,pc[956]
80007ee4:	90 08       	ld.sh	r8,r8[0x0]
80007ee6:	5c 88       	casts.h	r8
80007ee8:	5c 78       	castu.h	r8
80007eea:	e2 18 02 00 	andl	r8,0x200,COH
80007eee:	cc 40       	breq	80007e76 <host_transfer_control+0x5ee>
            Host_freeze_pipe(P_CONTROL);
            Host_reset_pipe(P_CONTROL);
            return CONTROL_TIMEOUT;
          }
        }
        if (!sav_int_sof_enable)                    // Restore SOF interrupt enable
80007ef0:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80007ef4:	30 08       	mov	r8,0
80007ef6:	f0 09 18 00 	cp.b	r9,r8
80007efa:	c1 f1       	brne	80007f38 <host_transfer_control+0x6b0>
        {
          if ((sav_glob_int_en = Is_global_interrupt_enabled())) Disable_global_interrupt();
80007efc:	e1 b8 00 00 	mfsr	r8,0x0
80007f00:	e6 18 00 01 	andh	r8,0x1,COH
80007f04:	5f 08       	sreq	r8
80007f06:	ef 68 ff fb 	st.b	r7[-5],r8
80007f0a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007f0e:	30 08       	mov	r8,0
80007f10:	f0 09 18 00 	cp.b	r9,r8
80007f14:	c0 20       	breq	80007f18 <host_transfer_control+0x690>
80007f16:	d3 03       	ssrf	0x10
          Host_disable_sof_interrupt();
80007f18:	fe 69 00 00 	mov	r9,-131072
80007f1c:	32 08       	mov	r8,32
80007f1e:	f3 48 04 14 	st.w	r9[1044],r8
          (void)Is_host_sof_interrupt_enabled();
80007f22:	fe 68 00 00 	mov	r8,-131072
80007f26:	f0 f8 04 10 	ld.w	r8,r8[1040]
          if (sav_glob_int_en) Enable_global_interrupt();
80007f2a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007f2e:	30 08       	mov	r8,0
80007f30:	f0 09 18 00 	cp.b	r9,r8
80007f34:	c0 20       	breq	80007f38 <host_transfer_control+0x6b0>
80007f36:	d5 03       	csrf	0x10
  if (usb_request.bmRequestType & 0x80)       // Data stage IN (bmRequestType.D7 == 1)
  {
    Host_disable_continuous_in_mode(P_CONTROL);
    Host_configure_pipe_token(P_CONTROL, TOKEN_IN);
    Host_ack_control_in_received_free();
    while (data_length)
80007f38:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80007f3c:	30 08       	mov	r8,0
80007f3e:	f0 09 19 00 	cp.h	r9,r8
80007f42:	fe 91 fe 81 	brne	80007c44 <host_transfer_control+0x3bc>
          if (sav_glob_int_en) Enable_global_interrupt();
        }
      }
    }                                 // End of IN data stage

    Host_configure_pipe_token(P_CONTROL, TOKEN_OUT);
80007f46:	fe 69 05 00 	mov	r9,-129792
80007f4a:	fe 68 05 00 	mov	r8,-129792
80007f4e:	70 08       	ld.w	r8,r8[0x0]
80007f50:	e0 18 fc ff 	andl	r8,0xfcff
80007f54:	a9 b8       	sbr	r8,0x9
80007f56:	93 08       	st.w	r9[0x0],r8
    Host_ack_control_out_ready_send();
80007f58:	fe 69 05 60 	mov	r9,-129696
80007f5c:	30 28       	mov	r8,2
80007f5e:	93 08       	st.w	r9[0x0],r8
80007f60:	fe 69 06 20 	mov	r9,-129504
80007f64:	e0 68 40 00 	mov	r8,16384
80007f68:	93 08       	st.w	r9[0x0],r8
    Host_unfreeze_pipe(P_CONTROL);
80007f6a:	fe 69 06 20 	mov	r9,-129504
80007f6e:	e2 68 00 00 	mov	r8,131072
80007f72:	93 08       	st.w	r9[0x0],r8
80007f74:	c5 e8       	rjmp	80008030 <host_transfer_control+0x7a8>
    while (!Is_host_control_out_ready())
    {
      if (Is_host_emergency_exit())
80007f76:	fe f8 03 2a 	ld.w	r8,pc[810]
80007f7a:	11 88       	ld.ub	r8,r8[0x0]
80007f7c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007f80:	30 18       	mov	r8,1
80007f82:	f0 09 18 00 	cp.b	r9,r8
80007f86:	c1 10       	breq	80007fa8 <host_transfer_control+0x720>
80007f88:	fe f8 03 14 	ld.w	r8,pc[788]
80007f8c:	90 08       	ld.sh	r8,r8[0x0]
80007f8e:	5c 88       	casts.h	r8
80007f90:	5c 78       	castu.h	r8
80007f92:	e2 18 08 00 	andl	r8,0x800,COH
80007f96:	c0 91       	brne	80007fa8 <host_transfer_control+0x720>
80007f98:	fe f8 03 04 	ld.w	r8,pc[772]
80007f9c:	90 08       	ld.sh	r8,r8[0x0]
80007f9e:	5c 88       	casts.h	r8
80007fa0:	5c 78       	castu.h	r8
80007fa2:	e2 18 00 08 	andl	r8,0x8,COH
80007fa6:	c1 c0       	breq	80007fde <host_transfer_control+0x756>
      {
        Host_freeze_pipe(P_CONTROL);
80007fa8:	fe 69 05 f0 	mov	r9,-129552
80007fac:	e2 68 00 00 	mov	r8,131072
80007fb0:	93 08       	st.w	r9[0x0],r8
        Host_reset_pipe(P_CONTROL);
80007fb2:	fe 69 00 00 	mov	r9,-131072
80007fb6:	fe 68 00 00 	mov	r8,-131072
80007fba:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007fbe:	b1 a8       	sbr	r8,0x10
80007fc0:	f3 48 04 1c 	st.w	r9[1052],r8
80007fc4:	fe 69 00 00 	mov	r9,-131072
80007fc8:	fe 68 00 00 	mov	r8,-131072
80007fcc:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80007fd0:	b1 c8       	cbr	r8,0x10
80007fd2:	f3 48 04 1c 	st.w	r9[1052],r8
        return CONTROL_TIMEOUT;
80007fd6:	30 88       	mov	r8,8
80007fd8:	ef 48 ff e0 	st.w	r7[-32],r8
80007fdc:	c5 a9       	rjmp	80008290 <host_transfer_control+0xa08>
      }
      if (Is_host_pipe_error(P_CONTROL))  // Any error?
80007fde:	fe 68 05 30 	mov	r8,-129744
80007fe2:	70 08       	ld.w	r8,r8[0x0]
80007fe4:	e2 18 00 08 	andl	r8,0x8,COH
80007fe8:	c1 60       	breq	80008014 <host_transfer_control+0x78c>
      {
        c = Host_error_status(P_CONTROL);
80007fea:	fe 68 06 80 	mov	r8,-129408
80007fee:	70 08       	ld.w	r8,r8[0x0]
80007ff0:	5c 58       	castu.b	r8
80007ff2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007ff6:	ef 68 ff ff 	st.b	r7[-1],r8
        Host_ack_all_errors(P_CONTROL);
80007ffa:	fe 69 06 80 	mov	r9,-129408
80007ffe:	fe 68 06 80 	mov	r8,-129408
80008002:	70 08       	ld.w	r8,r8[0x0]
80008004:	e0 18 ff 80 	andl	r8,0xff80
80008008:	93 08       	st.w	r9[0x0],r8
        return c;   // Send error status
8000800a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000800e:	ef 48 ff e0 	st.w	r7[-32],r8
80008012:	c3 f9       	rjmp	80008290 <host_transfer_control+0xa08>
      }
      if (Is_host_stall(P_CONTROL))
80008014:	fe 68 05 30 	mov	r8,-129744
80008018:	70 08       	ld.w	r8,r8[0x0]
8000801a:	e2 18 00 40 	andl	r8,0x40,COH
8000801e:	c0 90       	breq	80008030 <host_transfer_control+0x7a8>
      {
        Host_ack_stall(P_CONTROL);
80008020:	fe 69 05 60 	mov	r9,-129696
80008024:	34 08       	mov	r8,64
80008026:	93 08       	st.w	r9[0x0],r8
        return CONTROL_STALL;
80008028:	32 08       	mov	r8,32
8000802a:	ef 48 ff e0 	st.w	r7[-32],r8
8000802e:	c3 19       	rjmp	80008290 <host_transfer_control+0xa08>
    }                                 // End of IN data stage

    Host_configure_pipe_token(P_CONTROL, TOKEN_OUT);
    Host_ack_control_out_ready_send();
    Host_unfreeze_pipe(P_CONTROL);
    while (!Is_host_control_out_ready())
80008030:	fe 68 05 30 	mov	r8,-129744
80008034:	70 08       	ld.w	r8,r8[0x0]
80008036:	e2 18 00 02 	andl	r8,0x2,COH
8000803a:	c9 e0       	breq	80007f76 <host_transfer_control+0x6ee>
      {
        Host_ack_stall(P_CONTROL);
        return CONTROL_STALL;
      }
    }
    Host_ack_control_out_ready();
8000803c:	fe 69 05 60 	mov	r9,-129696
80008040:	30 28       	mov	r8,2
80008042:	93 08       	st.w	r9[0x0],r8
80008044:	c2 39       	rjmp	8000828a <host_transfer_control+0xa02>
  }

  // OUT request management --------------------------------------------
  else                                        // Data stage OUT (bmRequestType.D7 == 0)
  {
    Host_configure_pipe_token(P_CONTROL, TOKEN_OUT);
80008046:	fe 69 05 00 	mov	r9,-129792
8000804a:	fe 68 05 00 	mov	r8,-129792
8000804e:	70 08       	ld.w	r8,r8[0x0]
80008050:	e0 18 fc ff 	andl	r8,0xfcff
80008054:	a9 b8       	sbr	r8,0x9
80008056:	93 08       	st.w	r9[0x0],r8
    Host_ack_control_out_ready();
80008058:	fe 69 05 60 	mov	r9,-129696
8000805c:	30 28       	mov	r8,2
8000805e:	93 08       	st.w	r9[0x0],r8
80008060:	c8 38       	rjmp	80008166 <host_transfer_control+0x8de>
    while (data_length)
    {
      Host_unfreeze_pipe(P_CONTROL);
80008062:	fe 69 06 20 	mov	r9,-129504
80008066:	e2 68 00 00 	mov	r8,131072
8000806a:	93 08       	st.w	r9[0x0],r8
      Host_reset_pipe_fifo_access(P_CONTROL);
8000806c:	fe f9 02 38 	ld.w	r9,pc[568]
80008070:	fc 18 e0 00 	movh	r8,0xe000
80008074:	93 08       	st.w	r9[0x0],r8
      data_length = host_write_p_txpacket(P_CONTROL, data_pointer, data_length, (const void **)&data_pointer);
80008076:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000807a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000807e:	ee c8 00 0c 	sub	r8,r7,12
80008082:	10 99       	mov	r9,r8
80008084:	30 0c       	mov	r12,0
80008086:	f0 1f 00 8d 	mcall	800082b8 <host_transfer_control+0xa30>
8000808a:	18 98       	mov	r8,r12
8000808c:	ef 58 ff fc 	st.h	r7[-4],r8
      Host_send_control_out();
80008090:	fe 69 06 20 	mov	r9,-129504
80008094:	e0 68 40 00 	mov	r8,16384
80008098:	93 08       	st.w	r9[0x0],r8
8000809a:	c5 c8       	rjmp	80008152 <host_transfer_control+0x8ca>
      while (!Is_host_control_out_ready())
      {
        if (Is_host_emergency_exit())
8000809c:	fe f8 02 04 	ld.w	r8,pc[516]
800080a0:	11 88       	ld.ub	r8,r8[0x0]
800080a2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800080a6:	30 18       	mov	r8,1
800080a8:	f0 09 18 00 	cp.b	r9,r8
800080ac:	c0 f0       	breq	800080ca <host_transfer_control+0x842>
800080ae:	4f c8       	lddpc	r8,8000829c <host_transfer_control+0xa14>
800080b0:	90 08       	ld.sh	r8,r8[0x0]
800080b2:	5c 88       	casts.h	r8
800080b4:	5c 78       	castu.h	r8
800080b6:	e2 18 08 00 	andl	r8,0x800,COH
800080ba:	c0 81       	brne	800080ca <host_transfer_control+0x842>
800080bc:	4f 88       	lddpc	r8,8000829c <host_transfer_control+0xa14>
800080be:	90 08       	ld.sh	r8,r8[0x0]
800080c0:	5c 88       	casts.h	r8
800080c2:	5c 78       	castu.h	r8
800080c4:	e2 18 00 08 	andl	r8,0x8,COH
800080c8:	c1 c0       	breq	80008100 <host_transfer_control+0x878>
        {
          Host_freeze_pipe(P_CONTROL);
800080ca:	fe 69 05 f0 	mov	r9,-129552
800080ce:	e2 68 00 00 	mov	r8,131072
800080d2:	93 08       	st.w	r9[0x0],r8
          Host_reset_pipe(P_CONTROL);
800080d4:	fe 69 00 00 	mov	r9,-131072
800080d8:	fe 68 00 00 	mov	r8,-131072
800080dc:	f0 f8 04 1c 	ld.w	r8,r8[1052]
800080e0:	b1 a8       	sbr	r8,0x10
800080e2:	f3 48 04 1c 	st.w	r9[1052],r8
800080e6:	fe 69 00 00 	mov	r9,-131072
800080ea:	fe 68 00 00 	mov	r8,-131072
800080ee:	f0 f8 04 1c 	ld.w	r8,r8[1052]
800080f2:	b1 c8       	cbr	r8,0x10
800080f4:	f3 48 04 1c 	st.w	r9[1052],r8
          return CONTROL_TIMEOUT;
800080f8:	30 88       	mov	r8,8
800080fa:	ef 48 ff e0 	st.w	r7[-32],r8
800080fe:	cc 98       	rjmp	80008290 <host_transfer_control+0xa08>
        }
        if (Is_host_pipe_error(P_CONTROL))  // Any error?
80008100:	fe 68 05 30 	mov	r8,-129744
80008104:	70 08       	ld.w	r8,r8[0x0]
80008106:	e2 18 00 08 	andl	r8,0x8,COH
8000810a:	c1 60       	breq	80008136 <host_transfer_control+0x8ae>
        {
          c = Host_error_status(P_CONTROL);
8000810c:	fe 68 06 80 	mov	r8,-129408
80008110:	70 08       	ld.w	r8,r8[0x0]
80008112:	5c 58       	castu.b	r8
80008114:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008118:	ef 68 ff ff 	st.b	r7[-1],r8
          Host_ack_all_errors(P_CONTROL);
8000811c:	fe 69 06 80 	mov	r9,-129408
80008120:	fe 68 06 80 	mov	r8,-129408
80008124:	70 08       	ld.w	r8,r8[0x0]
80008126:	e0 18 ff 80 	andl	r8,0xff80
8000812a:	93 08       	st.w	r9[0x0],r8
          return c;   // Send error status
8000812c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008130:	ef 48 ff e0 	st.w	r7[-32],r8
80008134:	ca e8       	rjmp	80008290 <host_transfer_control+0xa08>
        }
        if (Is_host_stall(P_CONTROL))
80008136:	fe 68 05 30 	mov	r8,-129744
8000813a:	70 08       	ld.w	r8,r8[0x0]
8000813c:	e2 18 00 40 	andl	r8,0x40,COH
80008140:	c0 90       	breq	80008152 <host_transfer_control+0x8ca>
        {
          Host_ack_stall(P_CONTROL);
80008142:	fe 69 05 60 	mov	r9,-129696
80008146:	34 08       	mov	r8,64
80008148:	93 08       	st.w	r9[0x0],r8
          return CONTROL_STALL;
8000814a:	32 08       	mov	r8,32
8000814c:	ef 48 ff e0 	st.w	r7[-32],r8
80008150:	ca 08       	rjmp	80008290 <host_transfer_control+0xa08>
    {
      Host_unfreeze_pipe(P_CONTROL);
      Host_reset_pipe_fifo_access(P_CONTROL);
      data_length = host_write_p_txpacket(P_CONTROL, data_pointer, data_length, (const void **)&data_pointer);
      Host_send_control_out();
      while (!Is_host_control_out_ready())
80008152:	fe 68 05 30 	mov	r8,-129744
80008156:	70 08       	ld.w	r8,r8[0x0]
80008158:	e2 18 00 02 	andl	r8,0x2,COH
8000815c:	ca 00       	breq	8000809c <host_transfer_control+0x814>
        {
          Host_ack_stall(P_CONTROL);
          return CONTROL_STALL;
        }
      }
      Host_ack_control_out_ready();
8000815e:	fe 69 05 60 	mov	r9,-129696
80008162:	30 28       	mov	r8,2
80008164:	93 08       	st.w	r9[0x0],r8
  // OUT request management --------------------------------------------
  else                                        // Data stage OUT (bmRequestType.D7 == 0)
  {
    Host_configure_pipe_token(P_CONTROL, TOKEN_OUT);
    Host_ack_control_out_ready();
    while (data_length)
80008166:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000816a:	30 08       	mov	r8,0
8000816c:	f0 09 19 00 	cp.h	r9,r8
80008170:	fe 91 ff 79 	brne	80008062 <host_transfer_control+0x7da>
        }
      }
      Host_ack_control_out_ready();
    }                                 // End of OUT data stage

    Host_freeze_pipe(P_CONTROL);
80008174:	fe 69 05 f0 	mov	r9,-129552
80008178:	e2 68 00 00 	mov	r8,131072
8000817c:	93 08       	st.w	r9[0x0],r8
    Host_configure_pipe_token(P_CONTROL, TOKEN_IN);
8000817e:	fe 69 05 00 	mov	r9,-129792
80008182:	fe 68 05 00 	mov	r8,-129792
80008186:	70 08       	ld.w	r8,r8[0x0]
80008188:	e0 18 fc ff 	andl	r8,0xfcff
8000818c:	a9 a8       	sbr	r8,0x8
8000818e:	93 08       	st.w	r9[0x0],r8
    Host_ack_control_in_received_free();
80008190:	fe 69 05 60 	mov	r9,-129696
80008194:	30 18       	mov	r8,1
80008196:	93 08       	st.w	r9[0x0],r8
80008198:	fe 69 06 20 	mov	r9,-129504
8000819c:	e0 68 40 00 	mov	r8,16384
800081a0:	93 08       	st.w	r9[0x0],r8
    Host_unfreeze_pipe(P_CONTROL);
800081a2:	fe 69 06 20 	mov	r9,-129504
800081a6:	e2 68 00 00 	mov	r8,131072
800081aa:	93 08       	st.w	r9[0x0],r8
800081ac:	c5 b8       	rjmp	80008262 <host_transfer_control+0x9da>
    while (!Is_host_control_in_received())
    {
      if (Is_host_emergency_exit())
800081ae:	4b d8       	lddpc	r8,800082a0 <host_transfer_control+0xa18>
800081b0:	11 88       	ld.ub	r8,r8[0x0]
800081b2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800081b6:	30 18       	mov	r8,1
800081b8:	f0 09 18 00 	cp.b	r9,r8
800081bc:	c0 f0       	breq	800081da <host_transfer_control+0x952>
800081be:	4b 88       	lddpc	r8,8000829c <host_transfer_control+0xa14>
800081c0:	90 08       	ld.sh	r8,r8[0x0]
800081c2:	5c 88       	casts.h	r8
800081c4:	5c 78       	castu.h	r8
800081c6:	e2 18 08 00 	andl	r8,0x800,COH
800081ca:	c0 81       	brne	800081da <host_transfer_control+0x952>
800081cc:	4b 48       	lddpc	r8,8000829c <host_transfer_control+0xa14>
800081ce:	90 08       	ld.sh	r8,r8[0x0]
800081d0:	5c 88       	casts.h	r8
800081d2:	5c 78       	castu.h	r8
800081d4:	e2 18 00 08 	andl	r8,0x8,COH
800081d8:	c1 c0       	breq	80008210 <host_transfer_control+0x988>
      {
        Host_freeze_pipe(P_CONTROL);
800081da:	fe 69 05 f0 	mov	r9,-129552
800081de:	e2 68 00 00 	mov	r8,131072
800081e2:	93 08       	st.w	r9[0x0],r8
        Host_reset_pipe(P_CONTROL);
800081e4:	fe 69 00 00 	mov	r9,-131072
800081e8:	fe 68 00 00 	mov	r8,-131072
800081ec:	f0 f8 04 1c 	ld.w	r8,r8[1052]
800081f0:	b1 a8       	sbr	r8,0x10
800081f2:	f3 48 04 1c 	st.w	r9[1052],r8
800081f6:	fe 69 00 00 	mov	r9,-131072
800081fa:	fe 68 00 00 	mov	r8,-131072
800081fe:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80008202:	b1 c8       	cbr	r8,0x10
80008204:	f3 48 04 1c 	st.w	r9[1052],r8
        return CONTROL_TIMEOUT;
80008208:	30 88       	mov	r8,8
8000820a:	ef 48 ff e0 	st.w	r7[-32],r8
8000820e:	c4 18       	rjmp	80008290 <host_transfer_control+0xa08>
      }
      if (Is_host_pipe_error(P_CONTROL))  // Any error?
80008210:	fe 68 05 30 	mov	r8,-129744
80008214:	70 08       	ld.w	r8,r8[0x0]
80008216:	e2 18 00 08 	andl	r8,0x8,COH
8000821a:	c1 60       	breq	80008246 <host_transfer_control+0x9be>
      {
        c = Host_error_status(P_CONTROL);
8000821c:	fe 68 06 80 	mov	r8,-129408
80008220:	70 08       	ld.w	r8,r8[0x0]
80008222:	5c 58       	castu.b	r8
80008224:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008228:	ef 68 ff ff 	st.b	r7[-1],r8
        Host_ack_all_errors(P_CONTROL);
8000822c:	fe 69 06 80 	mov	r9,-129408
80008230:	fe 68 06 80 	mov	r8,-129408
80008234:	70 08       	ld.w	r8,r8[0x0]
80008236:	e0 18 ff 80 	andl	r8,0xff80
8000823a:	93 08       	st.w	r9[0x0],r8
        return c;   // Send error status
8000823c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008240:	ef 48 ff e0 	st.w	r7[-32],r8
80008244:	c2 68       	rjmp	80008290 <host_transfer_control+0xa08>
      }
      if (Is_host_stall(P_CONTROL))
80008246:	fe 68 05 30 	mov	r8,-129744
8000824a:	70 08       	ld.w	r8,r8[0x0]
8000824c:	e2 18 00 40 	andl	r8,0x40,COH
80008250:	c0 90       	breq	80008262 <host_transfer_control+0x9da>
      {
        Host_ack_stall(P_CONTROL);
80008252:	fe 69 05 60 	mov	r9,-129696
80008256:	34 08       	mov	r8,64
80008258:	93 08       	st.w	r9[0x0],r8
        return CONTROL_STALL;
8000825a:	32 08       	mov	r8,32
8000825c:	ef 48 ff e0 	st.w	r7[-32],r8
80008260:	c1 88       	rjmp	80008290 <host_transfer_control+0xa08>

    Host_freeze_pipe(P_CONTROL);
    Host_configure_pipe_token(P_CONTROL, TOKEN_IN);
    Host_ack_control_in_received_free();
    Host_unfreeze_pipe(P_CONTROL);
    while (!Is_host_control_in_received())
80008262:	fe 68 05 30 	mov	r8,-129744
80008266:	70 08       	ld.w	r8,r8[0x0]
80008268:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000826c:	ca 10       	breq	800081ae <host_transfer_control+0x926>
      {
        Host_ack_stall(P_CONTROL);
        return CONTROL_STALL;
      }
    }
    Host_ack_control_in_received();
8000826e:	fe 69 05 60 	mov	r9,-129696
80008272:	30 18       	mov	r8,1
80008274:	93 08       	st.w	r9[0x0],r8
    Host_freeze_pipe(P_CONTROL);
80008276:	fe 69 05 f0 	mov	r9,-129552
8000827a:	e2 68 00 00 	mov	r8,131072
8000827e:	93 08       	st.w	r9[0x0],r8
    Host_free_control_in();
80008280:	fe 69 06 20 	mov	r9,-129504
80008284:	e0 68 40 00 	mov	r8,16384
80008288:	93 08       	st.w	r9[0x0],r8
  }

  return CONTROL_GOOD;
8000828a:	30 08       	mov	r8,0
8000828c:	ef 48 ff e0 	st.w	r7[-32],r8
80008290:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
80008294:	10 9c       	mov	r12,r8
80008296:	2f 8d       	sub	sp,-32
80008298:	e3 cd 80 80 	ldm	sp++,r7,pc
8000829c:	00 00       	add	r0,r0
8000829e:	06 54       	eor	r4,r3
800082a0:	00 00       	add	r0,r0
800082a2:	06 56       	eor	r6,r3
800082a4:	00 00       	add	r0,r0
800082a6:	09 88       	ld.ub	r8,r4[0x0]
800082a8:	00 00       	add	r0,r0
800082aa:	0a b2       	st.h	r5++,r2
800082ac:	00 00       	add	r0,r0
800082ae:	09 a4       	ld.ub	r4,r4[0x2]
800082b0:	80 00       	ld.sh	r0,r0[0x0]
800082b2:	58 0c       	cp.w	r12,0
800082b4:	80 00       	ld.sh	r0,r0[0x0]
800082b6:	50 20       	stdsp	sp[0x8],r0
800082b8:	80 00       	ld.sh	r0,r0[0x0]
800082ba:	4d d8       	lddpc	r8,8000842c <uart_usb_tx_ready+0x8>

800082bc <device_cdc_task_init>:
//!
//! @brief This function initializes the hardware/software resources
//! required for device CDC task.
//!
void device_cdc_task_init(void)
{
800082bc:	eb cd 40 80 	pushm	r7,lr
800082c0:	1a 97       	mov	r7,sp
  sof_cnt   =0 ;
800082c2:	48 a9       	lddpc	r9,800082e8 <device_cdc_task_init+0x2c>
800082c4:	30 08       	mov	r8,0
800082c6:	b2 08       	st.h	r9[0x0],r8
  uart_usb_init();
800082c8:	f0 1f 00 09 	mcall	800082ec <device_cdc_task_init+0x30>
#ifndef FREERTOS_USED
  #if USB_HOST_FEATURE == ENABLED
  // If both device and host features are enabled, check if device mode is engaged
  // (accessing the USB registers of a non-engaged mode, even with load operations,
  // may corrupt USB FIFO data).
  if (Is_usb_device())
800082cc:	48 98       	lddpc	r8,800082f0 <device_cdc_task_init+0x34>
800082ce:	11 88       	ld.ub	r8,r8[0x0]
800082d0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800082d4:	30 18       	mov	r8,1
800082d6:	f0 09 18 00 	cp.b	r9,r8
800082da:	c0 51       	brne	800082e4 <device_cdc_task_init+0x28>
  #endif  // USB_HOST_FEATURE == ENABLED
    Usb_enable_sof_interrupt();
800082dc:	fe 69 00 00 	mov	r9,-131072
800082e0:	30 48       	mov	r8,4
800082e2:	93 68       	st.w	r9[0x18],r8
              NULL,
              configTSK_USB_DCDC_PRIORITY,
              NULL);

#endif  // FREERTOS_USED
}
800082e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800082e8:	00 00       	add	r0,r0
800082ea:	06 66       	and	r6,r3
800082ec:	80 00       	ld.sh	r0,r0[0x0]
800082ee:	83 2c       	st.w	r1[0x8],r12
800082f0:	00 00       	add	r0,r0
800082f2:	06 56       	eor	r6,r3

800082f4 <usb_sof_action>:
//! This function increments the sof_cnt counter each time
//! the USB Start-of-Frame interrupt subroutine is executed (1 ms).
//! Useful to manage time delays
//!
void usb_sof_action(void)
{
800082f4:	eb cd 40 80 	pushm	r7,lr
800082f8:	1a 97       	mov	r7,sp
  sof_cnt++;
800082fa:	48 58       	lddpc	r8,8000830c <usb_sof_action+0x18>
800082fc:	90 08       	ld.sh	r8,r8[0x0]
800082fe:	5c 88       	casts.h	r8
80008300:	2f f8       	sub	r8,-1
80008302:	5c 88       	casts.h	r8
80008304:	48 29       	lddpc	r9,8000830c <usb_sof_action+0x18>
80008306:	b2 08       	st.h	r9[0x0],r8
}
80008308:	e3 cd 80 80 	ldm	sp++,r7,pc
8000830c:	00 00       	add	r0,r0
8000830e:	06 66       	and	r6,r3

80008310 <host_sof_action>:
//! This function increments the sof_cnt counter each time
//! the USB Start-of-Frame interrupt subroutine is executed (1 ms).
//! Useful to manage time delays
//!
void host_sof_action(void)
{
80008310:	eb cd 40 80 	pushm	r7,lr
80008314:	1a 97       	mov	r7,sp
  sof_cnt++;
80008316:	48 58       	lddpc	r8,80008328 <host_sof_action+0x18>
80008318:	90 08       	ld.sh	r8,r8[0x0]
8000831a:	5c 88       	casts.h	r8
8000831c:	2f f8       	sub	r8,-1
8000831e:	5c 88       	casts.h	r8
80008320:	48 29       	lddpc	r9,80008328 <host_sof_action+0x18>
80008322:	b2 08       	st.h	r9[0x0],r8
}
80008324:	e3 cd 80 80 	ldm	sp++,r7,pc
80008328:	00 00       	add	r0,r0
8000832a:	06 68       	and	r8,r3

8000832c <uart_usb_init>:
//_____ D E C L A R A T I O N S ____________________________________________
Bool b_tx_new;
Bool b_rx_new;

void uart_usb_init(void)
{
8000832c:	eb cd 40 80 	pushm	r7,lr
80008330:	1a 97       	mov	r7,sp
   b_tx_new = TRUE;
80008332:	48 59       	lddpc	r9,80008344 <uart_usb_init+0x18>
80008334:	30 18       	mov	r8,1
80008336:	b2 88       	st.b	r9[0x0],r8
   b_rx_new = TRUE;
80008338:	48 49       	lddpc	r9,80008348 <uart_usb_init+0x1c>
8000833a:	30 18       	mov	r8,1
8000833c:	b2 88       	st.b	r9[0x0],r8
}
8000833e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008342:	00 00       	add	r0,r0
80008344:	00 00       	add	r0,r0
80008346:	0b 0d       	ld.w	sp,r5++
80008348:	00 00       	add	r0,r0
8000834a:	0b 0c       	ld.w	r12,r5++

8000834c <uart_usb_test_hit>:

// Functions that manage characters input through USB
//

Bool uart_usb_test_hit(void)
{
8000834c:	eb cd 40 80 	pushm	r7,lr
80008350:	1a 97       	mov	r7,sp
80008352:	20 1d       	sub	sp,4
   if( Is_usb_out_received(RX_EP) )
80008354:	fe 68 01 38 	mov	r8,-130760
80008358:	70 08       	ld.w	r8,r8[0x0]
8000835a:	e2 18 00 02 	andl	r8,0x2,COH
8000835e:	c2 30       	breq	800083a4 <uart_usb_test_hit+0x58>
   {
      if( 0!=Usb_byte_count(RX_EP) )
80008360:	fe 68 01 38 	mov	r8,-130760
80008364:	70 08       	ld.w	r8,r8[0x0]
80008366:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000836a:	b5 88       	lsr	r8,0x14
8000836c:	c1 00       	breq	8000838c <uart_usb_test_hit+0x40>
      {
         if( b_rx_new )
8000836e:	49 38       	lddpc	r8,800083b8 <uart_usb_test_hit+0x6c>
80008370:	11 88       	ld.ub	r8,r8[0x0]
80008372:	58 08       	cp.w	r8,0
80008374:	c0 80       	breq	80008384 <uart_usb_test_hit+0x38>
         {
            Usb_reset_endpoint_fifo_access(RX_EP);
80008376:	49 29       	lddpc	r9,800083bc <uart_usb_test_hit+0x70>
80008378:	fc 18 e0 02 	movh	r8,0xe002
8000837c:	93 28       	st.w	r9[0x8],r8
            b_rx_new = FALSE;
8000837e:	48 f9       	lddpc	r9,800083b8 <uart_usb_test_hit+0x6c>
80008380:	30 08       	mov	r8,0
80008382:	b2 88       	st.b	r9[0x0],r8
         }
         return TRUE;
80008384:	30 18       	mov	r8,1
80008386:	ef 48 ff fc 	st.w	r7[-4],r8
8000838a:	c1 08       	rjmp	800083aa <uart_usb_test_hit+0x5e>
      }
      Usb_ack_out_received_free(RX_EP);
8000838c:	fe 69 01 68 	mov	r9,-130712
80008390:	30 28       	mov	r8,2
80008392:	93 08       	st.w	r9[0x0],r8
80008394:	fe 69 02 28 	mov	r9,-130520
80008398:	e0 68 40 00 	mov	r8,16384
8000839c:	93 08       	st.w	r9[0x0],r8
      b_rx_new = TRUE;
8000839e:	48 79       	lddpc	r9,800083b8 <uart_usb_test_hit+0x6c>
800083a0:	30 18       	mov	r8,1
800083a2:	b2 88       	st.b	r9[0x0],r8
   }
   return FALSE;
800083a4:	30 08       	mov	r8,0
800083a6:	ef 48 ff fc 	st.w	r7[-4],r8
800083aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800083ae:	10 9c       	mov	r12,r8
800083b0:	2f fd       	sub	sp,-4
800083b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800083b6:	00 00       	add	r0,r0
800083b8:	00 00       	add	r0,r0
800083ba:	0b 0c       	ld.w	r12,r5++
800083bc:	00 00       	add	r0,r0
800083be:	09 88       	ld.ub	r8,r4[0x0]

800083c0 <uart_usb_getchar>:


char uart_usb_getchar(void)
{
800083c0:	eb cd 40 80 	pushm	r7,lr
800083c4:	1a 97       	mov	r7,sp
800083c6:	20 1d       	sub	sp,4
  register char data_rx;

  while( !uart_usb_test_hit() );
800083c8:	f0 1f 00 14 	mcall	80008418 <uart_usb_getchar+0x58>
800083cc:	18 98       	mov	r8,r12
800083ce:	58 08       	cp.w	r8,0
800083d0:	cf c0       	breq	800083c8 <uart_usb_getchar+0x8>
  data_rx=Usb_read_endpoint_data(RX_EP, 8);
800083d2:	49 38       	lddpc	r8,8000841c <uart_usb_getchar+0x5c>
800083d4:	70 29       	ld.w	r9,r8[0x8]
800083d6:	13 88       	ld.ub	r8,r9[0x0]
800083d8:	5c 58       	castu.b	r8
800083da:	ef 48 ff fc 	st.w	r7[-4],r8
800083de:	2f f9       	sub	r9,-1
800083e0:	48 f8       	lddpc	r8,8000841c <uart_usb_getchar+0x5c>
800083e2:	91 29       	st.w	r8[0x8],r9
  if( 0==Usb_byte_count(RX_EP) ) {
800083e4:	fe 68 01 38 	mov	r8,-130760
800083e8:	70 08       	ld.w	r8,r8[0x0]
800083ea:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800083ee:	b5 88       	lsr	r8,0x14
800083f0:	c0 d1       	brne	8000840a <uart_usb_getchar+0x4a>
      Usb_ack_out_received_free(RX_EP);
800083f2:	fe 69 01 68 	mov	r9,-130712
800083f6:	30 28       	mov	r8,2
800083f8:	93 08       	st.w	r9[0x0],r8
800083fa:	fe 69 02 28 	mov	r9,-130520
800083fe:	e0 68 40 00 	mov	r8,16384
80008402:	93 08       	st.w	r9[0x0],r8
      b_rx_new = TRUE;
80008404:	48 79       	lddpc	r9,80008420 <uart_usb_getchar+0x60>
80008406:	30 18       	mov	r8,1
80008408:	b2 88       	st.b	r9[0x0],r8
  }
  return data_rx;
8000840a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000840e:	10 9c       	mov	r12,r8
80008410:	2f fd       	sub	sp,-4
80008412:	e3 cd 80 80 	ldm	sp++,r7,pc
80008416:	00 00       	add	r0,r0
80008418:	80 00       	ld.sh	r0,r0[0x0]
8000841a:	83 4c       	st.w	r1[0x10],r12
8000841c:	00 00       	add	r0,r0
8000841e:	09 88       	ld.ub	r8,r4[0x0]
80008420:	00 00       	add	r0,r0
80008422:	0b 0c       	ld.w	r12,r5++

80008424 <uart_usb_tx_ready>:


// Functions that manage characters output through USB
//
Bool uart_usb_tx_ready(void)
{
80008424:	eb cd 40 80 	pushm	r7,lr
80008428:	1a 97       	mov	r7,sp
8000842a:	20 1d       	sub	sp,4
  if( Is_usb_write_enabled(TX_EP) )
8000842c:	fe 68 01 34 	mov	r8,-130764
80008430:	70 08       	ld.w	r8,r8[0x0]
80008432:	e6 18 00 01 	andh	r8,0x1,COH
80008436:	c1 00       	breq	80008456 <uart_usb_tx_ready+0x32>
  {
      if( b_tx_new )
80008438:	48 c8       	lddpc	r8,80008468 <uart_usb_tx_ready+0x44>
8000843a:	11 88       	ld.ub	r8,r8[0x0]
8000843c:	58 08       	cp.w	r8,0
8000843e:	c0 80       	breq	8000844e <uart_usb_tx_ready+0x2a>
      {
         Usb_reset_endpoint_fifo_access(TX_EP);
80008440:	48 b9       	lddpc	r9,8000846c <uart_usb_tx_ready+0x48>
80008442:	fc 18 e0 01 	movh	r8,0xe001
80008446:	93 18       	st.w	r9[0x4],r8
         b_tx_new = FALSE;
80008448:	48 89       	lddpc	r9,80008468 <uart_usb_tx_ready+0x44>
8000844a:	30 08       	mov	r8,0
8000844c:	b2 88       	st.b	r9[0x0],r8
      }
      return TRUE;
8000844e:	30 18       	mov	r8,1
80008450:	ef 48 ff fc 	st.w	r7[-4],r8
80008454:	c0 48       	rjmp	8000845c <uart_usb_tx_ready+0x38>
  }
  return FALSE;
80008456:	30 08       	mov	r8,0
80008458:	ef 48 ff fc 	st.w	r7[-4],r8
8000845c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008460:	10 9c       	mov	r12,r8
80008462:	2f fd       	sub	sp,-4
80008464:	e3 cd 80 80 	ldm	sp++,r7,pc
80008468:	00 00       	add	r0,r0
8000846a:	0b 0d       	ld.w	sp,r5++
8000846c:	00 00       	add	r0,r0
8000846e:	09 88       	ld.ub	r8,r4[0x0]

80008470 <uart_usb_putchar>:


int uart_usb_putchar(int data_to_send)
{
80008470:	eb cd 40 80 	pushm	r7,lr
80008474:	1a 97       	mov	r7,sp
80008476:	20 1d       	sub	sp,4
80008478:	ef 4c ff fc 	st.w	r7[-4],r12
  while( !uart_usb_tx_ready() ); // Wait Endpoint ready
8000847c:	f0 1f 00 13 	mcall	800084c8 <uart_usb_putchar+0x58>
80008480:	18 98       	mov	r8,r12
80008482:	58 08       	cp.w	r8,0
80008484:	cf c0       	breq	8000847c <uart_usb_putchar+0xc>
  Usb_write_endpoint_data(TX_EP, 8, data_to_send);
80008486:	49 28       	lddpc	r8,800084cc <uart_usb_putchar+0x5c>
80008488:	70 19       	ld.w	r9,r8[0x4]
8000848a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000848e:	5c 58       	castu.b	r8
80008490:	b2 88       	st.b	r9[0x0],r8
80008492:	2f f9       	sub	r9,-1
80008494:	48 e8       	lddpc	r8,800084cc <uart_usb_putchar+0x5c>
80008496:	91 19       	st.w	r8[0x4],r9
  if( !Is_usb_write_enabled(TX_EP) ) // If Endpoint full -> flush
80008498:	fe 68 01 34 	mov	r8,-130764
8000849c:	70 08       	ld.w	r8,r8[0x0]
8000849e:	e6 18 00 01 	andh	r8,0x1,COH
800084a2:	c0 d1       	brne	800084bc <uart_usb_putchar+0x4c>
  {
     Usb_ack_in_ready_send(TX_EP);
800084a4:	fe 69 01 64 	mov	r9,-130716
800084a8:	30 18       	mov	r8,1
800084aa:	93 08       	st.w	r9[0x0],r8
800084ac:	fe 69 02 24 	mov	r9,-130524
800084b0:	e0 68 40 00 	mov	r8,16384
800084b4:	93 08       	st.w	r9[0x0],r8
     b_tx_new = TRUE;
800084b6:	48 79       	lddpc	r9,800084d0 <uart_usb_putchar+0x60>
800084b8:	30 18       	mov	r8,1
800084ba:	b2 88       	st.b	r9[0x0],r8
  }
  return data_to_send;
800084bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800084c0:	10 9c       	mov	r12,r8
800084c2:	2f fd       	sub	sp,-4
800084c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800084c8:	80 00       	ld.sh	r0,r0[0x0]
800084ca:	84 24       	ld.sh	r4,r2[0x4]
800084cc:	00 00       	add	r0,r0
800084ce:	09 88       	ld.ub	r8,r4[0x0]
800084d0:	00 00       	add	r0,r0
800084d2:	0b 0d       	ld.w	sp,r5++

800084d4 <uart_usb_flush>:


void uart_usb_flush (void)
{
800084d4:	eb cd 40 80 	pushm	r7,lr
800084d8:	1a 97       	mov	r7,sp
  if( 0 != Usb_nb_busy_bank(TX_EP) )
800084da:	fe 68 01 34 	mov	r8,-130764
800084de:	70 08       	ld.w	r8,r8[0x0]
800084e0:	e2 18 30 00 	andl	r8,0x3000,COH
800084e4:	ad 88       	lsr	r8,0xc
800084e6:	c0 d1       	brne	80008500 <uart_usb_flush+0x2c>
     return; // Don't flush because a previous flush is on-going and all bank don't be busy
  Usb_ack_in_ready_send(TX_EP);
800084e8:	fe 69 01 64 	mov	r9,-130716
800084ec:	30 18       	mov	r8,1
800084ee:	93 08       	st.w	r9[0x0],r8
800084f0:	fe 69 02 24 	mov	r9,-130524
800084f4:	e0 68 40 00 	mov	r8,16384
800084f8:	93 08       	st.w	r9[0x0],r8
  b_tx_new = TRUE;
800084fa:	48 39       	lddpc	r9,80008504 <uart_usb_flush+0x30>
800084fc:	30 18       	mov	r8,1
800084fe:	b2 88       	st.b	r9[0x0],r8
}
80008500:	e3 cd 80 80 	ldm	sp++,r7,pc
80008504:	00 00       	add	r0,r0
80008506:	0b 0d       	ld.w	sp,r5++

80008508 <usb_user_endpoint_init>:

//! @brief This function configures the endpoints of the device application.
//! This function is called when the set configuration request has been received.
//!
void usb_user_endpoint_init(U8 conf_nb)
{
80008508:	eb cd 40 80 	pushm	r7,lr
8000850c:	1a 97       	mov	r7,sp
8000850e:	21 6d       	sub	sp,88
80008510:	18 98       	mov	r8,r12
80008512:	ef 68 ff b4 	st.b	r7[-76],r8
                             EP_SIZE_2_HS,
                             DOUBLE_BANK);
      return;
   }
#endif
  (void)Usb_configure_endpoint(INT_EP,
80008516:	fe 69 00 00 	mov	r9,-131072
8000851a:	fe 68 00 00 	mov	r8,-131072
8000851e:	70 78       	ld.w	r8,r8[0x1c]
80008520:	a3 b8       	sbr	r8,0x3
80008522:	93 78       	st.w	r9[0x1c],r8
80008524:	fe 6a 01 0c 	mov	r10,-130804
80008528:	fe 68 01 0c 	mov	r8,-130804
8000852c:	70 08       	ld.w	r8,r8[0x0]
8000852e:	10 9b       	mov	r11,r8
80008530:	e0 1b e6 83 	andl	r11,0xe683
80008534:	32 08       	mov	r8,32
80008536:	ef 48 ff c8 	st.w	r7[-56],r8
8000853a:	30 88       	mov	r8,8
8000853c:	ef 48 ff cc 	st.w	r7[-52],r8
80008540:	ee f9 ff c8 	ld.w	r9,r7[-56]
80008544:	ee f8 ff cc 	ld.w	r8,r7[-52]
80008548:	f2 08 0c 48 	max	r8,r9,r8
8000854c:	ef 48 ff c4 	st.w	r7[-60],r8
80008550:	ee f8 ff c4 	ld.w	r8,r7[-60]
80008554:	ef 48 ff bc 	st.w	r7[-68],r8
80008558:	e0 68 04 00 	mov	r8,1024
8000855c:	ef 48 ff c0 	st.w	r7[-64],r8
80008560:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008564:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008568:	f2 08 0d 48 	min	r8,r9,r8
8000856c:	ef 48 ff b8 	st.w	r7[-72],r8
80008570:	ee f8 ff b8 	ld.w	r8,r7[-72]
80008574:	a1 78       	lsl	r8,0x1
80008576:	20 18       	sub	r8,1
80008578:	f0 08 12 00 	clz	r8,r8
8000857c:	f0 08 11 1c 	rsub	r8,r8,28
80008580:	a5 68       	lsl	r8,0x4
80008582:	e2 18 00 7c 	andl	r8,0x7c,COH
80008586:	f7 e8 10 08 	or	r8,r11,r8
8000858a:	e8 18 19 00 	orl	r8,0x1900
8000858e:	95 08       	st.w	r10[0x0],r8
80008590:	fe 69 01 0c 	mov	r9,-130804
80008594:	fe 68 01 0c 	mov	r8,-130804
80008598:	70 08       	ld.w	r8,r8[0x0]
8000859a:	a1 b8       	sbr	r8,0x1
8000859c:	93 08       	st.w	r9[0x0],r8
8000859e:	fe 68 01 3c 	mov	r8,-130756
800085a2:	70 08       	ld.w	r8,r8[0x0]
                         EP_ATTRIBUTES_3,
                         DIRECTION_IN,
                         EP_SIZE_3,
                         SINGLE_BANK);

  (void)Usb_configure_endpoint(TX_EP,
800085a4:	fe 69 00 00 	mov	r9,-131072
800085a8:	fe 68 00 00 	mov	r8,-131072
800085ac:	70 78       	ld.w	r8,r8[0x1c]
800085ae:	a1 b8       	sbr	r8,0x1
800085b0:	93 78       	st.w	r9[0x1c],r8
800085b2:	fe 6a 01 04 	mov	r10,-130812
800085b6:	fe 68 01 04 	mov	r8,-130812
800085ba:	70 08       	ld.w	r8,r8[0x0]
800085bc:	10 9b       	mov	r11,r8
800085be:	e0 1b e6 83 	andl	r11,0xe683
800085c2:	34 08       	mov	r8,64
800085c4:	ef 48 ff e0 	st.w	r7[-32],r8
800085c8:	30 88       	mov	r8,8
800085ca:	ef 48 ff e4 	st.w	r7[-28],r8
800085ce:	ee f9 ff e0 	ld.w	r9,r7[-32]
800085d2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800085d6:	f2 08 0c 48 	max	r8,r9,r8
800085da:	ef 48 ff dc 	st.w	r7[-36],r8
800085de:	ee f8 ff dc 	ld.w	r8,r7[-36]
800085e2:	ef 48 ff d4 	st.w	r7[-44],r8
800085e6:	e0 68 04 00 	mov	r8,1024
800085ea:	ef 48 ff d8 	st.w	r7[-40],r8
800085ee:	ee f9 ff d4 	ld.w	r9,r7[-44]
800085f2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800085f6:	f2 08 0d 48 	min	r8,r9,r8
800085fa:	ef 48 ff d0 	st.w	r7[-48],r8
800085fe:	ee f8 ff d0 	ld.w	r8,r7[-48]
80008602:	a1 78       	lsl	r8,0x1
80008604:	20 18       	sub	r8,1
80008606:	f0 08 12 00 	clz	r8,r8
8000860a:	f0 08 11 1c 	rsub	r8,r8,28
8000860e:	a5 68       	lsl	r8,0x4
80008610:	e2 18 08 78 	andl	r8,0x878,COH
80008614:	f7 e8 10 08 	or	r8,r11,r8
80008618:	e8 18 11 04 	orl	r8,0x1104
8000861c:	95 08       	st.w	r10[0x0],r8
8000861e:	fe 69 01 04 	mov	r9,-130812
80008622:	fe 68 01 04 	mov	r8,-130812
80008626:	70 08       	ld.w	r8,r8[0x0]
80008628:	a1 b8       	sbr	r8,0x1
8000862a:	93 08       	st.w	r9[0x0],r8
8000862c:	fe 68 01 34 	mov	r8,-130764
80008630:	70 08       	ld.w	r8,r8[0x0]
                         EP_ATTRIBUTES_1,
                         DIRECTION_IN,
                         EP_SIZE_1_FS,
                         DOUBLE_BANK);

  (void)Usb_configure_endpoint(RX_EP,
80008632:	fe 69 00 00 	mov	r9,-131072
80008636:	fe 68 00 00 	mov	r8,-131072
8000863a:	70 78       	ld.w	r8,r8[0x1c]
8000863c:	a3 a8       	sbr	r8,0x2
8000863e:	93 78       	st.w	r9[0x1c],r8
80008640:	fe 6a 01 08 	mov	r10,-130808
80008644:	fe 68 01 08 	mov	r8,-130808
80008648:	70 08       	ld.w	r8,r8[0x0]
8000864a:	10 9b       	mov	r11,r8
8000864c:	e0 1b e6 83 	andl	r11,0xe683
80008650:	34 08       	mov	r8,64
80008652:	ef 48 ff f8 	st.w	r7[-8],r8
80008656:	30 88       	mov	r8,8
80008658:	ef 48 ff fc 	st.w	r7[-4],r8
8000865c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008664:	f2 08 0c 48 	max	r8,r9,r8
80008668:	ef 48 ff f4 	st.w	r7[-12],r8
8000866c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008670:	ef 48 ff ec 	st.w	r7[-20],r8
80008674:	e0 68 04 00 	mov	r8,1024
80008678:	ef 48 ff f0 	st.w	r7[-16],r8
8000867c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008680:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008684:	f2 08 0d 48 	min	r8,r9,r8
80008688:	ef 48 ff e8 	st.w	r7[-24],r8
8000868c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008690:	a1 78       	lsl	r8,0x1
80008692:	20 18       	sub	r8,1
80008694:	f0 08 12 00 	clz	r8,r8
80008698:	f0 08 11 1c 	rsub	r8,r8,28
8000869c:	a5 68       	lsl	r8,0x4
8000869e:	e2 18 09 78 	andl	r8,0x978,COH
800086a2:	f7 e8 10 08 	or	r8,r11,r8
800086a6:	e8 18 10 04 	orl	r8,0x1004
800086aa:	95 08       	st.w	r10[0x0],r8
800086ac:	fe 69 01 08 	mov	r9,-130808
800086b0:	fe 68 01 08 	mov	r8,-130808
800086b4:	70 08       	ld.w	r8,r8[0x0]
800086b6:	a1 b8       	sbr	r8,0x1
800086b8:	93 08       	st.w	r9[0x0],r8
800086ba:	fe 68 01 38 	mov	r8,-130760
800086be:	70 08       	ld.w	r8,r8[0x0]
                         EP_ATTRIBUTES_2,
                         DIRECTION_OUT,
                         EP_SIZE_2_FS,
                         DOUBLE_BANK);
}
800086c0:	2e ad       	sub	sp,-88
800086c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800086c6:	d7 03       	nop

800086c8 <usb_user_read_request>:
//! request is processed. This function returns FALSE if the request is not
//! supported. In this case, a STALL handshake will be automatically
//! sent by the standard USB read request function.
//!
Bool usb_user_read_request(U8 type, U8 request)
{
800086c8:	eb cd 40 80 	pushm	r7,lr
800086cc:	1a 97       	mov	r7,sp
800086ce:	20 4d       	sub	sp,16
800086d0:	18 98       	mov	r8,r12
800086d2:	16 99       	mov	r9,r11
800086d4:	ef 68 ff fc 	st.b	r7[-4],r8
800086d8:	12 98       	mov	r8,r9
800086da:	ef 68 ff f8 	st.b	r7[-8],r8
  switch (request)
800086de:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800086e2:	ef 48 ff f0 	st.w	r7[-16],r8
800086e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800086ea:	e0 48 00 21 	cp.w	r8,33
800086ee:	c0 c0       	breq	80008706 <usb_user_read_request+0x3e>
800086f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800086f4:	e0 48 00 22 	cp.w	r8,34
800086f8:	c1 30       	breq	8000871e <usb_user_read_request+0x56>
800086fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800086fe:	e0 48 00 20 	cp.w	r8,32
80008702:	c0 80       	breq	80008712 <usb_user_read_request+0x4a>
80008704:	c1 38       	rjmp	8000872a <usb_user_read_request+0x62>
  {
    case GET_LINE_CODING:
      cdc_get_line_coding();
80008706:	f0 1f 00 0e 	mcall	8000873c <usb_user_read_request+0x74>
      return TRUE;
8000870a:	30 18       	mov	r8,1
8000870c:	ef 48 ff f4 	st.w	r7[-12],r8
80008710:	c1 08       	rjmp	80008730 <usb_user_read_request+0x68>
      // No need to break here !

    case SET_LINE_CODING:
      cdc_set_line_coding();
80008712:	f0 1f 00 0c 	mcall	80008740 <usb_user_read_request+0x78>
      return TRUE;
80008716:	30 18       	mov	r8,1
80008718:	ef 48 ff f4 	st.w	r7[-12],r8
8000871c:	c0 a8       	rjmp	80008730 <usb_user_read_request+0x68>
      // No need to break here !

    case SET_CONTROL_LINE_STATE:
      cdc_set_control_line_state();
8000871e:	f0 1f 00 0a 	mcall	80008744 <usb_user_read_request+0x7c>
      return TRUE;
80008722:	30 18       	mov	r8,1
80008724:	ef 48 ff f4 	st.w	r7[-12],r8
80008728:	c0 48       	rjmp	80008730 <usb_user_read_request+0x68>
      // No need to break here !

    default:
      return FALSE;
8000872a:	30 08       	mov	r8,0
8000872c:	ef 48 ff f4 	st.w	r7[-12],r8
80008730:	ee f8 ff f4 	ld.w	r8,r7[-12]
      // No need to break here !
  }
}
80008734:	10 9c       	mov	r12,r8
80008736:	2f cd       	sub	sp,-16
80008738:	e3 cd 80 80 	ldm	sp++,r7,pc
8000873c:	80 00       	ld.sh	r0,r0[0x0]
8000873e:	87 68       	st.w	r3[0x18],r8
80008740:	80 00       	ld.sh	r0,r0[0x0]
80008742:	88 28       	ld.sh	r8,r4[0x4]
80008744:	80 00       	ld.sh	r0,r0[0x0]
80008746:	89 cc       	st.w	r4[0x30],r12

80008748 <usb_user_get_descriptor>:

//! This function returns the size and the pointer on a user information
//! structure
//!
Bool usb_user_get_descriptor(U8 type, U8 string)
{
80008748:	eb cd 40 80 	pushm	r7,lr
8000874c:	1a 97       	mov	r7,sp
8000874e:	20 2d       	sub	sp,8
80008750:	18 98       	mov	r8,r12
80008752:	16 99       	mov	r9,r11
80008754:	ef 68 ff fc 	st.b	r7[-4],r8
80008758:	12 98       	mov	r8,r9
8000875a:	ef 68 ff f8 	st.b	r7[-8],r8
    break;
  }

  return pbuffer != NULL;
  */
  return FALSE;
8000875e:	30 08       	mov	r8,0
}
80008760:	10 9c       	mov	r12,r8
80008762:	2f ed       	sub	sp,-8
80008764:	e3 cd 80 80 	ldm	sp++,r7,pc

80008768 <cdc_get_line_coding>:

void cdc_get_line_coding(void)
{
80008768:	eb cd 40 80 	pushm	r7,lr
8000876c:	1a 97       	mov	r7,sp
   Usb_ack_setup_received_free();
8000876e:	fe 69 01 60 	mov	r9,-130720
80008772:	30 48       	mov	r8,4
80008774:	93 08       	st.w	r9[0x0],r8

   Usb_reset_endpoint_fifo_access(EP_CONTROL);
80008776:	4a b9       	lddpc	r9,80008820 <cdc_get_line_coding+0xb8>
80008778:	fc 18 e0 00 	movh	r8,0xe000
8000877c:	93 08       	st.w	r9[0x0],r8
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB0(line_coding.dwDTERate));
8000877e:	4a 98       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
80008780:	70 09       	ld.w	r9,r8[0x0]
80008782:	4a 98       	lddpc	r8,80008824 <cdc_get_line_coding+0xbc>
80008784:	2f d8       	sub	r8,-3
80008786:	11 88       	ld.ub	r8,r8[0x0]
80008788:	b2 88       	st.b	r9[0x0],r8
8000878a:	2f f9       	sub	r9,-1
8000878c:	4a 58       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
8000878e:	91 09       	st.w	r8[0x0],r9
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB1(line_coding.dwDTERate));
80008790:	4a 48       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
80008792:	70 09       	ld.w	r9,r8[0x0]
80008794:	4a 48       	lddpc	r8,80008824 <cdc_get_line_coding+0xbc>
80008796:	2f e8       	sub	r8,-2
80008798:	11 88       	ld.ub	r8,r8[0x0]
8000879a:	b2 88       	st.b	r9[0x0],r8
8000879c:	2f f9       	sub	r9,-1
8000879e:	4a 18       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087a0:	91 09       	st.w	r8[0x0],r9
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB2(line_coding.dwDTERate));
800087a2:	4a 08       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087a4:	70 09       	ld.w	r9,r8[0x0]
800087a6:	4a 08       	lddpc	r8,80008824 <cdc_get_line_coding+0xbc>
800087a8:	2f f8       	sub	r8,-1
800087aa:	11 88       	ld.ub	r8,r8[0x0]
800087ac:	b2 88       	st.b	r9[0x0],r8
800087ae:	2f f9       	sub	r9,-1
800087b0:	49 c8       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087b2:	91 09       	st.w	r8[0x0],r9
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB3(line_coding.dwDTERate));
800087b4:	49 b8       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087b6:	70 09       	ld.w	r9,r8[0x0]
800087b8:	49 b8       	lddpc	r8,80008824 <cdc_get_line_coding+0xbc>
800087ba:	11 88       	ld.ub	r8,r8[0x0]
800087bc:	b2 88       	st.b	r9[0x0],r8
800087be:	2f f9       	sub	r9,-1
800087c0:	49 88       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087c2:	91 09       	st.w	r8[0x0],r9
   Usb_write_endpoint_data(EP_CONTROL, 8, line_coding.bCharFormat);
800087c4:	49 78       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087c6:	70 09       	ld.w	r9,r8[0x0]
800087c8:	49 78       	lddpc	r8,80008824 <cdc_get_line_coding+0xbc>
800087ca:	11 c8       	ld.ub	r8,r8[0x4]
800087cc:	b2 88       	st.b	r9[0x0],r8
800087ce:	2f f9       	sub	r9,-1
800087d0:	49 48       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087d2:	91 09       	st.w	r8[0x0],r9
   Usb_write_endpoint_data(EP_CONTROL, 8, line_coding.bParityType);
800087d4:	49 38       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087d6:	70 09       	ld.w	r9,r8[0x0]
800087d8:	49 38       	lddpc	r8,80008824 <cdc_get_line_coding+0xbc>
800087da:	11 d8       	ld.ub	r8,r8[0x5]
800087dc:	b2 88       	st.b	r9[0x0],r8
800087de:	2f f9       	sub	r9,-1
800087e0:	49 08       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087e2:	91 09       	st.w	r8[0x0],r9
   Usb_write_endpoint_data(EP_CONTROL, 8, line_coding.bDataBits  );
800087e4:	48 f8       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087e6:	70 09       	ld.w	r9,r8[0x0]
800087e8:	48 f8       	lddpc	r8,80008824 <cdc_get_line_coding+0xbc>
800087ea:	11 e8       	ld.ub	r8,r8[0x6]
800087ec:	b2 88       	st.b	r9[0x0],r8
800087ee:	2f f9       	sub	r9,-1
800087f0:	48 c8       	lddpc	r8,80008820 <cdc_get_line_coding+0xb8>
800087f2:	91 09       	st.w	r8[0x0],r9

   Usb_ack_control_in_ready_send();
800087f4:	fe 69 01 60 	mov	r9,-130720
800087f8:	30 18       	mov	r8,1
800087fa:	93 08       	st.w	r9[0x0],r8
   while (!Is_usb_control_in_ready());
800087fc:	fe 68 01 30 	mov	r8,-130768
80008800:	70 08       	ld.w	r8,r8[0x0]
80008802:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008806:	cf b0       	breq	800087fc <cdc_get_line_coding+0x94>

   while(!Is_usb_control_out_received());
80008808:	fe 68 01 30 	mov	r8,-130768
8000880c:	70 08       	ld.w	r8,r8[0x0]
8000880e:	e2 18 00 02 	andl	r8,0x2,COH
80008812:	cf b0       	breq	80008808 <cdc_get_line_coding+0xa0>
   Usb_ack_control_out_received_free();
80008814:	fe 69 01 60 	mov	r9,-130720
80008818:	30 28       	mov	r8,2
8000881a:	93 08       	st.w	r9[0x0],r8
}
8000881c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008820:	00 00       	add	r0,r0
80008822:	09 88       	ld.ub	r8,r4[0x0]
80008824:	00 00       	add	r0,r0
80008826:	0b 10       	ld.sh	r0,r5++

80008828 <cdc_set_line_coding>:

void cdc_set_line_coding (void)
{
80008828:	eb cd 40 80 	pushm	r7,lr
8000882c:	1a 97       	mov	r7,sp
8000882e:	20 2d       	sub	sp,8
   Usb_ack_setup_received_free();
80008830:	fe 69 01 60 	mov	r9,-130720
80008834:	30 48       	mov	r8,4
80008836:	93 08       	st.w	r9[0x0],r8

   while(!Is_usb_control_out_received());
80008838:	fe 68 01 30 	mov	r8,-130768
8000883c:	70 08       	ld.w	r8,r8[0x0]
8000883e:	e2 18 00 02 	andl	r8,0x2,COH
80008842:	cf b0       	breq	80008838 <cdc_set_line_coding+0x10>
   Usb_reset_endpoint_fifo_access(EP_CONTROL);
80008844:	4d d9       	lddpc	r9,800089b8 <cdc_set_line_coding+0x190>
80008846:	fc 18 e0 00 	movh	r8,0xe000
8000884a:	93 08       	st.w	r9[0x0],r8

   LSB0(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
8000884c:	4d c8       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
8000884e:	f0 ca ff fd 	sub	r10,r8,-3
80008852:	4d a8       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
80008854:	70 09       	ld.w	r9,r8[0x0]
80008856:	13 88       	ld.ub	r8,r9[0x0]
80008858:	5c 58       	castu.b	r8
8000885a:	b4 88       	st.b	r10[0x0],r8
8000885c:	2f f9       	sub	r9,-1
8000885e:	4d 78       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
80008860:	91 09       	st.w	r8[0x0],r9
   LSB1(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80008862:	4d 78       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
80008864:	f0 ca ff fe 	sub	r10,r8,-2
80008868:	4d 48       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
8000886a:	70 09       	ld.w	r9,r8[0x0]
8000886c:	13 88       	ld.ub	r8,r9[0x0]
8000886e:	5c 58       	castu.b	r8
80008870:	b4 88       	st.b	r10[0x0],r8
80008872:	2f f9       	sub	r9,-1
80008874:	4d 18       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
80008876:	91 09       	st.w	r8[0x0],r9
   LSB2(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80008878:	4d 18       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
8000887a:	f0 ca ff ff 	sub	r10,r8,-1
8000887e:	4c f8       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
80008880:	70 09       	ld.w	r9,r8[0x0]
80008882:	13 88       	ld.ub	r8,r9[0x0]
80008884:	5c 58       	castu.b	r8
80008886:	b4 88       	st.b	r10[0x0],r8
80008888:	2f f9       	sub	r9,-1
8000888a:	4c c8       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
8000888c:	91 09       	st.w	r8[0x0],r9
   LSB3(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
8000888e:	4c ca       	lddpc	r10,800089bc <cdc_set_line_coding+0x194>
80008890:	4c a8       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
80008892:	70 09       	ld.w	r9,r8[0x0]
80008894:	13 88       	ld.ub	r8,r9[0x0]
80008896:	5c 58       	castu.b	r8
80008898:	b4 88       	st.b	r10[0x0],r8
8000889a:	2f f9       	sub	r9,-1
8000889c:	4c 78       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
8000889e:	91 09       	st.w	r8[0x0],r9
   line_coding.bCharFormat = Usb_read_endpoint_data(EP_CONTROL, 8);
800088a0:	4c 68       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
800088a2:	70 0a       	ld.w	r10,r8[0x0]
800088a4:	15 88       	ld.ub	r8,r10[0x0]
800088a6:	5c 58       	castu.b	r8
800088a8:	4c 59       	lddpc	r9,800089bc <cdc_set_line_coding+0x194>
800088aa:	b2 c8       	st.b	r9[0x4],r8
800088ac:	f4 c9 ff ff 	sub	r9,r10,-1
800088b0:	4c 28       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
800088b2:	91 09       	st.w	r8[0x0],r9
   line_coding.bParityType = Usb_read_endpoint_data(EP_CONTROL, 8);
800088b4:	4c 18       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
800088b6:	70 0a       	ld.w	r10,r8[0x0]
800088b8:	15 88       	ld.ub	r8,r10[0x0]
800088ba:	5c 58       	castu.b	r8
800088bc:	4c 09       	lddpc	r9,800089bc <cdc_set_line_coding+0x194>
800088be:	b2 d8       	st.b	r9[0x5],r8
800088c0:	f4 c9 ff ff 	sub	r9,r10,-1
800088c4:	4b d8       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
800088c6:	91 09       	st.w	r8[0x0],r9
   line_coding.bDataBits = Usb_read_endpoint_data(EP_CONTROL, 8);
800088c8:	4b c8       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
800088ca:	70 0a       	ld.w	r10,r8[0x0]
800088cc:	15 88       	ld.ub	r8,r10[0x0]
800088ce:	5c 58       	castu.b	r8
800088d0:	4b b9       	lddpc	r9,800089bc <cdc_set_line_coding+0x194>
800088d2:	b2 e8       	st.b	r9[0x6],r8
800088d4:	f4 c9 ff ff 	sub	r9,r10,-1
800088d8:	4b 88       	lddpc	r8,800089b8 <cdc_set_line_coding+0x190>
800088da:	91 09       	st.w	r8[0x0],r9
   Usb_ack_control_out_received_free();
800088dc:	fe 69 01 60 	mov	r9,-130720
800088e0:	30 28       	mov	r8,2
800088e2:	93 08       	st.w	r9[0x0],r8

   Usb_ack_control_in_ready_send();
800088e4:	fe 69 01 60 	mov	r9,-130720
800088e8:	30 18       	mov	r8,1
800088ea:	93 08       	st.w	r9[0x0],r8
   while (!Is_usb_control_in_ready());
800088ec:	fe 68 01 30 	mov	r8,-130768
800088f0:	70 08       	ld.w	r8,r8[0x0]
800088f2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800088f6:	cf b0       	breq	800088ec <cdc_set_line_coding+0xc4>
   // Set the baudrate of the USART
   {
      static usart_options_t dbg_usart_options;
      U32 stopbits, parity;

      if     ( line_coding.bCharFormat==0 )   stopbits = USART_1_STOPBIT;
800088f8:	4b 18       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
800088fa:	11 c8       	ld.ub	r8,r8[0x4]
800088fc:	58 08       	cp.w	r8,0
800088fe:	c0 51       	brne	80008908 <cdc_set_line_coding+0xe0>
80008900:	30 08       	mov	r8,0
80008902:	ef 48 ff f8 	st.w	r7[-8],r8
80008906:	c0 e8       	rjmp	80008922 <cdc_set_line_coding+0xfa>
      else if( line_coding.bCharFormat==1 )   stopbits = USART_1_5_STOPBITS;
80008908:	4a d8       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
8000890a:	11 c9       	ld.ub	r9,r8[0x4]
8000890c:	30 18       	mov	r8,1
8000890e:	f0 09 18 00 	cp.b	r9,r8
80008912:	c0 51       	brne	8000891c <cdc_set_line_coding+0xf4>
80008914:	30 18       	mov	r8,1
80008916:	ef 48 ff f8 	st.w	r7[-8],r8
8000891a:	c0 48       	rjmp	80008922 <cdc_set_line_coding+0xfa>
      else                                    stopbits = USART_2_STOPBITS;
8000891c:	30 28       	mov	r8,2
8000891e:	ef 48 ff f8 	st.w	r7[-8],r8

      if     ( line_coding.bParityType==0 )   parity = USART_NO_PARITY;
80008922:	4a 78       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
80008924:	11 d8       	ld.ub	r8,r8[0x5]
80008926:	58 08       	cp.w	r8,0
80008928:	c0 51       	brne	80008932 <cdc_set_line_coding+0x10a>
8000892a:	30 48       	mov	r8,4
8000892c:	ef 48 ff fc 	st.w	r7[-4],r8
80008930:	c2 28       	rjmp	80008974 <cdc_set_line_coding+0x14c>
      else if( line_coding.bParityType==1 )   parity = USART_ODD_PARITY;
80008932:	4a 38       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
80008934:	11 d9       	ld.ub	r9,r8[0x5]
80008936:	30 18       	mov	r8,1
80008938:	f0 09 18 00 	cp.b	r9,r8
8000893c:	c0 51       	brne	80008946 <cdc_set_line_coding+0x11e>
8000893e:	30 18       	mov	r8,1
80008940:	ef 48 ff fc 	st.w	r7[-4],r8
80008944:	c1 88       	rjmp	80008974 <cdc_set_line_coding+0x14c>
      else if( line_coding.bParityType==2 )   parity = USART_EVEN_PARITY;
80008946:	49 e8       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
80008948:	11 d9       	ld.ub	r9,r8[0x5]
8000894a:	30 28       	mov	r8,2
8000894c:	f0 09 18 00 	cp.b	r9,r8
80008950:	c0 51       	brne	8000895a <cdc_set_line_coding+0x132>
80008952:	30 08       	mov	r8,0
80008954:	ef 48 ff fc 	st.w	r7[-4],r8
80008958:	c0 e8       	rjmp	80008974 <cdc_set_line_coding+0x14c>
      else if( line_coding.bParityType==3 )   parity = USART_MARK_PARITY;
8000895a:	49 98       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
8000895c:	11 d9       	ld.ub	r9,r8[0x5]
8000895e:	30 38       	mov	r8,3
80008960:	f0 09 18 00 	cp.b	r9,r8
80008964:	c0 51       	brne	8000896e <cdc_set_line_coding+0x146>
80008966:	30 38       	mov	r8,3
80008968:	ef 48 ff fc 	st.w	r7[-4],r8
8000896c:	c0 48       	rjmp	80008974 <cdc_set_line_coding+0x14c>
      else                                    parity = USART_SPACE_PARITY;
8000896e:	30 28       	mov	r8,2
80008970:	ef 48 ff fc 	st.w	r7[-4],r8

      // Options for debug USART.
      dbg_usart_options.baudrate    = line_coding.dwDTERate;
80008974:	49 28       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
80008976:	70 09       	ld.w	r9,r8[0x0]
80008978:	49 28       	lddpc	r8,800089c0 <cdc_set_line_coding+0x198>
8000897a:	91 09       	st.w	r8[0x0],r9
      dbg_usart_options.charlength  = line_coding.bDataBits;
8000897c:	49 08       	lddpc	r8,800089bc <cdc_set_line_coding+0x194>
8000897e:	11 e8       	ld.ub	r8,r8[0x6]
80008980:	49 09       	lddpc	r9,800089c0 <cdc_set_line_coding+0x198>
80008982:	b2 c8       	st.b	r9[0x4],r8
      dbg_usart_options.paritytype  = parity;
80008984:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008988:	5c 58       	castu.b	r8
8000898a:	48 e9       	lddpc	r9,800089c0 <cdc_set_line_coding+0x198>
8000898c:	b2 d8       	st.b	r9[0x5],r8
      dbg_usart_options.stopbits    = stopbits;
8000898e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008992:	5c 88       	casts.h	r8
80008994:	48 b9       	lddpc	r9,800089c0 <cdc_set_line_coding+0x198>
80008996:	b2 38       	st.h	r9[0x6],r8
      dbg_usart_options.channelmode = USART_NORMAL_CHMODE;
80008998:	48 a9       	lddpc	r9,800089c0 <cdc_set_line_coding+0x198>
8000899a:	30 08       	mov	r8,0
8000899c:	f3 68 00 08 	st.b	r9[8],r8

      // Initialize it in RS232 mode.
      usart_init_rs232(DBG_USART, &dbg_usart_options, pcl_freq_param.pba_f);
800089a0:	48 98       	lddpc	r8,800089c4 <cdc_set_line_coding+0x19c>
800089a2:	70 18       	ld.w	r8,r8[0x4]
800089a4:	10 9a       	mov	r10,r8
800089a6:	48 7b       	lddpc	r11,800089c0 <cdc_set_line_coding+0x198>
800089a8:	fe 7c 18 00 	mov	r12,-59392
800089ac:	f0 1f 00 07 	mcall	800089c8 <cdc_set_line_coding+0x1a0>
   }
}
800089b0:	2f ed       	sub	sp,-8
800089b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800089b6:	00 00       	add	r0,r0
800089b8:	00 00       	add	r0,r0
800089ba:	09 88       	ld.ub	r8,r4[0x0]
800089bc:	00 00       	add	r0,r0
800089be:	0b 10       	ld.sh	r0,r5++
800089c0:	00 00       	add	r0,r0
800089c2:	06 6c       	and	r12,r3
800089c4:	00 00       	add	r0,r0
800089c6:	00 2c       	rsub	r12,r0
800089c8:	80 00       	ld.sh	r0,r0[0x0]
800089ca:	34 b0       	mov	r0,75

800089cc <cdc_set_control_line_state>:

void cdc_set_control_line_state (void)
{
800089cc:	eb cd 40 80 	pushm	r7,lr
800089d0:	1a 97       	mov	r7,sp
   Usb_ack_setup_received_free();
800089d2:	fe 69 01 60 	mov	r9,-130720
800089d6:	30 48       	mov	r8,4
800089d8:	93 08       	st.w	r9[0x0],r8
   Usb_ack_control_in_ready_send();
800089da:	fe 69 01 60 	mov	r9,-130720
800089de:	30 18       	mov	r8,1
800089e0:	93 08       	st.w	r9[0x0],r8
   while (!Is_usb_control_in_ready());
800089e2:	fe 68 01 30 	mov	r8,-130768
800089e6:	70 08       	ld.w	r8,r8[0x0]
800089e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800089ec:	cf b0       	breq	800089e2 <cdc_set_control_line_state+0x16>
}
800089ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800089f2:	d7 03       	nop

800089f4 <fat_check_device>:
//! @verbatim
//! This function updates all navigator datas when the device state change.
//! @endverbatim
//!
Bool  fat_check_device( void )
{
800089f4:	eb cd 40 80 	pushm	r7,lr
800089f8:	1a 97       	mov	r7,sp
800089fa:	20 3d       	sub	sp,12
   U8 retry=0;
800089fc:	30 08       	mov	r8,0
800089fe:	ef 68 ff fa 	st.b	r7[-6],r8
   U8 i;
#endif
   Ctrl_status status;
   
   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80008a02:	4c 58       	lddpc	r8,80008b14 <fat_check_device+0x120>
80008a04:	11 88       	ld.ub	r8,r8[0x0]
80008a06:	58 08       	cp.w	r8,0
80008a08:	c0 50       	breq	80008a12 <fat_check_device+0x1e>
      return TRUE;
80008a0a:	30 18       	mov	r8,1
80008a0c:	ef 48 ff f4 	st.w	r7[-12],r8
80008a10:	c7 c8       	rjmp	80008b08 <fat_check_device+0x114>

   if( 0xFF == fs_g_nav.u8_lun )
80008a12:	4c 28       	lddpc	r8,80008b18 <fat_check_device+0x124>
80008a14:	11 89       	ld.ub	r9,r8[0x0]
80008a16:	3f f8       	mov	r8,-1
80008a18:	f0 09 18 00 	cp.b	r9,r8
80008a1c:	c0 81       	brne	80008a2c <fat_check_device+0x38>
   {
      fs_g_status = FS_ERR_HW;
80008a1e:	4c 09       	lddpc	r9,80008b1c <fat_check_device+0x128>
80008a20:	30 18       	mov	r8,1
80008a22:	b2 88       	st.b	r9[0x0],r8
      return FALSE;                                // No device selected
80008a24:	30 08       	mov	r8,0
80008a26:	ef 48 ff f4 	st.w	r7[-12],r8
80008a2a:	c6 f8       	rjmp	80008b08 <fat_check_device+0x114>
   }

   for( retry=0 ; retry<100 ; retry++ )
80008a2c:	30 08       	mov	r8,0
80008a2e:	ef 68 ff fa 	st.b	r7[-6],r8
80008a32:	c6 18       	rjmp	80008af4 <fat_check_device+0x100>
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80008a34:	4b 98       	lddpc	r8,80008b18 <fat_check_device+0x124>
80008a36:	11 88       	ld.ub	r8,r8[0x0]
80008a38:	10 9c       	mov	r12,r8
80008a3a:	f0 1f 00 3a 	mcall	80008b20 <fat_check_device+0x12c>
80008a3e:	18 98       	mov	r8,r12
80008a40:	ef 48 ff fc 	st.w	r7[-4],r8
      if( CTRL_GOOD       == status )
80008a44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a48:	58 08       	cp.w	r8,0
80008a4a:	c0 51       	brne	80008a54 <fat_check_device+0x60>
         return TRUE;                              // drive ready
80008a4c:	30 18       	mov	r8,1
80008a4e:	ef 48 ff f4 	st.w	r7[-12],r8
80008a52:	c5 b8       	rjmp	80008b08 <fat_check_device+0x114>

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80008a54:	4b 49       	lddpc	r9,80008b24 <fat_check_device+0x130>
80008a56:	30 08       	mov	r8,0
80008a58:	b2 88       	st.b	r9[0x0],r8
      Fat_file_close();                            // By default the file is not open
80008a5a:	4b 49       	lddpc	r9,80008b28 <fat_check_device+0x134>
80008a5c:	30 08       	mov	r8,0
80008a5e:	b2 88       	st.b	r9[0x0],r8
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
80008a60:	30 08       	mov	r8,0
80008a62:	ef 68 ff fb 	st.b	r7[-5],r8
80008a66:	c2 28       	rjmp	80008aaa <fat_check_device+0xb6>
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80008a68:	4a c8       	lddpc	r8,80008b18 <fat_check_device+0x124>
80008a6a:	11 8b       	ld.ub	r11,r8[0x0]
80008a6c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80008a70:	4a fa       	lddpc	r10,80008b2c <fat_check_device+0x138>
80008a72:	12 98       	mov	r8,r9
80008a74:	a1 78       	lsl	r8,0x1
80008a76:	12 08       	add	r8,r9
80008a78:	a5 68       	lsl	r8,0x4
80008a7a:	f4 08 00 08 	add	r8,r10,r8
80008a7e:	11 88       	ld.ub	r8,r8[0x0]
80008a80:	f0 0b 18 00 	cp.b	r11,r8
80008a84:	c0 e1       	brne	80008aa0 <fat_check_device+0xac>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80008a86:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80008a8a:	4a a9       	lddpc	r9,80008b30 <fat_check_device+0x13c>
80008a8c:	30 08       	mov	r8,0
80008a8e:	f2 0a 0b 28 	st.b	r9[r10<<0x2],r8
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80008a92:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008a96:	4a 89       	lddpc	r9,80008b34 <fat_check_device+0x140>
80008a98:	a5 68       	lsl	r8,0x4
80008a9a:	10 09       	add	r9,r8
80008a9c:	30 08       	mov	r8,0
80008a9e:	b2 88       	st.b	r9[0x0],r8
      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
80008aa0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008aa4:	2f f8       	sub	r8,-1
80008aa6:	ef 68 ff fb 	st.b	r7[-5],r8
80008aaa:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80008aae:	30 98       	mov	r8,9
80008ab0:	f0 09 18 00 	cp.b	r9,r8
80008ab4:	cd a1       	brne	80008a68 <fat_check_device+0x74>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80008ab6:	49 98       	lddpc	r8,80008b18 <fat_check_device+0x124>
80008ab8:	11 89       	ld.ub	r9,r8[0x0]
80008aba:	4a 08       	lddpc	r8,80008b38 <fat_check_device+0x144>
80008abc:	11 88       	ld.ub	r8,r8[0x0]
80008abe:	f0 09 18 00 	cp.b	r9,r8
80008ac2:	c0 31       	brne	80008ac8 <fat_check_device+0xd4>
      {
         fat_cache_reset();
80008ac4:	f0 1f 00 1e 	mcall	80008b3c <fat_check_device+0x148>
      }
      fat_cache_clusterlist_reset();
80008ac8:	f0 1f 00 1e 	mcall	80008b40 <fat_check_device+0x14c>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80008acc:	49 48       	lddpc	r8,80008b1c <fat_check_device+0x128>
80008ace:	30 19       	mov	r9,1
80008ad0:	b0 89       	st.b	r8[0x0],r9
      if( CTRL_BUSY == status )
80008ad2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ad6:	58 38       	cp.w	r8,3
80008ad8:	c0 90       	breq	80008aea <fat_check_device+0xf6>
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80008ada:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ade:	58 28       	cp.w	r8,2
80008ae0:	c1 11       	brne	80008b02 <fat_check_device+0x10e>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80008ae2:	48 f9       	lddpc	r9,80008b1c <fat_check_device+0x128>
80008ae4:	31 88       	mov	r8,24
80008ae6:	b2 88       	st.b	r9[0x0],r8
80008ae8:	c0 d8       	rjmp	80008b02 <fat_check_device+0x10e>
   {
      fs_g_status = FS_ERR_HW;
      return FALSE;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80008aea:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008aee:	2f f8       	sub	r8,-1
80008af0:	ef 68 ff fa 	st.b	r7[-6],r8
80008af4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80008af8:	36 38       	mov	r8,99
80008afa:	f0 09 18 00 	cp.b	r9,r8
80008afe:	fe 98 ff 9b 	brls	80008a34 <fat_check_device+0x40>

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
      break;                                       // FAIL or NOT PRESENT = fatal error = no retry
   }
   return FALSE;
80008b02:	30 08       	mov	r8,0
80008b04:	ef 48 ff f4 	st.w	r7[-12],r8
80008b08:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80008b0c:	10 9c       	mov	r12,r8
80008b0e:	2f dd       	sub	sp,-12
80008b10:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b14:	00 00       	add	r0,r0
80008b16:	0b 2e       	ld.uh	lr,r5++
80008b18:	00 00       	add	r0,r0
80008b1a:	0d 58       	ld.sh	r8,--r6
80008b1c:	00 00       	add	r0,r0
80008b1e:	0e 40       	or	r0,r7
80008b20:	80 00       	ld.sh	r0,r0[0x0]
80008b22:	da 24       	*unknown*
80008b24:	00 00       	add	r0,r0
80008b26:	0e 3c       	cp.w	r12,r7
80008b28:	00 00       	add	r0,r0
80008b2a:	0b 1c       	ld.sh	r12,r5++
80008b2c:	00 00       	add	r0,r0
80008b2e:	0e 48       	or	r8,r7
80008b30:	00 00       	add	r0,r0
80008b32:	0e 18       	sub	r8,r7
80008b34:	00 00       	add	r0,r0
80008b36:	0d 88       	ld.ub	r8,r6[0x0]
80008b38:	00 00       	add	r0,r0
80008b3a:	0f f8       	ld.ub	r8,r7[0x7]
80008b3c:	80 00       	ld.sh	r0,r0[0x0]
80008b3e:	ab 30       	mul	r0,r5
80008b40:	80 00       	ld.sh	r0,r0[0x0]
80008b42:	98 f4       	ld.uh	r4,r12[0xe]

80008b44 <fat_check_mount>:
//!
//! @return    TRUE  partition mounted
//! @return    FALSE otherwise
//!
Bool  fat_check_mount( void )
{
80008b44:	eb cd 40 80 	pushm	r7,lr
80008b48:	1a 97       	mov	r7,sp
80008b4a:	20 1d       	sub	sp,4
   if( !fat_check_device() )
80008b4c:	f0 1f 00 11 	mcall	80008b90 <fat_check_mount+0x4c>
80008b50:	18 98       	mov	r8,r12
80008b52:	58 08       	cp.w	r8,0
80008b54:	c0 51       	brne	80008b5e <fat_check_mount+0x1a>
      return FALSE;
80008b56:	30 08       	mov	r8,0
80008b58:	ef 48 ff fc 	st.w	r7[-4],r8
80008b5c:	c1 48       	rjmp	80008b84 <fat_check_mount+0x40>
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80008b5e:	48 e8       	lddpc	r8,80008b94 <fat_check_mount+0x50>
80008b60:	11 88       	ld.ub	r8,r8[0x0]
80008b62:	58 08       	cp.w	r8,0
80008b64:	c0 d1       	brne	80008b7e <fat_check_mount+0x3a>
   {
      if( !fat_mount() )
80008b66:	f0 1f 00 0d 	mcall	80008b98 <fat_check_mount+0x54>
80008b6a:	18 98       	mov	r8,r12
80008b6c:	58 08       	cp.w	r8,0
80008b6e:	c0 81       	brne	80008b7e <fat_check_mount+0x3a>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80008b70:	48 b9       	lddpc	r9,80008b9c <fat_check_mount+0x58>
80008b72:	30 e8       	mov	r8,14
80008b74:	b2 88       	st.b	r9[0x0],r8
         return FALSE;
80008b76:	30 08       	mov	r8,0
80008b78:	ef 48 ff fc 	st.w	r7[-4],r8
80008b7c:	c0 48       	rjmp	80008b84 <fat_check_mount+0x40>
      }
   }
   return TRUE;
80008b7e:	30 18       	mov	r8,1
80008b80:	ef 48 ff fc 	st.w	r7[-4],r8
80008b84:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008b88:	10 9c       	mov	r12,r8
80008b8a:	2f fd       	sub	sp,-4
80008b8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b90:	80 00       	ld.sh	r0,r0[0x0]
80008b92:	89 f4       	st.w	r4[0x3c],r4
80008b94:	00 00       	add	r0,r0
80008b96:	0e 3c       	cp.w	r12,r7
80008b98:	80 00       	ld.sh	r0,r0[0x0]
80008b9a:	b1 04       	ld.d	r4,r8
80008b9c:	00 00       	add	r0,r0
80008b9e:	0e 40       	or	r0,r7

80008ba0 <fat_check_noopen>:
//!
//! @return    TRUE  no file opened
//! @return    FALSE otherwise
//!
Bool  fat_check_noopen( void )
{
80008ba0:	eb cd 40 80 	pushm	r7,lr
80008ba4:	1a 97       	mov	r7,sp
80008ba6:	20 1d       	sub	sp,4
   if( !fat_check_device() )
80008ba8:	f0 1f 00 13 	mcall	80008bf4 <fat_check_noopen+0x54>
80008bac:	18 98       	mov	r8,r12
80008bae:	58 08       	cp.w	r8,0
80008bb0:	c0 51       	brne	80008bba <fat_check_noopen+0x1a>
      return TRUE;
80008bb2:	30 18       	mov	r8,1
80008bb4:	ef 48 ff fc 	st.w	r7[-4],r8
80008bb8:	c1 78       	rjmp	80008be6 <fat_check_noopen+0x46>
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80008bba:	49 08       	lddpc	r8,80008bf8 <fat_check_noopen+0x58>
80008bbc:	11 88       	ld.ub	r8,r8[0x0]
80008bbe:	58 08       	cp.w	r8,0
80008bc0:	c0 51       	brne	80008bca <fat_check_noopen+0x2a>
      return TRUE;
80008bc2:	30 18       	mov	r8,1
80008bc4:	ef 48 ff fc 	st.w	r7[-4],r8
80008bc8:	c0 f8       	rjmp	80008be6 <fat_check_noopen+0x46>
   if( Fat_file_is_open() )
80008bca:	48 d8       	lddpc	r8,80008bfc <fat_check_noopen+0x5c>
80008bcc:	11 88       	ld.ub	r8,r8[0x0]
80008bce:	58 08       	cp.w	r8,0
80008bd0:	c0 80       	breq	80008be0 <fat_check_noopen+0x40>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80008bd2:	48 c9       	lddpc	r9,80008c00 <fat_check_noopen+0x60>
80008bd4:	30 58       	mov	r8,5
80008bd6:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
80008bd8:	30 08       	mov	r8,0
80008bda:	ef 48 ff fc 	st.w	r7[-4],r8
80008bde:	c0 48       	rjmp	80008be6 <fat_check_noopen+0x46>
   }
   return TRUE;
80008be0:	30 18       	mov	r8,1
80008be2:	ef 48 ff fc 	st.w	r7[-4],r8
80008be6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008bea:	10 9c       	mov	r12,r8
80008bec:	2f fd       	sub	sp,-4
80008bee:	e3 cd 80 80 	ldm	sp++,r7,pc
80008bf2:	00 00       	add	r0,r0
80008bf4:	80 00       	ld.sh	r0,r0[0x0]
80008bf6:	89 f4       	st.w	r4[0x3c],r4
80008bf8:	00 00       	add	r0,r0
80008bfa:	0e 3c       	cp.w	r12,r7
80008bfc:	00 00       	add	r0,r0
80008bfe:	0b 1c       	ld.sh	r12,r5++
80008c00:	00 00       	add	r0,r0
80008c02:	0e 40       	or	r0,r7

80008c04 <fat_check_open>:
//!
//! @return    TRUE  a file is opened
//! @return    FALSE otherwise
//!
Bool  fat_check_open( void )
{
80008c04:	eb cd 40 80 	pushm	r7,lr
80008c08:	1a 97       	mov	r7,sp
80008c0a:	20 1d       	sub	sp,4
   if( Fat_file_isnot_open() )
80008c0c:	48 a8       	lddpc	r8,80008c34 <fat_check_open+0x30>
80008c0e:	11 88       	ld.ub	r8,r8[0x0]
80008c10:	58 08       	cp.w	r8,0
80008c12:	c0 81       	brne	80008c22 <fat_check_open+0x1e>
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80008c14:	48 99       	lddpc	r9,80008c38 <fat_check_open+0x34>
80008c16:	31 78       	mov	r8,23
80008c18:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
80008c1a:	30 08       	mov	r8,0
80008c1c:	ef 48 ff fc 	st.w	r7[-4],r8
80008c20:	c0 48       	rjmp	80008c28 <fat_check_open+0x24>
   }
   return TRUE;
80008c22:	30 18       	mov	r8,1
80008c24:	ef 48 ff fc 	st.w	r7[-4],r8
80008c28:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008c2c:	10 9c       	mov	r12,r8
80008c2e:	2f fd       	sub	sp,-4
80008c30:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c34:	00 00       	add	r0,r0
80008c36:	0b 1c       	ld.sh	r12,r5++
80008c38:	00 00       	add	r0,r0
80008c3a:	0e 40       	or	r0,r7

80008c3c <fat_check_select>:
//!
//! @return    TRUE  a file is selected
//! @return    FALSE otherwise
//!
Bool  fat_check_select( void )
{
80008c3c:	eb cd 40 80 	pushm	r7,lr
80008c40:	1a 97       	mov	r7,sp
80008c42:	20 1d       	sub	sp,4
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80008c44:	48 b8       	lddpc	r8,80008c70 <fat_check_select+0x34>
80008c46:	90 19       	ld.sh	r9,r8[0x2]
80008c48:	3f f8       	mov	r8,-1
80008c4a:	f0 09 19 00 	cp.h	r9,r8
80008c4e:	c0 81       	brne	80008c5e <fat_check_select+0x22>
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80008c50:	48 99       	lddpc	r9,80008c74 <fat_check_select+0x38>
80008c52:	30 f8       	mov	r8,15
80008c54:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
80008c56:	30 08       	mov	r8,0
80008c58:	ef 48 ff fc 	st.w	r7[-4],r8
80008c5c:	c0 48       	rjmp	80008c64 <fat_check_select+0x28>
   }
   return TRUE;
80008c5e:	30 18       	mov	r8,1
80008c60:	ef 48 ff fc 	st.w	r7[-4],r8
80008c64:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008c68:	10 9c       	mov	r12,r8
80008c6a:	2f fd       	sub	sp,-4
80008c6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c70:	00 00       	add	r0,r0
80008c72:	0e 3c       	cp.w	r12,r7
80008c74:	00 00       	add	r0,r0
80008c76:	0e 40       	or	r0,r7

80008c78 <fat_check_mount_noopen>:
//!
//! @return    TRUE  partition mounted and no file is opened
//! @return    FALSE otherwise
//!
Bool  fat_check_mount_noopen( void )
{
80008c78:	eb cd 40 80 	pushm	r7,lr
80008c7c:	1a 97       	mov	r7,sp
80008c7e:	20 1d       	sub	sp,4
   if( !fat_check_mount() )
80008c80:	f0 1f 00 0a 	mcall	80008ca8 <fat_check_mount_noopen+0x30>
80008c84:	18 98       	mov	r8,r12
80008c86:	58 08       	cp.w	r8,0
80008c88:	c0 51       	brne	80008c92 <fat_check_mount_noopen+0x1a>
      return FALSE;
80008c8a:	30 08       	mov	r8,0
80008c8c:	ef 48 ff fc 	st.w	r7[-4],r8
80008c90:	c0 68       	rjmp	80008c9c <fat_check_mount_noopen+0x24>
   return fat_check_noopen();
80008c92:	f0 1f 00 07 	mcall	80008cac <fat_check_mount_noopen+0x34>
80008c96:	18 98       	mov	r8,r12
80008c98:	ef 48 ff fc 	st.w	r7[-4],r8
80008c9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008ca0:	10 9c       	mov	r12,r8
80008ca2:	2f fd       	sub	sp,-4
80008ca4:	e3 cd 80 80 	ldm	sp++,r7,pc
80008ca8:	80 00       	ld.sh	r0,r0[0x0]
80008caa:	8b 44       	st.w	r5[0x10],r4
80008cac:	80 00       	ld.sh	r0,r0[0x0]
80008cae:	8b a0       	st.w	r5[0x28],r0

80008cb0 <fat_check_mount_select_noopen>:
//!
//! @return    TRUE  partition mounted and no file is opened and a file is selected
//! @return    FALSE otherwise
//!
Bool  fat_check_mount_select_noopen( void )
{
80008cb0:	eb cd 40 80 	pushm	r7,lr
80008cb4:	1a 97       	mov	r7,sp
80008cb6:	20 1d       	sub	sp,4
   if( !fat_check_mount() )
80008cb8:	f0 1f 00 0f 	mcall	80008cf4 <fat_check_mount_select_noopen+0x44>
80008cbc:	18 98       	mov	r8,r12
80008cbe:	58 08       	cp.w	r8,0
80008cc0:	c0 51       	brne	80008cca <fat_check_mount_select_noopen+0x1a>
      return FALSE;
80008cc2:	30 08       	mov	r8,0
80008cc4:	ef 48 ff fc 	st.w	r7[-4],r8
80008cc8:	c0 f8       	rjmp	80008ce6 <fat_check_mount_select_noopen+0x36>
   if( !fat_check_select() )
80008cca:	f0 1f 00 0c 	mcall	80008cf8 <fat_check_mount_select_noopen+0x48>
80008cce:	18 98       	mov	r8,r12
80008cd0:	58 08       	cp.w	r8,0
80008cd2:	c0 51       	brne	80008cdc <fat_check_mount_select_noopen+0x2c>
      return FALSE;
80008cd4:	30 08       	mov	r8,0
80008cd6:	ef 48 ff fc 	st.w	r7[-4],r8
80008cda:	c0 68       	rjmp	80008ce6 <fat_check_mount_select_noopen+0x36>
   return fat_check_noopen();
80008cdc:	f0 1f 00 08 	mcall	80008cfc <fat_check_mount_select_noopen+0x4c>
80008ce0:	18 98       	mov	r8,r12
80008ce2:	ef 48 ff fc 	st.w	r7[-4],r8
80008ce6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008cea:	10 9c       	mov	r12,r8
80008cec:	2f fd       	sub	sp,-4
80008cee:	e3 cd 80 80 	ldm	sp++,r7,pc
80008cf2:	00 00       	add	r0,r0
80008cf4:	80 00       	ld.sh	r0,r0[0x0]
80008cf6:	8b 44       	st.w	r5[0x10],r4
80008cf8:	80 00       	ld.sh	r0,r0[0x0]
80008cfa:	8c 3c       	ld.sh	r12,r6[0x6]
80008cfc:	80 00       	ld.sh	r0,r0[0x0]
80008cfe:	8b a0       	st.w	r5[0x28],r0

80008d00 <fat_check_mount_select_open>:
//!
//! @return    TRUE  partition mounted and a file is opened
//! @return    FALSE otherwise
//!
Bool  fat_check_mount_select_open( void )
{
80008d00:	eb cd 40 80 	pushm	r7,lr
80008d04:	1a 97       	mov	r7,sp
80008d06:	20 1d       	sub	sp,4
   if( !fat_check_mount() )
80008d08:	f0 1f 00 0f 	mcall	80008d44 <fat_check_mount_select_open+0x44>
80008d0c:	18 98       	mov	r8,r12
80008d0e:	58 08       	cp.w	r8,0
80008d10:	c0 51       	brne	80008d1a <fat_check_mount_select_open+0x1a>
      return FALSE;
80008d12:	30 08       	mov	r8,0
80008d14:	ef 48 ff fc 	st.w	r7[-4],r8
80008d18:	c0 f8       	rjmp	80008d36 <fat_check_mount_select_open+0x36>
   if( !fat_check_select() )
80008d1a:	f0 1f 00 0c 	mcall	80008d48 <fat_check_mount_select_open+0x48>
80008d1e:	18 98       	mov	r8,r12
80008d20:	58 08       	cp.w	r8,0
80008d22:	c0 51       	brne	80008d2c <fat_check_mount_select_open+0x2c>
      return FALSE;
80008d24:	30 08       	mov	r8,0
80008d26:	ef 48 ff fc 	st.w	r7[-4],r8
80008d2a:	c0 68       	rjmp	80008d36 <fat_check_mount_select_open+0x36>
   return fat_check_open();
80008d2c:	f0 1f 00 08 	mcall	80008d4c <fat_check_mount_select_open+0x4c>
80008d30:	18 98       	mov	r8,r12
80008d32:	ef 48 ff fc 	st.w	r7[-4],r8
80008d36:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008d3a:	10 9c       	mov	r12,r8
80008d3c:	2f fd       	sub	sp,-4
80008d3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008d42:	00 00       	add	r0,r0
80008d44:	80 00       	ld.sh	r0,r0[0x0]
80008d46:	8b 44       	st.w	r5[0x10],r4
80008d48:	80 00       	ld.sh	r0,r0[0x0]
80008d4a:	8c 3c       	ld.sh	r12,r6[0x6]
80008d4c:	80 00       	ld.sh	r0,r0[0x0]
80008d4e:	8c 04       	ld.sh	r4,r6[0x0]

80008d50 <fat_check_mount_select>:
//!
//! @return    TRUE  partition mounted and a file is selected
//! @return    FALSE otherwise
//!
Bool  fat_check_mount_select( void )
{
80008d50:	eb cd 40 80 	pushm	r7,lr
80008d54:	1a 97       	mov	r7,sp
80008d56:	20 1d       	sub	sp,4
   if( !fat_check_mount() )
80008d58:	f0 1f 00 0a 	mcall	80008d80 <fat_check_mount_select+0x30>
80008d5c:	18 98       	mov	r8,r12
80008d5e:	58 08       	cp.w	r8,0
80008d60:	c0 51       	brne	80008d6a <fat_check_mount_select+0x1a>
      return FALSE;
80008d62:	30 08       	mov	r8,0
80008d64:	ef 48 ff fc 	st.w	r7[-4],r8
80008d68:	c0 68       	rjmp	80008d74 <fat_check_mount_select+0x24>
   return fat_check_select();
80008d6a:	f0 1f 00 07 	mcall	80008d84 <fat_check_mount_select+0x34>
80008d6e:	18 98       	mov	r8,r12
80008d70:	ef 48 ff fc 	st.w	r7[-4],r8
80008d74:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008d78:	10 9c       	mov	r12,r8
80008d7a:	2f fd       	sub	sp,-4
80008d7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008d80:	80 00       	ld.sh	r0,r0[0x0]
80008d82:	8b 44       	st.w	r5[0x10],r4
80008d84:	80 00       	ld.sh	r0,r0[0x0]
80008d86:	8c 3c       	ld.sh	r12,r6[0x6]

80008d88 <fat_check_is_file>:
//!
//! @return    TRUE  It is a file and not a directory
//! @return    FALSE otherwise
//!
Bool  fat_check_is_file( void )
{
80008d88:	eb cd 40 80 	pushm	r7,lr
80008d8c:	1a 97       	mov	r7,sp
80008d8e:	20 1d       	sub	sp,4
   if( Fat_is_not_a_file )
80008d90:	48 d8       	lddpc	r8,80008dc4 <fat_check_is_file+0x3c>
80008d92:	11 a8       	ld.ub	r8,r8[0x2]
80008d94:	e2 18 00 10 	andl	r8,0x10,COH
80008d98:	c0 61       	brne	80008da4 <fat_check_is_file+0x1c>
80008d9a:	48 b8       	lddpc	r8,80008dc4 <fat_check_is_file+0x3c>
80008d9c:	11 a8       	ld.ub	r8,r8[0x2]
80008d9e:	e2 18 00 08 	andl	r8,0x8,COH
80008da2:	c0 80       	breq	80008db2 <fat_check_is_file+0x2a>
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80008da4:	48 99       	lddpc	r9,80008dc8 <fat_check_is_file+0x40>
80008da6:	31 38       	mov	r8,19
80008da8:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
80008daa:	30 08       	mov	r8,0
80008dac:	ef 48 ff fc 	st.w	r7[-4],r8
80008db0:	c0 48       	rjmp	80008db8 <fat_check_is_file+0x30>
   }
   return TRUE;
80008db2:	30 18       	mov	r8,1
80008db4:	ef 48 ff fc 	st.w	r7[-4],r8
80008db8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80008dbc:	10 9c       	mov	r12,r8
80008dbe:	2f fd       	sub	sp,-4
80008dc0:	e3 cd 80 80 	ldm	sp++,r7,pc
80008dc4:	00 00       	add	r0,r0
80008dc6:	0b 1c       	ld.sh	r12,r5++
80008dc8:	00 00       	add	r0,r0
80008dca:	0e 40       	or	r0,r7

80008dcc <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list readed or cleared (unit 512B)
//! @endverbatim
//!
Bool  fat_cluster_list( U8 opt_action, Bool b_for_file )
{
80008dcc:	eb cd 40 80 	pushm	r7,lr
80008dd0:	1a 97       	mov	r7,sp
80008dd2:	20 5d       	sub	sp,20
80008dd4:	18 98       	mov	r8,r12
80008dd6:	16 99       	mov	r9,r11
80008dd8:	ef 68 ff f4 	st.b	r7[-12],r8
80008ddc:	12 98       	mov	r8,r9
80008dde:	ef 68 ff f0 	st.b	r7[-16],r8
   _MEM_TYPE_FAST_ U32 u32_tmp;
   _MEM_TYPE_FAST_ U8 u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80008de2:	fe f9 04 8a 	ld.w	r9,pc[1162]
80008de6:	30 88       	mov	r8,8
80008de8:	b2 88       	st.b	r9[0x0],r8

   if(  Is_fat32
80008dea:	fe f8 04 86 	ld.w	r8,pc[1158]
80008dee:	11 89       	ld.ub	r9,r8[0x0]
80008df0:	30 38       	mov	r8,3
80008df2:	f0 09 18 00 	cp.b	r9,r8
80008df6:	c1 21       	brne	80008e1a <fat_cluster_list+0x4e>
80008df8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008dfc:	30 38       	mov	r8,3
80008dfe:	f0 09 18 00 	cp.b	r9,r8
80008e02:	c0 c1       	brne	80008e1a <fat_cluster_list+0x4e>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80008e04:	3f fc       	mov	r12,-1
80008e06:	f0 1f 01 1c 	mcall	80009274 <fat_cluster_list+0x4a8>
80008e0a:	18 98       	mov	r8,r12
80008e0c:	58 08       	cp.w	r8,0
80008e0e:	c0 61       	brne	80008e1a <fat_cluster_list+0x4e>
         return FALSE;
80008e10:	30 08       	mov	r8,0
80008e12:	ef 48 ff ec 	st.w	r7[-20],r8
80008e16:	e0 8f 02 24 	bral	8000925e <fat_cluster_list+0x492>
#else
      return FALSE;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80008e1a:	fe f8 04 5e 	ld.w	r8,pc[1118]
80008e1e:	70 08       	ld.w	r8,r8[0x0]
80008e20:	58 08       	cp.w	r8,0
80008e22:	c5 d1       	brne	80008edc <fat_cluster_list+0x110>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80008e24:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008e28:	30 38       	mov	r8,3
80008e2a:	f0 09 18 00 	cp.b	r9,r8
80008e2e:	c0 61       	brne	80008e3a <fat_cluster_list+0x6e>
         return FALSE;           // Impossible to erase ROOT DIR
80008e30:	30 08       	mov	r8,0
80008e32:	ef 48 ff ec 	st.w	r7[-20],r8
80008e36:	e0 8f 02 14 	bral	8000925e <fat_cluster_list+0x492>

      if ( Is_fat12 || Is_fat16 )
80008e3a:	fe f8 04 36 	ld.w	r8,pc[1078]
80008e3e:	11 89       	ld.ub	r9,r8[0x0]
80008e40:	30 18       	mov	r8,1
80008e42:	f0 09 18 00 	cp.b	r9,r8
80008e46:	c0 80       	breq	80008e56 <fat_cluster_list+0x8a>
80008e48:	fe f8 04 28 	ld.w	r8,pc[1064]
80008e4c:	11 89       	ld.ub	r9,r8[0x0]
80008e4e:	30 28       	mov	r8,2
80008e50:	f0 09 18 00 	cp.b	r9,r8
80008e54:	c3 61       	brne	80008ec0 <fat_cluster_list+0xf4>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80008e56:	fe f8 04 22 	ld.w	r8,pc[1058]
80008e5a:	70 19       	ld.w	r9,r8[0x4]
80008e5c:	fe f8 04 20 	ld.w	r8,pc[1056]
80008e60:	f1 08 00 16 	ld.sh	r8,r8[22]
80008e64:	5c 78       	castu.h	r8
80008e66:	10 39       	cp.w	r9,r8
80008e68:	c2 32       	brcc	80008eae <fat_cluster_list+0xe2>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80008e6a:	fe f8 04 12 	ld.w	r8,pc[1042]
80008e6e:	70 39       	ld.w	r9,r8[0xc]
80008e70:	fe f8 04 0c 	ld.w	r8,pc[1036]
80008e74:	f1 08 00 14 	ld.sh	r8,r8[20]
80008e78:	5c 78       	castu.h	r8
80008e7a:	10 09       	add	r9,r8
80008e7c:	fe f8 03 fc 	ld.w	r8,pc[1020]
80008e80:	70 18       	ld.w	r8,r8[0x4]
80008e82:	10 09       	add	r9,r8
80008e84:	fe f8 03 f4 	ld.w	r8,pc[1012]
80008e88:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80008e8a:	fe f8 03 f2 	ld.w	r8,pc[1010]
80008e8e:	f1 08 00 16 	ld.sh	r8,r8[22]
80008e92:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80008e96:	fe f8 03 e2 	ld.w	r8,pc[994]
80008e9a:	70 18       	ld.w	r8,r8[0x4]
80008e9c:	10 19       	sub	r9,r8
80008e9e:	fe f8 03 da 	ld.w	r8,pc[986]
80008ea2:	91 19       	st.w	r8[0x4],r9
            return TRUE;
80008ea4:	30 18       	mov	r8,1
80008ea6:	ef 48 ff ec 	st.w	r7[-20],r8
80008eaa:	e0 8f 01 da 	bral	8000925e <fat_cluster_list+0x492>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80008eae:	fe f9 03 be 	ld.w	r9,pc[958]
80008eb2:	31 a8       	mov	r8,26
80008eb4:	b2 88       	st.b	r9[0x0],r8
            return FALSE;        // Position outside the root area
80008eb6:	30 08       	mov	r8,0
80008eb8:	ef 48 ff ec 	st.w	r7[-20],r8
80008ebc:	e0 8f 01 d1 	bral	8000925e <fat_cluster_list+0x492>
         }
      }
      if ( Is_fat32 )
80008ec0:	fe f8 03 b0 	ld.w	r8,pc[944]
80008ec4:	11 89       	ld.ub	r9,r8[0x0]
80008ec6:	30 38       	mov	r8,3
80008ec8:	f0 09 18 00 	cp.b	r9,r8
80008ecc:	c0 e1       	brne	80008ee8 <fat_cluster_list+0x11c>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80008ece:	fe f8 03 ae 	ld.w	r8,pc[942]
80008ed2:	70 59       	ld.w	r9,r8[0x14]
80008ed4:	fe f8 03 ac 	ld.w	r8,pc[940]
80008ed8:	91 09       	st.w	r8[0x0],r9
80008eda:	c0 78       	rjmp	80008ee8 <fat_cluster_list+0x11c>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80008edc:	fe f8 03 9c 	ld.w	r8,pc[924]
80008ee0:	70 09       	ld.w	r9,r8[0x0]
80008ee2:	fe f8 03 9e 	ld.w	r8,pc[926]
80008ee6:	91 09       	st.w	r8[0x0],r9
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80008ee8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008eec:	30 38       	mov	r8,3
80008eee:	f0 09 18 00 	cp.b	r9,r8
80008ef2:	c0 e0       	breq	80008f0e <fat_cluster_list+0x142>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80008ef4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80008ef8:	10 9c       	mov	r12,r8
80008efa:	f0 1f 00 e3 	mcall	80009284 <fat_cluster_list+0x4b8>
80008efe:	18 98       	mov	r8,r12
80008f00:	58 08       	cp.w	r8,0
80008f02:	c0 a0       	breq	80008f16 <fat_cluster_list+0x14a>
         return TRUE;            // Segment found in cache
80008f04:	30 18       	mov	r8,1
80008f06:	ef 48 ff ec 	st.w	r7[-20],r8
80008f0a:	e0 8f 01 aa 	bral	8000925e <fat_cluster_list+0x492>
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80008f0e:	f0 1f 00 df 	mcall	80009288 <fat_cluster_list+0x4bc>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80008f12:	f0 1f 00 df 	mcall	8000928c <fat_cluster_list+0x4c0>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80008f16:	fe f9 03 62 	ld.w	r9,pc[866]
80008f1a:	3f f8       	mov	r8,-1
80008f1c:	b2 88       	st.b	r9[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80008f1e:	fe f8 03 5a 	ld.w	r8,pc[858]
80008f22:	70 19       	ld.w	r9,r8[0x4]
80008f24:	fe f8 03 58 	ld.w	r8,pc[856]
80008f28:	11 98       	ld.ub	r8,r8[0x1]
80008f2a:	10 39       	cp.w	r9,r8
80008f2c:	e0 82 00 9d 	brhs	80009066 <fat_cluster_list+0x29a>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80008f30:	fe f8 03 50 	ld.w	r8,pc[848]
80008f34:	70 08       	ld.w	r8,r8[0x0]
80008f36:	f0 c9 00 02 	sub	r9,r8,2
80008f3a:	fe f8 03 42 	ld.w	r8,pc[834]
80008f3e:	11 98       	ld.ub	r8,r8[0x1]
80008f40:	b1 39       	mul	r9,r8
80008f42:	fe f8 03 3a 	ld.w	r8,pc[826]
80008f46:	70 38       	ld.w	r8,r8[0xc]
80008f48:	10 09       	add	r9,r8
80008f4a:	fe f8 03 32 	ld.w	r8,pc[818]
80008f4e:	70 48       	ld.w	r8,r8[0x10]
80008f50:	10 09       	add	r9,r8
80008f52:	fe f8 03 26 	ld.w	r8,pc[806]
80008f56:	70 18       	ld.w	r8,r8[0x4]
80008f58:	10 09       	add	r9,r8
80008f5a:	fe f8 03 1e 	ld.w	r8,pc[798]
80008f5e:	91 09       	st.w	r8[0x0],r9
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80008f60:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008f64:	30 28       	mov	r8,2
80008f66:	f0 09 18 00 	cp.b	r9,r8
80008f6a:	c1 71       	brne	80008f98 <fat_cluster_list+0x1cc>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80008f6c:	fe f8 03 10 	ld.w	r8,pc[784]
80008f70:	11 98       	ld.ub	r8,r8[0x1]
80008f72:	10 99       	mov	r9,r8
80008f74:	fe f8 03 04 	ld.w	r8,pc[772]
80008f78:	70 18       	ld.w	r8,r8[0x4]
80008f7a:	10 19       	sub	r9,r8
80008f7c:	fe f8 02 fc 	ld.w	r8,pc[764]
80008f80:	91 19       	st.w	r8[0x4],r9
            fat_cache_clusterlist_update_finish();
80008f82:	f0 1f 00 c4 	mcall	80009290 <fat_cluster_list+0x4c4>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80008f86:	fe f9 02 f2 	ld.w	r9,pc[754]
80008f8a:	30 18       	mov	r8,1
80008f8c:	93 18       	st.w	r9[0x4],r8
            return TRUE;
80008f8e:	30 18       	mov	r8,1
80008f90:	ef 48 ff ec 	st.w	r7[-20],r8
80008f94:	e0 8f 01 65 	bral	8000925e <fat_cluster_list+0x492>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80008f98:	fe f8 02 e4 	ld.w	r8,pc[740]
80008f9c:	11 98       	ld.ub	r8,r8[0x1]
80008f9e:	10 99       	mov	r9,r8
80008fa0:	fe f8 02 d8 	ld.w	r8,pc[728]
80008fa4:	2f c8       	sub	r8,-4
80008fa6:	2f d8       	sub	r8,-3
80008fa8:	11 88       	ld.ub	r8,r8[0x0]
80008faa:	f2 08 01 08 	sub	r8,r9,r8
80008fae:	10 99       	mov	r9,r8
80008fb0:	fe f8 02 c8 	ld.w	r8,pc[712]
80008fb4:	91 19       	st.w	r8[0x4],r9

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80008fb6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008fba:	30 18       	mov	r8,1
80008fbc:	f0 09 18 00 	cp.b	r9,r8
80008fc0:	c5 31       	brne	80009066 <fat_cluster_list+0x29a>
80008fc2:	fe f8 02 ae 	ld.w	r8,pc[686]
80008fc6:	11 89       	ld.ub	r9,r8[0x0]
80008fc8:	30 18       	mov	r8,1
80008fca:	f0 09 18 00 	cp.b	r9,r8
80008fce:	c4 c0       	breq	80009066 <fat_cluster_list+0x29a>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
80008fd0:	fe f8 02 b0 	ld.w	r8,pc[688]
80008fd4:	70 08       	ld.w	r8,r8[0x0]
80008fd6:	ef 48 ff f8 	st.w	r7[-8],r8
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80008fda:	30 0c       	mov	r12,0
80008fdc:	f0 1f 00 ae 	mcall	80009294 <fat_cluster_list+0x4c8>
80008fe0:	18 98       	mov	r8,r12
80008fe2:	58 08       	cp.w	r8,0
80008fe4:	c0 61       	brne	80008ff0 <fat_cluster_list+0x224>
               return FALSE;
80008fe6:	30 08       	mov	r8,0
80008fe8:	ef 48 ff ec 	st.w	r7[-20],r8
80008fec:	e0 8f 01 39 	bral	8000925e <fat_cluster_list+0x492>
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80008ff0:	fe f8 02 90 	ld.w	r8,pc[656]
80008ff4:	70 08       	ld.w	r8,r8[0x0]
80008ff6:	f0 c9 ff ff 	sub	r9,r8,-1
80008ffa:	fe f8 02 86 	ld.w	r8,pc[646]
80008ffe:	91 09       	st.w	r8[0x0],r9
80009000:	fe f8 02 80 	ld.w	r8,pc[640]
80009004:	70 09       	ld.w	r9,r8[0x0]
80009006:	fe f8 02 7a 	ld.w	r8,pc[634]
8000900a:	70 18       	ld.w	r8,r8[0x4]
8000900c:	10 39       	cp.w	r9,r8
8000900e:	c2 30       	breq	80009054 <fat_cluster_list+0x288>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80009010:	fe f8 02 70 	ld.w	r8,pc[624]
80009014:	70 08       	ld.w	r8,r8[0x0]
80009016:	f0 c9 00 01 	sub	r9,r8,1
8000901a:	fe f8 02 66 	ld.w	r8,pc[614]
8000901e:	91 09       	st.w	r8[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
80009020:	fe f8 02 60 	ld.w	r8,pc[608]
80009024:	70 09       	ld.w	r9,r8[0x0]
80009026:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000902a:	f2 08 01 08 	sub	r8,r9,r8
8000902e:	ef 48 ff f8 	st.w	r7[-8],r8
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80009032:	fe f8 02 46 	ld.w	r8,pc[582]
80009036:	70 1a       	ld.w	r10,r8[0x4]
80009038:	fe f8 02 44 	ld.w	r8,pc[580]
8000903c:	11 98       	ld.ub	r8,r8[0x1]
8000903e:	10 99       	mov	r9,r8
80009040:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009044:	f2 08 02 48 	mul	r8,r9,r8
80009048:	f4 08 00 09 	add	r9,r10,r8
8000904c:	fe f8 02 2c 	ld.w	r8,pc[556]
80009050:	91 19       	st.w	r8[0x4],r9
80009052:	c0 a8       	rjmp	80009066 <fat_cluster_list+0x29a>
                  break;
               }
               if( !fat_cluster_readnext() )
80009054:	f0 1f 00 91 	mcall	80009298 <fat_cluster_list+0x4cc>
80009058:	18 98       	mov	r8,r12
8000905a:	58 08       	cp.w	r8,0
8000905c:	cc a1       	brne	80008ff0 <fat_cluster_list+0x224>
                  return FALSE;
8000905e:	30 08       	mov	r8,0
80009060:	ef 48 ff ec 	st.w	r7[-20],r8
80009064:	cf d8       	rjmp	8000925e <fat_cluster_list+0x492>
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80009066:	30 0c       	mov	r12,0
80009068:	f0 1f 00 8b 	mcall	80009294 <fat_cluster_list+0x4c8>
8000906c:	18 98       	mov	r8,r12
8000906e:	58 08       	cp.w	r8,0
80009070:	c0 51       	brne	8000907a <fat_cluster_list+0x2ae>
         return FALSE;
80009072:	30 08       	mov	r8,0
80009074:	ef 48 ff ec 	st.w	r7[-20],r8
80009078:	cf 38       	rjmp	8000925e <fat_cluster_list+0x492>

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
8000907a:	f0 1f 00 89 	mcall	8000929c <fat_cluster_list+0x4d0>
8000907e:	18 98       	mov	r8,r12
80009080:	ef 68 ff ff 	st.b	r7[-1],r8
      if (FS_CLUS_BAD == u8_cluster_status)
80009084:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009088:	30 18       	mov	r8,1
8000908a:	f0 09 18 00 	cp.b	r9,r8
8000908e:	c0 51       	brne	80009098 <fat_cluster_list+0x2cc>
         return FALSE; // error, end of cluster list
80009090:	30 08       	mov	r8,0
80009092:	ef 48 ff ec 	st.w	r7[-20],r8
80009096:	ce 48       	rjmp	8000925e <fat_cluster_list+0x492>

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80009098:	4f 88       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
8000909a:	11 89       	ld.ub	r9,r8[0x0]
8000909c:	3f f8       	mov	r8,-1
8000909e:	f0 09 18 00 	cp.b	r9,r8
800090a2:	e0 81 00 7e 	brne	8000919e <fat_cluster_list+0x3d2>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
800090a6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800090aa:	30 28       	mov	r8,2
800090ac:	f0 09 18 00 	cp.b	r9,r8
800090b0:	c4 c1       	brne	80009148 <fat_cluster_list+0x37c>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
800090b2:	4f 28       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
800090b4:	70 18       	ld.w	r8,r8[0x4]
800090b6:	ef 48 ff f8 	st.w	r7[-8],r8

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
800090ba:	4f a8       	lddpc	r8,800092a0 <fat_cluster_list+0x4d4>
800090bc:	11 88       	ld.ub	r8,r8[0x0]
800090be:	10 9b       	mov	r11,r8
800090c0:	4f 88       	lddpc	r8,800092a0 <fat_cluster_list+0x4d4>
800090c2:	11 88       	ld.ub	r8,r8[0x0]
800090c4:	10 99       	mov	r9,r8
800090c6:	4f 8a       	lddpc	r10,800092a4 <fat_cluster_list+0x4d8>
800090c8:	12 98       	mov	r8,r9
800090ca:	a3 68       	lsl	r8,0x2
800090cc:	12 08       	add	r8,r9
800090ce:	a3 68       	lsl	r8,0x2
800090d0:	f4 08 00 08 	add	r8,r10,r8
800090d4:	2f 88       	sub	r8,-8
800090d6:	70 09       	ld.w	r9,r8[0x0]
800090d8:	4e 88       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
800090da:	70 18       	ld.w	r8,r8[0x4]
800090dc:	f2 08 01 0a 	sub	r10,r9,r8
800090e0:	4f 19       	lddpc	r9,800092a4 <fat_cluster_list+0x4d8>
800090e2:	16 98       	mov	r8,r11
800090e4:	a3 68       	lsl	r8,0x2
800090e6:	16 08       	add	r8,r11
800090e8:	a3 68       	lsl	r8,0x2
800090ea:	f2 08 00 08 	add	r8,r9,r8
800090ee:	2f 88       	sub	r8,-8
800090f0:	91 0a       	st.w	r8[0x0],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800090f2:	4e 48       	lddpc	r8,80009280 <fat_cluster_list+0x4b4>
800090f4:	70 08       	ld.w	r8,r8[0x0]
800090f6:	f0 c9 00 02 	sub	r9,r8,2
800090fa:	4e 18       	lddpc	r8,8000927c <fat_cluster_list+0x4b0>
800090fc:	11 98       	ld.ub	r8,r8[0x1]
800090fe:	b1 39       	mul	r9,r8
80009100:	4d f8       	lddpc	r8,8000927c <fat_cluster_list+0x4b0>
80009102:	70 38       	ld.w	r8,r8[0xc]
80009104:	10 09       	add	r9,r8
80009106:	4d e8       	lddpc	r8,8000927c <fat_cluster_list+0x4b0>
80009108:	70 48       	ld.w	r8,r8[0x10]
8000910a:	10 09       	add	r9,r8
8000910c:	4d b8       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
8000910e:	91 09       	st.w	r8[0x0],r9
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80009110:	4d b8       	lddpc	r8,8000927c <fat_cluster_list+0x4b0>
80009112:	11 98       	ld.ub	r8,r8[0x1]
80009114:	10 99       	mov	r9,r8
80009116:	4d 98       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
80009118:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
8000911a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000911e:	30 38       	mov	r8,3
80009120:	f0 09 18 00 	cp.b	r9,r8
80009124:	c0 30       	breq	8000912a <fat_cluster_list+0x35e>
               fat_cache_clusterlist_update_finish();
80009126:	f0 1f 00 5b 	mcall	80009290 <fat_cluster_list+0x4c4>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
8000912a:	4d 68       	lddpc	r8,80009280 <fat_cluster_list+0x4b4>
8000912c:	70 09       	ld.w	r9,r8[0x0]
8000912e:	4d 38       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
80009130:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
80009132:	4d 29       	lddpc	r9,80009278 <fat_cluster_list+0x4ac>
80009134:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009138:	93 18       	st.w	r9[0x4],r8
            fs_g_status = FS_ERR_OUT_LIST;
8000913a:	4c d9       	lddpc	r9,8000926c <fat_cluster_list+0x4a0>
8000913c:	31 a8       	mov	r8,26
8000913e:	b2 88       	st.b	r9[0x0],r8
            return FALSE;
80009140:	30 08       	mov	r8,0
80009142:	ef 48 ff ec 	st.w	r7[-20],r8
80009146:	c8 c8       	rjmp	8000925e <fat_cluster_list+0x492>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80009148:	4c c8       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
8000914a:	70 19       	ld.w	r9,r8[0x4]
8000914c:	4c c8       	lddpc	r8,8000927c <fat_cluster_list+0x4b0>
8000914e:	11 98       	ld.ub	r8,r8[0x1]
80009150:	10 19       	sub	r9,r8
80009152:	4c a8       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
80009154:	91 19       	st.w	r8[0x4],r9
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80009156:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000915a:	30 38       	mov	r8,3
8000915c:	f0 09 18 00 	cp.b	r9,r8
80009160:	e0 81 00 79 	brne	80009252 <fat_cluster_list+0x486>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
80009164:	4c 58       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
80009166:	70 18       	ld.w	r8,r8[0x4]
80009168:	58 08       	cp.w	r8,0
8000916a:	c7 41       	brne	80009252 <fat_cluster_list+0x486>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
8000916c:	4c 58       	lddpc	r8,80009280 <fat_cluster_list+0x4b4>
8000916e:	70 19       	ld.w	r9,r8[0x4]
80009170:	4c 28       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
80009172:	91 09       	st.w	r8[0x0],r9
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80009174:	4c 39       	lddpc	r9,80009280 <fat_cluster_list+0x4b4>
80009176:	e0 68 ff ff 	mov	r8,65535
8000917a:	ea 18 0f ff 	orh	r8,0xfff
8000917e:	93 18       	st.w	r9[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80009180:	30 1c       	mov	r12,1
80009182:	f0 1f 00 45 	mcall	80009294 <fat_cluster_list+0x4c8>
80009186:	18 98       	mov	r8,r12
80009188:	58 08       	cp.w	r8,0
8000918a:	c0 51       	brne	80009194 <fat_cluster_list+0x3c8>
                  return FALSE;
8000918c:	30 08       	mov	r8,0
8000918e:	ef 48 ff ec 	st.w	r7[-20],r8
80009192:	c6 68       	rjmp	8000925e <fat_cluster_list+0x492>
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Resotre the next cluster
80009194:	4b 98       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
80009196:	70 09       	ld.w	r9,r8[0x0]
80009198:	4b a8       	lddpc	r8,80009280 <fat_cluster_list+0x4b4>
8000919a:	91 19       	st.w	r8[0x4],r9
8000919c:	c5 b8       	rjmp	80009252 <fat_cluster_list+0x486>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
8000919e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800091a2:	30 18       	mov	r8,1
800091a4:	f0 09 18 00 	cp.b	r9,r8
800091a8:	c0 f1       	brne	800091c6 <fat_cluster_list+0x3fa>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
800091aa:	4b 68       	lddpc	r8,80009280 <fat_cluster_list+0x4b4>
800091ac:	70 08       	ld.w	r8,r8[0x0]
800091ae:	f0 c9 ff ff 	sub	r9,r8,-1
800091b2:	4b 48       	lddpc	r8,80009280 <fat_cluster_list+0x4b4>
800091b4:	70 18       	ld.w	r8,r8[0x4]
800091b6:	10 39       	cp.w	r9,r8
800091b8:	c0 70       	breq	800091c6 <fat_cluster_list+0x3fa>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
800091ba:	f0 1f 00 36 	mcall	80009290 <fat_cluster_list+0x4c4>
               return TRUE;                              // End of segment
800091be:	30 18       	mov	r8,1
800091c0:	ef 48 ff ec 	st.w	r7[-20],r8
800091c4:	c4 d8       	rjmp	8000925e <fat_cluster_list+0x492>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
800091c6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800091ca:	30 38       	mov	r8,3
800091cc:	f0 09 18 00 	cp.b	r9,r8
800091d0:	c2 21       	brne	80009214 <fat_cluster_list+0x448>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
800091d2:	4a c8       	lddpc	r8,80009280 <fat_cluster_list+0x4b4>
800091d4:	70 19       	ld.w	r9,r8[0x4]
800091d6:	4a 98       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
800091d8:	91 09       	st.w	r8[0x0],r9
            fs_g_cluster.u32_val = 0;                    // by default free cluster
800091da:	4a a9       	lddpc	r9,80009280 <fat_cluster_list+0x4b4>
800091dc:	30 08       	mov	r8,0
800091de:	93 18       	st.w	r9[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
800091e0:	4a 68       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
800091e2:	70 19       	ld.w	r9,r8[0x4]
800091e4:	4a 68       	lddpc	r8,8000927c <fat_cluster_list+0x4b0>
800091e6:	11 98       	ld.ub	r8,r8[0x1]
800091e8:	10 39       	cp.w	r9,r8
800091ea:	c0 72       	brcc	800091f8 <fat_cluster_list+0x42c>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
800091ec:	4a 59       	lddpc	r9,80009280 <fat_cluster_list+0x4b4>
800091ee:	e0 68 ff ff 	mov	r8,65535
800091f2:	ea 18 0f ff 	orh	r8,0xfff
800091f6:	93 18       	st.w	r9[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
800091f8:	30 1c       	mov	r12,1
800091fa:	f0 1f 00 27 	mcall	80009294 <fat_cluster_list+0x4c8>
800091fe:	18 98       	mov	r8,r12
80009200:	58 08       	cp.w	r8,0
80009202:	c0 51       	brne	8000920c <fat_cluster_list+0x440>
               return FALSE;
80009204:	30 08       	mov	r8,0
80009206:	ef 48 ff ec 	st.w	r7[-20],r8
8000920a:	c2 a8       	rjmp	8000925e <fat_cluster_list+0x492>
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Resotre the next cluster
8000920c:	49 b8       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
8000920e:	70 09       	ld.w	r9,r8[0x0]
80009210:	49 c8       	lddpc	r8,80009280 <fat_cluster_list+0x4b4>
80009212:	91 19       	st.w	r8[0x4],r9
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80009214:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009218:	30 28       	mov	r8,2
8000921a:	f0 09 18 00 	cp.b	r9,r8
8000921e:	c1 31       	brne	80009244 <fat_cluster_list+0x478>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
80009220:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009224:	30 38       	mov	r8,3
80009226:	f0 09 18 00 	cp.b	r9,r8
8000922a:	c0 71       	brne	80009238 <fat_cluster_list+0x46c>
            {
               return fat_update_fat2();
8000922c:	f0 1f 00 1f 	mcall	800092a8 <fat_cluster_list+0x4dc>
80009230:	18 98       	mov	r8,r12
80009232:	ef 48 ff ec 	st.w	r7[-20],r8
80009236:	c1 48       	rjmp	8000925e <fat_cluster_list+0x492>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80009238:	f0 1f 00 16 	mcall	80009290 <fat_cluster_list+0x4c4>
            return TRUE; // End of segment
8000923c:	30 18       	mov	r8,1
8000923e:	ef 48 ff ec 	st.w	r7[-20],r8
80009242:	c0 e8       	rjmp	8000925e <fat_cluster_list+0x492>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80009244:	48 d8       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
80009246:	70 19       	ld.w	r9,r8[0x4]
80009248:	48 d8       	lddpc	r8,8000927c <fat_cluster_list+0x4b0>
8000924a:	11 98       	ld.ub	r8,r8[0x1]
8000924c:	10 09       	add	r9,r8
8000924e:	48 b8       	lddpc	r8,80009278 <fat_cluster_list+0x4ac>
80009250:	91 19       	st.w	r8[0x4],r9
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80009252:	48 c8       	lddpc	r8,80009280 <fat_cluster_list+0x4b4>
80009254:	70 19       	ld.w	r9,r8[0x4]
80009256:	48 b8       	lddpc	r8,80009280 <fat_cluster_list+0x4b4>
80009258:	91 09       	st.w	r8[0x0],r9
8000925a:	fe 9f fe 62 	bral	80008f1e <fat_cluster_list+0x152>
   }  // End of main loop
8000925e:	ee f8 ff ec 	ld.w	r8,r7[-20]
}
80009262:	10 9c       	mov	r12,r8
80009264:	2f bd       	sub	sp,-20
80009266:	e3 cd 80 80 	ldm	sp++,r7,pc
8000926a:	00 00       	add	r0,r0
8000926c:	00 00       	add	r0,r0
8000926e:	0e 40       	or	r0,r7
80009270:	00 00       	add	r0,r0
80009272:	0e 3c       	cp.w	r12,r7
80009274:	80 00       	ld.sh	r0,r0[0x0]
80009276:	b7 08       	ld.d	r8,r11
80009278:	00 00       	add	r0,r0
8000927a:	10 18       	sub	r8,r8
8000927c:	00 00       	add	r0,r0
8000927e:	0d 58       	ld.sh	r8,--r6
80009280:	00 00       	add	r0,r0
80009282:	10 10       	sub	r0,r8
80009284:	80 00       	ld.sh	r0,r0[0x0]
80009286:	9c 20       	ld.sh	r0,lr[0x4]
80009288:	80 00       	ld.sh	r0,r0[0x0]
8000928a:	98 f4       	ld.uh	r4,r12[0xe]
8000928c:	80 00       	ld.sh	r0,r0[0x0]
8000928e:	c7 54       	brge	80009378 <fat_cluster_val+0xcc>
80009290:	80 00       	ld.sh	r0,r0[0x0]
80009292:	9a 4c       	ld.sh	r12,sp[0x8]
80009294:	80 00       	ld.sh	r0,r0[0x0]
80009296:	92 ac       	ld.uh	r12,r9[0x4]
80009298:	80 00       	ld.sh	r0,r0[0x0]
8000929a:	97 24       	st.w	r11[0x8],r4
8000929c:	80 00       	ld.sh	r0,r0[0x0]
8000929e:	98 20       	ld.sh	r0,r12[0x4]
800092a0:	00 00       	add	r0,r0
800092a2:	0e 42       	or	r2,r7
800092a4:	00 00       	add	r0,r0
800092a6:	0b 30       	ld.ub	r0,r5++
800092a8:	80 00       	ld.sh	r0,r0[0x0]
800092aa:	c7 74       	brge	80009398 <fat_cluster_val+0xec>

800092ac <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
Bool  fat_cluster_val( Bool b_mode )
{
800092ac:	eb cd 40 80 	pushm	r7,lr
800092b0:	1a 97       	mov	r7,sp
800092b2:	20 4d       	sub	sp,16
800092b4:	18 98       	mov	r8,r12
800092b6:	ef 68 ff f4 	st.b	r7[-12],r8
#define  u8_data3    (LSB(u16_offset_fat)) // Manual overlay
#define  u8_data4    (MSB(u16_offset_fat)) // Manual overlay
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
800092ba:	fe f8 04 42 	ld.w	r8,pc[1090]
800092be:	11 89       	ld.ub	r9,r8[0x0]
800092c0:	30 38       	mov	r8,3
800092c2:	f0 09 18 00 	cp.b	r9,r8
800092c6:	c1 51       	brne	800092f0 <fat_cluster_val+0x44>
   {
      // FAT 32
      // Optimization of -> u16_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u16_offset_fat = fs_g_cluster.pos / 128
      u16_offset_fat = fs_g_cluster.u32_pos >> (8-1);
800092c8:	fe f8 04 38 	ld.w	r8,pc[1080]
800092cc:	70 08       	ld.w	r8,r8[0x0]
800092ce:	a7 98       	lsr	r8,0x7
800092d0:	5c 88       	casts.h	r8
800092d2:	ef 58 ff f8 	st.h	r7[-8],r8

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((U16)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
800092d6:	fe f8 04 2a 	ld.w	r8,pc[1066]
800092da:	2f d8       	sub	r8,-3
800092dc:	11 88       	ld.ub	r8,r8[0x0]
800092de:	5c 88       	casts.h	r8
800092e0:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
800092e4:	a3 68       	lsl	r8,0x2
800092e6:	5c 88       	casts.h	r8
800092e8:	fe f9 04 1c 	ld.w	r9,pc[1052]
800092ec:	b2 08       	st.h	r9[0x0],r8
800092ee:	c4 08       	rjmp	8000936e <fat_cluster_val+0xc2>
   }
   else if ( Is_fat16 )
800092f0:	fe f8 04 0c 	ld.w	r8,pc[1036]
800092f4:	11 89       	ld.ub	r9,r8[0x0]
800092f6:	30 28       	mov	r8,2
800092f8:	f0 09 18 00 	cp.b	r9,r8
800092fc:	c1 11       	brne	8000931e <fat_cluster_val+0x72>
   {
      // FAT 16
      // Optimization of -> u16_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u16_offset_fat = LSB1(fs_g_cluster.u32_pos);
800092fe:	fe f8 04 02 	ld.w	r8,pc[1026]
80009302:	2f e8       	sub	r8,-2
80009304:	11 88       	ld.ub	r8,r8[0x0]
80009306:	ef 58 ff f8 	st.h	r7[-8],r8
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((U16)LSB0(fs_g_cluster.u32_pos)) <<1;
8000930a:	fe f8 03 f6 	ld.w	r8,pc[1014]
8000930e:	2f d8       	sub	r8,-3
80009310:	11 88       	ld.ub	r8,r8[0x0]
80009312:	a1 78       	lsl	r8,0x1
80009314:	5c 88       	casts.h	r8
80009316:	fe f9 03 ee 	ld.w	r9,pc[1006]
8000931a:	b2 08       	st.h	r9[0x0],r8
8000931c:	c2 98       	rjmp	8000936e <fat_cluster_val+0xc2>
   }
   else if ( Is_fat12 )
8000931e:	fe f8 03 de 	ld.w	r8,pc[990]
80009322:	11 89       	ld.ub	r9,r8[0x0]
80009324:	30 18       	mov	r8,1
80009326:	f0 09 18 00 	cp.b	r9,r8
8000932a:	c2 21       	brne	8000936e <fat_cluster_val+0xc2>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (U16)fs_g_cluster.u32_pos + ((U16)fs_g_cluster.u32_pos >>1);
8000932c:	fe f8 03 d4 	ld.w	r8,pc[980]
80009330:	70 08       	ld.w	r8,r8[0x0]
80009332:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80009336:	fe f8 03 ca 	ld.w	r8,pc[970]
8000933a:	70 08       	ld.w	r8,r8[0x0]
8000933c:	5c 88       	casts.h	r8
8000933e:	5c 78       	castu.h	r8
80009340:	a1 98       	lsr	r8,0x1
80009342:	5c 88       	casts.h	r8
80009344:	f2 08 00 08 	add	r8,r9,r8
80009348:	5c 88       	casts.h	r8
8000934a:	fe f9 03 ba 	ld.w	r9,pc[954]
8000934e:	b2 08       	st.h	r9[0x0],r8
      // Optimization of -> u16_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u16_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
80009350:	fe f8 03 b4 	ld.w	r8,pc[948]
80009354:	11 88       	ld.ub	r8,r8[0x0]
80009356:	a1 98       	lsr	r8,0x1
80009358:	5c 58       	castu.b	r8
8000935a:	ef 58 ff f8 	st.h	r7[-8],r8
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
8000935e:	fe f9 03 a6 	ld.w	r9,pc[934]
80009362:	fe f8 03 a2 	ld.w	r8,pc[930]
80009366:	11 88       	ld.ub	r8,r8[0x0]
80009368:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000936c:	b2 88       	st.b	r9[0x0],r8
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
8000936e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009372:	30 08       	mov	r8,0
80009374:	f0 09 18 00 	cp.b	r9,r8
80009378:	c3 d0       	breq	800093f2 <fat_cluster_val+0x146>
   {
      // Update information about FAT modification
      if( fs_g_u16_first_mod_fat > u16_offset_fat )
8000937a:	fe f8 03 8e 	ld.w	r8,pc[910]
8000937e:	90 09       	ld.sh	r9,r8[0x0]
80009380:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80009384:	f0 09 19 00 	cp.h	r9,r8
80009388:	e0 88 00 07 	brls	80009396 <fat_cluster_val+0xea>
      {
         fs_g_u16_first_mod_fat = u16_offset_fat;
8000938c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80009390:	fe f9 03 78 	ld.w	r9,pc[888]
80009394:	b2 08       	st.h	r9[0x0],r8
      }
      if( fs_g_u16_last_mod_fat < u16_offset_fat )
80009396:	fe f8 03 76 	ld.w	r8,pc[886]
8000939a:	90 09       	ld.sh	r9,r8[0x0]
8000939c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800093a0:	f0 09 19 00 	cp.h	r9,r8
800093a4:	c0 62       	brcc	800093b0 <fat_cluster_val+0x104>
      {
         fs_g_u16_last_mod_fat = u16_offset_fat;
800093a6:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800093aa:	fe f9 03 62 	ld.w	r9,pc[866]
800093ae:	b2 08       	st.h	r9[0x0],r8
      }
      if ( Is_fat12 )
800093b0:	fe f8 03 4c 	ld.w	r8,pc[844]
800093b4:	11 89       	ld.ub	r9,r8[0x0]
800093b6:	30 18       	mov	r8,1
800093b8:	f0 09 18 00 	cp.b	r9,r8
800093bc:	c1 b1       	brne	800093f2 <fat_cluster_val+0x146>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800093be:	fe f8 03 46 	ld.w	r8,pc[838]
800093c2:	90 09       	ld.sh	r9,r8[0x0]
800093c4:	e0 68 01 ff 	mov	r8,511
800093c8:	f0 09 19 00 	cp.h	r9,r8
800093cc:	c1 31       	brne	800093f2 <fat_cluster_val+0x146>
         {  // Count the next FAT sector
            if( fs_g_u16_last_mod_fat < (u16_offset_fat+1) )
800093ce:	fe f8 03 3e 	ld.w	r8,pc[830]
800093d2:	90 08       	ld.sh	r8,r8[0x0]
800093d4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800093d8:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800093dc:	5c 78       	castu.h	r8
800093de:	2f f8       	sub	r8,-1
800093e0:	10 39       	cp.w	r9,r8
800093e2:	c0 84       	brge	800093f2 <fat_cluster_val+0x146>
            {
               fs_g_u16_last_mod_fat = (u16_offset_fat+1);
800093e4:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800093e8:	2f f8       	sub	r8,-1
800093ea:	5c 88       	casts.h	r8
800093ec:	fe f9 03 20 	ld.w	r9,pc[800]
800093f0:	b2 08       	st.h	r9[0x0],r8
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u16_offset_fat;   // Computed logical sector address
800093f2:	fe f8 03 1e 	ld.w	r8,pc[798]
800093f6:	70 39       	ld.w	r9,r8[0xc]
800093f8:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800093fc:	5c 78       	castu.h	r8
800093fe:	10 09       	add	r9,r8
80009400:	fe f8 03 14 	ld.w	r8,pc[788]
80009404:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( TRUE ))
80009406:	30 1c       	mov	r12,1
80009408:	f0 1f 00 c4 	mcall	80009718 <fat_cluster_val+0x46c>
8000940c:	18 98       	mov	r8,r12
8000940e:	58 08       	cp.w	r8,0
80009410:	c0 61       	brne	8000941c <fat_cluster_val+0x170>
      return FALSE;
80009412:	30 08       	mov	r8,0
80009414:	ef 48 ff f0 	st.w	r7[-16],r8
80009418:	e0 8f 01 6b 	bral	800096ee <fat_cluster_val+0x442>

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
8000941c:	fe f8 02 e8 	ld.w	r8,pc[744]
80009420:	90 08       	ld.sh	r8,r8[0x0]
80009422:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80009426:	fe f8 02 f6 	ld.w	r8,pc[758]
8000942a:	f2 08 00 08 	add	r8,r9,r8
8000942e:	ef 48 ff fc 	st.w	r7[-4],r8
   u8_data1 = u8_ptr_cluster[0];
80009432:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009436:	11 88       	ld.ub	r8,r8[0x0]
80009438:	ef 68 ff fa 	st.b	r7[-6],r8
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
8000943c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009440:	2f f8       	sub	r8,-1
80009442:	11 88       	ld.ub	r8,r8[0x0]
80009444:	ef 68 ff fb 	st.b	r7[-5],r8
   u8_data3 = u8_ptr_cluster[2];
80009448:	ee c8 00 08 	sub	r8,r7,8
8000944c:	f0 c9 ff ff 	sub	r9,r8,-1
80009450:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009454:	2f e8       	sub	r8,-2
80009456:	11 88       	ld.ub	r8,r8[0x0]
80009458:	b2 88       	st.b	r9[0x0],r8
   u8_data4 = u8_ptr_cluster[3];
8000945a:	ee c9 00 08 	sub	r9,r7,8
8000945e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009462:	2f d8       	sub	r8,-3
80009464:	11 88       	ld.ub	r8,r8[0x0]
80009466:	b2 88       	st.b	r9[0x0],r8

   if ( Is_fat12 )
80009468:	fe f8 02 94 	ld.w	r8,pc[660]
8000946c:	11 89       	ld.ub	r9,r8[0x0]
8000946e:	30 18       	mov	r8,1
80009470:	f0 09 18 00 	cp.b	r9,r8
80009474:	c2 01       	brne	800094b4 <fat_cluster_val+0x208>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80009476:	fe f8 02 8e 	ld.w	r8,pc[654]
8000947a:	90 09       	ld.sh	r9,r8[0x0]
8000947c:	e0 68 01 ff 	mov	r8,511
80009480:	f0 09 19 00 	cp.h	r9,r8
80009484:	c1 81       	brne	800094b4 <fat_cluster_val+0x208>
      {  // Go to next sector
         fs_gu32_addrsector++;
80009486:	fe f8 02 8e 	ld.w	r8,pc[654]
8000948a:	70 08       	ld.w	r8,r8[0x0]
8000948c:	f0 c9 ff ff 	sub	r9,r8,-1
80009490:	fe f8 02 84 	ld.w	r8,pc[644]
80009494:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( TRUE ))
80009496:	30 1c       	mov	r12,1
80009498:	f0 1f 00 a0 	mcall	80009718 <fat_cluster_val+0x46c>
8000949c:	18 98       	mov	r8,r12
8000949e:	58 08       	cp.w	r8,0
800094a0:	c0 51       	brne	800094aa <fat_cluster_val+0x1fe>
           return FALSE;
800094a2:	30 08       	mov	r8,0
800094a4:	ef 48 ff f0 	st.w	r7[-16],r8
800094a8:	c2 39       	rjmp	800096ee <fat_cluster_val+0x442>
         u8_data2 = fs_g_sector[0];
800094aa:	fe f8 02 72 	ld.w	r8,pc[626]
800094ae:	11 88       	ld.ub	r8,r8[0x0]
800094b0:	ef 68 ff fb 	st.b	r7[-5],r8
      }
   }

   if (FALSE == b_mode)
800094b4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800094b8:	30 08       	mov	r8,0
800094ba:	f0 09 18 00 	cp.b	r9,r8
800094be:	c7 31       	brne	800095a4 <fat_cluster_val+0x2f8>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
800094c0:	fe f8 02 40 	ld.w	r8,pc[576]
800094c4:	2f c8       	sub	r8,-4
800094c6:	f0 c9 ff fd 	sub	r9,r8,-3
800094ca:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800094ce:	b2 88       	st.b	r9[0x0],r8
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
800094d0:	fe f8 02 30 	ld.w	r8,pc[560]
800094d4:	2f c8       	sub	r8,-4
800094d6:	f0 c9 ff fe 	sub	r9,r8,-2
800094da:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800094de:	b2 88       	st.b	r9[0x0],r8

      if ( Is_fat32 )
800094e0:	fe f8 02 1c 	ld.w	r8,pc[540]
800094e4:	11 89       	ld.ub	r9,r8[0x0]
800094e6:	30 38       	mov	r8,3
800094e8:	f0 09 18 00 	cp.b	r9,r8
800094ec:	c1 61       	brne	80009518 <fat_cluster_val+0x26c>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
800094ee:	fe f8 02 12 	ld.w	r8,pc[530]
800094f2:	2f c8       	sub	r8,-4
800094f4:	f0 c9 ff ff 	sub	r9,r8,-1
800094f8:	ee c8 00 08 	sub	r8,r7,8
800094fc:	2f f8       	sub	r8,-1
800094fe:	11 88       	ld.ub	r8,r8[0x0]
80009500:	b2 88       	st.b	r9[0x0],r8
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80009502:	fe f8 01 fe 	ld.w	r8,pc[510]
80009506:	f0 c9 ff fc 	sub	r9,r8,-4
8000950a:	ee c8 00 08 	sub	r8,r7,8
8000950e:	11 88       	ld.ub	r8,r8[0x0]
80009510:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009514:	b2 88       	st.b	r9[0x0],r8
80009516:	ce 98       	rjmp	800096e8 <fat_cluster_val+0x43c>
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80009518:	4f a8       	lddpc	r8,80009700 <fat_cluster_val+0x454>
8000951a:	2f c8       	sub	r8,-4
8000951c:	f0 c9 ff ff 	sub	r9,r8,-1
80009520:	30 08       	mov	r8,0
80009522:	b2 88       	st.b	r9[0x0],r8
         LSB3( fs_g_cluster.u32_val ) = 0;
80009524:	4f 78       	lddpc	r8,80009700 <fat_cluster_val+0x454>
80009526:	f0 c9 ff fc 	sub	r9,r8,-4
8000952a:	30 08       	mov	r8,0
8000952c:	b2 88       	st.b	r9[0x0],r8

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
8000952e:	4f 48       	lddpc	r8,800096fc <fat_cluster_val+0x450>
80009530:	11 89       	ld.ub	r9,r8[0x0]
80009532:	30 18       	mov	r8,1
80009534:	f0 09 18 00 	cp.b	r9,r8
80009538:	e0 81 00 d8 	brne	800096e8 <fat_cluster_val+0x43c>
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
8000953c:	4f 18       	lddpc	r8,80009700 <fat_cluster_val+0x454>
8000953e:	2f d8       	sub	r8,-3
80009540:	11 88       	ld.ub	r8,r8[0x0]
80009542:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009546:	5c 58       	castu.b	r8
80009548:	c2 20       	breq	8000958c <fat_cluster_val+0x2e0>
            {  // Readed cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
8000954a:	4e e8       	lddpc	r8,80009700 <fat_cluster_val+0x454>
8000954c:	2f c8       	sub	r8,-4
8000954e:	f0 ca ff fd 	sub	r10,r8,-3
80009552:	4e c8       	lddpc	r8,80009700 <fat_cluster_val+0x454>
80009554:	2f c8       	sub	r8,-4
80009556:	2f e8       	sub	r8,-2
80009558:	11 88       	ld.ub	r8,r8[0x0]
8000955a:	a5 68       	lsl	r8,0x4
8000955c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80009560:	4e 88       	lddpc	r8,80009700 <fat_cluster_val+0x454>
80009562:	2f c8       	sub	r8,-4
80009564:	2f d8       	sub	r8,-3
80009566:	11 88       	ld.ub	r8,r8[0x0]
80009568:	a5 88       	lsr	r8,0x4
8000956a:	5c 58       	castu.b	r8
8000956c:	f2 08 00 08 	add	r8,r9,r8
80009570:	5c 58       	castu.b	r8
80009572:	b4 88       	st.b	r10[0x0],r8
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80009574:	4e 38       	lddpc	r8,80009700 <fat_cluster_val+0x454>
80009576:	2f c8       	sub	r8,-4
80009578:	f0 c9 ff fe 	sub	r9,r8,-2
8000957c:	4e 18       	lddpc	r8,80009700 <fat_cluster_val+0x454>
8000957e:	2f c8       	sub	r8,-4
80009580:	2f e8       	sub	r8,-2
80009582:	11 88       	ld.ub	r8,r8[0x0]
80009584:	a5 88       	lsr	r8,0x4
80009586:	5c 58       	castu.b	r8
80009588:	b2 88       	st.b	r9[0x0],r8
8000958a:	ca f8       	rjmp	800096e8 <fat_cluster_val+0x43c>
            }
            else
            {  // Readed cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
8000958c:	4d d8       	lddpc	r8,80009700 <fat_cluster_val+0x454>
8000958e:	2f c8       	sub	r8,-4
80009590:	f0 c9 ff fe 	sub	r9,r8,-2
80009594:	4d b8       	lddpc	r8,80009700 <fat_cluster_val+0x454>
80009596:	2f c8       	sub	r8,-4
80009598:	2f e8       	sub	r8,-2
8000959a:	11 88       	ld.ub	r8,r8[0x0]
8000959c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800095a0:	b2 88       	st.b	r9[0x0],r8
800095a2:	ca 38       	rjmp	800096e8 <fat_cluster_val+0x43c>
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
800095a4:	4d 68       	lddpc	r8,800096fc <fat_cluster_val+0x450>
800095a6:	11 89       	ld.ub	r9,r8[0x0]
800095a8:	30 18       	mov	r8,1
800095aa:	f0 09 18 00 	cp.b	r9,r8
800095ae:	c6 41       	brne	80009676 <fat_cluster_val+0x3ca>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
800095b0:	4d 48       	lddpc	r8,80009700 <fat_cluster_val+0x454>
800095b2:	2f d8       	sub	r8,-3
800095b4:	11 88       	ld.ub	r8,r8[0x0]
800095b6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800095ba:	5c 58       	castu.b	r8
800095bc:	c2 10       	breq	800095fe <fat_cluster_val+0x352>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
800095be:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800095c2:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
800095c6:	4c f8       	lddpc	r8,80009700 <fat_cluster_val+0x454>
800095c8:	2f c8       	sub	r8,-4
800095ca:	2f d8       	sub	r8,-3
800095cc:	11 88       	ld.ub	r8,r8[0x0]
800095ce:	a5 68       	lsl	r8,0x4
800095d0:	5c 58       	castu.b	r8
800095d2:	f2 08 00 08 	add	r8,r9,r8
800095d6:	ef 68 ff fa 	st.b	r7[-6],r8
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
800095da:	4c a8       	lddpc	r8,80009700 <fat_cluster_val+0x454>
800095dc:	2f c8       	sub	r8,-4
800095de:	2f e8       	sub	r8,-2
800095e0:	11 88       	ld.ub	r8,r8[0x0]
800095e2:	a5 68       	lsl	r8,0x4
800095e4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800095e8:	4c 68       	lddpc	r8,80009700 <fat_cluster_val+0x454>
800095ea:	2f c8       	sub	r8,-4
800095ec:	2f d8       	sub	r8,-3
800095ee:	11 88       	ld.ub	r8,r8[0x0]
800095f0:	a5 88       	lsr	r8,0x4
800095f2:	5c 58       	castu.b	r8
800095f4:	f2 08 00 08 	add	r8,r9,r8
800095f8:	ef 68 ff fb 	st.b	r7[-5],r8
800095fc:	c1 58       	rjmp	80009626 <fat_cluster_val+0x37a>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
800095fe:	4c 18       	lddpc	r8,80009700 <fat_cluster_val+0x454>
80009600:	2f c8       	sub	r8,-4
80009602:	2f d8       	sub	r8,-3
80009604:	11 88       	ld.ub	r8,r8[0x0]
80009606:	ef 68 ff fa 	st.b	r7[-6],r8
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
8000960a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000960e:	e2 19 00 f0 	andl	r9,0xf0,COH
80009612:	4b c8       	lddpc	r8,80009700 <fat_cluster_val+0x454>
80009614:	2f c8       	sub	r8,-4
80009616:	2f e8       	sub	r8,-2
80009618:	11 88       	ld.ub	r8,r8[0x0]
8000961a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000961e:	f2 08 00 08 	add	r8,r9,r8
80009622:	ef 68 ff fb 	st.b	r7[-5],r8
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80009626:	4b 88       	lddpc	r8,80009704 <fat_cluster_val+0x458>
80009628:	90 09       	ld.sh	r9,r8[0x0]
8000962a:	e0 68 01 ff 	mov	r8,511
8000962e:	f0 09 19 00 	cp.h	r9,r8
80009632:	c4 d1       	brne	800096cc <fat_cluster_val+0x420>
         {
            fs_g_sector[0] = u8_data2;
80009634:	4b a9       	lddpc	r9,8000971c <fat_cluster_val+0x470>
80009636:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000963a:	b2 88       	st.b	r9[0x0],r8
            fat_cache_mark_sector_as_dirty();
8000963c:	f0 1f 00 39 	mcall	80009720 <fat_cluster_val+0x474>
            // Go to previous sector
            fs_gu32_addrsector--;
80009640:	4b 58       	lddpc	r8,80009714 <fat_cluster_val+0x468>
80009642:	70 08       	ld.w	r8,r8[0x0]
80009644:	f0 c9 00 01 	sub	r9,r8,1
80009648:	4b 38       	lddpc	r8,80009714 <fat_cluster_val+0x468>
8000964a:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( TRUE ))
8000964c:	30 1c       	mov	r12,1
8000964e:	f0 1f 00 33 	mcall	80009718 <fat_cluster_val+0x46c>
80009652:	18 98       	mov	r8,r12
80009654:	58 08       	cp.w	r8,0
80009656:	c0 51       	brne	80009660 <fat_cluster_val+0x3b4>
              return FALSE;
80009658:	30 08       	mov	r8,0
8000965a:	ef 48 ff f0 	st.w	r7[-16],r8
8000965e:	c4 88       	rjmp	800096ee <fat_cluster_val+0x442>
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
80009660:	4a f9       	lddpc	r9,8000971c <fat_cluster_val+0x470>
80009662:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80009666:	f3 68 01 ff 	st.b	r9[511],r8
            fat_cache_mark_sector_as_dirty();
8000966a:	f0 1f 00 2e 	mcall	80009720 <fat_cluster_val+0x474>
            return TRUE;
8000966e:	30 18       	mov	r8,1
80009670:	ef 48 ff f0 	st.w	r7[-16],r8
80009674:	c3 d8       	rjmp	800096ee <fat_cluster_val+0x442>
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80009676:	4a 38       	lddpc	r8,80009700 <fat_cluster_val+0x454>
80009678:	2f c8       	sub	r8,-4
8000967a:	2f d8       	sub	r8,-3
8000967c:	11 88       	ld.ub	r8,r8[0x0]
8000967e:	ef 68 ff fa 	st.b	r7[-6],r8
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80009682:	4a 08       	lddpc	r8,80009700 <fat_cluster_val+0x454>
80009684:	2f c8       	sub	r8,-4
80009686:	2f e8       	sub	r8,-2
80009688:	11 88       	ld.ub	r8,r8[0x0]
8000968a:	ef 68 ff fb 	st.b	r7[-5],r8
         if ( Is_fat32 )
8000968e:	49 c8       	lddpc	r8,800096fc <fat_cluster_val+0x450>
80009690:	11 89       	ld.ub	r9,r8[0x0]
80009692:	30 38       	mov	r8,3
80009694:	f0 09 18 00 	cp.b	r9,r8
80009698:	c1 a1       	brne	800096cc <fat_cluster_val+0x420>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
8000969a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000969e:	f0 c9 ff fe 	sub	r9,r8,-2
800096a2:	49 88       	lddpc	r8,80009700 <fat_cluster_val+0x454>
800096a4:	2f c8       	sub	r8,-4
800096a6:	2f f8       	sub	r8,-1
800096a8:	11 88       	ld.ub	r8,r8[0x0]
800096aa:	b2 88       	st.b	r9[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
800096ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800096b0:	f0 ca ff fd 	sub	r10,r8,-3
800096b4:	49 38       	lddpc	r8,80009700 <fat_cluster_val+0x454>
800096b6:	2f c8       	sub	r8,-4
800096b8:	11 89       	ld.ub	r9,r8[0x0]
800096ba:	ee c8 00 08 	sub	r8,r7,8
800096be:	11 88       	ld.ub	r8,r8[0x0]
800096c0:	e2 18 00 f0 	andl	r8,0xf0,COH
800096c4:	f2 08 00 08 	add	r8,r9,r8
800096c8:	5c 58       	castu.b	r8
800096ca:	b4 88       	st.b	r10[0x0],r8
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
800096cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800096d0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800096d4:	b2 88       	st.b	r9[0x0],r8
      u8_ptr_cluster[1] = u8_data2;
800096d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800096da:	f0 c9 ff ff 	sub	r9,r8,-1
800096de:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800096e2:	b2 88       	st.b	r9[0x0],r8
      fat_cache_mark_sector_as_dirty();
800096e4:	f0 1f 00 0f 	mcall	80009720 <fat_cluster_val+0x474>
      fs_g_status = FS_ERR_COMMAND;
      return FALSE;
#endif  // FS_LEVEL_FEATURES
   }

   return TRUE;
800096e8:	30 18       	mov	r8,1
800096ea:	ef 48 ff f0 	st.w	r7[-16],r8
800096ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
#undef  u8_data3    // end of Manual overlay
#undef  u8_data4    // end of Manual overlay
}
800096f2:	10 9c       	mov	r12,r8
800096f4:	2f cd       	sub	sp,-16
800096f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800096fa:	00 00       	add	r0,r0
800096fc:	00 00       	add	r0,r0
800096fe:	0e 3c       	cp.w	r12,r7
80009700:	00 00       	add	r0,r0
80009702:	10 10       	sub	r0,r8
80009704:	00 00       	add	r0,r0
80009706:	0b 2c       	ld.uh	r12,r5++
80009708:	00 00       	add	r0,r0
8000970a:	0e 44       	or	r4,r7
8000970c:	00 00       	add	r0,r0
8000970e:	10 20       	rsub	r0,r8
80009710:	00 00       	add	r0,r0
80009712:	0d 58       	ld.sh	r8,--r6
80009714:	00 00       	add	r0,r0
80009716:	0b 18       	ld.sh	r8,r5++
80009718:	80 00       	ld.sh	r0,r0[0x0]
8000971a:	aa 74       	st.h	r5[0xe],r4
8000971c:	00 00       	add	r0,r0
8000971e:	0b 58       	ld.sh	r8,--r5
80009720:	80 00       	ld.sh	r0,r0[0x0]
80009722:	ab 74       	lsl	r4,0xb

80009724 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        readed cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster readed
//! @endverbatim
//!
Bool  fat_cluster_readnext( void )
{
80009724:	eb cd 40 80 	pushm	r7,lr
80009728:	1a 97       	mov	r7,sp
8000972a:	20 1d       	sub	sp,4
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
8000972c:	4b 78       	lddpc	r8,80009808 <fat_cluster_readnext+0xe4>
8000972e:	11 89       	ld.ub	r9,r8[0x0]
80009730:	30 38       	mov	r8,3
80009732:	f0 09 18 00 	cp.b	r9,r8
80009736:	c0 81       	brne	80009746 <fat_cluster_readnext+0x22>
   {
      fs_g_u16_pos_fat += 4;
80009738:	4b 58       	lddpc	r8,8000980c <fat_cluster_readnext+0xe8>
8000973a:	90 08       	ld.sh	r8,r8[0x0]
8000973c:	2f c8       	sub	r8,-4
8000973e:	5c 88       	casts.h	r8
80009740:	4b 39       	lddpc	r9,8000980c <fat_cluster_readnext+0xe8>
80009742:	b2 08       	st.h	r9[0x0],r8
80009744:	c0 78       	rjmp	80009752 <fat_cluster_readnext+0x2e>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80009746:	4b 28       	lddpc	r8,8000980c <fat_cluster_readnext+0xe8>
80009748:	90 08       	ld.sh	r8,r8[0x0]
8000974a:	2f e8       	sub	r8,-2
8000974c:	5c 88       	casts.h	r8
8000974e:	4b 09       	lddpc	r9,8000980c <fat_cluster_readnext+0xe8>
80009750:	b2 08       	st.h	r9[0x0],r8
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80009752:	4a f8       	lddpc	r8,8000980c <fat_cluster_readnext+0xe8>
80009754:	90 09       	ld.sh	r9,r8[0x0]
80009756:	e0 68 02 00 	mov	r8,512
8000975a:	f0 09 19 00 	cp.h	r9,r8
8000975e:	c1 41       	brne	80009786 <fat_cluster_readnext+0x62>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80009760:	4a b9       	lddpc	r9,8000980c <fat_cluster_readnext+0xe8>
80009762:	30 08       	mov	r8,0
80009764:	b2 08       	st.h	r9[0x0],r8
      fs_gu32_addrsector++;
80009766:	4a b8       	lddpc	r8,80009810 <fat_cluster_readnext+0xec>
80009768:	70 08       	ld.w	r8,r8[0x0]
8000976a:	f0 c9 ff ff 	sub	r9,r8,-1
8000976e:	4a 98       	lddpc	r8,80009810 <fat_cluster_readnext+0xec>
80009770:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( TRUE ))
80009772:	30 1c       	mov	r12,1
80009774:	f0 1f 00 28 	mcall	80009814 <fat_cluster_readnext+0xf0>
80009778:	18 98       	mov	r8,r12
8000977a:	58 08       	cp.w	r8,0
8000977c:	c0 51       	brne	80009786 <fat_cluster_readnext+0x62>
         return FALSE;
8000977e:	30 08       	mov	r8,0
80009780:	ef 48 ff fc 	st.w	r7[-4],r8
80009784:	c3 c8       	rjmp	800097fc <fat_cluster_readnext+0xd8>
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80009786:	4a 58       	lddpc	r8,80009818 <fat_cluster_readnext+0xf4>
80009788:	2f c8       	sub	r8,-4
8000978a:	f0 ca ff fd 	sub	r10,r8,-3
8000978e:	4a 08       	lddpc	r8,8000980c <fat_cluster_readnext+0xe8>
80009790:	90 08       	ld.sh	r8,r8[0x0]
80009792:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80009796:	4a 28       	lddpc	r8,8000981c <fat_cluster_readnext+0xf8>
80009798:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000979c:	b4 88       	st.b	r10[0x0],r8
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
8000979e:	49 f8       	lddpc	r8,80009818 <fat_cluster_readnext+0xf4>
800097a0:	2f c8       	sub	r8,-4
800097a2:	f0 ca ff fe 	sub	r10,r8,-2
800097a6:	49 a8       	lddpc	r8,8000980c <fat_cluster_readnext+0xe8>
800097a8:	90 08       	ld.sh	r8,r8[0x0]
800097aa:	5c 78       	castu.h	r8
800097ac:	f0 c9 ff ff 	sub	r9,r8,-1
800097b0:	49 b8       	lddpc	r8,8000981c <fat_cluster_readnext+0xf8>
800097b2:	f0 09 07 08 	ld.ub	r8,r8[r9]
800097b6:	b4 88       	st.b	r10[0x0],r8

   if ( Is_fat32 )
800097b8:	49 48       	lddpc	r8,80009808 <fat_cluster_readnext+0xe4>
800097ba:	11 89       	ld.ub	r9,r8[0x0]
800097bc:	30 38       	mov	r8,3
800097be:	f0 09 18 00 	cp.b	r9,r8
800097c2:	c1 a1       	brne	800097f6 <fat_cluster_readnext+0xd2>
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
800097c4:	49 58       	lddpc	r8,80009818 <fat_cluster_readnext+0xf4>
800097c6:	2f c8       	sub	r8,-4
800097c8:	f0 ca ff ff 	sub	r10,r8,-1
800097cc:	49 08       	lddpc	r8,8000980c <fat_cluster_readnext+0xe8>
800097ce:	90 08       	ld.sh	r8,r8[0x0]
800097d0:	5c 78       	castu.h	r8
800097d2:	f0 c9 ff fe 	sub	r9,r8,-2
800097d6:	49 28       	lddpc	r8,8000981c <fat_cluster_readnext+0xf8>
800097d8:	f0 09 07 08 	ld.ub	r8,r8[r9]
800097dc:	b4 88       	st.b	r10[0x0],r8
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
800097de:	48 f8       	lddpc	r8,80009818 <fat_cluster_readnext+0xf4>
800097e0:	f0 ca ff fc 	sub	r10,r8,-4
800097e4:	48 a8       	lddpc	r8,8000980c <fat_cluster_readnext+0xe8>
800097e6:	90 08       	ld.sh	r8,r8[0x0]
800097e8:	5c 78       	castu.h	r8
800097ea:	f0 c9 ff fd 	sub	r9,r8,-3
800097ee:	48 c8       	lddpc	r8,8000981c <fat_cluster_readnext+0xf8>
800097f0:	f0 09 07 08 	ld.ub	r8,r8[r9]
800097f4:	b4 88       	st.b	r10[0x0],r8
   }
   return TRUE;
800097f6:	30 18       	mov	r8,1
800097f8:	ef 48 ff fc 	st.w	r7[-4],r8
800097fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80009800:	10 9c       	mov	r12,r8
80009802:	2f fd       	sub	sp,-4
80009804:	e3 cd 80 80 	ldm	sp++,r7,pc
80009808:	00 00       	add	r0,r0
8000980a:	0e 3c       	cp.w	r12,r7
8000980c:	00 00       	add	r0,r0
8000980e:	0b 2c       	ld.uh	r12,r5++
80009810:	00 00       	add	r0,r0
80009812:	0b 18       	ld.sh	r8,r5++
80009814:	80 00       	ld.sh	r0,r0[0x0]
80009816:	aa 74       	st.h	r5[0xe],r4
80009818:	00 00       	add	r0,r0
8000981a:	10 10       	sub	r0,r8
8000981c:	00 00       	add	r0,r0
8000981e:	0b 58       	ld.sh	r8,--r5

80009820 <fat_checkcluster>:
//! IN :
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
U8    fat_checkcluster( void )
{
80009820:	eb cd 40 80 	pushm	r7,lr
80009824:	1a 97       	mov	r7,sp
80009826:	20 1d       	sub	sp,4
  if ( !fs_g_cluster.u32_val )
80009828:	4b 18       	lddpc	r8,800098ec <fat_checkcluster+0xcc>
8000982a:	70 18       	ld.w	r8,r8[0x4]
8000982c:	58 08       	cp.w	r8,0
8000982e:	c0 51       	brne	80009838 <fat_checkcluster+0x18>
    return FS_CLUS_BAD;
80009830:	30 19       	mov	r9,1
80009832:	ef 49 ff fc 	st.w	r7[-4],r9
80009836:	c5 58       	rjmp	800098e0 <fat_checkcluster+0xc0>

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80009838:	4a e8       	lddpc	r8,800098f0 <fat_checkcluster+0xd0>
8000983a:	11 89       	ld.ub	r9,r8[0x0]
8000983c:	30 38       	mov	r8,3
8000983e:	f0 09 18 00 	cp.b	r9,r8
80009842:	c1 a1       	brne	80009876 <fat_checkcluster+0x56>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80009844:	4a a8       	lddpc	r8,800098ec <fat_checkcluster+0xcc>
80009846:	70 18       	ld.w	r8,r8[0x4]
80009848:	e0 69 ff f7 	mov	r9,65527
8000984c:	ea 19 0f ff 	orh	r9,0xfff
80009850:	12 38       	cp.w	r8,r9
80009852:	e0 88 00 06 	brls	8000985e <fat_checkcluster+0x3e>
      return FS_CLUS_END;
80009856:	30 28       	mov	r8,2
80009858:	ef 48 ff fc 	st.w	r7[-4],r8
8000985c:	c4 28       	rjmp	800098e0 <fat_checkcluster+0xc0>
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
8000985e:	4a 48       	lddpc	r8,800098ec <fat_checkcluster+0xcc>
80009860:	70 18       	ld.w	r8,r8[0x4]
80009862:	e0 69 ff f7 	mov	r9,65527
80009866:	ea 19 0f ff 	orh	r9,0xfff
8000986a:	12 38       	cp.w	r8,r9
8000986c:	c3 71       	brne	800098da <fat_checkcluster+0xba>
      return FS_CLUS_BAD;
8000986e:	30 18       	mov	r8,1
80009870:	ef 48 ff fc 	st.w	r7[-4],r8
80009874:	c3 68       	rjmp	800098e0 <fat_checkcluster+0xc0>
  }
  else if ( Is_fat16 )
80009876:	49 f8       	lddpc	r8,800098f0 <fat_checkcluster+0xd0>
80009878:	11 89       	ld.ub	r9,r8[0x0]
8000987a:	30 28       	mov	r8,2
8000987c:	f0 09 18 00 	cp.b	r9,r8
80009880:	c1 41       	brne	800098a8 <fat_checkcluster+0x88>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80009882:	49 b8       	lddpc	r8,800098ec <fat_checkcluster+0xcc>
80009884:	70 18       	ld.w	r8,r8[0x4]
80009886:	e0 48 ff f7 	cp.w	r8,65527
8000988a:	e0 88 00 06 	brls	80009896 <fat_checkcluster+0x76>
      return FS_CLUS_END;
8000988e:	30 29       	mov	r9,2
80009890:	ef 49 ff fc 	st.w	r7[-4],r9
80009894:	c2 68       	rjmp	800098e0 <fat_checkcluster+0xc0>
    else if (fs_g_cluster.u32_val == 0xFFF7)
80009896:	49 68       	lddpc	r8,800098ec <fat_checkcluster+0xcc>
80009898:	70 18       	ld.w	r8,r8[0x4]
8000989a:	e0 48 ff f7 	cp.w	r8,65527
8000989e:	c1 e1       	brne	800098da <fat_checkcluster+0xba>
      return FS_CLUS_BAD;
800098a0:	30 18       	mov	r8,1
800098a2:	ef 48 ff fc 	st.w	r7[-4],r8
800098a6:	c1 d8       	rjmp	800098e0 <fat_checkcluster+0xc0>
  }
  else if ( Is_fat12 )
800098a8:	49 28       	lddpc	r8,800098f0 <fat_checkcluster+0xd0>
800098aa:	11 89       	ld.ub	r9,r8[0x0]
800098ac:	30 18       	mov	r8,1
800098ae:	f0 09 18 00 	cp.b	r9,r8
800098b2:	c1 41       	brne	800098da <fat_checkcluster+0xba>
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
800098b4:	48 e8       	lddpc	r8,800098ec <fat_checkcluster+0xcc>
800098b6:	70 18       	ld.w	r8,r8[0x4]
800098b8:	e0 48 0f f7 	cp.w	r8,4087
800098bc:	e0 88 00 06 	brls	800098c8 <fat_checkcluster+0xa8>
      return FS_CLUS_END;
800098c0:	30 29       	mov	r9,2
800098c2:	ef 49 ff fc 	st.w	r7[-4],r9
800098c6:	c0 d8       	rjmp	800098e0 <fat_checkcluster+0xc0>
    else if (fs_g_cluster.u32_val == 0xFF7)
800098c8:	48 98       	lddpc	r8,800098ec <fat_checkcluster+0xcc>
800098ca:	70 18       	ld.w	r8,r8[0x4]
800098cc:	e0 48 0f f7 	cp.w	r8,4087
800098d0:	c0 51       	brne	800098da <fat_checkcluster+0xba>
      return FS_CLUS_BAD;
800098d2:	30 18       	mov	r8,1
800098d4:	ef 48 ff fc 	st.w	r7[-4],r8
800098d8:	c0 48       	rjmp	800098e0 <fat_checkcluster+0xc0>
  }

  return FS_CLUS_OK;
800098da:	30 09       	mov	r9,0
800098dc:	ef 49 ff fc 	st.w	r7[-4],r9
800098e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800098e4:	10 9c       	mov	r12,r8
800098e6:	2f fd       	sub	sp,-4
800098e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800098ec:	00 00       	add	r0,r0
800098ee:	10 10       	sub	r0,r8
800098f0:	00 00       	add	r0,r0
800098f2:	0e 3c       	cp.w	r12,r7

800098f4 <fat_cache_clusterlist_reset>:
//! @{

//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
800098f4:	eb cd 40 80 	pushm	r7,lr
800098f8:	1a 97       	mov	r7,sp
800098fa:	20 1d       	sub	sp,4
   U8 u8_i;
   fs_g_u8_current_cache=0;
800098fc:	49 e8       	lddpc	r8,80009974 <fat_cache_clusterlist_reset+0x80>
800098fe:	30 09       	mov	r9,0
80009900:	b0 89       	st.b	r8[0x0],r9
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009902:	30 08       	mov	r8,0
80009904:	ef 68 ff ff 	st.b	r7[-1],r8
80009908:	c2 c8       	rjmp	80009960 <fat_cache_clusterlist_reset+0x6c>
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?TRUE:FALSE;
8000990a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000990e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009912:	30 08       	mov	r8,0
80009914:	f0 09 18 00 	cp.b	r9,r8
80009918:	5f 0b       	sreq	r11
8000991a:	49 89       	lddpc	r9,80009978 <fat_cache_clusterlist_reset+0x84>
8000991c:	14 98       	mov	r8,r10
8000991e:	a3 68       	lsl	r8,0x2
80009920:	14 08       	add	r8,r10
80009922:	a3 68       	lsl	r8,0x2
80009924:	10 09       	add	r9,r8
80009926:	16 98       	mov	r8,r11
80009928:	b2 88       	st.b	r9[0x0],r8
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
8000992a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000992e:	49 3a       	lddpc	r10,80009978 <fat_cache_clusterlist_reset+0x84>
80009930:	12 98       	mov	r8,r9
80009932:	a3 68       	lsl	r8,0x2
80009934:	12 08       	add	r8,r9
80009936:	a3 68       	lsl	r8,0x2
80009938:	f4 08 00 09 	add	r9,r10,r8
8000993c:	3f f8       	mov	r8,-1
8000993e:	b2 a8       	st.b	r9[0x2],r8
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80009940:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009944:	48 da       	lddpc	r10,80009978 <fat_cache_clusterlist_reset+0x84>
80009946:	12 98       	mov	r8,r9
80009948:	a3 68       	lsl	r8,0x2
8000994a:	12 08       	add	r8,r9
8000994c:	a3 68       	lsl	r8,0x2
8000994e:	f4 08 00 09 	add	r9,r10,r8
80009952:	3f f8       	mov	r8,-1
80009954:	b2 98       	st.b	r9[0x1],r8
//!
void  fat_cache_clusterlist_reset( void )
{
   U8 u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009956:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000995a:	2f f8       	sub	r8,-1
8000995c:	ef 68 ff ff 	st.b	r7[-1],r8
80009960:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009964:	30 18       	mov	r8,1
80009966:	f0 09 18 00 	cp.b	r9,r8
8000996a:	fe 98 ff d0 	brls	8000990a <fat_cache_clusterlist_reset+0x16>
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?TRUE:FALSE;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
   }
}
8000996e:	2f fd       	sub	sp,-4
80009970:	e3 cd 80 80 	ldm	sp++,r7,pc
80009974:	00 00       	add	r0,r0
80009976:	0e 42       	or	r2,r7
80009978:	00 00       	add	r0,r0
8000997a:	0b 30       	ld.ub	r0,r5++

8000997c <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If TRUE then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( Bool b_for_file )
{
8000997c:	eb cd 40 80 	pushm	r7,lr
80009980:	1a 97       	mov	r7,sp
80009982:	20 2d       	sub	sp,8
80009984:	18 98       	mov	r8,r12
80009986:	ef 68 ff f8 	st.b	r7[-8],r8
   // Get the OLD cache (=max level used)
   U8 u8_i;
   for( u8_i=0; u8_i<((FS_NB_CACHE_CLUSLIST*2)-1); u8_i++ ) // (FS_NB_CACHE_CLUSLIST*2)-1, in case of error
8000998a:	30 08       	mov	r8,0
8000998c:	ef 68 ff ff 	st.b	r7[-1],r8
80009990:	c1 58       	rjmp	800099ba <fat_cache_clusterlist_update_start+0x3e>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file )
80009992:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009996:	4a aa       	lddpc	r10,80009a3c <fat_cache_clusterlist_update_start+0xc0>
80009998:	12 98       	mov	r8,r9
8000999a:	a3 68       	lsl	r8,0x2
8000999c:	12 08       	add	r8,r9
8000999e:	a3 68       	lsl	r8,0x2
800099a0:	f4 08 00 08 	add	r8,r10,r8
800099a4:	11 89       	ld.ub	r9,r8[0x0]
800099a6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800099aa:	f2 08 18 00 	cp.b	r8,r9
800099ae:	c0 c0       	breq	800099c6 <fat_cache_clusterlist_update_start+0x4a>
//!
void  fat_cache_clusterlist_update_start( Bool b_for_file )
{
   // Get the OLD cache (=max level used)
   U8 u8_i;
   for( u8_i=0; u8_i<((FS_NB_CACHE_CLUSLIST*2)-1); u8_i++ ) // (FS_NB_CACHE_CLUSLIST*2)-1, in case of error
800099b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800099b4:	2f f8       	sub	r8,-1
800099b6:	ef 68 ff ff 	st.b	r7[-1],r8
800099ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800099be:	30 08       	mov	r8,0
800099c0:	f0 09 18 00 	cp.b	r9,r8
800099c4:	ce 70       	breq	80009992 <fat_cache_clusterlist_update_start+0x16>
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
800099c6:	49 f9       	lddpc	r9,80009a40 <fat_cache_clusterlist_update_start+0xc4>
800099c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800099cc:	b2 88       	st.b	r9[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
800099ce:	49 d8       	lddpc	r8,80009a40 <fat_cache_clusterlist_update_start+0xc4>
800099d0:	11 88       	ld.ub	r8,r8[0x0]
800099d2:	10 99       	mov	r9,r8
800099d4:	49 aa       	lddpc	r10,80009a3c <fat_cache_clusterlist_update_start+0xc0>
800099d6:	12 98       	mov	r8,r9
800099d8:	a3 68       	lsl	r8,0x2
800099da:	12 08       	add	r8,r9
800099dc:	a3 68       	lsl	r8,0x2
800099de:	f4 08 00 09 	add	r9,r10,r8
800099e2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800099e6:	b2 88       	st.b	r9[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
800099e8:	49 68       	lddpc	r8,80009a40 <fat_cache_clusterlist_update_start+0xc4>
800099ea:	11 88       	ld.ub	r8,r8[0x0]
800099ec:	10 99       	mov	r9,r8
800099ee:	49 4a       	lddpc	r10,80009a3c <fat_cache_clusterlist_update_start+0xc0>
800099f0:	12 98       	mov	r8,r9
800099f2:	a3 68       	lsl	r8,0x2
800099f4:	12 08       	add	r8,r9
800099f6:	a3 68       	lsl	r8,0x2
800099f8:	f4 08 00 09 	add	r9,r10,r8
800099fc:	3f f8       	mov	r8,-1
800099fe:	b2 a8       	st.b	r9[0x2],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80009a00:	49 08       	lddpc	r8,80009a40 <fat_cache_clusterlist_update_start+0xc4>
80009a02:	11 88       	ld.ub	r8,r8[0x0]
80009a04:	10 99       	mov	r9,r8
80009a06:	49 08       	lddpc	r8,80009a44 <fat_cache_clusterlist_update_start+0xc8>
80009a08:	70 0b       	ld.w	r11,r8[0x0]
80009a0a:	48 da       	lddpc	r10,80009a3c <fat_cache_clusterlist_update_start+0xc0>
80009a0c:	12 98       	mov	r8,r9
80009a0e:	a3 68       	lsl	r8,0x2
80009a10:	12 08       	add	r8,r9
80009a12:	2f f8       	sub	r8,-1
80009a14:	f4 08 09 2b 	st.w	r10[r8<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80009a18:	48 a8       	lddpc	r8,80009a40 <fat_cache_clusterlist_update_start+0xc4>
80009a1a:	11 88       	ld.ub	r8,r8[0x0]
80009a1c:	10 99       	mov	r9,r8
80009a1e:	48 b8       	lddpc	r8,80009a48 <fat_cache_clusterlist_update_start+0xcc>
80009a20:	70 1b       	ld.w	r11,r8[0x4]
80009a22:	48 7a       	lddpc	r10,80009a3c <fat_cache_clusterlist_update_start+0xc0>
80009a24:	12 98       	mov	r8,r9
80009a26:	a3 68       	lsl	r8,0x2
80009a28:	12 08       	add	r8,r9
80009a2a:	a3 68       	lsl	r8,0x2
80009a2c:	f4 08 00 08 	add	r8,r10,r8
80009a30:	2f 88       	sub	r8,-8
80009a32:	91 0b       	st.w	r8[0x0],r11
}
80009a34:	2f ed       	sub	sp,-8
80009a36:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a3a:	00 00       	add	r0,r0
80009a3c:	00 00       	add	r0,r0
80009a3e:	0b 30       	ld.ub	r0,r5++
80009a40:	00 00       	add	r0,r0
80009a42:	0e 42       	or	r2,r7
80009a44:	00 00       	add	r0,r0
80009a46:	10 10       	sub	r0,r8
80009a48:	00 00       	add	r0,r0
80009a4a:	10 18       	sub	r8,r8

80009a4c <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80009a4c:	eb cd 40 80 	pushm	r7,lr
80009a50:	1a 97       	mov	r7,sp
80009a52:	20 1d       	sub	sp,4
   U8 u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80009a54:	4b 38       	lddpc	r8,80009b20 <fat_cache_clusterlist_update_finish+0xd4>
80009a56:	11 88       	ld.ub	r8,r8[0x0]
80009a58:	10 99       	mov	r9,r8
80009a5a:	4b 3a       	lddpc	r10,80009b24 <fat_cache_clusterlist_update_finish+0xd8>
80009a5c:	12 98       	mov	r8,r9
80009a5e:	a3 68       	lsl	r8,0x2
80009a60:	12 08       	add	r8,r9
80009a62:	a3 68       	lsl	r8,0x2
80009a64:	f4 08 00 08 	add	r8,r10,r8
80009a68:	2f 88       	sub	r8,-8
80009a6a:	70 09       	ld.w	r9,r8[0x0]
80009a6c:	4a f8       	lddpc	r8,80009b28 <fat_cache_clusterlist_update_finish+0xdc>
80009a6e:	11 98       	ld.ub	r8,r8[0x1]
80009a70:	f2 08 0d 08 	divu	r8,r9,r8
80009a74:	12 98       	mov	r8,r9
80009a76:	ef 68 ff ff 	st.b	r7[-1],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80009a7a:	4a a8       	lddpc	r8,80009b20 <fat_cache_clusterlist_update_finish+0xd4>
80009a7c:	11 88       	ld.ub	r8,r8[0x0]
80009a7e:	10 99       	mov	r9,r8
80009a80:	4a a8       	lddpc	r8,80009b28 <fat_cache_clusterlist_update_finish+0xdc>
80009a82:	11 8b       	ld.ub	r11,r8[0x0]
80009a84:	4a 8a       	lddpc	r10,80009b24 <fat_cache_clusterlist_update_finish+0xd8>
80009a86:	12 98       	mov	r8,r9
80009a88:	a3 68       	lsl	r8,0x2
80009a8a:	12 08       	add	r8,r9
80009a8c:	a3 68       	lsl	r8,0x2
80009a8e:	f4 08 00 09 	add	r9,r10,r8
80009a92:	16 98       	mov	r8,r11
80009a94:	b2 a8       	st.b	r9[0x2],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80009a96:	4a 38       	lddpc	r8,80009b20 <fat_cache_clusterlist_update_finish+0xd4>
80009a98:	11 88       	ld.ub	r8,r8[0x0]
80009a9a:	10 9b       	mov	r11,r8
80009a9c:	4a 18       	lddpc	r8,80009b20 <fat_cache_clusterlist_update_finish+0xd4>
80009a9e:	11 88       	ld.ub	r8,r8[0x0]
80009aa0:	10 99       	mov	r9,r8
80009aa2:	4a 1a       	lddpc	r10,80009b24 <fat_cache_clusterlist_update_finish+0xd8>
80009aa4:	12 98       	mov	r8,r9
80009aa6:	a3 68       	lsl	r8,0x2
80009aa8:	12 08       	add	r8,r9
80009aaa:	a3 68       	lsl	r8,0x2
80009aac:	f4 08 00 08 	add	r8,r10,r8
80009ab0:	2f 88       	sub	r8,-8
80009ab2:	70 09       	ld.w	r9,r8[0x0]
80009ab4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009ab8:	f2 08 01 0a 	sub	r10,r9,r8
80009abc:	49 a9       	lddpc	r9,80009b24 <fat_cache_clusterlist_update_finish+0xd8>
80009abe:	16 98       	mov	r8,r11
80009ac0:	a3 68       	lsl	r8,0x2
80009ac2:	16 08       	add	r8,r11
80009ac4:	a3 68       	lsl	r8,0x2
80009ac6:	f2 08 00 08 	add	r8,r9,r8
80009aca:	2f 88       	sub	r8,-8
80009acc:	91 0a       	st.w	r8[0x0],r10
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
80009ace:	49 58       	lddpc	r8,80009b20 <fat_cache_clusterlist_update_finish+0xd4>
80009ad0:	11 88       	ld.ub	r8,r8[0x0]
80009ad2:	10 9a       	mov	r10,r8
80009ad4:	49 68       	lddpc	r8,80009b2c <fat_cache_clusterlist_update_finish+0xe0>
80009ad6:	70 09       	ld.w	r9,r8[0x0]
80009ad8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009adc:	f2 08 01 0b 	sub	r11,r9,r8
80009ae0:	49 19       	lddpc	r9,80009b24 <fat_cache_clusterlist_update_finish+0xd8>
80009ae2:	14 98       	mov	r8,r10
80009ae4:	a3 68       	lsl	r8,0x2
80009ae6:	14 08       	add	r8,r10
80009ae8:	a3 68       	lsl	r8,0x2
80009aea:	f2 08 00 08 	add	r8,r9,r8
80009aee:	2f 48       	sub	r8,-12
80009af0:	91 0b       	st.w	r8[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80009af2:	48 c8       	lddpc	r8,80009b20 <fat_cache_clusterlist_update_finish+0xd4>
80009af4:	11 88       	ld.ub	r8,r8[0x0]
80009af6:	10 9a       	mov	r10,r8
80009af8:	48 d8       	lddpc	r8,80009b2c <fat_cache_clusterlist_update_finish+0xe0>
80009afa:	70 19       	ld.w	r9,r8[0x4]
80009afc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009b00:	f2 08 00 0b 	add	r11,r9,r8
80009b04:	48 89       	lddpc	r9,80009b24 <fat_cache_clusterlist_update_finish+0xd8>
80009b06:	14 98       	mov	r8,r10
80009b08:	a3 68       	lsl	r8,0x2
80009b0a:	14 08       	add	r8,r10
80009b0c:	a3 68       	lsl	r8,0x2
80009b0e:	f2 08 00 08 	add	r8,r9,r8
80009b12:	2f 08       	sub	r8,-16
80009b14:	91 0b       	st.w	r8[0x0],r11

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
80009b16:	f0 1f 00 07 	mcall	80009b30 <fat_cache_clusterlist_update_finish+0xe4>
}
80009b1a:	2f fd       	sub	sp,-4
80009b1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b20:	00 00       	add	r0,r0
80009b22:	0e 42       	or	r2,r7
80009b24:	00 00       	add	r0,r0
80009b26:	0b 30       	ld.ub	r0,r5++
80009b28:	00 00       	add	r0,r0
80009b2a:	0d 58       	ld.sh	r8,--r6
80009b2c:	00 00       	add	r0,r0
80009b2e:	10 18       	sub	r8,r8
80009b30:	80 00       	ld.sh	r0,r0[0x0]
80009b32:	9b 34       	st.w	sp[0xc],r4

80009b34 <fat_cache_clusterlist_update_select>:


//! This function signals that a cache is used
//!
void  fat_cache_clusterlist_update_select( void )
{
80009b34:	eb cd 40 80 	pushm	r7,lr
80009b38:	1a 97       	mov	r7,sp
80009b3a:	20 1d       	sub	sp,4
   U8 u8_i;
   U8 u8_level_to_update;
   Bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80009b3c:	4b 78       	lddpc	r8,80009c18 <fat_cache_clusterlist_update_select+0xe4>
80009b3e:	11 88       	ld.ub	r8,r8[0x0]
80009b40:	10 99       	mov	r9,r8
80009b42:	4b 7a       	lddpc	r10,80009c1c <fat_cache_clusterlist_update_select+0xe8>
80009b44:	12 98       	mov	r8,r9
80009b46:	a3 68       	lsl	r8,0x2
80009b48:	12 08       	add	r8,r9
80009b4a:	a3 68       	lsl	r8,0x2
80009b4c:	f4 08 00 08 	add	r8,r10,r8
80009b50:	11 88       	ld.ub	r8,r8[0x0]
80009b52:	ef 68 ff ff 	st.b	r7[-1],r8
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80009b56:	4b 18       	lddpc	r8,80009c18 <fat_cache_clusterlist_update_select+0xe4>
80009b58:	11 88       	ld.ub	r8,r8[0x0]
80009b5a:	10 99       	mov	r9,r8
80009b5c:	4b 0a       	lddpc	r10,80009c1c <fat_cache_clusterlist_update_select+0xe8>
80009b5e:	12 98       	mov	r8,r9
80009b60:	a3 68       	lsl	r8,0x2
80009b62:	12 08       	add	r8,r9
80009b64:	a3 68       	lsl	r8,0x2
80009b66:	f4 08 00 08 	add	r8,r10,r8
80009b6a:	11 98       	ld.ub	r8,r8[0x1]
80009b6c:	ef 68 ff fe 	st.b	r7[-2],r8
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009b70:	30 08       	mov	r8,0
80009b72:	ef 68 ff fd 	st.b	r7[-3],r8
80009b76:	c3 b8       	rjmp	80009bec <fat_cache_clusterlist_update_select+0xb8>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80009b78:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009b7c:	4a 8a       	lddpc	r10,80009c1c <fat_cache_clusterlist_update_select+0xe8>
80009b7e:	12 98       	mov	r8,r9
80009b80:	a3 68       	lsl	r8,0x2
80009b82:	12 08       	add	r8,r9
80009b84:	a3 68       	lsl	r8,0x2
80009b86:	f4 08 00 08 	add	r8,r10,r8
80009b8a:	11 89       	ld.ub	r9,r8[0x0]
80009b8c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009b90:	f2 08 18 00 	cp.b	r8,r9
80009b94:	c2 71       	brne	80009be2 <fat_cache_clusterlist_update_select+0xae>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80009b96:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009b9a:	4a 1a       	lddpc	r10,80009c1c <fat_cache_clusterlist_update_select+0xe8>
80009b9c:	12 98       	mov	r8,r9
80009b9e:	a3 68       	lsl	r8,0x2
80009ba0:	12 08       	add	r8,r9
80009ba2:	a3 68       	lsl	r8,0x2
80009ba4:	f4 08 00 08 	add	r8,r10,r8
80009ba8:	11 99       	ld.ub	r9,r8[0x1]
80009baa:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80009bae:	f2 08 18 00 	cp.b	r8,r9
80009bb2:	e0 88 00 18 	brls	80009be2 <fat_cache_clusterlist_update_select+0xae>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80009bb6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009bba:	49 9a       	lddpc	r10,80009c1c <fat_cache_clusterlist_update_select+0xe8>
80009bbc:	12 98       	mov	r8,r9
80009bbe:	a3 68       	lsl	r8,0x2
80009bc0:	12 08       	add	r8,r9
80009bc2:	a3 68       	lsl	r8,0x2
80009bc4:	f4 08 00 08 	add	r8,r10,r8
80009bc8:	11 98       	ld.ub	r8,r8[0x1]
80009bca:	2f f8       	sub	r8,-1
80009bcc:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80009bd0:	49 3a       	lddpc	r10,80009c1c <fat_cache_clusterlist_update_select+0xe8>
80009bd2:	12 98       	mov	r8,r9
80009bd4:	a3 68       	lsl	r8,0x2
80009bd6:	12 08       	add	r8,r9
80009bd8:	a3 68       	lsl	r8,0x2
80009bda:	f4 08 00 09 	add	r9,r10,r8
80009bde:	16 98       	mov	r8,r11
80009be0:	b2 98       	st.b	r9[0x1],r8
   U8 u8_level_to_update;
   Bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009be2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80009be6:	2f f8       	sub	r8,-1
80009be8:	ef 68 ff fd 	st.b	r7[-3],r8
80009bec:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009bf0:	30 18       	mov	r8,1
80009bf2:	f0 09 18 00 	cp.b	r9,r8
80009bf6:	fe 98 ff c1 	brls	80009b78 <fat_cache_clusterlist_update_select+0x44>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80009bfa:	48 88       	lddpc	r8,80009c18 <fat_cache_clusterlist_update_select+0xe4>
80009bfc:	11 88       	ld.ub	r8,r8[0x0]
80009bfe:	10 99       	mov	r9,r8
80009c00:	48 7a       	lddpc	r10,80009c1c <fat_cache_clusterlist_update_select+0xe8>
80009c02:	12 98       	mov	r8,r9
80009c04:	a3 68       	lsl	r8,0x2
80009c06:	12 08       	add	r8,r9
80009c08:	a3 68       	lsl	r8,0x2
80009c0a:	f4 08 00 09 	add	r9,r10,r8
80009c0e:	30 08       	mov	r8,0
80009c10:	b2 98       	st.b	r9[0x1],r8
}
80009c12:	2f fd       	sub	sp,-4
80009c14:	e3 cd 80 80 	ldm	sp++,r7,pc
80009c18:	00 00       	add	r0,r0
80009c1a:	0e 42       	or	r2,r7
80009c1c:	00 00       	add	r0,r0
80009c1e:	0b 30       	ld.ub	r0,r5++

80009c20 <fat_cache_clusterlist_update_read>:
//!
//! @return    TRUE  cluster list found and global variable fs_g_seg updated
//! @return    FALSE no found in cluster list caches
//!
Bool  fat_cache_clusterlist_update_read( Bool b_for_file )
{
80009c20:	eb cd 40 80 	pushm	r7,lr
80009c24:	1a 97       	mov	r7,sp
80009c26:	20 4d       	sub	sp,16
80009c28:	18 98       	mov	r8,r12
80009c2a:	ef 68 ff f4 	st.b	r7[-12],r8
   U32 u32_tmp;
   U8 u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009c2e:	30 08       	mov	r8,0
80009c30:	ef 68 ff ff 	st.b	r7[-1],r8
80009c34:	c1 b9       	rjmp	80009e6a <fat_cache_clusterlist_update_read+0x24a>
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80009c36:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c3a:	fe fa 02 5a 	ld.w	r10,pc[602]
80009c3e:	12 98       	mov	r8,r9
80009c40:	a3 68       	lsl	r8,0x2
80009c42:	12 08       	add	r8,r9
80009c44:	a3 68       	lsl	r8,0x2
80009c46:	f4 08 00 08 	add	r8,r10,r8
80009c4a:	11 89       	ld.ub	r9,r8[0x0]
80009c4c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009c50:	f2 08 18 00 	cp.b	r8,r9
80009c54:	e0 81 01 06 	brne	80009e60 <fat_cache_clusterlist_update_read+0x240>
80009c58:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c5c:	fe fa 02 38 	ld.w	r10,pc[568]
80009c60:	12 98       	mov	r8,r9
80009c62:	a3 68       	lsl	r8,0x2
80009c64:	12 08       	add	r8,r9
80009c66:	a3 68       	lsl	r8,0x2
80009c68:	f4 08 00 08 	add	r8,r10,r8
80009c6c:	11 a9       	ld.ub	r9,r8[0x2]
80009c6e:	fe f8 02 2a 	ld.w	r8,pc[554]
80009c72:	11 88       	ld.ub	r8,r8[0x0]
80009c74:	f0 09 18 00 	cp.b	r9,r8
80009c78:	e0 81 00 f4 	brne	80009e60 <fat_cache_clusterlist_update_read+0x240>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80009c7c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c80:	fe fa 02 14 	ld.w	r10,pc[532]
80009c84:	12 98       	mov	r8,r9
80009c86:	a3 68       	lsl	r8,0x2
80009c88:	12 08       	add	r8,r9
80009c8a:	2f f8       	sub	r8,-1
80009c8c:	f4 08 03 29 	ld.w	r9,r10[r8<<0x2]
80009c90:	fe f8 02 0c 	ld.w	r8,pc[524]
80009c94:	70 08       	ld.w	r8,r8[0x0]
80009c96:	10 39       	cp.w	r9,r8
80009c98:	e0 81 00 e4 	brne	80009e60 <fat_cache_clusterlist_update_read+0x240>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80009c9c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009ca0:	4f da       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009ca2:	12 98       	mov	r8,r9
80009ca4:	a3 68       	lsl	r8,0x2
80009ca6:	12 08       	add	r8,r9
80009ca8:	a3 68       	lsl	r8,0x2
80009caa:	f4 08 00 08 	add	r8,r10,r8
80009cae:	2f 88       	sub	r8,-8
80009cb0:	70 09       	ld.w	r9,r8[0x0]
80009cb2:	4f c8       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009cb4:	70 18       	ld.w	r8,r8[0x4]
80009cb6:	10 39       	cp.w	r9,r8
80009cb8:	e0 8b 00 d4 	brhi	80009e60 <fat_cache_clusterlist_update_read+0x240>
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80009cbc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009cc0:	4f 5a       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009cc2:	12 98       	mov	r8,r9
80009cc4:	a3 68       	lsl	r8,0x2
80009cc6:	12 08       	add	r8,r9
80009cc8:	a3 68       	lsl	r8,0x2
80009cca:	f4 08 00 08 	add	r8,r10,r8
80009cce:	2f 08       	sub	r8,-16
80009cd0:	70 0c       	ld.w	r12,r8[0x0]
80009cd2:	4f 48       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009cd4:	70 1b       	ld.w	r11,r8[0x4]
80009cd6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009cda:	4e fa       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009cdc:	12 98       	mov	r8,r9
80009cde:	a3 68       	lsl	r8,0x2
80009ce0:	12 08       	add	r8,r9
80009ce2:	a3 68       	lsl	r8,0x2
80009ce4:	f4 08 00 08 	add	r8,r10,r8
80009ce8:	2f 88       	sub	r8,-8
80009cea:	70 08       	ld.w	r8,r8[0x0]
80009cec:	f6 08 01 08 	sub	r8,r11,r8
80009cf0:	10 3c       	cp.w	r12,r8
80009cf2:	e0 88 00 3d 	brls	80009d6c <fat_cache_clusterlist_update_read+0x14c>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
80009cf6:	4e b8       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009cf8:	70 1b       	ld.w	r11,r8[0x4]
80009cfa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009cfe:	4e 6a       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009d00:	12 98       	mov	r8,r9
80009d02:	a3 68       	lsl	r8,0x2
80009d04:	12 08       	add	r8,r9
80009d06:	a3 68       	lsl	r8,0x2
80009d08:	f4 08 00 08 	add	r8,r10,r8
80009d0c:	2f 88       	sub	r8,-8
80009d0e:	70 08       	ld.w	r8,r8[0x0]
80009d10:	f6 08 01 09 	sub	r9,r11,r8
80009d14:	4e 38       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009d16:	91 19       	st.w	r8[0x4],r9
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80009d18:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d1c:	4d ea       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009d1e:	12 98       	mov	r8,r9
80009d20:	a3 68       	lsl	r8,0x2
80009d22:	12 08       	add	r8,r9
80009d24:	a3 68       	lsl	r8,0x2
80009d26:	f4 08 00 08 	add	r8,r10,r8
80009d2a:	2f 48       	sub	r8,-12
80009d2c:	70 09       	ld.w	r9,r8[0x0]
80009d2e:	4d d8       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009d30:	70 18       	ld.w	r8,r8[0x4]
80009d32:	10 09       	add	r9,r8
80009d34:	4d b8       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009d36:	91 09       	st.w	r8[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80009d38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d3c:	4d 6a       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009d3e:	12 98       	mov	r8,r9
80009d40:	a3 68       	lsl	r8,0x2
80009d42:	12 08       	add	r8,r9
80009d44:	a3 68       	lsl	r8,0x2
80009d46:	f4 08 00 08 	add	r8,r10,r8
80009d4a:	2f 08       	sub	r8,-16
80009d4c:	70 09       	ld.w	r9,r8[0x0]
80009d4e:	4d 58       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009d50:	70 18       	ld.w	r8,r8[0x4]
80009d52:	10 19       	sub	r9,r8
80009d54:	4d 38       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009d56:	91 19       	st.w	r8[0x4],r9
                  fs_g_u8_current_cache = u8_i;
80009d58:	4d 39       	lddpc	r9,80009ea4 <fat_cache_clusterlist_update_read+0x284>
80009d5a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009d5e:	b2 88       	st.b	r9[0x0],r8
                  fat_cache_clusterlist_update_select();
80009d60:	f0 1f 00 52 	mcall	80009ea8 <fat_cache_clusterlist_update_read+0x288>
                  return TRUE;   // the segment is in cluster list cache
80009d64:	30 18       	mov	r8,1
80009d66:	ef 48 ff f0 	st.w	r7[-16],r8
80009d6a:	c8 f8       	rjmp	80009e88 <fat_cache_clusterlist_update_read+0x268>
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the resultat in this cache
                  fs_g_u8_current_cache = u8_i;
80009d6c:	4c e9       	lddpc	r9,80009ea4 <fat_cache_clusterlist_update_read+0x284>
80009d6e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009d72:	b2 88       	st.b	r9[0x0],r8
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // unvalid cache
80009d74:	4c c8       	lddpc	r8,80009ea4 <fat_cache_clusterlist_update_read+0x284>
80009d76:	11 88       	ld.ub	r8,r8[0x0]
80009d78:	10 99       	mov	r9,r8
80009d7a:	4c 7a       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009d7c:	12 98       	mov	r8,r9
80009d7e:	a3 68       	lsl	r8,0x2
80009d80:	12 08       	add	r8,r9
80009d82:	a3 68       	lsl	r8,0x2
80009d84:	f4 08 00 09 	add	r9,r10,r8
80009d88:	3f f8       	mov	r8,-1
80009d8a:	b2 a8       	st.b	r9[0x2],r8
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80009d8c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d90:	4c 1a       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009d92:	12 98       	mov	r8,r9
80009d94:	a3 68       	lsl	r8,0x2
80009d96:	12 08       	add	r8,r9
80009d98:	a3 68       	lsl	r8,0x2
80009d9a:	f4 08 00 08 	add	r8,r10,r8
80009d9e:	2f 48       	sub	r8,-12
80009da0:	70 09       	ld.w	r9,r8[0x0]
80009da2:	4b e8       	lddpc	r8,80009e98 <fat_cache_clusterlist_update_read+0x278>
80009da4:	70 38       	ld.w	r8,r8[0xc]
80009da6:	10 19       	sub	r9,r8
80009da8:	4b c8       	lddpc	r8,80009e98 <fat_cache_clusterlist_update_read+0x278>
80009daa:	70 48       	ld.w	r8,r8[0x10]
80009dac:	f2 08 01 0b 	sub	r11,r9,r8
80009db0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009db4:	4b 8a       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009db6:	12 98       	mov	r8,r9
80009db8:	a3 68       	lsl	r8,0x2
80009dba:	12 08       	add	r8,r9
80009dbc:	a3 68       	lsl	r8,0x2
80009dbe:	f4 08 00 08 	add	r8,r10,r8
80009dc2:	2f 08       	sub	r8,-16
80009dc4:	70 08       	ld.w	r8,r8[0x0]
80009dc6:	f6 08 00 08 	add	r8,r11,r8
80009dca:	f0 c9 00 01 	sub	r9,r8,1
80009dce:	4b 38       	lddpc	r8,80009e98 <fat_cache_clusterlist_update_read+0x278>
80009dd0:	11 98       	ld.ub	r8,r8[0x1]
80009dd2:	f2 08 0d 08 	divu	r8,r9,r8
80009dd6:	f0 c9 ff fe 	sub	r9,r8,-2
80009dda:	4b 18       	lddpc	r8,80009e9c <fat_cache_clusterlist_update_read+0x27c>
80009ddc:	91 09       	st.w	r8[0x0],r9
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
80009dde:	4b 18       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009de0:	70 18       	ld.w	r8,r8[0x4]
80009de2:	ef 48 ff f8 	st.w	r7[-8],r8
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80009de6:	4a f8       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009de8:	70 1c       	ld.w	r12,r8[0x4]
80009dea:	4a f8       	lddpc	r8,80009ea4 <fat_cache_clusterlist_update_read+0x284>
80009dec:	11 88       	ld.ub	r8,r8[0x0]
80009dee:	10 99       	mov	r9,r8
80009df0:	4a 9a       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009df2:	12 98       	mov	r8,r9
80009df4:	a3 68       	lsl	r8,0x2
80009df6:	12 08       	add	r8,r9
80009df8:	a3 68       	lsl	r8,0x2
80009dfa:	f4 08 00 08 	add	r8,r10,r8
80009dfe:	2f 88       	sub	r8,-8
80009e00:	70 0b       	ld.w	r11,r8[0x0]
80009e02:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009e06:	4a 4a       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009e08:	12 98       	mov	r8,r9
80009e0a:	a3 68       	lsl	r8,0x2
80009e0c:	12 08       	add	r8,r9
80009e0e:	a3 68       	lsl	r8,0x2
80009e10:	f4 08 00 08 	add	r8,r10,r8
80009e14:	2f 08       	sub	r8,-16
80009e16:	70 08       	ld.w	r8,r8[0x0]
80009e18:	f6 08 00 08 	add	r8,r11,r8
80009e1c:	f0 c9 00 01 	sub	r9,r8,1
80009e20:	49 e8       	lddpc	r8,80009e98 <fat_cache_clusterlist_update_read+0x278>
80009e22:	11 98       	ld.ub	r8,r8[0x1]
80009e24:	f2 08 0d 08 	divu	r8,r9,r8
80009e28:	10 99       	mov	r9,r8
80009e2a:	49 c8       	lddpc	r8,80009e98 <fat_cache_clusterlist_update_read+0x278>
80009e2c:	11 98       	ld.ub	r8,r8[0x1]
80009e2e:	f2 08 02 48 	mul	r8,r9,r8
80009e32:	f8 08 01 09 	sub	r9,r12,r8
80009e36:	49 b8       	lddpc	r8,80009ea0 <fat_cache_clusterlist_update_read+0x280>
80009e38:	91 19       	st.w	r8[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80009e3a:	49 b8       	lddpc	r8,80009ea4 <fat_cache_clusterlist_update_read+0x284>
80009e3c:	11 88       	ld.ub	r8,r8[0x0]
80009e3e:	10 99       	mov	r9,r8
80009e40:	49 5a       	lddpc	r10,80009e94 <fat_cache_clusterlist_update_read+0x274>
80009e42:	12 98       	mov	r8,r9
80009e44:	a3 68       	lsl	r8,0x2
80009e46:	12 08       	add	r8,r9
80009e48:	a3 68       	lsl	r8,0x2
80009e4a:	f4 08 00 08 	add	r8,r10,r8
80009e4e:	f0 c9 ff f8 	sub	r9,r8,-8
80009e52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e56:	93 08       	st.w	r9[0x0],r8
                  return FALSE;                                                        // The segment isn't in cluster list cache
80009e58:	30 08       	mov	r8,0
80009e5a:	ef 48 ff f0 	st.w	r7[-16],r8
80009e5e:	c1 58       	rjmp	80009e88 <fat_cache_clusterlist_update_read+0x268>
//!
Bool  fat_cache_clusterlist_update_read( Bool b_for_file )
{
   U32 u32_tmp;
   U8 u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009e60:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009e64:	2f f8       	sub	r8,-1
80009e66:	ef 68 ff ff 	st.b	r7[-1],r8
80009e6a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009e6e:	30 18       	mov	r8,1
80009e70:	f0 09 18 00 	cp.b	r9,r8
80009e74:	fe 98 fe e1 	brls	80009c36 <fat_cache_clusterlist_update_read+0x16>
            }
         }
      }
   }
   // No found in cache then read FAT and store the resultat in cache
   fat_cache_clusterlist_update_start(b_for_file);
80009e78:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009e7c:	10 9c       	mov	r12,r8
80009e7e:	f0 1f 00 0c 	mcall	80009eac <fat_cache_clusterlist_update_read+0x28c>
   return FALSE;
80009e82:	30 08       	mov	r8,0
80009e84:	ef 48 ff f0 	st.w	r7[-16],r8
80009e88:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80009e8c:	10 9c       	mov	r12,r8
80009e8e:	2f cd       	sub	sp,-16
80009e90:	e3 cd 80 80 	ldm	sp++,r7,pc
80009e94:	00 00       	add	r0,r0
80009e96:	0b 30       	ld.ub	r0,r5++
80009e98:	00 00       	add	r0,r0
80009e9a:	0d 58       	ld.sh	r8,--r6
80009e9c:	00 00       	add	r0,r0
80009e9e:	10 10       	sub	r0,r8
80009ea0:	00 00       	add	r0,r0
80009ea2:	10 18       	sub	r8,r8
80009ea4:	00 00       	add	r0,r0
80009ea6:	0e 42       	or	r2,r7
80009ea8:	80 00       	ld.sh	r0,r0[0x0]
80009eaa:	9b 34       	st.w	sp[0xc],r4
80009eac:	80 00       	ld.sh	r0,r0[0x0]
80009eae:	99 7c       	st.w	r12[0x1c],r12

80009eb0 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
Bool  fat_read_file( U8 mode )
{
80009eb0:	eb cd 40 80 	pushm	r7,lr
80009eb4:	1a 97       	mov	r7,sp
80009eb6:	20 3d       	sub	sp,12
80009eb8:	18 98       	mov	r8,r12
80009eba:	ef 68 ff f8 	st.b	r7[-8],r8
   U32   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80009ebe:	4c 68       	lddpc	r8,80009fd4 <fat_read_file+0x124>
80009ec0:	70 38       	ld.w	r8,r8[0xc]
80009ec2:	a9 98       	lsr	r8,0x9
80009ec4:	ef 48 ff fc 	st.w	r7[-4],r8

   if(FS_CLUST_ACT_ONE  == mode)
80009ec8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009ecc:	30 28       	mov	r8,2
80009ece:	f0 09 18 00 	cp.b	r9,r8
80009ed2:	c1 81       	brne	80009f02 <fat_read_file+0x52>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80009ed4:	4c 18       	lddpc	r8,80009fd8 <fat_read_file+0x128>
80009ed6:	11 89       	ld.ub	r9,r8[0x0]
80009ed8:	4c 18       	lddpc	r8,80009fdc <fat_read_file+0x12c>
80009eda:	11 88       	ld.ub	r8,r8[0x0]
80009edc:	f0 09 18 00 	cp.b	r9,r8
80009ee0:	c2 91       	brne	80009f32 <fat_read_file+0x82>
80009ee2:	4b e8       	lddpc	r8,80009fd8 <fat_read_file+0x128>
80009ee4:	70 39       	ld.w	r9,r8[0xc]
80009ee6:	4b c8       	lddpc	r8,80009fd4 <fat_read_file+0x124>
80009ee8:	70 18       	ld.w	r8,r8[0x4]
80009eea:	10 39       	cp.w	r9,r8
80009eec:	c2 31       	brne	80009f32 <fat_read_file+0x82>
80009eee:	4b b8       	lddpc	r8,80009fd8 <fat_read_file+0x128>
80009ef0:	70 49       	ld.w	r9,r8[0x10]
80009ef2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009ef6:	10 39       	cp.w	r9,r8
80009ef8:	c1 d1       	brne	80009f32 <fat_read_file+0x82>
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
      &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_sector_pos ) )
      {
         return TRUE;      // The internal cache contains the sector ascked
80009efa:	30 18       	mov	r8,1
80009efc:	ef 48 ff f4 	st.w	r7[-12],r8
80009f00:	c6 48       	rjmp	80009fc8 <fat_read_file+0x118>
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80009f02:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009f06:	30 38       	mov	r8,3
80009f08:	f0 09 18 00 	cp.b	r9,r8
80009f0c:	c1 31       	brne	80009f32 <fat_read_file+0x82>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80009f0e:	4b 28       	lddpc	r8,80009fd4 <fat_read_file+0x124>
80009f10:	70 18       	ld.w	r8,r8[0x4]
80009f12:	58 08       	cp.w	r8,0
80009f14:	c0 51       	brne	80009f1e <fat_read_file+0x6e>
            return TRUE;   // No cluster list is linked with the file, then no clear is necessary
80009f16:	30 18       	mov	r8,1
80009f18:	ef 48 ff f4 	st.w	r7[-12],r8
80009f1c:	c5 68       	rjmp	80009fc8 <fat_read_file+0x118>

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
80009f1e:	4a e8       	lddpc	r8,80009fd4 <fat_read_file+0x124>
80009f20:	70 38       	ld.w	r8,r8[0xc]
80009f22:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80009f26:	c0 60       	breq	80009f32 <fat_read_file+0x82>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80009f28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009f2c:	2f f8       	sub	r8,-1
80009f2e:	ef 48 ff fc 	st.w	r7[-4],r8
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80009f32:	4a 98       	lddpc	r8,80009fd4 <fat_read_file+0x124>
80009f34:	70 19       	ld.w	r9,r8[0x4]
80009f36:	4a b8       	lddpc	r8,80009fe0 <fat_read_file+0x130>
80009f38:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80009f3a:	4a a9       	lddpc	r9,80009fe0 <fat_read_file+0x130>
80009f3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009f40:	93 18       	st.w	r9[0x4],r8
   if( FS_CLUST_ACT_ONE != mode )
80009f42:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009f46:	30 28       	mov	r8,2
80009f48:	f0 09 18 00 	cp.b	r9,r8
80009f4c:	c0 e0       	breq	80009f68 <fat_read_file+0xb8>
   {
      if( fat_cluster_list( mode, TRUE ) )
80009f4e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009f52:	30 1b       	mov	r11,1
80009f54:	10 9c       	mov	r12,r8
80009f56:	f0 1f 00 24 	mcall	80009fe4 <fat_read_file+0x134>
80009f5a:	18 98       	mov	r8,r12
80009f5c:	58 08       	cp.w	r8,0
80009f5e:	c2 20       	breq	80009fa2 <fat_read_file+0xf2>
         return TRUE;      // Get or clear segment OK
80009f60:	30 18       	mov	r8,1
80009f62:	ef 48 ff f4 	st.w	r7[-12],r8
80009f66:	c3 18       	rjmp	80009fc8 <fat_read_file+0x118>
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, TRUE ) )   // Read all segment
80009f68:	30 1b       	mov	r11,1
80009f6a:	30 1c       	mov	r12,1
80009f6c:	f0 1f 00 1e 	mcall	80009fe4 <fat_read_file+0x134>
80009f70:	18 98       	mov	r8,r12
80009f72:	58 08       	cp.w	r8,0
80009f74:	c1 70       	breq	80009fa2 <fat_read_file+0xf2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
80009f76:	49 b8       	lddpc	r8,80009fe0 <fat_read_file+0x130>
80009f78:	70 09       	ld.w	r9,r8[0x0]
80009f7a:	49 c8       	lddpc	r8,80009fe8 <fat_read_file+0x138>
80009f7c:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( TRUE ) )
80009f7e:	30 1c       	mov	r12,1
80009f80:	f0 1f 00 1b 	mcall	80009fec <fat_read_file+0x13c>
80009f84:	18 98       	mov	r8,r12
80009f86:	58 08       	cp.w	r8,0
80009f88:	c0 d0       	breq	80009fa2 <fat_read_file+0xf2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
80009f8a:	49 38       	lddpc	r8,80009fd4 <fat_read_file+0x124>
80009f8c:	70 19       	ld.w	r9,r8[0x4]
80009f8e:	49 38       	lddpc	r8,80009fd8 <fat_read_file+0x128>
80009f90:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80009f92:	49 29       	lddpc	r9,80009fd8 <fat_read_file+0x128>
80009f94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009f98:	93 48       	st.w	r9[0x10],r8
            return TRUE;
80009f9a:	30 18       	mov	r8,1
80009f9c:	ef 48 ff f4 	st.w	r7[-12],r8
80009fa0:	c1 48       	rjmp	80009fc8 <fat_read_file+0x118>
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
80009fa2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009fa6:	30 38       	mov	r8,3
80009fa8:	f0 09 18 00 	cp.b	r9,r8
80009fac:	c0 b1       	brne	80009fc2 <fat_read_file+0x112>
80009fae:	49 18       	lddpc	r8,80009ff0 <fat_read_file+0x140>
80009fb0:	11 89       	ld.ub	r9,r8[0x0]
80009fb2:	31 a8       	mov	r8,26
80009fb4:	f0 09 18 00 	cp.b	r9,r8
80009fb8:	c0 51       	brne	80009fc2 <fat_read_file+0x112>
   &&  (FS_ERR_OUT_LIST  == fs_g_status) )
   {
      // It is possible to clear nothing
      return TRUE;
80009fba:	30 18       	mov	r8,1
80009fbc:	ef 48 ff f4 	st.w	r7[-12],r8
80009fc0:	c0 48       	rjmp	80009fc8 <fat_read_file+0x118>
   }
   return FALSE;
80009fc2:	30 08       	mov	r8,0
80009fc4:	ef 48 ff f4 	st.w	r7[-12],r8
80009fc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80009fcc:	10 9c       	mov	r12,r8
80009fce:	2f dd       	sub	sp,-12
80009fd0:	e3 cd 80 80 	ldm	sp++,r7,pc
80009fd4:	00 00       	add	r0,r0
80009fd6:	0b 1c       	ld.sh	r12,r5++
80009fd8:	00 00       	add	r0,r0
80009fda:	0f f8       	ld.ub	r8,r7[0x7]
80009fdc:	00 00       	add	r0,r0
80009fde:	0d 58       	ld.sh	r8,--r6
80009fe0:	00 00       	add	r0,r0
80009fe2:	10 18       	sub	r8,r8
80009fe4:	80 00       	ld.sh	r0,r0[0x0]
80009fe6:	8d cc       	st.w	r6[0x30],r12
80009fe8:	00 00       	add	r0,r0
80009fea:	0b 18       	ld.sh	r8,r5++
80009fec:	80 00       	ld.sh	r0,r0[0x0]
80009fee:	aa 74       	st.h	r5[0xe],r4
80009ff0:	00 00       	add	r0,r0
80009ff2:	0e 40       	or	r0,r7

80009ff4 <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
Bool  fat_write_file( U8 mode , U32 u32_nb_sector_write )
{
80009ff4:	eb cd 40 80 	pushm	r7,lr
80009ff8:	1a 97       	mov	r7,sp
80009ffa:	20 3d       	sub	sp,12
80009ffc:	18 98       	mov	r8,r12
80009ffe:	ef 4b ff f8 	st.w	r7[-8],r11
8000a002:	ef 68 ff fc 	st.b	r7[-4],r8
   if( 0 == fs_g_nav_entry.u32_cluster )
8000a006:	4d 68       	lddpc	r8,8000a15c <fat_write_file+0x168>
8000a008:	70 18       	ld.w	r8,r8[0x4]
8000a00a:	58 08       	cp.w	r8,0
8000a00c:	c0 b1       	brne	8000a022 <fat_write_file+0x2e>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
8000a00e:	4d 59       	lddpc	r9,8000a160 <fat_write_file+0x16c>
8000a010:	3f f8       	mov	r8,-1
8000a012:	b2 88       	st.b	r9[0x0],r8
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
8000a014:	4d 39       	lddpc	r9,8000a160 <fat_write_file+0x16c>
8000a016:	30 08       	mov	r8,0
8000a018:	93 18       	st.w	r9[0x4],r8
      fat_cache_clusterlist_update_start(TRUE);
8000a01a:	30 1c       	mov	r12,1
8000a01c:	f0 1f 00 52 	mcall	8000a164 <fat_write_file+0x170>
8000a020:	c3 f8       	rjmp	8000a09e <fat_write_file+0xaa>
   }
   else
   {
      if( fat_read_file( mode ) )
8000a022:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a026:	10 9c       	mov	r12,r8
8000a028:	f0 1f 00 50 	mcall	8000a168 <fat_write_file+0x174>
8000a02c:	18 98       	mov	r8,r12
8000a02e:	58 08       	cp.w	r8,0
8000a030:	c0 50       	breq	8000a03a <fat_write_file+0x46>
         return TRUE;      // A segment is availabled (no alloc necessary)
8000a032:	30 18       	mov	r8,1
8000a034:	ef 48 ff f4 	st.w	r7[-12],r8
8000a038:	c8 c8       	rjmp	8000a150 <fat_write_file+0x15c>

      if( FS_ERR_OUT_LIST != fs_g_status )
8000a03a:	4c d8       	lddpc	r8,8000a16c <fat_write_file+0x178>
8000a03c:	11 89       	ld.ub	r9,r8[0x0]
8000a03e:	31 a8       	mov	r8,26
8000a040:	f0 09 18 00 	cp.b	r9,r8
8000a044:	c0 50       	breq	8000a04e <fat_write_file+0x5a>
      {
         return FALSE;     // Error system
8000a046:	30 08       	mov	r8,0
8000a048:	ef 48 ff f4 	st.w	r7[-12],r8
8000a04c:	c8 28       	rjmp	8000a150 <fat_write_file+0x15c>
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
8000a04e:	4c 98       	lddpc	r8,8000a170 <fat_write_file+0x17c>
8000a050:	11 88       	ld.ub	r8,r8[0x0]
8000a052:	10 99       	mov	r9,r8
8000a054:	4c 8a       	lddpc	r10,8000a174 <fat_write_file+0x180>
8000a056:	12 98       	mov	r8,r9
8000a058:	a3 68       	lsl	r8,0x2
8000a05a:	12 08       	add	r8,r9
8000a05c:	a3 68       	lsl	r8,0x2
8000a05e:	f4 08 00 09 	add	r9,r10,r8
8000a062:	3f f8       	mov	r8,-1
8000a064:	b2 a8       	st.b	r9[0x2],r8
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
8000a066:	4c 38       	lddpc	r8,8000a170 <fat_write_file+0x17c>
8000a068:	11 88       	ld.ub	r8,r8[0x0]
8000a06a:	10 9b       	mov	r11,r8
8000a06c:	4c 18       	lddpc	r8,8000a170 <fat_write_file+0x17c>
8000a06e:	11 88       	ld.ub	r8,r8[0x0]
8000a070:	10 99       	mov	r9,r8
8000a072:	4c 1a       	lddpc	r10,8000a174 <fat_write_file+0x180>
8000a074:	12 98       	mov	r8,r9
8000a076:	a3 68       	lsl	r8,0x2
8000a078:	12 08       	add	r8,r9
8000a07a:	a3 68       	lsl	r8,0x2
8000a07c:	f4 08 00 08 	add	r8,r10,r8
8000a080:	2f 88       	sub	r8,-8
8000a082:	70 09       	ld.w	r9,r8[0x0]
8000a084:	4b d8       	lddpc	r8,8000a178 <fat_write_file+0x184>
8000a086:	11 98       	ld.ub	r8,r8[0x1]
8000a088:	f2 08 00 0a 	add	r10,r9,r8
8000a08c:	4b a9       	lddpc	r9,8000a174 <fat_write_file+0x180>
8000a08e:	16 98       	mov	r8,r11
8000a090:	a3 68       	lsl	r8,0x2
8000a092:	16 08       	add	r8,r11
8000a094:	a3 68       	lsl	r8,0x2
8000a096:	f2 08 00 08 	add	r8,r9,r8
8000a09a:	2f 88       	sub	r8,-8
8000a09c:	91 0a       	st.w	r8[0x0],r10
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
8000a09e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000a0a2:	30 18       	mov	r8,1
8000a0a4:	f0 09 18 00 	cp.b	r9,r8
8000a0a8:	c0 61       	brne	8000a0b4 <fat_write_file+0xc0>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
8000a0aa:	4a e9       	lddpc	r9,8000a160 <fat_write_file+0x16c>
8000a0ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a0b0:	93 18       	st.w	r9[0x4],r8
8000a0b2:	c0 48       	rjmp	8000a0ba <fat_write_file+0xc6>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
8000a0b4:	4a b9       	lddpc	r9,8000a160 <fat_write_file+0x16c>
8000a0b6:	30 18       	mov	r8,1
8000a0b8:	93 18       	st.w	r9[0x4],r8
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
8000a0ba:	f0 1f 00 31 	mcall	8000a17c <fat_write_file+0x188>
8000a0be:	18 98       	mov	r8,r12
8000a0c0:	58 08       	cp.w	r8,0
8000a0c2:	c0 51       	brne	8000a0cc <fat_write_file+0xd8>
      return FALSE;
8000a0c4:	30 08       	mov	r8,0
8000a0c6:	ef 48 ff f4 	st.w	r7[-12],r8
8000a0ca:	c4 38       	rjmp	8000a150 <fat_write_file+0x15c>
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
8000a0cc:	4a 48       	lddpc	r8,8000a15c <fat_write_file+0x168>
8000a0ce:	70 18       	ld.w	r8,r8[0x4]
8000a0d0:	58 08       	cp.w	r8,0
8000a0d2:	c1 11       	brne	8000a0f4 <fat_write_file+0x100>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contzins the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
8000a0d4:	4a 78       	lddpc	r8,8000a170 <fat_write_file+0x17c>
8000a0d6:	11 88       	ld.ub	r8,r8[0x0]
8000a0d8:	10 99       	mov	r9,r8
8000a0da:	4a 28       	lddpc	r8,8000a160 <fat_write_file+0x16c>
8000a0dc:	70 0b       	ld.w	r11,r8[0x0]
8000a0de:	4a 6a       	lddpc	r10,8000a174 <fat_write_file+0x180>
8000a0e0:	12 98       	mov	r8,r9
8000a0e2:	a3 68       	lsl	r8,0x2
8000a0e4:	12 08       	add	r8,r9
8000a0e6:	2f f8       	sub	r8,-1
8000a0e8:	f4 08 09 2b 	st.w	r10[r8<<0x2],r11
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
8000a0ec:	49 d8       	lddpc	r8,8000a160 <fat_write_file+0x16c>
8000a0ee:	70 09       	ld.w	r9,r8[0x0]
8000a0f0:	49 b8       	lddpc	r8,8000a15c <fat_write_file+0x168>
8000a0f2:	91 19       	st.w	r8[0x4],r9
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
8000a0f4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000a0f8:	30 18       	mov	r8,1
8000a0fa:	f0 09 18 00 	cp.b	r9,r8
8000a0fe:	c0 a1       	brne	8000a112 <fat_write_file+0x11e>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
8000a100:	49 88       	lddpc	r8,8000a160 <fat_write_file+0x16c>
8000a102:	70 19       	ld.w	r9,r8[0x4]
8000a104:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a108:	f0 09 01 09 	sub	r9,r8,r9
8000a10c:	49 58       	lddpc	r8,8000a160 <fat_write_file+0x16c>
8000a10e:	91 19       	st.w	r8[0x4],r9
8000a110:	c0 78       	rjmp	8000a11e <fat_write_file+0x12a>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
8000a112:	49 48       	lddpc	r8,8000a160 <fat_write_file+0x16c>
8000a114:	70 18       	ld.w	r8,r8[0x4]
8000a116:	f0 09 11 01 	rsub	r9,r8,1
8000a11a:	49 28       	lddpc	r8,8000a160 <fat_write_file+0x16c>
8000a11c:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000a11e:	49 18       	lddpc	r8,8000a160 <fat_write_file+0x16c>
8000a120:	70 08       	ld.w	r8,r8[0x0]
8000a122:	f0 c9 00 02 	sub	r9,r8,2
8000a126:	49 58       	lddpc	r8,8000a178 <fat_write_file+0x184>
8000a128:	11 98       	ld.ub	r8,r8[0x1]
8000a12a:	b1 39       	mul	r9,r8
8000a12c:	49 38       	lddpc	r8,8000a178 <fat_write_file+0x184>
8000a12e:	70 38       	ld.w	r8,r8[0xc]
8000a130:	10 09       	add	r9,r8
8000a132:	49 28       	lddpc	r8,8000a178 <fat_write_file+0x184>
8000a134:	70 48       	ld.w	r8,r8[0x10]
8000a136:	10 09       	add	r9,r8
8000a138:	48 a8       	lddpc	r8,8000a160 <fat_write_file+0x16c>
8000a13a:	91 09       	st.w	r8[0x0],r9
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
8000a13c:	f0 1f 00 11 	mcall	8000a180 <fat_write_file+0x18c>

   return fat_read_file( mode );    // load the new cluster list
8000a140:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a144:	10 9c       	mov	r12,r8
8000a146:	f0 1f 00 09 	mcall	8000a168 <fat_write_file+0x174>
8000a14a:	18 98       	mov	r8,r12
8000a14c:	ef 48 ff f4 	st.w	r7[-12],r8
8000a150:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000a154:	10 9c       	mov	r12,r8
8000a156:	2f dd       	sub	sp,-12
8000a158:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a15c:	00 00       	add	r0,r0
8000a15e:	0b 1c       	ld.sh	r12,r5++
8000a160:	00 00       	add	r0,r0
8000a162:	10 18       	sub	r8,r8
8000a164:	80 00       	ld.sh	r0,r0[0x0]
8000a166:	99 7c       	st.w	r12[0x1c],r12
8000a168:	80 00       	ld.sh	r0,r0[0x0]
8000a16a:	9e b0       	ld.uh	r0,pc[0x6]
8000a16c:	00 00       	add	r0,r0
8000a16e:	0e 40       	or	r0,r7
8000a170:	00 00       	add	r0,r0
8000a172:	0e 42       	or	r2,r7
8000a174:	00 00       	add	r0,r0
8000a176:	0b 30       	ld.ub	r0,r5++
8000a178:	00 00       	add	r0,r0
8000a17a:	0d 58       	ld.sh	r8,--r6
8000a17c:	80 00       	ld.sh	r0,r0[0x0]
8000a17e:	c5 50       	breq	8000a228 <fat_read_dir+0xa4>
8000a180:	80 00       	ld.sh	r0,r0[0x0]
8000a182:	9a 4c       	ld.sh	r12,sp[0x8]

8000a184 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
Bool  fat_read_dir( void )
{
8000a184:	eb cd 40 80 	pushm	r7,lr
8000a188:	1a 97       	mov	r7,sp
8000a18a:	20 2d       	sub	sp,8
   U32 u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
8000a18c:	4a 78       	lddpc	r8,8000a228 <fat_read_dir+0xa4>
8000a18e:	90 18       	ld.sh	r8,r8[0x2]
8000a190:	5c 78       	castu.h	r8
8000a192:	a5 88       	lsr	r8,0x4
8000a194:	5c 88       	casts.h	r8
8000a196:	5c 78       	castu.h	r8
8000a198:	ef 48 ff fc 	st.w	r7[-4],r8

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000a19c:	4a 48       	lddpc	r8,8000a22c <fat_read_dir+0xa8>
8000a19e:	11 89       	ld.ub	r9,r8[0x0]
8000a1a0:	4a 48       	lddpc	r8,8000a230 <fat_read_dir+0xac>
8000a1a2:	11 88       	ld.ub	r8,r8[0x0]
8000a1a4:	f0 09 18 00 	cp.b	r9,r8
8000a1a8:	c1 11       	brne	8000a1ca <fat_read_dir+0x46>
8000a1aa:	4a 18       	lddpc	r8,8000a22c <fat_read_dir+0xa8>
8000a1ac:	70 39       	ld.w	r9,r8[0xc]
8000a1ae:	4a 18       	lddpc	r8,8000a230 <fat_read_dir+0xac>
8000a1b0:	70 78       	ld.w	r8,r8[0x1c]
8000a1b2:	10 39       	cp.w	r9,r8
8000a1b4:	c0 b1       	brne	8000a1ca <fat_read_dir+0x46>
8000a1b6:	49 e8       	lddpc	r8,8000a22c <fat_read_dir+0xa8>
8000a1b8:	70 49       	ld.w	r9,r8[0x10]
8000a1ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a1be:	10 39       	cp.w	r9,r8
8000a1c0:	c0 51       	brne	8000a1ca <fat_read_dir+0x46>
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
   &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_cluster_pos ) )
   {
         return TRUE;      // The internal cache contains the sector ascked
8000a1c2:	30 18       	mov	r8,1
8000a1c4:	ef 48 ff f8 	st.w	r7[-8],r8
8000a1c8:	c2 98       	rjmp	8000a21a <fat_read_dir+0x96>
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
8000a1ca:	49 a8       	lddpc	r8,8000a230 <fat_read_dir+0xac>
8000a1cc:	70 79       	ld.w	r9,r8[0x1c]
8000a1ce:	49 a8       	lddpc	r8,8000a234 <fat_read_dir+0xb0>
8000a1d0:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
8000a1d2:	49 99       	lddpc	r9,8000a234 <fat_read_dir+0xb0>
8000a1d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a1d8:	93 18       	st.w	r9[0x4],r8
   if( fat_cluster_list( FS_CLUST_ACT_ONE, FALSE ) )
8000a1da:	30 0b       	mov	r11,0
8000a1dc:	30 2c       	mov	r12,2
8000a1de:	f0 1f 00 17 	mcall	8000a238 <fat_read_dir+0xb4>
8000a1e2:	18 98       	mov	r8,r12
8000a1e4:	58 08       	cp.w	r8,0
8000a1e6:	c1 70       	breq	8000a214 <fat_read_dir+0x90>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
8000a1e8:	49 38       	lddpc	r8,8000a234 <fat_read_dir+0xb0>
8000a1ea:	70 09       	ld.w	r9,r8[0x0]
8000a1ec:	49 48       	lddpc	r8,8000a23c <fat_read_dir+0xb8>
8000a1ee:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( TRUE ) )
8000a1f0:	30 1c       	mov	r12,1
8000a1f2:	f0 1f 00 14 	mcall	8000a240 <fat_read_dir+0xbc>
8000a1f6:	18 98       	mov	r8,r12
8000a1f8:	58 08       	cp.w	r8,0
8000a1fa:	c0 d0       	breq	8000a214 <fat_read_dir+0x90>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
8000a1fc:	48 d8       	lddpc	r8,8000a230 <fat_read_dir+0xac>
8000a1fe:	70 79       	ld.w	r9,r8[0x1c]
8000a200:	48 b8       	lddpc	r8,8000a22c <fat_read_dir+0xa8>
8000a202:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
8000a204:	48 a9       	lddpc	r9,8000a22c <fat_read_dir+0xa8>
8000a206:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a20a:	93 48       	st.w	r9[0x10],r8
         return TRUE;
8000a20c:	30 18       	mov	r8,1
8000a20e:	ef 48 ff f8 	st.w	r7[-8],r8
8000a212:	c0 48       	rjmp	8000a21a <fat_read_dir+0x96>
      }
   }
   return FALSE;
8000a214:	30 08       	mov	r8,0
8000a216:	ef 48 ff f8 	st.w	r7[-8],r8
8000a21a:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000a21e:	10 9c       	mov	r12,r8
8000a220:	2f ed       	sub	sp,-8
8000a222:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a226:	00 00       	add	r0,r0
8000a228:	00 00       	add	r0,r0
8000a22a:	0e 3c       	cp.w	r12,r7
8000a22c:	00 00       	add	r0,r0
8000a22e:	0f f8       	ld.ub	r8,r7[0x7]
8000a230:	00 00       	add	r0,r0
8000a232:	0d 58       	ld.sh	r8,--r6
8000a234:	00 00       	add	r0,r0
8000a236:	10 18       	sub	r8,r8
8000a238:	80 00       	ld.sh	r0,r0[0x0]
8000a23a:	8d cc       	st.w	r6[0x30],r12
8000a23c:	00 00       	add	r0,r0
8000a23e:	0b 18       	ld.sh	r8,r5++
8000a240:	80 00       	ld.sh	r0,r0[0x0]
8000a242:	aa 74       	st.h	r5[0xe],r4

8000a244 <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
Bool  fat_entry_check( Bool b_type )
{
8000a244:	eb cd 40 80 	pushm	r7,lr
8000a248:	1a 97       	mov	r7,sp
8000a24a:	20 4d       	sub	sp,16
8000a24c:	18 98       	mov	r8,r12
8000a24e:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE u8_ptr_entry;
   U8 u8_first_byte, u8_seconde_byte;
   U8 u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
8000a252:	f0 1f 00 38 	mcall	8000a330 <fat_entry_check+0xec>
8000a256:	18 98       	mov	r8,r12
8000a258:	ef 48 ff f8 	st.w	r7[-8],r8

   u8_first_byte = u8_ptr_entry[0];
8000a25c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a260:	11 88       	ld.ub	r8,r8[0x0]
8000a262:	ef 68 ff fd 	st.b	r7[-3],r8
   if ( FS_ENTRY_END == u8_first_byte )
8000a266:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a26a:	30 08       	mov	r8,0
8000a26c:	f0 09 18 00 	cp.b	r9,r8
8000a270:	c0 81       	brne	8000a280 <fat_entry_check+0x3c>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
8000a272:	4b 19       	lddpc	r9,8000a334 <fat_entry_check+0xf0>
8000a274:	30 a8       	mov	r8,10
8000a276:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
8000a278:	30 08       	mov	r8,0
8000a27a:	ef 48 ff f0 	st.w	r7[-16],r8
8000a27e:	c5 38       	rjmp	8000a324 <fat_entry_check+0xe0>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
8000a280:	4a d9       	lddpc	r9,8000a334 <fat_entry_check+0xf0>
8000a282:	30 b8       	mov	r8,11
8000a284:	b2 88       	st.b	r9[0x0],r8
   if ( FS_ENTRY_DEL == u8_first_byte )      { return FALSE;   } // entry deleted
8000a286:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a28a:	3e 58       	mov	r8,-27
8000a28c:	f0 09 18 00 	cp.b	r9,r8
8000a290:	c0 51       	brne	8000a29a <fat_entry_check+0x56>
8000a292:	30 08       	mov	r8,0
8000a294:	ef 48 ff f0 	st.w	r7[-16],r8
8000a298:	c4 68       	rjmp	8000a324 <fat_entry_check+0xe0>
   if (   '.'  == u8_first_byte )            { return FALSE;   } // current dir "."
8000a29a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a29e:	32 e8       	mov	r8,46
8000a2a0:	f0 09 18 00 	cp.b	r9,r8
8000a2a4:	c0 51       	brne	8000a2ae <fat_entry_check+0x6a>
8000a2a6:	30 08       	mov	r8,0
8000a2a8:	ef 48 ff f0 	st.w	r7[-16],r8
8000a2ac:	c3 c8       	rjmp	8000a324 <fat_entry_check+0xe0>
   u8_seconde_byte = u8_ptr_entry[1];
8000a2ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a2b2:	2f f8       	sub	r8,-1
8000a2b4:	11 88       	ld.ub	r8,r8[0x0]
8000a2b6:	ef 68 ff fe 	st.b	r7[-2],r8
   if ( ('.'  == u8_first_byte)
8000a2ba:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a2be:	32 e8       	mov	r8,46
8000a2c0:	f0 09 18 00 	cp.b	r9,r8
8000a2c4:	c0 b1       	brne	8000a2da <fat_entry_check+0x96>
8000a2c6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000a2ca:	32 e8       	mov	r8,46
8000a2cc:	f0 09 18 00 	cp.b	r9,r8
8000a2d0:	c0 51       	brne	8000a2da <fat_entry_check+0x96>
   &&   ('.'  == u8_seconde_byte) )          { return FALSE;   } // current dir ".."
8000a2d2:	30 08       	mov	r8,0
8000a2d4:	ef 48 ff f0 	st.w	r7[-16],r8
8000a2d8:	c2 68       	rjmp	8000a324 <fat_entry_check+0xe0>

   // Check attribut
   u8_attribut = u8_ptr_entry[11];
8000a2da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a2de:	2f 58       	sub	r8,-11
8000a2e0:	11 88       	ld.ub	r8,r8[0x0]
8000a2e2:	ef 68 ff ff 	st.b	r7[-1],r8
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return FALSE;   } // volume id
8000a2e6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2ea:	e2 18 00 08 	andl	r8,0x8,COH
8000a2ee:	c0 50       	breq	8000a2f8 <fat_entry_check+0xb4>
8000a2f0:	30 08       	mov	r8,0
8000a2f2:	ef 48 ff f0 	st.w	r7[-16],r8
8000a2f6:	c1 78       	rjmp	8000a324 <fat_entry_check+0xe0>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return FALSE;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
8000a2f8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2fc:	e2 18 00 10 	andl	r8,0x10,COH
8000a300:	c0 a0       	breq	8000a314 <fat_entry_check+0xd0>
   {
      return (FS_DIR == b_type);
8000a302:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a306:	30 08       	mov	r8,0
8000a308:	f0 09 18 00 	cp.b	r9,r8
8000a30c:	5f 08       	sreq	r8
8000a30e:	ef 48 ff f0 	st.w	r7[-16],r8
8000a312:	c0 98       	rjmp	8000a324 <fat_entry_check+0xe0>
   }else{
      return (FS_FILE == b_type);
8000a314:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a318:	30 18       	mov	r8,1
8000a31a:	f0 09 18 00 	cp.b	r9,r8
8000a31e:	5f 08       	sreq	r8
8000a320:	ef 48 ff f0 	st.w	r7[-16],r8
8000a324:	ee f8 ff f0 	ld.w	r8,r7[-16]
   }
}
8000a328:	10 9c       	mov	r12,r8
8000a32a:	2f cd       	sub	sp,-16
8000a32c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a330:	80 00       	ld.sh	r0,r0[0x0]
8000a332:	aa 4c       	st.h	r5[0x8],r12
8000a334:	00 00       	add	r0,r0
8000a336:	0e 40       	or	r0,r7

8000a338 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
8000a338:	eb cd 40 80 	pushm	r7,lr
8000a33c:	1a 97       	mov	r7,sp
8000a33e:	20 1d       	sub	sp,4
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
8000a340:	f0 1f 00 32 	mcall	8000a408 <fat_get_entry_info+0xd0>
8000a344:	18 98       	mov	r8,r12
8000a346:	ef 48 ff fc 	st.w	r7[-4],r8

   // Get attribut
   ptr_entry+= 11;
8000a34a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a34e:	2f 58       	sub	r8,-11
8000a350:	ef 48 ff fc 	st.w	r7[-4],r8
   fs_g_nav_entry.u8_attr = ptr_entry[0];
8000a354:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a358:	11 88       	ld.ub	r8,r8[0x0]
8000a35a:	4a d9       	lddpc	r9,8000a40c <fat_get_entry_info+0xd4>
8000a35c:	b2 a8       	st.b	r9[0x2],r8

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
8000a35e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a362:	2f 78       	sub	r8,-9
8000a364:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000a368:	4a 98       	lddpc	r8,8000a40c <fat_get_entry_info+0xd4>
8000a36a:	2f c8       	sub	r8,-4
8000a36c:	f0 c9 ff ff 	sub	r9,r8,-1
8000a370:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a374:	11 88       	ld.ub	r8,r8[0x0]
8000a376:	b2 88       	st.b	r9[0x0],r8
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000a378:	4a 58       	lddpc	r8,8000a40c <fat_get_entry_info+0xd4>
8000a37a:	f0 c9 ff fc 	sub	r9,r8,-4
8000a37e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a382:	2f f8       	sub	r8,-1
8000a384:	11 88       	ld.ub	r8,r8[0x0]
8000a386:	b2 88       	st.b	r9[0x0],r8
   ptr_entry += (26-20);
8000a388:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a38c:	2f a8       	sub	r8,-6
8000a38e:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000a392:	49 f8       	lddpc	r8,8000a40c <fat_get_entry_info+0xd4>
8000a394:	2f c8       	sub	r8,-4
8000a396:	f0 c9 ff fd 	sub	r9,r8,-3
8000a39a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a39e:	11 88       	ld.ub	r8,r8[0x0]
8000a3a0:	b2 88       	st.b	r9[0x0],r8
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000a3a2:	49 b8       	lddpc	r8,8000a40c <fat_get_entry_info+0xd4>
8000a3a4:	2f c8       	sub	r8,-4
8000a3a6:	f0 c9 ff fe 	sub	r9,r8,-2
8000a3aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3ae:	2f f8       	sub	r8,-1
8000a3b0:	11 88       	ld.ub	r8,r8[0x0]
8000a3b2:	b2 88       	st.b	r9[0x0],r8

   // Get the size of file
   ptr_entry += (28-26);
8000a3b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3b8:	2f e8       	sub	r8,-2
8000a3ba:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
8000a3be:	49 48       	lddpc	r8,8000a40c <fat_get_entry_info+0xd4>
8000a3c0:	2f 88       	sub	r8,-8
8000a3c2:	f0 c9 ff fd 	sub	r9,r8,-3
8000a3c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3ca:	11 88       	ld.ub	r8,r8[0x0]
8000a3cc:	b2 88       	st.b	r9[0x0],r8
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
8000a3ce:	49 08       	lddpc	r8,8000a40c <fat_get_entry_info+0xd4>
8000a3d0:	2f 88       	sub	r8,-8
8000a3d2:	f0 c9 ff fe 	sub	r9,r8,-2
8000a3d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3da:	2f f8       	sub	r8,-1
8000a3dc:	11 88       	ld.ub	r8,r8[0x0]
8000a3de:	b2 88       	st.b	r9[0x0],r8
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
8000a3e0:	48 b8       	lddpc	r8,8000a40c <fat_get_entry_info+0xd4>
8000a3e2:	2f 88       	sub	r8,-8
8000a3e4:	f0 c9 ff ff 	sub	r9,r8,-1
8000a3e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3ec:	2f e8       	sub	r8,-2
8000a3ee:	11 88       	ld.ub	r8,r8[0x0]
8000a3f0:	b2 88       	st.b	r9[0x0],r8
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
8000a3f2:	48 78       	lddpc	r8,8000a40c <fat_get_entry_info+0xd4>
8000a3f4:	f0 c9 ff f8 	sub	r9,r8,-8
8000a3f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3fc:	2f d8       	sub	r8,-3
8000a3fe:	11 88       	ld.ub	r8,r8[0x0]
8000a400:	b2 88       	st.b	r9[0x0],r8
}
8000a402:	2f fd       	sub	sp,-4
8000a404:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a408:	80 00       	ld.sh	r0,r0[0x0]
8000a40a:	aa 4c       	st.h	r5[0x8],r12
8000a40c:	00 00       	add	r0,r0
8000a40e:	0b 1c       	ld.sh	r12,r5++

8000a410 <fat_entry_is_dir>:
//!
//! @return    TRUE,    this entry is a directory
//! @return    FALSE,   otherwise
//!
Bool  fat_entry_is_dir(void)
{
8000a410:	eb cd 40 80 	pushm	r7,lr
8000a414:	1a 97       	mov	r7,sp
   fs_g_status = FS_ERR_NO_DIR;
8000a416:	48 69       	lddpc	r9,8000a42c <fat_entry_is_dir+0x1c>
8000a418:	30 d8       	mov	r8,13
8000a41a:	b2 88       	st.b	r9[0x0],r8
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
8000a41c:	48 58       	lddpc	r8,8000a430 <fat_entry_is_dir+0x20>
8000a41e:	11 a8       	ld.ub	r8,r8[0x2]
8000a420:	e2 18 00 10 	andl	r8,0x10,COH
}
8000a424:	10 9c       	mov	r12,r8
8000a426:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a42a:	00 00       	add	r0,r0
8000a42c:	00 00       	add	r0,r0
8000a42e:	0e 40       	or	r0,r7
8000a430:	00 00       	add	r0,r0
8000a432:	0b 1c       	ld.sh	r12,r5++

8000a434 <fat_clear_entry_info_and_ptr>:


//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
8000a434:	eb cd 40 80 	pushm	r7,lr
8000a438:	1a 97       	mov	r7,sp
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
8000a43a:	49 09       	lddpc	r9,8000a478 <fat_clear_entry_info_and_ptr+0x44>
8000a43c:	3f f8       	mov	r8,-1
8000a43e:	b2 18       	st.h	r9[0x2],r8
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
8000a440:	48 f9       	lddpc	r9,8000a47c <fat_clear_entry_info_and_ptr+0x48>
8000a442:	3f f8       	mov	r8,-1
8000a444:	f3 58 00 20 	st.h	r9[32],r8
   if( !fs_g_nav.b_mode_nav_single )
8000a448:	48 d8       	lddpc	r8,8000a47c <fat_clear_entry_info_and_ptr+0x48>
8000a44a:	f1 38 00 29 	ld.ub	r8,r8[41]
8000a44e:	58 08       	cp.w	r8,0
8000a450:	c0 51       	brne	8000a45a <fat_clear_entry_info_and_ptr+0x26>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
8000a452:	48 b9       	lddpc	r9,8000a47c <fat_clear_entry_info_and_ptr+0x48>
8000a454:	30 08       	mov	r8,0
8000a456:	f3 68 00 28 	st.b	r9[40],r8
   }
   fs_g_nav_entry.u8_attr     = 0;
8000a45a:	48 a9       	lddpc	r9,8000a480 <fat_clear_entry_info_and_ptr+0x4c>
8000a45c:	30 08       	mov	r8,0
8000a45e:	b2 a8       	st.b	r9[0x2],r8
   fs_g_nav_entry.u32_cluster = 0;
8000a460:	48 89       	lddpc	r9,8000a480 <fat_clear_entry_info_and_ptr+0x4c>
8000a462:	30 08       	mov	r8,0
8000a464:	93 18       	st.w	r9[0x4],r8
   fs_g_nav_entry.u32_size    = 0;
8000a466:	48 79       	lddpc	r9,8000a480 <fat_clear_entry_info_and_ptr+0x4c>
8000a468:	30 08       	mov	r8,0
8000a46a:	93 28       	st.w	r9[0x8],r8
   Fat_file_close();
8000a46c:	48 59       	lddpc	r9,8000a480 <fat_clear_entry_info_and_ptr+0x4c>
8000a46e:	30 08       	mov	r8,0
8000a470:	b2 88       	st.b	r9[0x0],r8
}
8000a472:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a476:	00 00       	add	r0,r0
8000a478:	00 00       	add	r0,r0
8000a47a:	0e 3c       	cp.w	r12,r7
8000a47c:	00 00       	add	r0,r0
8000a47e:	0d 58       	ld.sh	r8,--r6
8000a480:	00 00       	add	r0,r0
8000a482:	0b 1c       	ld.sh	r12,r5++

8000a484 <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
8000a484:	eb cd 40 80 	pushm	r7,lr
8000a488:	1a 97       	mov	r7,sp
8000a48a:	20 1d       	sub	sp,4
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
8000a48c:	f0 1f 00 32 	mcall	8000a554 <fat_write_entry_file+0xd0>
   ptr_entry = fat_get_ptr_entry();
8000a490:	f0 1f 00 32 	mcall	8000a558 <fat_write_entry_file+0xd4>
8000a494:	18 98       	mov	r8,r12
8000a496:	ef 48 ff fc 	st.w	r7[-4],r8
      if( 0 == fs_g_nav_entry.u32_size )
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the attribut
   ptr_entry+= 11;
8000a49a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a49e:	2f 58       	sub	r8,-11
8000a4a0:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
8000a4a4:	4a e8       	lddpc	r8,8000a55c <fat_write_entry_file+0xd8>
8000a4a6:	11 a8       	ld.ub	r8,r8[0x2]
8000a4a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a4ac:	b2 88       	st.b	r9[0x0],r8

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
8000a4ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a4b2:	2f 78       	sub	r8,-9
8000a4b4:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
8000a4b8:	4a 98       	lddpc	r8,8000a55c <fat_write_entry_file+0xd8>
8000a4ba:	2f c8       	sub	r8,-4
8000a4bc:	2f f8       	sub	r8,-1
8000a4be:	11 88       	ld.ub	r8,r8[0x0]
8000a4c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a4c4:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
8000a4c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a4ca:	f0 c9 ff ff 	sub	r9,r8,-1
8000a4ce:	4a 48       	lddpc	r8,8000a55c <fat_write_entry_file+0xd8>
8000a4d0:	2f c8       	sub	r8,-4
8000a4d2:	11 88       	ld.ub	r8,r8[0x0]
8000a4d4:	b2 88       	st.b	r9[0x0],r8
   ptr_entry += (26-20);
8000a4d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a4da:	2f a8       	sub	r8,-6
8000a4dc:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
8000a4e0:	49 f8       	lddpc	r8,8000a55c <fat_write_entry_file+0xd8>
8000a4e2:	2f c8       	sub	r8,-4
8000a4e4:	2f d8       	sub	r8,-3
8000a4e6:	11 88       	ld.ub	r8,r8[0x0]
8000a4e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a4ec:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
8000a4ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a4f2:	f0 c9 ff ff 	sub	r9,r8,-1
8000a4f6:	49 a8       	lddpc	r8,8000a55c <fat_write_entry_file+0xd8>
8000a4f8:	2f c8       	sub	r8,-4
8000a4fa:	2f e8       	sub	r8,-2
8000a4fc:	11 88       	ld.ub	r8,r8[0x0]
8000a4fe:	b2 88       	st.b	r9[0x0],r8

   //! Write the size of file
   ptr_entry += (28-26);
8000a500:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a504:	2f e8       	sub	r8,-2
8000a506:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
8000a50a:	49 58       	lddpc	r8,8000a55c <fat_write_entry_file+0xd8>
8000a50c:	2f 88       	sub	r8,-8
8000a50e:	2f d8       	sub	r8,-3
8000a510:	11 88       	ld.ub	r8,r8[0x0]
8000a512:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a516:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
8000a518:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a51c:	f0 c9 ff ff 	sub	r9,r8,-1
8000a520:	48 f8       	lddpc	r8,8000a55c <fat_write_entry_file+0xd8>
8000a522:	2f 88       	sub	r8,-8
8000a524:	2f e8       	sub	r8,-2
8000a526:	11 88       	ld.ub	r8,r8[0x0]
8000a528:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
8000a52a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a52e:	f0 c9 ff fe 	sub	r9,r8,-2
8000a532:	48 b8       	lddpc	r8,8000a55c <fat_write_entry_file+0xd8>
8000a534:	2f 88       	sub	r8,-8
8000a536:	2f f8       	sub	r8,-1
8000a538:	11 88       	ld.ub	r8,r8[0x0]
8000a53a:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
8000a53c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a540:	f0 c9 ff fd 	sub	r9,r8,-3
8000a544:	48 68       	lddpc	r8,8000a55c <fat_write_entry_file+0xd8>
8000a546:	2f 88       	sub	r8,-8
8000a548:	11 88       	ld.ub	r8,r8[0x0]
8000a54a:	b2 88       	st.b	r9[0x0],r8
}
8000a54c:	2f fd       	sub	sp,-4
8000a54e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a552:	00 00       	add	r0,r0
8000a554:	80 00       	ld.sh	r0,r0[0x0]
8000a556:	ab 74       	lsl	r4,0xb
8000a558:	80 00       	ld.sh	r0,r0[0x0]
8000a55a:	aa 4c       	st.h	r5[0x8],r12
8000a55c:	00 00       	add	r0,r0
8000a55e:	0b 1c       	ld.sh	r12,r5++

8000a560 <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
Bool  fat_entry_shortname( FS_STRING sz_name , U8 u8_size_max , Bool b_mode )
{
8000a560:	eb cd 40 80 	pushm	r7,lr
8000a564:	1a 97       	mov	r7,sp
8000a566:	20 7d       	sub	sp,28
8000a568:	ef 4c ff f0 	st.w	r7[-16],r12
8000a56c:	16 98       	mov	r8,r11
8000a56e:	14 99       	mov	r9,r10
8000a570:	ef 68 ff ec 	st.b	r7[-20],r8
8000a574:	12 98       	mov	r8,r9
8000a576:	ef 68 ff e8 	st.b	r7[-24],r8
   Bool b_extension_nostart = TRUE;
8000a57a:	30 18       	mov	r8,1
8000a57c:	ef 68 ff f4 	st.b	r7[-12],r8
   U8 u8_pos_name;
   U8 u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   U8 u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
8000a580:	4e f9       	lddpc	r9,8000a73c <fat_entry_shortname+0x1dc>
8000a582:	31 68       	mov	r8,22
8000a584:	b2 88       	st.b	r9[0x0],r8

   u8_pos_name = 0;
8000a586:	30 08       	mov	r8,0
8000a588:	ef 68 ff f5 	st.b	r7[-11],r8
   u8_pos_entry = 0;
8000a58c:	30 08       	mov	r8,0
8000a58e:	ef 68 ff ff 	st.b	r7[-1],r8
   ptr_entry = fat_get_ptr_entry();
8000a592:	f0 1f 00 6c 	mcall	8000a740 <fat_entry_shortname+0x1e0>
8000a596:	18 98       	mov	r8,r12
8000a598:	ef 48 ff f8 	st.w	r7[-8],r8

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
8000a59c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a5a0:	30 b8       	mov	r8,11
8000a5a2:	f0 09 18 00 	cp.b	r9,r8
8000a5a6:	c0 51       	brne	8000a5b0 <fat_entry_shortname+0x50>
      {
         u8_entry_char = 0;   // end of name
8000a5a8:	30 08       	mov	r8,0
8000a5aa:	ef 68 ff f6 	st.b	r7[-10],r8
8000a5ae:	c3 78       	rjmp	8000a61c <fat_entry_shortname+0xbc>
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
8000a5b0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a5b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a5b8:	12 08       	add	r8,r9
8000a5ba:	11 88       	ld.ub	r8,r8[0x0]
8000a5bc:	ef 68 ff f6 	st.b	r7[-10],r8
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
8000a5c0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a5c4:	30 88       	mov	r8,8
8000a5c6:	f0 09 18 00 	cp.b	r9,r8
8000a5ca:	c0 71       	brne	8000a5d8 <fat_entry_shortname+0x78>
8000a5cc:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a5d0:	30 08       	mov	r8,0
8000a5d2:	f0 09 18 00 	cp.b	r9,r8
8000a5d6:	c0 71       	brne	8000a5e4 <fat_entry_shortname+0x84>
8000a5d8:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a5dc:	32 08       	mov	r8,32
8000a5de:	f0 09 18 00 	cp.b	r9,r8
8000a5e2:	c1 d1       	brne	8000a61c <fat_entry_shortname+0xbc>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000a5e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a5e8:	30 88       	mov	r8,8
8000a5ea:	f0 09 18 00 	cp.b	r9,r8
8000a5ee:	e0 8b 00 14 	brhi	8000a616 <fat_entry_shortname+0xb6>
8000a5f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a5f6:	2f 88       	sub	r8,-8
8000a5f8:	11 89       	ld.ub	r9,r8[0x0]
8000a5fa:	32 08       	mov	r8,32
8000a5fc:	f0 09 18 00 	cp.b	r9,r8
8000a600:	c0 b0       	breq	8000a616 <fat_entry_shortname+0xb6>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
            {
               // go to extension position
               b_extension_nostart = FALSE;
8000a602:	30 08       	mov	r8,0
8000a604:	ef 68 ff f4 	st.b	r7[-12],r8
               u8_pos_entry = FS_SIZE_SFNAME_WITHOUT_EXT-1;
8000a608:	30 78       	mov	r8,7
8000a60a:	ef 68 ff ff 	st.b	r7[-1],r8
               u8_entry_char = '.';
8000a60e:	32 e8       	mov	r8,46
8000a610:	ef 68 ff f6 	st.b	r7[-10],r8
8000a614:	c0 48       	rjmp	8000a61c <fat_entry_shortname+0xbc>
            }
            else
            {
               u8_entry_char = 0;                                    // end of name
8000a616:	30 08       	mov	r8,0
8000a618:	ef 68 ff f6 	st.b	r7[-10],r8
            }
         }
      }

      if( FS_NAME_GET == b_mode )
8000a61c:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a620:	30 18       	mov	r8,1
8000a622:	f0 09 18 00 	cp.b	r9,r8
8000a626:	c2 81       	brne	8000a676 <fat_entry_shortname+0x116>
      {
         if( !g_b_string_length )
8000a628:	4c 78       	lddpc	r8,8000a744 <fat_entry_shortname+0x1e4>
8000a62a:	11 88       	ld.ub	r8,r8[0x0]
8000a62c:	58 08       	cp.w	r8,0
8000a62e:	c5 71       	brne	8000a6dc <fat_entry_shortname+0x17c>
         {
            if(u8_pos_name >= (u8_size_max-1))
8000a630:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000a634:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000a638:	20 19       	sub	r9,1
8000a63a:	12 38       	cp.w	r8,r9
8000a63c:	c0 45       	brlt	8000a644 <fat_entry_shortname+0xe4>
               u8_entry_char = 0;                                    // buffer full then force end of string
8000a63e:	30 08       	mov	r8,0
8000a640:	ef 68 ff f6 	st.b	r7[-10],r8

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
8000a644:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a648:	34 08       	mov	r8,64
8000a64a:	f0 09 18 00 	cp.b	r9,r8
8000a64e:	e0 88 00 0e 	brls	8000a66a <fat_entry_shortname+0x10a>
8000a652:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a656:	35 a8       	mov	r8,90
8000a658:	f0 09 18 00 	cp.b	r9,r8
8000a65c:	e0 8b 00 07 	brhi	8000a66a <fat_entry_shortname+0x10a>
               u8_entry_char += ('a'-'A');                           // display short name in down case
8000a660:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a664:	2e 08       	sub	r8,-32
8000a666:	ef 68 ff f6 	st.b	r7[-10],r8

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
8000a66a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a66e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a672:	b2 88       	st.b	r9[0x0],r8
8000a674:	c3 48       	rjmp	8000a6dc <fat_entry_shortname+0x17c>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
8000a676:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a67a:	11 88       	ld.ub	r8,r8[0x0]
8000a67c:	ef 68 ff f7 	st.b	r7[-9],r8
         }
         if ('*' == u8_szname_char)
8000a680:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a684:	32 a8       	mov	r8,42
8000a686:	f0 09 18 00 	cp.b	r9,r8
8000a68a:	c0 51       	brne	8000a694 <fat_entry_shortname+0x134>
         {  // end of filter name which autorise all next character
            return TRUE;   //*** The name is correct ***
8000a68c:	30 18       	mov	r8,1
8000a68e:	ef 48 ff e4 	st.w	r7[-28],r8
8000a692:	c4 e8       	rjmp	8000a72e <fat_entry_shortname+0x1ce>
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
8000a694:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a698:	30 08       	mov	r8,0
8000a69a:	f0 09 18 00 	cp.b	r9,r8
8000a69e:	c0 d1       	brne	8000a6b8 <fat_entry_shortname+0x158>
8000a6a0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a6a4:	35 c8       	mov	r8,92
8000a6a6:	f0 09 18 00 	cp.b	r9,r8
8000a6aa:	c1 90       	breq	8000a6dc <fat_entry_shortname+0x17c>
8000a6ac:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a6b0:	32 f8       	mov	r8,47
8000a6b2:	f0 09 18 00 	cp.b	r9,r8
8000a6b6:	c1 30       	breq	8000a6dc <fat_entry_shortname+0x17c>
         {
            if((u8_szname_char != u8_entry_char)
8000a6b8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a6bc:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a6c0:	f0 09 18 00 	cp.b	r9,r8
8000a6c4:	c0 c0       	breq	8000a6dc <fat_entry_shortname+0x17c>
8000a6c6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a6ca:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a6ce:	2e 09       	sub	r9,-32
8000a6d0:	12 38       	cp.w	r8,r9
8000a6d2:	c0 50       	breq	8000a6dc <fat_entry_shortname+0x17c>
            && (u8_szname_char != (u8_entry_char+('a'-'A'))) )  // no case sensitive
               return FALSE;  // short name not equal
8000a6d4:	30 08       	mov	r8,0
8000a6d6:	ef 48 ff e4 	st.w	r7[-28],r8
8000a6da:	c2 a8       	rjmp	8000a72e <fat_entry_shortname+0x1ce>
         }
      }

      // For each characters
      if (0 == u8_entry_char)
8000a6dc:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a6e0:	30 08       	mov	r8,0
8000a6e2:	f0 09 18 00 	cp.b	r9,r8
8000a6e6:	c1 01       	brne	8000a706 <fat_entry_shortname+0x1a6>
      {
         if( g_b_string_length )
8000a6e8:	49 78       	lddpc	r8,8000a744 <fat_entry_shortname+0x1e4>
8000a6ea:	11 88       	ld.ub	r8,r8[0x0]
8000a6ec:	58 08       	cp.w	r8,0
8000a6ee:	c0 80       	breq	8000a6fe <fat_entry_shortname+0x19e>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
8000a6f0:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a6f4:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000a6f8:	2f f8       	sub	r8,-1
8000a6fa:	5c 88       	casts.h	r8
8000a6fc:	b2 08       	st.h	r9[0x0],r8
         }
         return TRUE;   // End of test correct or end of get name
8000a6fe:	30 18       	mov	r8,1
8000a700:	ef 48 ff e4 	st.w	r7[-28],r8
8000a704:	c1 58       	rjmp	8000a72e <fat_entry_shortname+0x1ce>
      }
      if( !g_b_string_length )
8000a706:	49 08       	lddpc	r8,8000a744 <fat_entry_shortname+0x1e4>
8000a708:	11 88       	ld.ub	r8,r8[0x0]
8000a70a:	58 08       	cp.w	r8,0
8000a70c:	c0 61       	brne	8000a718 <fat_entry_shortname+0x1b8>
      {
         sz_name += (Is_unicode? 2 : 1 );
8000a70e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a712:	2f f8       	sub	r8,-1
8000a714:	ef 48 ff f0 	st.w	r7[-16],r8
      }
      u8_pos_name++;
8000a718:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000a71c:	2f f8       	sub	r8,-1
8000a71e:	ef 68 ff f5 	st.b	r7[-11],r8
      u8_pos_entry++;
8000a722:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a726:	2f f8       	sub	r8,-1
8000a728:	ef 68 ff ff 	st.b	r7[-1],r8
8000a72c:	c3 8b       	rjmp	8000a59c <fat_entry_shortname+0x3c>
   }
8000a72e:	ee f8 ff e4 	ld.w	r8,r7[-28]
}
8000a732:	10 9c       	mov	r12,r8
8000a734:	2f 9d       	sub	sp,-28
8000a736:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a73a:	00 00       	add	r0,r0
8000a73c:	00 00       	add	r0,r0
8000a73e:	0e 40       	or	r0,r7
8000a740:	80 00       	ld.sh	r0,r0[0x0]
8000a742:	aa 4c       	st.h	r5[0x8],r12
8000a744:	00 00       	add	r0,r0
8000a746:	0e 41       	or	r1,r7

8000a748 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
Bool  fat_entry_longname( FS_STRING sz_name , U8 u8_size_max , Bool b_mode , Bool b_match_case )
{
8000a748:	eb cd 40 80 	pushm	r7,lr
8000a74c:	1a 97       	mov	r7,sp
8000a74e:	20 8d       	sub	sp,32
8000a750:	ef 4c ff f0 	st.w	r7[-16],r12
8000a754:	16 98       	mov	r8,r11
8000a756:	ef 68 ff ec 	st.b	r7[-20],r8
8000a75a:	14 98       	mov	r8,r10
8000a75c:	ef 68 ff e8 	st.b	r7[-24],r8
8000a760:	12 98       	mov	r8,r9
8000a762:	ef 68 ff e4 	st.b	r7[-28],r8
   U8 u8_pos_name;
   PTR_CACHE ptr_entry;
   U16 u16_unicode_entry;
   U16 u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
8000a766:	f0 1f 00 a2 	mcall	8000a9ec <fat_entry_longname+0x2a4>
8000a76a:	18 98       	mov	r8,r12
8000a76c:	ef 48 ff f8 	st.w	r7[-8],r8

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000a770:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a774:	11 88       	ld.ub	r8,r8[0x0]
8000a776:	58 08       	cp.w	r8,0
8000a778:	c1 00       	breq	8000a798 <fat_entry_longname+0x50>
8000a77a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a77e:	11 89       	ld.ub	r9,r8[0x0]
8000a780:	3e 58       	mov	r8,-27
8000a782:	f0 09 18 00 	cp.b	r9,r8
8000a786:	c0 90       	breq	8000a798 <fat_entry_longname+0x50>
8000a788:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a78c:	2f 58       	sub	r8,-11
8000a78e:	11 89       	ld.ub	r9,r8[0x0]
8000a790:	30 f8       	mov	r8,15
8000a792:	f0 09 18 00 	cp.b	r9,r8
8000a796:	c0 90       	breq	8000a7a8 <fat_entry_longname+0x60>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
8000a798:	fe f9 02 58 	ld.w	r9,pc[600]
8000a79c:	30 b8       	mov	r8,11
8000a79e:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
8000a7a0:	30 08       	mov	r8,0
8000a7a2:	ef 48 ff e0 	st.w	r7[-32],r8
8000a7a6:	c1 c9       	rjmp	8000a9de <fat_entry_longname+0x296>
   }

   if( g_b_string_length )
8000a7a8:	fe f8 02 4c 	ld.w	r8,pc[588]
8000a7ac:	11 88       	ld.ub	r8,r8[0x0]
8000a7ae:	58 08       	cp.w	r8,0
8000a7b0:	c0 f0       	breq	8000a7ce <fat_entry_longname+0x86>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
8000a7b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a7b6:	11 88       	ld.ub	r8,r8[0x0]
8000a7b8:	e2 18 00 40 	andl	r8,0x40,COH
8000a7bc:	c0 91       	brne	8000a7ce <fat_entry_longname+0x86>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
8000a7be:	fe f9 02 32 	ld.w	r9,pc[562]
8000a7c2:	31 08       	mov	r8,16
8000a7c4:	b2 88       	st.b	r9[0x0],r8
         return FALSE;                          // Other entry long name
8000a7c6:	30 08       	mov	r8,0
8000a7c8:	ef 48 ff e0 	st.w	r7[-32],r8
8000a7cc:	c0 99       	rjmp	8000a9de <fat_entry_longname+0x296>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
8000a7ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a7d2:	2f f8       	sub	r8,-1
8000a7d4:	ef 48 ff f8 	st.w	r7[-8],r8

   u8_pos_name=0;
8000a7d8:	30 08       	mov	r8,0
8000a7da:	ef 68 ff f7 	st.b	r7[-9],r8
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
8000a7de:	ee c8 00 0c 	sub	r8,r7,12
8000a7e2:	f0 c9 ff ff 	sub	r9,r8,-1
8000a7e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a7ea:	11 88       	ld.ub	r8,r8[0x0]
8000a7ec:	b2 88       	st.b	r9[0x0],r8
      MSB(u16_unicode_entry) = ptr_entry[1];
8000a7ee:	ee c9 00 0c 	sub	r9,r7,12
8000a7f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a7f6:	2f f8       	sub	r8,-1
8000a7f8:	11 88       	ld.ub	r8,r8[0x0]
8000a7fa:	b2 88       	st.b	r9[0x0],r8
      if( FS_NAME_GET == b_mode )
8000a7fc:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a800:	30 18       	mov	r8,1
8000a802:	f0 09 18 00 	cp.b	r9,r8
8000a806:	c1 b1       	brne	8000a83c <fat_entry_longname+0xf4>
      {
         if( !g_b_string_length )
8000a808:	4f b8       	lddpc	r8,8000a9f4 <fat_entry_longname+0x2ac>
8000a80a:	11 88       	ld.ub	r8,r8[0x0]
8000a80c:	58 08       	cp.w	r8,0
8000a80e:	c6 01       	brne	8000a8ce <fat_entry_longname+0x186>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
8000a810:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a814:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000a818:	20 19       	sub	r9,1
8000a81a:	12 38       	cp.w	r8,r9
8000a81c:	c0 95       	brlt	8000a82e <fat_entry_longname+0xe6>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
8000a81e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a822:	30 08       	mov	r8,0
8000a824:	b2 88       	st.b	r9[0x0],r8
               }
               return TRUE;                     // the buffer is full
8000a826:	30 18       	mov	r8,1
8000a828:	ef 48 ff e0 	st.w	r7[-32],r8
8000a82c:	cd 98       	rjmp	8000a9de <fat_entry_longname+0x296>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (U8)u16_unicode_entry;
8000a82e:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a832:	5c 58       	castu.b	r8
8000a834:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a838:	b2 88       	st.b	r9[0x0],r8
8000a83a:	c4 a8       	rjmp	8000a8ce <fat_entry_longname+0x186>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
8000a83c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a840:	11 88       	ld.ub	r8,r8[0x0]
8000a842:	ef 58 ff fe 	st.h	r7[-2],r8
         }
         // Check the name
         if( '*' == u16_unicode_szname )
8000a846:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a84a:	32 a8       	mov	r8,42
8000a84c:	f0 09 19 00 	cp.h	r9,r8
8000a850:	c0 51       	brne	8000a85a <fat_entry_longname+0x112>
         {  // end of filter name which autorise all next character
            return TRUE;   //*** The name is correct ***
8000a852:	30 18       	mov	r8,1
8000a854:	ef 48 ff e0 	st.w	r7[-32],r8
8000a858:	cc 38       	rjmp	8000a9de <fat_entry_longname+0x296>
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000a85a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a85e:	58 08       	cp.w	r8,0
8000a860:	c0 d1       	brne	8000a87a <fat_entry_longname+0x132>
8000a862:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a866:	35 c8       	mov	r8,92
8000a868:	f0 09 19 00 	cp.h	r9,r8
8000a86c:	c3 10       	breq	8000a8ce <fat_entry_longname+0x186>
8000a86e:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a872:	32 f8       	mov	r8,47
8000a874:	f0 09 19 00 	cp.h	r9,r8
8000a878:	c2 b0       	breq	8000a8ce <fat_entry_longname+0x186>
8000a87a:	ef 19 ff fe 	ld.uh	r9,r7[-2]
8000a87e:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a882:	5c 78       	castu.h	r8
8000a884:	2e 08       	sub	r8,-32
8000a886:	10 39       	cp.w	r9,r8
8000a888:	c0 71       	brne	8000a896 <fat_entry_longname+0x14e>
8000a88a:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000a88e:	30 08       	mov	r8,0
8000a890:	f0 09 18 00 	cp.b	r9,r8
8000a894:	c1 d0       	breq	8000a8ce <fat_entry_longname+0x186>
8000a896:	ef 19 ff fe 	ld.uh	r9,r7[-2]
8000a89a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a89e:	5c 78       	castu.h	r8
8000a8a0:	22 08       	sub	r8,32
8000a8a2:	10 39       	cp.w	r9,r8
8000a8a4:	c0 71       	brne	8000a8b2 <fat_entry_longname+0x16a>
8000a8a6:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000a8aa:	30 08       	mov	r8,0
8000a8ac:	f0 09 18 00 	cp.b	r9,r8
8000a8b0:	c0 f0       	breq	8000a8ce <fat_entry_longname+0x186>
8000a8b2:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000a8b6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000a8ba:	f2 08 19 00 	cp.h	r8,r9
8000a8be:	c0 80       	breq	8000a8ce <fat_entry_longname+0x186>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
8000a8c0:	4c c9       	lddpc	r9,8000a9f0 <fat_entry_longname+0x2a8>
8000a8c2:	31 68       	mov	r8,22
8000a8c4:	b2 88       	st.b	r9[0x0],r8
           return FALSE;
8000a8c6:	30 08       	mov	r8,0
8000a8c8:	ef 48 ff e0 	st.w	r7[-32],r8
8000a8cc:	c8 98       	rjmp	8000a9de <fat_entry_longname+0x296>
         }
      }

      if( 0 == u16_unicode_entry)
8000a8ce:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a8d2:	58 08       	cp.w	r8,0
8000a8d4:	c1 01       	brne	8000a8f4 <fat_entry_longname+0x1ac>
      {
         if( g_b_string_length )
8000a8d6:	4c 88       	lddpc	r8,8000a9f4 <fat_entry_longname+0x2ac>
8000a8d8:	11 88       	ld.ub	r8,r8[0x0]
8000a8da:	58 08       	cp.w	r8,0
8000a8dc:	c0 80       	breq	8000a8ec <fat_entry_longname+0x1a4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
8000a8de:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a8e2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a8e6:	2f f8       	sub	r8,-1
8000a8e8:	5c 88       	casts.h	r8
8000a8ea:	b2 08       	st.h	r9[0x0],r8
         }
         return TRUE;                           // Last long name entry
8000a8ec:	30 18       	mov	r8,1
8000a8ee:	ef 48 ff e0 	st.w	r7[-32],r8
8000a8f2:	c7 68       	rjmp	8000a9de <fat_entry_longname+0x296>
      }
      if( 4 == u8_pos_name )
8000a8f4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a8f8:	30 48       	mov	r8,4
8000a8fa:	f0 09 18 00 	cp.b	r9,r8
8000a8fe:	c0 61       	brne	8000a90a <fat_entry_longname+0x1c2>
         ptr_entry += 3;                        // Go to second character
8000a900:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a904:	2f d8       	sub	r8,-3
8000a906:	ef 48 ff f8 	st.w	r7[-8],r8

      if( 10 == u8_pos_name )
8000a90a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a90e:	30 a8       	mov	r8,10
8000a910:	f0 09 18 00 	cp.b	r9,r8
8000a914:	c0 61       	brne	8000a920 <fat_entry_longname+0x1d8>
         ptr_entry += 2;                        // Go to third character
8000a916:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a91a:	2f e8       	sub	r8,-2
8000a91c:	ef 48 ff f8 	st.w	r7[-8],r8

      if( 12 == u8_pos_name )
8000a920:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a924:	30 c8       	mov	r8,12
8000a926:	f0 09 18 00 	cp.b	r9,r8
8000a92a:	c4 61       	brne	8000a9b6 <fat_entry_longname+0x26e>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
8000a92c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a930:	21 e8       	sub	r8,30
8000a932:	ef 48 ff f8 	st.w	r7[-8],r8
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
8000a936:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a93a:	11 88       	ld.ub	r8,r8[0x0]
8000a93c:	e2 18 00 40 	andl	r8,0x40,COH
8000a940:	c0 81       	brne	8000a950 <fat_entry_longname+0x208>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
8000a942:	4a c9       	lddpc	r9,8000a9f0 <fat_entry_longname+0x2a8>
8000a944:	31 08       	mov	r8,16
8000a946:	b2 88       	st.b	r9[0x0],r8
            return FALSE;                       // Other long name entry is present
8000a948:	30 08       	mov	r8,0
8000a94a:	ef 48 ff e0 	st.w	r7[-32],r8
8000a94e:	c4 88       	rjmp	8000a9de <fat_entry_longname+0x296>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
8000a950:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a954:	30 18       	mov	r8,1
8000a956:	f0 09 18 00 	cp.b	r9,r8
8000a95a:	c0 d1       	brne	8000a974 <fat_entry_longname+0x22c>
8000a95c:	4a 68       	lddpc	r8,8000a9f4 <fat_entry_longname+0x2ac>
8000a95e:	11 88       	ld.ub	r8,r8[0x0]
8000a960:	58 08       	cp.w	r8,0
8000a962:	c0 90       	breq	8000a974 <fat_entry_longname+0x22c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
8000a964:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a968:	30 e8       	mov	r8,14
8000a96a:	b2 08       	st.h	r9[0x0],r8
               return TRUE;
8000a96c:	30 18       	mov	r8,1
8000a96e:	ef 48 ff e0 	st.w	r7[-32],r8
8000a972:	c3 68       	rjmp	8000a9de <fat_entry_longname+0x296>
            }
            sz_name += (Is_unicode? 2 : 1 );
8000a974:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a978:	2f f8       	sub	r8,-1
8000a97a:	ef 48 ff f0 	st.w	r7[-16],r8
            if( FS_NAME_GET == b_mode )
8000a97e:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a982:	30 18       	mov	r8,1
8000a984:	f0 09 18 00 	cp.b	r9,r8
8000a988:	c0 91       	brne	8000a99a <fat_entry_longname+0x252>
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
8000a98a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a98e:	30 08       	mov	r8,0
8000a990:	b2 88       	st.b	r9[0x0],r8
               }
               return TRUE;
8000a992:	30 18       	mov	r8,1
8000a994:	ef 48 ff e0 	st.w	r7[-32],r8
8000a998:	c2 38       	rjmp	8000a9de <fat_entry_longname+0x296>
               // if it is the end of filter
               if( Is_unicode )
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
8000a99a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a99e:	11 88       	ld.ub	r8,r8[0x0]
8000a9a0:	ef 58 ff fe 	st.h	r7[-2],r8
               }
               return fat_check_eof_name(u16_unicode_szname);
8000a9a4:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000a9a8:	10 9c       	mov	r12,r8
8000a9aa:	f0 1f 00 14 	mcall	8000a9f8 <fat_entry_longname+0x2b0>
8000a9ae:	18 98       	mov	r8,r12
8000a9b0:	ef 48 ff e0 	st.w	r7[-32],r8
8000a9b4:	c1 58       	rjmp	8000a9de <fat_entry_longname+0x296>
            }
         }
      }

      if( !g_b_string_length )
8000a9b6:	49 08       	lddpc	r8,8000a9f4 <fat_entry_longname+0x2ac>
8000a9b8:	11 88       	ld.ub	r8,r8[0x0]
8000a9ba:	58 08       	cp.w	r8,0
8000a9bc:	c0 61       	brne	8000a9c8 <fat_entry_longname+0x280>
      {
         sz_name += (Is_unicode? 2 : 1 );
8000a9be:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a9c2:	2f f8       	sub	r8,-1
8000a9c4:	ef 48 ff f0 	st.w	r7[-16],r8
      }
      u8_pos_name++;
8000a9c8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a9cc:	2f f8       	sub	r8,-1
8000a9ce:	ef 68 ff f7 	st.b	r7[-9],r8
      ptr_entry+=2;
8000a9d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9d6:	2f e8       	sub	r8,-2
8000a9d8:	ef 48 ff f8 	st.w	r7[-8],r8
8000a9dc:	c0 1b       	rjmp	8000a7de <fat_entry_longname+0x96>
   }
8000a9de:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
8000a9e2:	10 9c       	mov	r12,r8
8000a9e4:	2f 8d       	sub	sp,-32
8000a9e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9ea:	00 00       	add	r0,r0
8000a9ec:	80 00       	ld.sh	r0,r0[0x0]
8000a9ee:	aa 4c       	st.h	r5[0x8],r12
8000a9f0:	00 00       	add	r0,r0
8000a9f2:	0e 40       	or	r0,r7
8000a9f4:	00 00       	add	r0,r0
8000a9f6:	0e 41       	or	r1,r7
8000a9f8:	80 00       	ld.sh	r0,r0[0x0]
8000a9fa:	a9 fc       	*unknown*

8000a9fc <fat_check_eof_name>:
//!
//! @return    TRUE, it is a character to signal a end of name (0,'\\','/')
//! @return    FALSE, otherwise
//!
Bool  fat_check_eof_name( U16 character )
{
8000a9fc:	eb cd 40 80 	pushm	r7,lr
8000aa00:	1a 97       	mov	r7,sp
8000aa02:	20 2d       	sub	sp,8
8000aa04:	18 98       	mov	r8,r12
8000aa06:	ef 58 ff fc 	st.h	r7[-4],r8
   return (('\0'==character)||('\\'==character)||('/'==character));
8000aa0a:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000aa0e:	30 08       	mov	r8,0
8000aa10:	f0 09 19 00 	cp.h	r9,r8
8000aa14:	c0 d0       	breq	8000aa2e <fat_check_eof_name+0x32>
8000aa16:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000aa1a:	35 c8       	mov	r8,92
8000aa1c:	f0 09 19 00 	cp.h	r9,r8
8000aa20:	c0 70       	breq	8000aa2e <fat_check_eof_name+0x32>
8000aa22:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000aa26:	32 f8       	mov	r8,47
8000aa28:	f0 09 19 00 	cp.h	r9,r8
8000aa2c:	c0 51       	brne	8000aa36 <fat_check_eof_name+0x3a>
8000aa2e:	30 18       	mov	r8,1
8000aa30:	ef 48 ff f8 	st.w	r7[-8],r8
8000aa34:	c0 48       	rjmp	8000aa3c <fat_check_eof_name+0x40>
8000aa36:	30 08       	mov	r8,0
8000aa38:	ef 48 ff f8 	st.w	r7[-8],r8
8000aa3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aa40:	5c 58       	castu.b	r8
}
8000aa42:	10 9c       	mov	r12,r8
8000aa44:	2f ed       	sub	sp,-8
8000aa46:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa4a:	d7 03       	nop

8000aa4c <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
8000aa4c:	eb cd 40 80 	pushm	r7,lr
8000aa50:	1a 97       	mov	r7,sp
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
8000aa52:	48 78       	lddpc	r8,8000aa6c <fat_get_ptr_entry+0x20>
8000aa54:	90 18       	ld.sh	r8,r8[0x2]
8000aa56:	5c 78       	castu.h	r8
8000aa58:	a5 78       	lsl	r8,0x5
8000aa5a:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8000aa5e:	48 58       	lddpc	r8,8000aa70 <fat_get_ptr_entry+0x24>
8000aa60:	f2 08 00 08 	add	r8,r9,r8
}
8000aa64:	10 9c       	mov	r12,r8
8000aa66:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa6a:	00 00       	add	r0,r0
8000aa6c:	00 00       	add	r0,r0
8000aa6e:	0e 3c       	cp.w	r12,r7
8000aa70:	00 00       	add	r0,r0
8000aa72:	0b 58       	ld.sh	r8,--r5

8000aa74 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
Bool  fat_cache_read_sector( Bool b_load )
{
8000aa74:	eb cd 40 80 	pushm	r7,lr
8000aa78:	1a 97       	mov	r7,sp
8000aa7a:	20 2d       	sub	sp,8
8000aa7c:	18 98       	mov	r8,r12
8000aa7e:	ef 68 ff fc 	st.b	r7[-4],r8
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
8000aa82:	4a 48       	lddpc	r8,8000ab10 <fat_cache_read_sector+0x9c>
8000aa84:	11 89       	ld.ub	r9,r8[0x0]
8000aa86:	4a 48       	lddpc	r8,8000ab14 <fat_cache_read_sector+0xa0>
8000aa88:	11 88       	ld.ub	r8,r8[0x0]
8000aa8a:	f0 09 18 00 	cp.b	r9,r8
8000aa8e:	c0 b1       	brne	8000aaa4 <fat_cache_read_sector+0x30>
8000aa90:	4a 08       	lddpc	r8,8000ab10 <fat_cache_read_sector+0x9c>
8000aa92:	70 19       	ld.w	r9,r8[0x4]
8000aa94:	4a 18       	lddpc	r8,8000ab18 <fat_cache_read_sector+0xa4>
8000aa96:	70 08       	ld.w	r8,r8[0x0]
8000aa98:	10 39       	cp.w	r9,r8
8000aa9a:	c0 51       	brne	8000aaa4 <fat_cache_read_sector+0x30>
   &&  (fs_g_sectorcache.u32_addr   == fs_gu32_addrsector ) )
   {
      return TRUE;
8000aa9c:	30 18       	mov	r8,1
8000aa9e:	ef 48 ff f8 	st.w	r7[-8],r8
8000aaa2:	c3 08       	rjmp	8000ab02 <fat_cache_read_sector+0x8e>
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
8000aaa4:	f0 1f 00 1e 	mcall	8000ab1c <fat_cache_read_sector+0xa8>
8000aaa8:	18 98       	mov	r8,r12
8000aaaa:	58 08       	cp.w	r8,0
8000aaac:	c0 51       	brne	8000aab6 <fat_cache_read_sector+0x42>
      return FALSE;
8000aaae:	30 08       	mov	r8,0
8000aab0:	ef 48 ff f8 	st.w	r7[-8],r8
8000aab4:	c2 78       	rjmp	8000ab02 <fat_cache_read_sector+0x8e>

   // Delete informations about the caches
   fat_cache_reset();
8000aab6:	f0 1f 00 1b 	mcall	8000ab20 <fat_cache_read_sector+0xac>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
8000aaba:	49 88       	lddpc	r8,8000ab18 <fat_cache_read_sector+0xa4>
8000aabc:	70 09       	ld.w	r9,r8[0x0]
8000aabe:	49 58       	lddpc	r8,8000ab10 <fat_cache_read_sector+0x9c>
8000aac0:	91 19       	st.w	r8[0x4],r9
   if( b_load )
8000aac2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000aac6:	30 08       	mov	r8,0
8000aac8:	f0 09 18 00 	cp.b	r9,r8
8000aacc:	c1 40       	breq	8000aaf4 <fat_cache_read_sector+0x80>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000aace:	49 18       	lddpc	r8,8000ab10 <fat_cache_read_sector+0x9c>
8000aad0:	70 19       	ld.w	r9,r8[0x4]
8000aad2:	49 18       	lddpc	r8,8000ab14 <fat_cache_read_sector+0xa0>
8000aad4:	11 88       	ld.ub	r8,r8[0x0]
8000aad6:	49 4a       	lddpc	r10,8000ab24 <fat_cache_read_sector+0xb0>
8000aad8:	12 9b       	mov	r11,r9
8000aada:	10 9c       	mov	r12,r8
8000aadc:	f0 1f 00 13 	mcall	8000ab28 <fat_cache_read_sector+0xb4>
8000aae0:	18 98       	mov	r8,r12
8000aae2:	58 08       	cp.w	r8,0
8000aae4:	c0 80       	breq	8000aaf4 <fat_cache_read_sector+0x80>
      {
         fs_g_status = FS_ERR_HW;
8000aae6:	49 29       	lddpc	r9,8000ab2c <fat_cache_read_sector+0xb8>
8000aae8:	30 18       	mov	r8,1
8000aaea:	b2 88       	st.b	r9[0x0],r8
         return FALSE;
8000aaec:	30 08       	mov	r8,0
8000aaee:	ef 48 ff f8 	st.w	r7[-8],r8
8000aaf2:	c0 88       	rjmp	8000ab02 <fat_cache_read_sector+0x8e>
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
8000aaf4:	48 88       	lddpc	r8,8000ab14 <fat_cache_read_sector+0xa0>
8000aaf6:	11 88       	ld.ub	r8,r8[0x0]
8000aaf8:	48 69       	lddpc	r9,8000ab10 <fat_cache_read_sector+0x9c>
8000aafa:	b2 88       	st.b	r9[0x0],r8
   return TRUE;
8000aafc:	30 18       	mov	r8,1
8000aafe:	ef 48 ff f8 	st.w	r7[-8],r8
8000ab02:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000ab06:	10 9c       	mov	r12,r8
8000ab08:	2f ed       	sub	sp,-8
8000ab0a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab0e:	00 00       	add	r0,r0
8000ab10:	00 00       	add	r0,r0
8000ab12:	0f f8       	ld.ub	r8,r7[0x7]
8000ab14:	00 00       	add	r0,r0
8000ab16:	0d 58       	ld.sh	r8,--r6
8000ab18:	00 00       	add	r0,r0
8000ab1a:	0b 18       	ld.sh	r8,r5++
8000ab1c:	80 00       	ld.sh	r0,r0[0x0]
8000ab1e:	ab 8c       	lsr	r12,0xa
8000ab20:	80 00       	ld.sh	r0,r0[0x0]
8000ab22:	ab 30       	mul	r0,r5
8000ab24:	00 00       	add	r0,r0
8000ab26:	0b 58       	ld.sh	r8,--r5
8000ab28:	80 00       	ld.sh	r0,r0[0x0]
8000ab2a:	db 60       	acall	0x2d8
8000ab2c:	00 00       	add	r0,r0
8000ab2e:	0e 40       	or	r0,r7

8000ab30 <fat_cache_reset>:


//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
8000ab30:	eb cd 40 80 	pushm	r7,lr
8000ab34:	1a 97       	mov	r7,sp
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
8000ab36:	48 79       	lddpc	r9,8000ab50 <fat_cache_reset+0x20>
8000ab38:	3f f8       	mov	r8,-1
8000ab3a:	b2 88       	st.b	r9[0x0],r8
   fs_g_sectorcache.u8_dirty              = FALSE;
8000ab3c:	48 59       	lddpc	r9,8000ab50 <fat_cache_reset+0x20>
8000ab3e:	30 08       	mov	r8,0
8000ab40:	f3 68 00 08 	st.b	r9[8],r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
8000ab44:	48 39       	lddpc	r9,8000ab50 <fat_cache_reset+0x20>
8000ab46:	3f f8       	mov	r8,-1
8000ab48:	93 38       	st.w	r9[0xc],r8
}
8000ab4a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab4e:	00 00       	add	r0,r0
8000ab50:	00 00       	add	r0,r0
8000ab52:	0f f8       	ld.ub	r8,r7[0x7]

8000ab54 <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
8000ab54:	eb cd 40 80 	pushm	r7,lr
8000ab58:	1a 97       	mov	r7,sp
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
8000ab5a:	e0 6a 02 00 	mov	r10,512
8000ab5e:	30 0b       	mov	r11,0
8000ab60:	48 3c       	lddpc	r12,8000ab6c <fat_cache_clear+0x18>
8000ab62:	f0 1f 00 04 	mcall	8000ab70 <fat_cache_clear+0x1c>
}
8000ab66:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab6a:	00 00       	add	r0,r0
8000ab6c:	00 00       	add	r0,r0
8000ab6e:	0b 58       	ld.sh	r8,--r5
8000ab70:	80 00       	ld.sh	r0,r0[0x0]
8000ab72:	f1 e8 eb cd 	sthh.w	sp[0x2f0],r8:t,r8:b

8000ab74 <fat_cache_mark_sector_as_dirty>:


//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
8000ab74:	eb cd 40 80 	pushm	r7,lr
8000ab78:	1a 97       	mov	r7,sp
   fs_g_sectorcache.u8_dirty = TRUE;
8000ab7a:	48 49       	lddpc	r9,8000ab88 <fat_cache_mark_sector_as_dirty+0x14>
8000ab7c:	30 18       	mov	r8,1
8000ab7e:	f3 68 00 08 	st.b	r9[8],r8
}
8000ab82:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab86:	00 00       	add	r0,r0
8000ab88:	00 00       	add	r0,r0
8000ab8a:	0f f8       	ld.ub	r8,r7[0x7]

8000ab8c <fat_cache_flush>:
//!
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool  fat_cache_flush( void )
{
8000ab8c:	eb cd 40 80 	pushm	r7,lr
8000ab90:	1a 97       	mov	r7,sp
8000ab92:	20 1d       	sub	sp,4
   // If the cache is modified, then write the sector cache on the device
   if ( TRUE == fs_g_sectorcache.u8_dirty )
8000ab94:	49 b8       	lddpc	r8,8000ac00 <fat_cache_flush+0x74>
8000ab96:	f1 39 00 08 	ld.ub	r9,r8[8]
8000ab9a:	30 18       	mov	r8,1
8000ab9c:	f0 09 18 00 	cp.b	r9,r8
8000aba0:	c2 71       	brne	8000abee <fat_cache_flush+0x62>
   {
      fs_g_sectorcache.u8_dirty = FALSE; // Always clear, although an error occur
8000aba2:	49 89       	lddpc	r9,8000ac00 <fat_cache_flush+0x74>
8000aba4:	30 08       	mov	r8,0
8000aba6:	f3 68 00 08 	st.b	r9[8],r8
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000abaa:	49 68       	lddpc	r8,8000ac00 <fat_cache_flush+0x74>
8000abac:	11 88       	ld.ub	r8,r8[0x0]
8000abae:	10 9c       	mov	r12,r8
8000abb0:	f0 1f 00 15 	mcall	8000ac04 <fat_cache_flush+0x78>
8000abb4:	18 98       	mov	r8,r12
8000abb6:	58 08       	cp.w	r8,0
8000abb8:	c0 80       	breq	8000abc8 <fat_cache_flush+0x3c>
      {
         fs_g_status = FS_LUN_WP;
8000abba:	49 49       	lddpc	r9,8000ac08 <fat_cache_flush+0x7c>
8000abbc:	31 48       	mov	r8,20
8000abbe:	b2 88       	st.b	r9[0x0],r8
         return FALSE;
8000abc0:	30 08       	mov	r8,0
8000abc2:	ef 48 ff fc 	st.w	r7[-4],r8
8000abc6:	c1 78       	rjmp	8000abf4 <fat_cache_flush+0x68>
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
8000abc8:	48 e8       	lddpc	r8,8000ac00 <fat_cache_flush+0x74>
8000abca:	70 19       	ld.w	r9,r8[0x4]
8000abcc:	48 d8       	lddpc	r8,8000ac00 <fat_cache_flush+0x74>
8000abce:	11 88       	ld.ub	r8,r8[0x0]
8000abd0:	48 fa       	lddpc	r10,8000ac0c <fat_cache_flush+0x80>
8000abd2:	12 9b       	mov	r11,r9
8000abd4:	10 9c       	mov	r12,r8
8000abd6:	f0 1f 00 0f 	mcall	8000ac10 <fat_cache_flush+0x84>
8000abda:	18 98       	mov	r8,r12
8000abdc:	58 08       	cp.w	r8,0
8000abde:	c0 80       	breq	8000abee <fat_cache_flush+0x62>
      {
         fs_g_status = FS_ERR_HW;
8000abe0:	48 a9       	lddpc	r9,8000ac08 <fat_cache_flush+0x7c>
8000abe2:	30 18       	mov	r8,1
8000abe4:	b2 88       	st.b	r9[0x0],r8
         return FALSE;
8000abe6:	30 08       	mov	r8,0
8000abe8:	ef 48 ff fc 	st.w	r7[-4],r8
8000abec:	c0 48       	rjmp	8000abf4 <fat_cache_flush+0x68>
      }
   }
   return TRUE;
8000abee:	30 18       	mov	r8,1
8000abf0:	ef 48 ff fc 	st.w	r7[-4],r8
8000abf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000abf8:	10 9c       	mov	r12,r8
8000abfa:	2f fd       	sub	sp,-4
8000abfc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac00:	00 00       	add	r0,r0
8000ac02:	0f f8       	ld.ub	r8,r7[0x7]
8000ac04:	80 00       	ld.sh	r0,r0[0x0]
8000ac06:	db 04       	*unknown*
8000ac08:	00 00       	add	r0,r0
8000ac0a:	0e 40       	or	r0,r7
8000ac0c:	00 00       	add	r0,r0
8000ac0e:	0b 58       	ld.sh	r8,--r5
8000ac10:	80 00       	ld.sh	r0,r0[0x0]
8000ac12:	db c8       	*unknown*

8000ac14 <fat_check_nav_access_file>:
//!            mode TRUE,  File opened then write access not possibles <br>
//!            mode FALSE, File opened in write mode then read access not possibles <br>
//! @return    TRUE, access file possibles
//!
Bool  fat_check_nav_access_file( Bool mode )
{
8000ac14:	eb cd 40 80 	pushm	r7,lr
8000ac18:	1a 97       	mov	r7,sp
8000ac1a:	20 3d       	sub	sp,12
8000ac1c:	18 98       	mov	r8,r12
8000ac1e:	ef 68 ff f8 	st.b	r7[-8],r8
   U8 i;

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
8000ac22:	30 08       	mov	r8,0
8000ac24:	ef 68 ff ff 	st.b	r7[-1],r8
8000ac28:	c5 e8       	rjmp	8000ace4 <fat_check_nav_access_file+0xd0>
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
8000ac2a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ac2e:	4b 69       	lddpc	r9,8000ad04 <fat_check_nav_access_file+0xf0>
8000ac30:	f2 08 07 28 	ld.ub	r8,r9[r8<<0x2]
8000ac34:	58 08       	cp.w	r8,0
8000ac36:	c5 20       	breq	8000acda <fat_check_nav_access_file+0xc6>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
8000ac38:	4b 48       	lddpc	r8,8000ad08 <fat_check_nav_access_file+0xf4>
8000ac3a:	11 8b       	ld.ub	r11,r8[0x0]
8000ac3c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ac40:	4b 3a       	lddpc	r10,8000ad0c <fat_check_nav_access_file+0xf8>
8000ac42:	12 98       	mov	r8,r9
8000ac44:	a1 78       	lsl	r8,0x1
8000ac46:	12 08       	add	r8,r9
8000ac48:	a5 68       	lsl	r8,0x4
8000ac4a:	f4 08 00 08 	add	r8,r10,r8
8000ac4e:	11 88       	ld.ub	r8,r8[0x0]
8000ac50:	f0 0b 18 00 	cp.b	r11,r8
8000ac54:	c4 31       	brne	8000acda <fat_check_nav_access_file+0xc6>
#if (FS_MULTI_PARTITION == ENABLED)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
8000ac56:	4a d8       	lddpc	r8,8000ad08 <fat_check_nav_access_file+0xf4>
8000ac58:	70 7b       	ld.w	r11,r8[0x1c]
8000ac5a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ac5e:	4a ca       	lddpc	r10,8000ad0c <fat_check_nav_access_file+0xf8>
8000ac60:	12 98       	mov	r8,r9
8000ac62:	a1 78       	lsl	r8,0x1
8000ac64:	12 08       	add	r8,r9
8000ac66:	a5 68       	lsl	r8,0x4
8000ac68:	f4 08 00 08 	add	r8,r10,r8
8000ac6c:	2e 48       	sub	r8,-28
8000ac6e:	70 08       	ld.w	r8,r8[0x0]
8000ac70:	10 3b       	cp.w	r11,r8
8000ac72:	c3 41       	brne	8000acda <fat_check_nav_access_file+0xc6>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
8000ac74:	4a 78       	lddpc	r8,8000ad10 <fat_check_nav_access_file+0xfc>
8000ac76:	90 1a       	ld.sh	r10,r8[0x2]
8000ac78:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ac7c:	4a 29       	lddpc	r9,8000ad04 <fat_check_nav_access_file+0xf0>
8000ac7e:	a3 68       	lsl	r8,0x2
8000ac80:	f2 08 00 08 	add	r8,r9,r8
8000ac84:	90 18       	ld.sh	r8,r8[0x2]
8000ac86:	f0 0a 19 00 	cp.h	r10,r8
8000ac8a:	c2 81       	brne	8000acda <fat_check_nav_access_file+0xc6>
      {
         if( mode )
8000ac8c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ac90:	30 08       	mov	r8,0
8000ac92:	f0 09 18 00 	cp.b	r9,r8
8000ac96:	c1 10       	breq	8000acb8 <fat_check_nav_access_file+0xa4>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
8000ac98:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ac9c:	49 e9       	lddpc	r9,8000ad14 <fat_check_nav_access_file+0x100>
8000ac9e:	a5 68       	lsl	r8,0x4
8000aca0:	f2 08 00 08 	add	r8,r9,r8
8000aca4:	11 88       	ld.ub	r8,r8[0x0]
8000aca6:	58 08       	cp.w	r8,0
8000aca8:	c1 90       	breq	8000acda <fat_check_nav_access_file+0xc6>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
8000acaa:	49 c9       	lddpc	r9,8000ad18 <fat_check_nav_access_file+0x104>
8000acac:	32 88       	mov	r8,40
8000acae:	b2 88       	st.b	r9[0x0],r8
               return FALSE;  // File opened then write access not possibled
8000acb0:	30 08       	mov	r8,0
8000acb2:	ef 48 ff f4 	st.w	r7[-12],r8
8000acb6:	c2 08       	rjmp	8000acf6 <fat_check_nav_access_file+0xe2>
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
8000acb8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000acbc:	49 69       	lddpc	r9,8000ad14 <fat_check_nav_access_file+0x100>
8000acbe:	a5 68       	lsl	r8,0x4
8000acc0:	f2 08 00 08 	add	r8,r9,r8
8000acc4:	11 88       	ld.ub	r8,r8[0x0]
8000acc6:	e2 18 00 02 	andl	r8,0x2,COH
8000acca:	c0 80       	breq	8000acda <fat_check_nav_access_file+0xc6>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
8000accc:	49 39       	lddpc	r9,8000ad18 <fat_check_nav_access_file+0x104>
8000acce:	32 98       	mov	r8,41
8000acd0:	b2 88       	st.b	r9[0x0],r8
               return FALSE;  // File opened in write mode then read access not possibled
8000acd2:	30 08       	mov	r8,0
8000acd4:	ef 48 ff f4 	st.w	r7[-12],r8
8000acd8:	c0 f8       	rjmp	8000acf6 <fat_check_nav_access_file+0xe2>
Bool  fat_check_nav_access_file( Bool mode )
{
   U8 i;

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
8000acda:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000acde:	2f f8       	sub	r8,-1
8000ace0:	ef 68 ff ff 	st.b	r7[-1],r8
8000ace4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ace8:	30 98       	mov	r8,9
8000acea:	f0 09 18 00 	cp.b	r9,r8
8000acee:	c9 e1       	brne	8000ac2a <fat_check_nav_access_file+0x16>
               return FALSE;  // File opened in write mode then read access not possibled
            }
         }
      }
   }
   return TRUE;
8000acf0:	30 18       	mov	r8,1
8000acf2:	ef 48 ff f4 	st.w	r7[-12],r8
8000acf6:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000acfa:	10 9c       	mov	r12,r8
8000acfc:	2f dd       	sub	sp,-12
8000acfe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ad02:	00 00       	add	r0,r0
8000ad04:	00 00       	add	r0,r0
8000ad06:	0e 18       	sub	r8,r7
8000ad08:	00 00       	add	r0,r0
8000ad0a:	0d 58       	ld.sh	r8,--r6
8000ad0c:	00 00       	add	r0,r0
8000ad0e:	0e 48       	or	r8,r7
8000ad10:	00 00       	add	r0,r0
8000ad12:	0e 3c       	cp.w	r12,r7
8000ad14:	00 00       	add	r0,r0
8000ad16:	0d 88       	ld.ub	r8,r6[0x0]
8000ad18:	00 00       	add	r0,r0
8000ad1a:	0e 40       	or	r0,r7

8000ad1c <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( U8 u8_idnav )
{
8000ad1c:	eb cd 40 80 	pushm	r7,lr
8000ad20:	1a 97       	mov	r7,sp
8000ad22:	20 dd       	sub	sp,52
8000ad24:	18 98       	mov	r8,r12
8000ad26:	ef 68 ff cc 	st.b	r7[-52],r8
   _MEM_TYPE_SLOW_ U8 Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
8000ad2a:	ef 39 ff cc 	ld.ub	r9,r7[-52]
8000ad2e:	30 08       	mov	r8,0
8000ad30:	f0 09 18 00 	cp.b	r9,r8
8000ad34:	c6 c0       	breq	8000ae0c <fat_invert_nav+0xf0>
      return;
   u8_idnav--;
8000ad36:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8000ad3a:	20 18       	sub	r8,1
8000ad3c:	ef 68 ff cc 	st.b	r7[-52],r8

   memcpy_ram2ram(Temp,                              (U8*)&fs_g_nav,                     sizeof(Fs_management));
8000ad40:	ee c8 00 30 	sub	r8,r7,48
8000ad44:	33 0a       	mov	r10,48
8000ad46:	4b 4b       	lddpc	r11,8000ae14 <fat_invert_nav+0xf8>
8000ad48:	10 9c       	mov	r12,r8
8000ad4a:	f0 1f 00 34 	mcall	8000ae18 <fat_invert_nav+0xfc>
   memcpy_ram2ram((U8*)&fs_g_nav,                    (U8*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
8000ad4e:	ef 39 ff cc 	ld.ub	r9,r7[-52]
8000ad52:	12 98       	mov	r8,r9
8000ad54:	a1 78       	lsl	r8,0x1
8000ad56:	12 08       	add	r8,r9
8000ad58:	a5 68       	lsl	r8,0x4
8000ad5a:	10 99       	mov	r9,r8
8000ad5c:	4b 08       	lddpc	r8,8000ae1c <fat_invert_nav+0x100>
8000ad5e:	f2 08 00 08 	add	r8,r9,r8
8000ad62:	33 0a       	mov	r10,48
8000ad64:	10 9b       	mov	r11,r8
8000ad66:	4a cc       	lddpc	r12,8000ae14 <fat_invert_nav+0xf8>
8000ad68:	f0 1f 00 2c 	mcall	8000ae18 <fat_invert_nav+0xfc>
   memcpy_ram2ram((U8*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
8000ad6c:	ef 39 ff cc 	ld.ub	r9,r7[-52]
8000ad70:	12 98       	mov	r8,r9
8000ad72:	a1 78       	lsl	r8,0x1
8000ad74:	12 08       	add	r8,r9
8000ad76:	a5 68       	lsl	r8,0x4
8000ad78:	10 99       	mov	r9,r8
8000ad7a:	4a 98       	lddpc	r8,8000ae1c <fat_invert_nav+0x100>
8000ad7c:	10 09       	add	r9,r8
8000ad7e:	ee c8 00 30 	sub	r8,r7,48
8000ad82:	33 0a       	mov	r10,48
8000ad84:	10 9b       	mov	r11,r8
8000ad86:	12 9c       	mov	r12,r9
8000ad88:	f0 1f 00 24 	mcall	8000ae18 <fat_invert_nav+0xfc>

   memcpy_ram2ram(Temp,                              (U8*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
8000ad8c:	ee c8 00 30 	sub	r8,r7,48
8000ad90:	31 0a       	mov	r10,16
8000ad92:	4a 4b       	lddpc	r11,8000ae20 <fat_invert_nav+0x104>
8000ad94:	10 9c       	mov	r12,r8
8000ad96:	f0 1f 00 21 	mcall	8000ae18 <fat_invert_nav+0xfc>
   memcpy_ram2ram((U8*)&fs_g_nav_entry,              (U8*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
8000ad9a:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8000ad9e:	f0 09 15 04 	lsl	r9,r8,0x4
8000ada2:	4a 18       	lddpc	r8,8000ae24 <fat_invert_nav+0x108>
8000ada4:	f2 08 00 08 	add	r8,r9,r8
8000ada8:	31 0a       	mov	r10,16
8000adaa:	10 9b       	mov	r11,r8
8000adac:	49 dc       	lddpc	r12,8000ae20 <fat_invert_nav+0x104>
8000adae:	f0 1f 00 1b 	mcall	8000ae18 <fat_invert_nav+0xfc>
   memcpy_ram2ram((U8*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
8000adb2:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8000adb6:	f0 09 15 04 	lsl	r9,r8,0x4
8000adba:	49 b8       	lddpc	r8,8000ae24 <fat_invert_nav+0x108>
8000adbc:	10 09       	add	r9,r8
8000adbe:	ee c8 00 30 	sub	r8,r7,48
8000adc2:	31 0a       	mov	r10,16
8000adc4:	10 9b       	mov	r11,r8
8000adc6:	12 9c       	mov	r12,r9
8000adc8:	f0 1f 00 14 	mcall	8000ae18 <fat_invert_nav+0xfc>

   memcpy_ram2ram(Temp,                              (U8*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
8000adcc:	ee c8 00 30 	sub	r8,r7,48
8000add0:	30 4a       	mov	r10,4
8000add2:	49 6b       	lddpc	r11,8000ae28 <fat_invert_nav+0x10c>
8000add4:	10 9c       	mov	r12,r8
8000add6:	f0 1f 00 11 	mcall	8000ae18 <fat_invert_nav+0xfc>
   memcpy_ram2ram((U8*)&fs_g_nav_fast,               (U8*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
8000adda:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8000adde:	f0 09 15 02 	lsl	r9,r8,0x2
8000ade2:	49 38       	lddpc	r8,8000ae2c <fat_invert_nav+0x110>
8000ade4:	f2 08 00 08 	add	r8,r9,r8
8000ade8:	30 4a       	mov	r10,4
8000adea:	10 9b       	mov	r11,r8
8000adec:	48 fc       	lddpc	r12,8000ae28 <fat_invert_nav+0x10c>
8000adee:	f0 1f 00 0b 	mcall	8000ae18 <fat_invert_nav+0xfc>
   memcpy_ram2ram((U8*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
8000adf2:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8000adf6:	f0 09 15 02 	lsl	r9,r8,0x2
8000adfa:	48 d8       	lddpc	r8,8000ae2c <fat_invert_nav+0x110>
8000adfc:	10 09       	add	r9,r8
8000adfe:	ee c8 00 30 	sub	r8,r7,48
8000ae02:	30 4a       	mov	r10,4
8000ae04:	10 9b       	mov	r11,r8
8000ae06:	12 9c       	mov	r12,r9
8000ae08:	f0 1f 00 04 	mcall	8000ae18 <fat_invert_nav+0xfc>
}
8000ae0c:	2f 3d       	sub	sp,-52
8000ae0e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae12:	00 00       	add	r0,r0
8000ae14:	00 00       	add	r0,r0
8000ae16:	0d 58       	ld.sh	r8,--r6
8000ae18:	80 00       	ld.sh	r0,r0[0x0]
8000ae1a:	f0 a0 00 00 	rcall	7fe0ae1a <_estack+0x7fdfae1a>
8000ae1e:	0e 48       	or	r8,r7
8000ae20:	00 00       	add	r0,r0
8000ae22:	0b 1c       	ld.sh	r12,r5++
8000ae24:	00 00       	add	r0,r0
8000ae26:	0d 88       	ld.ub	r8,r6[0x0]
8000ae28:	00 00       	add	r0,r0
8000ae2a:	0e 3c       	cp.w	r12,r7
8000ae2c:	00 00       	add	r0,r0
8000ae2e:	0e 18       	sub	r8,r7

8000ae30 <file_open>:
//!
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool  file_open( U8 fopen_mode )
{
8000ae30:	eb cd 40 80 	pushm	r7,lr
8000ae34:	1a 97       	mov	r7,sp
8000ae36:	20 2d       	sub	sp,8
8000ae38:	18 98       	mov	r8,r12
8000ae3a:	ef 68 ff fc 	st.b	r7[-4],r8
   if( !fat_check_mount_select_noopen())
8000ae3e:	f0 1f 00 35 	mcall	8000af10 <file_open+0xe0>
8000ae42:	18 98       	mov	r8,r12
8000ae44:	58 08       	cp.w	r8,0
8000ae46:	c0 51       	brne	8000ae50 <file_open+0x20>
      return FALSE;
8000ae48:	30 08       	mov	r8,0
8000ae4a:	ef 48 ff f8 	st.w	r7[-8],r8
8000ae4e:	c5 b8       	rjmp	8000af04 <file_open+0xd4>

   if( !fat_check_is_file())
8000ae50:	f0 1f 00 31 	mcall	8000af14 <file_open+0xe4>
8000ae54:	18 98       	mov	r8,r12
8000ae56:	58 08       	cp.w	r8,0
8000ae58:	c0 51       	brne	8000ae62 <file_open+0x32>
      return FALSE;
8000ae5a:	30 08       	mov	r8,0
8000ae5c:	ef 48 ff f8 	st.w	r7[-8],r8
8000ae60:	c5 28       	rjmp	8000af04 <file_open+0xd4>

   if(FOPEN_WRITE_ACCESS & fopen_mode)
8000ae62:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ae66:	e2 18 00 02 	andl	r8,0x2,COH
8000ae6a:	c2 70       	breq	8000aeb8 <file_open+0x88>
   {
      if( !fat_check_nav_access_file( TRUE ) )
8000ae6c:	30 1c       	mov	r12,1
8000ae6e:	f0 1f 00 2b 	mcall	8000af18 <file_open+0xe8>
8000ae72:	18 98       	mov	r8,r12
8000ae74:	58 08       	cp.w	r8,0
8000ae76:	c0 51       	brne	8000ae80 <file_open+0x50>
         return FALSE;
8000ae78:	30 08       	mov	r8,0
8000ae7a:	ef 48 ff f8 	st.w	r7[-8],r8
8000ae7e:	c4 38       	rjmp	8000af04 <file_open+0xd4>
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
8000ae80:	4a 78       	lddpc	r8,8000af1c <file_open+0xec>
8000ae82:	11 a8       	ld.ub	r8,r8[0x2]
8000ae84:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ae88:	5c 58       	castu.b	r8
8000ae8a:	c0 80       	breq	8000ae9a <file_open+0x6a>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
8000ae8c:	4a 59       	lddpc	r9,8000af20 <file_open+0xf0>
8000ae8e:	31 58       	mov	r8,21
8000ae90:	b2 88       	st.b	r9[0x0],r8
         return FALSE;
8000ae92:	30 08       	mov	r8,0
8000ae94:	ef 48 ff f8 	st.w	r7[-8],r8
8000ae98:	c3 68       	rjmp	8000af04 <file_open+0xd4>
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
8000ae9a:	4a 38       	lddpc	r8,8000af24 <file_open+0xf4>
8000ae9c:	11 88       	ld.ub	r8,r8[0x0]
8000ae9e:	10 9c       	mov	r12,r8
8000aea0:	f0 1f 00 22 	mcall	8000af28 <file_open+0xf8>
8000aea4:	18 98       	mov	r8,r12
8000aea6:	58 08       	cp.w	r8,0
8000aea8:	c1 20       	breq	8000aecc <file_open+0x9c>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
8000aeaa:	49 e9       	lddpc	r9,8000af20 <file_open+0xf0>
8000aeac:	31 48       	mov	r8,20
8000aeae:	b2 88       	st.b	r9[0x0],r8
         return FALSE;
8000aeb0:	30 08       	mov	r8,0
8000aeb2:	ef 48 ff f8 	st.w	r7[-8],r8
8000aeb6:	c2 78       	rjmp	8000af04 <file_open+0xd4>
      return FALSE;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( FALSE ) )
8000aeb8:	30 0c       	mov	r12,0
8000aeba:	f0 1f 00 18 	mcall	8000af18 <file_open+0xe8>
8000aebe:	18 98       	mov	r8,r12
8000aec0:	58 08       	cp.w	r8,0
8000aec2:	c0 51       	brne	8000aecc <file_open+0x9c>
         return FALSE;
8000aec4:	30 08       	mov	r8,0
8000aec6:	ef 48 ff f8 	st.w	r7[-8],r8
8000aeca:	c1 d8       	rjmp	8000af04 <file_open+0xd4>
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
8000aecc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000aed0:	e2 18 00 04 	andl	r8,0x4,COH
8000aed4:	c0 40       	breq	8000aedc <file_open+0xac>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
8000aed6:	49 29       	lddpc	r9,8000af1c <file_open+0xec>
8000aed8:	30 08       	mov	r8,0
8000aeda:	93 28       	st.w	r9[0x8],r8
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
8000aedc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000aee0:	e2 18 00 08 	andl	r8,0x8,COH
8000aee4:	c0 50       	breq	8000aeee <file_open+0xbe>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
8000aee6:	48 e9       	lddpc	r9,8000af1c <file_open+0xec>
8000aee8:	30 08       	mov	r8,0
8000aeea:	93 38       	st.w	r9[0xc],r8
8000aeec:	c0 58       	rjmp	8000aef6 <file_open+0xc6>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
8000aeee:	48 c8       	lddpc	r8,8000af1c <file_open+0xec>
8000aef0:	70 29       	ld.w	r9,r8[0x8]
8000aef2:	48 b8       	lddpc	r8,8000af1c <file_open+0xec>
8000aef4:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
8000aef6:	48 a9       	lddpc	r9,8000af1c <file_open+0xec>
8000aef8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000aefc:	b2 88       	st.b	r9[0x0],r8
   return TRUE;
8000aefe:	30 18       	mov	r8,1
8000af00:	ef 48 ff f8 	st.w	r7[-8],r8
8000af04:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000af08:	10 9c       	mov	r12,r8
8000af0a:	2f ed       	sub	sp,-8
8000af0c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af10:	80 00       	ld.sh	r0,r0[0x0]
8000af12:	8c b0       	ld.uh	r0,r6[0x6]
8000af14:	80 00       	ld.sh	r0,r0[0x0]
8000af16:	8d 88       	st.w	r6[0x20],r8
8000af18:	80 00       	ld.sh	r0,r0[0x0]
8000af1a:	ac 14       	st.h	r6[0x2],r4
8000af1c:	00 00       	add	r0,r0
8000af1e:	0b 1c       	ld.sh	r12,r5++
8000af20:	00 00       	add	r0,r0
8000af22:	0e 40       	or	r0,r7
8000af24:	00 00       	add	r0,r0
8000af26:	0d 58       	ld.sh	r8,--r6
8000af28:	80 00       	ld.sh	r0,r0[0x0]
8000af2a:	db 04       	*unknown*

8000af2c <file_getc>:
//!
//! @return    The byte readed
//! @return    EOF, in case of error or end of file
//!
U16   file_getc( void )
{
8000af2c:	eb cd 40 80 	pushm	r7,lr
8000af30:	1a 97       	mov	r7,sp
8000af32:	20 2d       	sub	sp,8
   U16   u16_byte;

   while(1)
   {
      if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
8000af34:	4a 18       	lddpc	r8,8000afb8 <file_getc+0x8c>
8000af36:	11 88       	ld.ub	r8,r8[0x0]
8000af38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000af3c:	c0 51       	brne	8000af46 <file_getc+0x1a>
      {
         fs_g_status = FS_ERR_WRITE_ONLY;
8000af3e:	4a 09       	lddpc	r9,8000afbc <file_getc+0x90>
8000af40:	31 e8       	mov	r8,30
8000af42:	b2 88       	st.b	r9[0x0],r8
8000af44:	c3 08       	rjmp	8000afa4 <file_getc+0x78>
         break;
      }
      if( fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file )
8000af46:	49 d8       	lddpc	r8,8000afb8 <file_getc+0x8c>
8000af48:	70 29       	ld.w	r9,r8[0x8]
8000af4a:	49 c8       	lddpc	r8,8000afb8 <file_getc+0x8c>
8000af4c:	70 38       	ld.w	r8,r8[0xc]
8000af4e:	10 39       	cp.w	r9,r8
8000af50:	e0 8b 00 06 	brhi	8000af5c <file_getc+0x30>
      {
         fs_g_status = FS_ERR_EOF;
8000af54:	49 a9       	lddpc	r9,8000afbc <file_getc+0x90>
8000af56:	32 08       	mov	r8,32
8000af58:	b2 88       	st.b	r9[0x0],r8
8000af5a:	c2 58       	rjmp	8000afa4 <file_getc+0x78>
         break;
      }

      if( !fat_read_file( FS_CLUST_ACT_ONE ))
8000af5c:	30 2c       	mov	r12,2
8000af5e:	f0 1f 00 19 	mcall	8000afc0 <file_getc+0x94>
8000af62:	18 98       	mov	r8,r12
8000af64:	58 08       	cp.w	r8,0
8000af66:	c0 b1       	brne	8000af7c <file_getc+0x50>
      {
         if( FS_ERR_OUT_LIST == fs_g_status )
8000af68:	49 58       	lddpc	r8,8000afbc <file_getc+0x90>
8000af6a:	11 89       	ld.ub	r9,r8[0x0]
8000af6c:	31 a8       	mov	r8,26
8000af6e:	f0 09 18 00 	cp.b	r9,r8
8000af72:	c1 91       	brne	8000afa4 <file_getc+0x78>
         {  // Translate the error
            fs_g_status = FS_ERR_EOF;   // End of file
8000af74:	49 29       	lddpc	r9,8000afbc <file_getc+0x90>
8000af76:	32 08       	mov	r8,32
8000af78:	b2 88       	st.b	r9[0x0],r8
8000af7a:	c1 58       	rjmp	8000afa4 <file_getc+0x78>
         }
         break;
      }

      u16_byte = fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ];
8000af7c:	48 f8       	lddpc	r8,8000afb8 <file_getc+0x8c>
8000af7e:	70 38       	ld.w	r8,r8[0xc]
8000af80:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8000af84:	49 08       	lddpc	r8,8000afc4 <file_getc+0x98>
8000af86:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000af8a:	ef 58 ff fe 	st.h	r7[-2],r8
      fs_g_nav_entry.u32_pos_in_file++;
8000af8e:	48 b8       	lddpc	r8,8000afb8 <file_getc+0x8c>
8000af90:	70 38       	ld.w	r8,r8[0xc]
8000af92:	f0 c9 ff ff 	sub	r9,r8,-1
8000af96:	48 98       	lddpc	r8,8000afb8 <file_getc+0x8c>
8000af98:	91 39       	st.w	r8[0xc],r9
      return u16_byte;
8000af9a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000af9e:	ef 48 ff f8 	st.w	r7[-8],r8
8000afa2:	c0 48       	rjmp	8000afaa <file_getc+0x7e>
   }
   return FS_EOF;   // No data readed
8000afa4:	3f f8       	mov	r8,-1
8000afa6:	ef 48 ff f8 	st.w	r7[-8],r8
8000afaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000afae:	10 9c       	mov	r12,r8
8000afb0:	2f ed       	sub	sp,-8
8000afb2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000afb6:	00 00       	add	r0,r0
8000afb8:	00 00       	add	r0,r0
8000afba:	0b 1c       	ld.sh	r12,r5++
8000afbc:	00 00       	add	r0,r0
8000afbe:	0e 40       	or	r0,r7
8000afc0:	80 00       	ld.sh	r0,r0[0x0]
8000afc2:	9e b0       	ld.uh	r0,pc[0x6]
8000afc4:	00 00       	add	r0,r0
8000afc6:	0b 58       	ld.sh	r8,--r5

8000afc8 <file_putc>:
//!
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool  file_putc( U8 u8_byte )
{
8000afc8:	eb cd 40 80 	pushm	r7,lr
8000afcc:	1a 97       	mov	r7,sp
8000afce:	20 2d       	sub	sp,8
8000afd0:	18 98       	mov	r8,r12
8000afd2:	ef 68 ff fc 	st.b	r7[-4],r8
   if( !fat_check_mount_select_open())
8000afd6:	f0 1f 00 23 	mcall	8000b060 <file_putc+0x98>
8000afda:	18 98       	mov	r8,r12
8000afdc:	58 08       	cp.w	r8,0
8000afde:	c0 51       	brne	8000afe8 <file_putc+0x20>
      return FALSE;
8000afe0:	30 08       	mov	r8,0
8000afe2:	ef 48 ff f8 	st.w	r7[-8],r8
8000afe6:	c3 78       	rjmp	8000b054 <file_putc+0x8c>

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
8000afe8:	49 f8       	lddpc	r8,8000b064 <file_putc+0x9c>
8000afea:	11 88       	ld.ub	r8,r8[0x0]
8000afec:	e2 18 00 02 	andl	r8,0x2,COH
8000aff0:	c0 81       	brne	8000b000 <file_putc+0x38>
   {
      fs_g_status = FS_ERR_READ_ONLY;
8000aff2:	49 e9       	lddpc	r9,8000b068 <file_putc+0xa0>
8000aff4:	31 58       	mov	r8,21
8000aff6:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
8000aff8:	30 08       	mov	r8,0
8000affa:	ef 48 ff f8 	st.w	r7[-8],r8
8000affe:	c2 b8       	rjmp	8000b054 <file_putc+0x8c>
   }

   if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
8000b000:	30 1b       	mov	r11,1
8000b002:	30 2c       	mov	r12,2
8000b004:	f0 1f 00 1a 	mcall	8000b06c <file_putc+0xa4>
8000b008:	18 98       	mov	r8,r12
8000b00a:	58 08       	cp.w	r8,0
8000b00c:	c0 51       	brne	8000b016 <file_putc+0x4e>
      return FALSE;
8000b00e:	30 08       	mov	r8,0
8000b010:	ef 48 ff f8 	st.w	r7[-8],r8
8000b014:	c2 08       	rjmp	8000b054 <file_putc+0x8c>

   // Write the data in the internal cache
   fat_cache_mark_sector_as_dirty();
8000b016:	f0 1f 00 17 	mcall	8000b070 <file_putc+0xa8>
   fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ]    = u8_byte;
8000b01a:	49 38       	lddpc	r8,8000b064 <file_putc+0x9c>
8000b01c:	70 38       	ld.w	r8,r8[0xc]
8000b01e:	f5 d8 c0 09 	bfextu	r10,r8,0x0,0x9
8000b022:	49 59       	lddpc	r9,8000b074 <file_putc+0xac>
8000b024:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b028:	f2 0a 0b 08 	st.b	r9[r10],r8
   fs_g_nav_entry.u32_pos_in_file++;
8000b02c:	48 e8       	lddpc	r8,8000b064 <file_putc+0x9c>
8000b02e:	70 38       	ld.w	r8,r8[0xc]
8000b030:	f0 c9 ff ff 	sub	r9,r8,-1
8000b034:	48 c8       	lddpc	r8,8000b064 <file_putc+0x9c>
8000b036:	91 39       	st.w	r8[0xc],r9

   // Update the file size
   if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
8000b038:	48 b8       	lddpc	r8,8000b064 <file_putc+0x9c>
8000b03a:	70 39       	ld.w	r9,r8[0xc]
8000b03c:	48 a8       	lddpc	r8,8000b064 <file_putc+0x9c>
8000b03e:	70 28       	ld.w	r8,r8[0x8]
8000b040:	10 39       	cp.w	r9,r8
8000b042:	e0 88 00 06 	brls	8000b04e <file_putc+0x86>
   {
      fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
8000b046:	48 88       	lddpc	r8,8000b064 <file_putc+0x9c>
8000b048:	70 39       	ld.w	r9,r8[0xc]
8000b04a:	48 78       	lddpc	r8,8000b064 <file_putc+0x9c>
8000b04c:	91 29       	st.w	r8[0x8],r9
   }
   return TRUE;
8000b04e:	30 18       	mov	r8,1
8000b050:	ef 48 ff f8 	st.w	r7[-8],r8
8000b054:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000b058:	10 9c       	mov	r12,r8
8000b05a:	2f ed       	sub	sp,-8
8000b05c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b060:	80 00       	ld.sh	r0,r0[0x0]
8000b062:	8d 00       	st.w	r6[0x0],r0
8000b064:	00 00       	add	r0,r0
8000b066:	0b 1c       	ld.sh	r12,r5++
8000b068:	00 00       	add	r0,r0
8000b06a:	0e 40       	or	r0,r7
8000b06c:	80 00       	ld.sh	r0,r0[0x0]
8000b06e:	9f f4       	st.w	pc[0x3c],r4
8000b070:	80 00       	ld.sh	r0,r0[0x0]
8000b072:	ab 74       	lsl	r4,0xb
8000b074:	00 00       	add	r0,r0
8000b076:	0b 58       	ld.sh	r8,--r5

8000b078 <file_eof>:
//! @return    1     the position is at the end of file
//! @return    0     the position isn't at the end of file
//! @return    FFh   error
//!
U8    file_eof( void )
{
8000b078:	eb cd 40 80 	pushm	r7,lr
8000b07c:	1a 97       	mov	r7,sp
8000b07e:	20 1d       	sub	sp,4
   if( !fat_check_mount_select_open() )
8000b080:	f0 1f 00 0c 	mcall	8000b0b0 <file_eof+0x38>
8000b084:	18 98       	mov	r8,r12
8000b086:	58 08       	cp.w	r8,0
8000b088:	c0 61       	brne	8000b094 <file_eof+0x1c>
      return 0xFF;
8000b08a:	e0 68 00 ff 	mov	r8,255
8000b08e:	ef 48 ff fc 	st.w	r7[-4],r8
8000b092:	c0 98       	rjmp	8000b0a4 <file_eof+0x2c>
   return (fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file );
8000b094:	48 88       	lddpc	r8,8000b0b4 <file_eof+0x3c>
8000b096:	70 29       	ld.w	r9,r8[0x8]
8000b098:	48 78       	lddpc	r8,8000b0b4 <file_eof+0x3c>
8000b09a:	70 38       	ld.w	r8,r8[0xc]
8000b09c:	10 39       	cp.w	r9,r8
8000b09e:	5f 88       	srls	r8
8000b0a0:	ef 48 ff fc 	st.w	r7[-4],r8
8000b0a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000b0a8:	10 9c       	mov	r12,r8
8000b0aa:	2f fd       	sub	sp,-4
8000b0ac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b0b0:	80 00       	ld.sh	r0,r0[0x0]
8000b0b2:	8d 00       	st.w	r6[0x0],r0
8000b0b4:	00 00       	add	r0,r0
8000b0b6:	0b 1c       	ld.sh	r12,r5++

8000b0b8 <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
8000b0b8:	eb cd 40 80 	pushm	r7,lr
8000b0bc:	1a 97       	mov	r7,sp
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
8000b0be:	f0 1f 00 0d 	mcall	8000b0f0 <file_close+0x38>
8000b0c2:	18 98       	mov	r8,r12
8000b0c4:	58 08       	cp.w	r8,0
8000b0c6:	c1 20       	breq	8000b0ea <file_close+0x32>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
8000b0c8:	48 b8       	lddpc	r8,8000b0f4 <file_close+0x3c>
8000b0ca:	11 88       	ld.ub	r8,r8[0x0]
8000b0cc:	e2 18 00 02 	andl	r8,0x2,COH
8000b0d0:	c0 a0       	breq	8000b0e4 <file_close+0x2c>
      {
         // Write file information
         if( !fat_read_dir() )
8000b0d2:	f0 1f 00 0a 	mcall	8000b0f8 <file_close+0x40>
8000b0d6:	18 98       	mov	r8,r12
8000b0d8:	58 08       	cp.w	r8,0
8000b0da:	c0 80       	breq	8000b0ea <file_close+0x32>
            return;           // error
         fat_write_entry_file();
8000b0dc:	f0 1f 00 08 	mcall	8000b0fc <file_close+0x44>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
8000b0e0:	f0 1f 00 08 	mcall	8000b100 <file_close+0x48>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
8000b0e4:	48 49       	lddpc	r9,8000b0f4 <file_close+0x3c>
8000b0e6:	30 08       	mov	r8,0
8000b0e8:	b2 88       	st.b	r9[0x0],r8
   }
}
8000b0ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b0ee:	00 00       	add	r0,r0
8000b0f0:	80 00       	ld.sh	r0,r0[0x0]
8000b0f2:	8d 00       	st.w	r6[0x0],r0
8000b0f4:	00 00       	add	r0,r0
8000b0f6:	0b 1c       	ld.sh	r12,r5++
8000b0f8:	80 00       	ld.sh	r0,r0[0x0]
8000b0fa:	a1 84       	lsr	r4,0x0
8000b0fc:	80 00       	ld.sh	r0,r0[0x0]
8000b0fe:	a4 84       	st.b	r2[0x0],r4
8000b100:	80 00       	ld.sh	r0,r0[0x0]
8000b102:	ab 8c       	lsr	r12,0xa

8000b104 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
Bool  fat_mount( void )
{
8000b104:	eb cd 40 80 	pushm	r7,lr
8000b108:	1a 97       	mov	r7,sp
8000b10a:	20 3d       	sub	sp,12
   U8  u8_tmp;
   U16 u16_tmp;
   U32 u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
8000b10c:	fe f9 05 d8 	ld.w	r9,pc[1496]
8000b110:	30 08       	mov	r8,0
8000b112:	93 78       	st.w	r9[0x1c],r8
   // No selected file
   fat_clear_entry_info_and_ptr();
8000b114:	f0 1f 01 75 	mcall	8000b6e8 <fat_mount+0x5e4>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
8000b118:	fe f9 05 d4 	ld.w	r9,pc[1492]
8000b11c:	30 08       	mov	r8,0
8000b11e:	b2 88       	st.b	r9[0x0],r8
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
8000b120:	fe f9 05 d0 	ld.w	r9,pc[1488]
8000b124:	30 08       	mov	r8,0
8000b126:	93 08       	st.w	r9[0x0],r8

   // Check if the drive is availabled
   if( !fat_check_device() )
8000b128:	f0 1f 01 73 	mcall	8000b6f4 <fat_mount+0x5f0>
8000b12c:	18 98       	mov	r8,r12
8000b12e:	58 08       	cp.w	r8,0
8000b130:	c0 61       	brne	8000b13c <fat_mount+0x38>
      return FALSE;
8000b132:	30 08       	mov	r8,0
8000b134:	ef 48 ff f4 	st.w	r7[-12],r8
8000b138:	e0 8f 02 d0 	bral	8000b6d8 <fat_mount+0x5d4>

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( TRUE ))
8000b13c:	30 1c       	mov	r12,1
8000b13e:	f0 1f 01 6f 	mcall	8000b6f8 <fat_mount+0x5f4>
8000b142:	18 98       	mov	r8,r12
8000b144:	58 08       	cp.w	r8,0
8000b146:	c0 61       	brne	8000b152 <fat_mount+0x4e>
         return FALSE;
8000b148:	30 08       	mov	r8,0
8000b14a:	ef 48 ff f4 	st.w	r7[-12],r8
8000b14e:	e0 8f 02 c5 	bral	8000b6d8 <fat_mount+0x5d4>

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
8000b152:	fe f8 05 aa 	ld.w	r8,pc[1450]
8000b156:	f1 39 01 fe 	ld.ub	r9,r8[510]
8000b15a:	35 58       	mov	r8,85
8000b15c:	f0 09 18 00 	cp.b	r9,r8
8000b160:	c1 20       	breq	8000b184 <fat_mount+0x80>
8000b162:	fe f8 05 9a 	ld.w	r8,pc[1434]
8000b166:	f1 39 01 ff 	ld.ub	r9,r8[511]
8000b16a:	3a a8       	mov	r8,-86
8000b16c:	f0 09 18 00 	cp.b	r9,r8
8000b170:	c0 a0       	breq	8000b184 <fat_mount+0x80>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
      {
         fs_g_status = FS_ERR_NO_FORMAT;
8000b172:	fe f9 05 8e 	ld.w	r9,pc[1422]
8000b176:	30 28       	mov	r8,2
8000b178:	b2 88       	st.b	r9[0x0],r8
         return FALSE;
8000b17a:	30 08       	mov	r8,0
8000b17c:	ef 48 ff f4 	st.w	r7[-12],r8
8000b180:	e0 8f 02 ac 	bral	8000b6d8 <fat_mount+0x5d4>
      }

      if ( 0 == fs_gu32_addrsector )
8000b184:	fe f8 05 6c 	ld.w	r8,pc[1388]
8000b188:	70 08       	ld.w	r8,r8[0x0]
8000b18a:	58 08       	cp.w	r8,0
8000b18c:	e0 81 00 fe 	brne	8000b388 <fat_mount+0x284>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == ENABLED)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
8000b190:	30 08       	mov	r8,0
8000b192:	ef 68 ff ff 	st.b	r7[-1],r8
8000b196:	c9 28       	rjmp	8000b2ba <fat_mount+0x1b6>
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000b198:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b19c:	a5 68       	lsl	r8,0x4
8000b19e:	5c 88       	casts.h	r8
8000b1a0:	f0 c8 fe 42 	sub	r8,r8,-446
8000b1a4:	5c 88       	casts.h	r8
8000b1a6:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b1aa:	fe f8 05 52 	ld.w	r8,pc[1362]
8000b1ae:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000b1b2:	38 08       	mov	r8,-128
8000b1b4:	f0 09 18 00 	cp.b	r9,r8
8000b1b8:	c1 00       	breq	8000b1d8 <fat_mount+0xd4>
8000b1ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b1be:	a5 68       	lsl	r8,0x4
8000b1c0:	5c 88       	casts.h	r8
8000b1c2:	f0 c8 fe 42 	sub	r8,r8,-446
8000b1c6:	5c 88       	casts.h	r8
8000b1c8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b1cc:	fe f8 05 30 	ld.w	r8,pc[1328]
8000b1d0:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000b1d4:	58 08       	cp.w	r8,0
8000b1d6:	c6 d1       	brne	8000b2b0 <fat_mount+0x1ac>
8000b1d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b1dc:	a5 68       	lsl	r8,0x4
8000b1de:	5c 88       	casts.h	r8
8000b1e0:	f0 c8 fe 42 	sub	r8,r8,-446
8000b1e4:	5c 88       	casts.h	r8
8000b1e6:	5c 78       	castu.h	r8
8000b1e8:	f0 c9 ff fc 	sub	r9,r8,-4
8000b1ec:	fe f8 05 10 	ld.w	r8,pc[1296]
8000b1f0:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000b1f4:	30 18       	mov	r8,1
8000b1f6:	f0 09 18 00 	cp.b	r9,r8
8000b1fa:	c6 70       	breq	8000b2c8 <fat_mount+0x1c4>
8000b1fc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b200:	a5 68       	lsl	r8,0x4
8000b202:	5c 88       	casts.h	r8
8000b204:	f0 c8 fe 42 	sub	r8,r8,-446
8000b208:	5c 88       	casts.h	r8
8000b20a:	5c 78       	castu.h	r8
8000b20c:	f0 c9 ff fc 	sub	r9,r8,-4
8000b210:	fe f8 04 ec 	ld.w	r8,pc[1260]
8000b214:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000b218:	30 48       	mov	r8,4
8000b21a:	f0 09 18 00 	cp.b	r9,r8
8000b21e:	c5 50       	breq	8000b2c8 <fat_mount+0x1c4>
8000b220:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b224:	a5 68       	lsl	r8,0x4
8000b226:	5c 88       	casts.h	r8
8000b228:	f0 c8 fe 42 	sub	r8,r8,-446
8000b22c:	5c 88       	casts.h	r8
8000b22e:	5c 78       	castu.h	r8
8000b230:	f0 c9 ff fc 	sub	r9,r8,-4
8000b234:	fe f8 04 c8 	ld.w	r8,pc[1224]
8000b238:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000b23c:	30 68       	mov	r8,6
8000b23e:	f0 09 18 00 	cp.b	r9,r8
8000b242:	c4 30       	breq	8000b2c8 <fat_mount+0x1c4>
8000b244:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b248:	a5 68       	lsl	r8,0x4
8000b24a:	5c 88       	casts.h	r8
8000b24c:	f0 c8 fe 42 	sub	r8,r8,-446
8000b250:	5c 88       	casts.h	r8
8000b252:	5c 78       	castu.h	r8
8000b254:	f0 c9 ff fc 	sub	r9,r8,-4
8000b258:	fe f8 04 a4 	ld.w	r8,pc[1188]
8000b25c:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000b260:	30 e8       	mov	r8,14
8000b262:	f0 09 18 00 	cp.b	r9,r8
8000b266:	c3 10       	breq	8000b2c8 <fat_mount+0x1c4>
8000b268:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b26c:	a5 68       	lsl	r8,0x4
8000b26e:	5c 88       	casts.h	r8
8000b270:	f0 c8 fe 42 	sub	r8,r8,-446
8000b274:	5c 88       	casts.h	r8
8000b276:	5c 78       	castu.h	r8
8000b278:	f0 c9 ff fc 	sub	r9,r8,-4
8000b27c:	fe f8 04 80 	ld.w	r8,pc[1152]
8000b280:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000b284:	30 b8       	mov	r8,11
8000b286:	f0 09 18 00 	cp.b	r9,r8
8000b28a:	c1 f0       	breq	8000b2c8 <fat_mount+0x1c4>
8000b28c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b290:	a5 68       	lsl	r8,0x4
8000b292:	5c 88       	casts.h	r8
8000b294:	f0 c8 fe 42 	sub	r8,r8,-446
8000b298:	5c 88       	casts.h	r8
8000b29a:	5c 78       	castu.h	r8
8000b29c:	f0 c9 ff fc 	sub	r9,r8,-4
8000b2a0:	fe f8 04 5c 	ld.w	r8,pc[1116]
8000b2a4:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000b2a8:	30 c8       	mov	r8,12
8000b2aa:	f0 09 18 00 	cp.b	r9,r8
8000b2ae:	c0 d0       	breq	8000b2c8 <fat_mount+0x1c4>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == ENABLED)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
8000b2b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b2b4:	2f f8       	sub	r8,-1
8000b2b6:	ef 68 ff ff 	st.b	r7[-1],r8
8000b2ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b2be:	30 48       	mov	r8,4
8000b2c0:	f0 09 18 00 	cp.b	r9,r8
8000b2c4:	fe 91 ff 6a 	brne	8000b198 <fat_mount+0x94>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
8000b2c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b2cc:	30 48       	mov	r8,4
8000b2ce:	f0 09 18 00 	cp.b	r9,r8
8000b2d2:	c5 b0       	breq	8000b388 <fat_mount+0x284>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
8000b2d4:	fe f8 04 1c 	ld.w	r8,pc[1052]
8000b2d8:	f0 ca ff fd 	sub	r10,r8,-3
8000b2dc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b2e0:	a5 68       	lsl	r8,0x4
8000b2e2:	5c 88       	casts.h	r8
8000b2e4:	f0 c8 fe 42 	sub	r8,r8,-446
8000b2e8:	5c 88       	casts.h	r8
8000b2ea:	5c 78       	castu.h	r8
8000b2ec:	f0 c9 ff f8 	sub	r9,r8,-8
8000b2f0:	fe f8 04 0c 	ld.w	r8,pc[1036]
8000b2f4:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000b2f8:	b4 88       	st.b	r10[0x0],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
8000b2fa:	fe f8 03 f6 	ld.w	r8,pc[1014]
8000b2fe:	f0 ca ff fe 	sub	r10,r8,-2
8000b302:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b306:	a5 68       	lsl	r8,0x4
8000b308:	5c 88       	casts.h	r8
8000b30a:	f0 c8 fe 42 	sub	r8,r8,-446
8000b30e:	5c 88       	casts.h	r8
8000b310:	5c 78       	castu.h	r8
8000b312:	f0 c9 ff f7 	sub	r9,r8,-9
8000b316:	fe f8 03 e6 	ld.w	r8,pc[998]
8000b31a:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000b31e:	b4 88       	st.b	r10[0x0],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
8000b320:	fe f8 03 d0 	ld.w	r8,pc[976]
8000b324:	f0 ca ff ff 	sub	r10,r8,-1
8000b328:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b32c:	a5 68       	lsl	r8,0x4
8000b32e:	5c 88       	casts.h	r8
8000b330:	f0 c8 fe 42 	sub	r8,r8,-446
8000b334:	5c 88       	casts.h	r8
8000b336:	5c 78       	castu.h	r8
8000b338:	f0 c9 ff f6 	sub	r9,r8,-10
8000b33c:	fe f8 03 c0 	ld.w	r8,pc[960]
8000b340:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000b344:	b4 88       	st.b	r10[0x0],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
8000b346:	fe fa 03 aa 	ld.w	r10,pc[938]
8000b34a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b34e:	a5 68       	lsl	r8,0x4
8000b350:	5c 88       	casts.h	r8
8000b352:	f0 c8 fe 42 	sub	r8,r8,-446
8000b356:	5c 88       	casts.h	r8
8000b358:	5c 78       	castu.h	r8
8000b35a:	f0 c9 ff f5 	sub	r9,r8,-11
8000b35e:	fe f8 03 9e 	ld.w	r8,pc[926]
8000b362:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000b366:	b4 88       	st.b	r10[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
8000b368:	fe f8 03 7c 	ld.w	r8,pc[892]
8000b36c:	11 88       	ld.ub	r8,r8[0x0]
8000b36e:	10 9c       	mov	r12,r8
8000b370:	f0 1f 00 e5 	mcall	8000b704 <fat_mount+0x600>
8000b374:	18 98       	mov	r8,r12
8000b376:	10 99       	mov	r9,r8
8000b378:	fe f8 03 78 	ld.w	r8,pc[888]
8000b37c:	70 08       	ld.w	r8,r8[0x0]
8000b37e:	b1 39       	mul	r9,r8
8000b380:	fe f8 03 70 	ld.w	r8,pc[880]
8000b384:	91 09       	st.w	r8[0x0],r9
8000b386:	cd ba       	rjmp	8000b13c <fat_mount+0x38>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
8000b388:	fe f8 03 74 	ld.w	r8,pc[884]
8000b38c:	11 89       	ld.ub	r9,r8[0x0]
8000b38e:	3e b8       	mov	r8,-21
8000b390:	f0 09 18 00 	cp.b	r9,r8
8000b394:	c1 11       	brne	8000b3b6 <fat_mount+0x2b2>
8000b396:	fe f8 03 66 	ld.w	r8,pc[870]
8000b39a:	11 a9       	ld.ub	r9,r8[0x2]
8000b39c:	39 08       	mov	r8,-112
8000b39e:	f0 09 18 00 	cp.b	r9,r8
8000b3a2:	c0 a1       	brne	8000b3b6 <fat_mount+0x2b2>
8000b3a4:	fe f8 03 58 	ld.w	r8,pc[856]
8000b3a8:	f1 38 00 15 	ld.ub	r8,r8[21]
8000b3ac:	e2 18 00 f0 	andl	r8,0xf0,COH
8000b3b0:	e0 48 00 f0 	cp.w	r8,240
8000b3b4:	c0 a0       	breq	8000b3c8 <fat_mount+0x2c4>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
8000b3b6:	fe f9 03 4a 	ld.w	r9,pc[842]
8000b3ba:	30 38       	mov	r8,3
8000b3bc:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
8000b3be:	30 08       	mov	r8,0
8000b3c0:	ef 48 ff f4 	st.w	r7[-12],r8
8000b3c4:	e0 8f 01 8a 	bral	8000b6d8 <fat_mount+0x5d4>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
8000b3c8:	fe f9 03 38 	ld.w	r9,pc[824]
8000b3cc:	30 48       	mov	r8,4
8000b3ce:	b2 88       	st.b	r9[0x0],r8

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
8000b3d0:	fe f8 03 2c 	ld.w	r8,pc[812]
8000b3d4:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000b3d8:	a1 98       	lsr	r8,0x1
8000b3da:	ef 68 ff fe 	st.b	r7[-2],r8

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
8000b3de:	fe f8 03 1e 	ld.w	r8,pc[798]
8000b3e2:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000b3e6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b3ea:	b3 38       	mul	r8,r9
8000b3ec:	5c 58       	castu.b	r8
8000b3ee:	fe f9 02 f6 	ld.w	r9,pc[758]
8000b3f2:	b2 98       	st.b	r9[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   LSB( u16_tmp ) = LOW_16_BPB_FATSz16;
8000b3f4:	ee c8 00 04 	sub	r8,r7,4
8000b3f8:	f0 c9 ff ff 	sub	r9,r8,-1
8000b3fc:	fe f8 03 00 	ld.w	r8,pc[768]
8000b400:	f1 38 00 16 	ld.ub	r8,r8[22]
8000b404:	b2 88       	st.b	r9[0x0],r8
   MSB( u16_tmp ) = HIGH_16_BPB_FATSz16;
8000b406:	ee c9 00 04 	sub	r9,r7,4
8000b40a:	fe f8 02 f2 	ld.w	r8,pc[754]
8000b40e:	f1 38 00 17 	ld.ub	r8,r8[23]
8000b412:	b2 88       	st.b	r9[0x0],r8
   if ( 0==u16_tmp )
8000b414:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b418:	58 08       	cp.w	r8,0
8000b41a:	c2 11       	brne	8000b45c <fat_mount+0x358>
   {
      LSB( u16_tmp ) = LOW0_32_BPB_FATSz32;
8000b41c:	ee c8 00 04 	sub	r8,r7,4
8000b420:	f0 c9 ff ff 	sub	r9,r8,-1
8000b424:	fe f8 02 d8 	ld.w	r8,pc[728]
8000b428:	f1 38 00 24 	ld.ub	r8,r8[36]
8000b42c:	b2 88       	st.b	r9[0x0],r8
      MSB( u16_tmp ) = LOW1_32_BPB_FATSz32;
8000b42e:	ee c9 00 04 	sub	r9,r7,4
8000b432:	fe f8 02 ca 	ld.w	r8,pc[714]
8000b436:	f1 38 00 25 	ld.ub	r8,r8[37]
8000b43a:	b2 88       	st.b	r9[0x0],r8
      // a large FAT32 isn't supported by this file system
      if( (0 != LOW2_32_BPB_FATSz32 )
8000b43c:	fe f8 02 c0 	ld.w	r8,pc[704]
8000b440:	f1 38 00 26 	ld.ub	r8,r8[38]
8000b444:	58 08       	cp.w	r8,0
8000b446:	c0 71       	brne	8000b454 <fat_mount+0x350>
8000b448:	fe f8 02 b4 	ld.w	r8,pc[692]
8000b44c:	f1 38 00 27 	ld.ub	r8,r8[39]
8000b450:	58 08       	cp.w	r8,0
8000b452:	c0 50       	breq	8000b45c <fat_mount+0x358>
      ||  (0 != LOW3_32_BPB_FATSz32 ) )
      {
         return FALSE;
8000b454:	30 08       	mov	r8,0
8000b456:	ef 48 ff f4 	st.w	r7[-12],r8
8000b45a:	c3 f9       	rjmp	8000b6d8 <fat_mount+0x5d4>
      }
   }
   fs_g_nav.u16_fat_size = u16_tmp * u8_sector_size;
8000b45c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b460:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000b464:	10 9a       	mov	r10,r8
8000b466:	12 98       	mov	r8,r9
8000b468:	f4 08 02 48 	mul	r8,r10,r8
8000b46c:	5c 88       	casts.h	r8
8000b46e:	fe f9 02 76 	ld.w	r9,pc[630]
8000b472:	b2 18       	st.h	r9[0x2],r8

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
8000b474:	fe f8 02 88 	ld.w	r8,pc[648]
8000b478:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b47c:	58 08       	cp.w	r8,0
8000b47e:	c2 a1       	brne	8000b4d2 <fat_mount+0x3ce>
8000b480:	fe f8 02 7c 	ld.w	r8,pc[636]
8000b484:	f1 38 00 14 	ld.ub	r8,r8[20]
8000b488:	58 08       	cp.w	r8,0
8000b48a:	c2 41       	brne	8000b4d2 <fat_mount+0x3ce>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
8000b48c:	ee c8 00 08 	sub	r8,r7,8
8000b490:	f0 c9 ff fd 	sub	r9,r8,-3
8000b494:	fe f8 02 68 	ld.w	r8,pc[616]
8000b498:	f1 38 00 20 	ld.ub	r8,r8[32]
8000b49c:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
8000b49e:	ee c8 00 08 	sub	r8,r7,8
8000b4a2:	f0 c9 ff fe 	sub	r9,r8,-2
8000b4a6:	fe f8 02 56 	ld.w	r8,pc[598]
8000b4aa:	f1 38 00 21 	ld.ub	r8,r8[33]
8000b4ae:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
8000b4b0:	ee c8 00 08 	sub	r8,r7,8
8000b4b4:	f0 c9 ff ff 	sub	r9,r8,-1
8000b4b8:	fe f8 02 44 	ld.w	r8,pc[580]
8000b4bc:	f1 38 00 22 	ld.ub	r8,r8[34]
8000b4c0:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
8000b4c2:	ee c9 00 08 	sub	r9,r7,8
8000b4c6:	fe f8 02 36 	ld.w	r8,pc[566]
8000b4ca:	f1 38 00 23 	ld.ub	r8,r8[35]
8000b4ce:	b2 88       	st.b	r9[0x0],r8
8000b4d0:	c1 d8       	rjmp	8000b50a <fat_mount+0x406>
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
8000b4d2:	ee c8 00 08 	sub	r8,r7,8
8000b4d6:	f0 c9 ff fd 	sub	r9,r8,-3
8000b4da:	fe f8 02 22 	ld.w	r8,pc[546]
8000b4de:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b4e2:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
8000b4e4:	ee c8 00 08 	sub	r8,r7,8
8000b4e8:	f0 c9 ff fe 	sub	r9,r8,-2
8000b4ec:	fe f8 02 10 	ld.w	r8,pc[528]
8000b4f0:	f1 38 00 14 	ld.ub	r8,r8[20]
8000b4f4:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = 0;
8000b4f6:	ee c8 00 08 	sub	r8,r7,8
8000b4fa:	f0 c9 ff ff 	sub	r9,r8,-1
8000b4fe:	30 08       	mov	r8,0
8000b500:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = 0;
8000b502:	ee c9 00 08 	sub	r9,r7,8
8000b506:	30 08       	mov	r8,0
8000b508:	b2 88       	st.b	r9[0x0],r8
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
8000b50a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b50e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b512:	f2 08 02 48 	mul	r8,r9,r8
8000b516:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * fs_g_nav.u16_fat_size;
8000b51a:	4f 38       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b51c:	90 18       	ld.sh	r8,r8[0x2]
8000b51e:	5c 78       	castu.h	r8
8000b520:	a1 78       	lsl	r8,0x1
8000b522:	5c 88       	casts.h	r8
8000b524:	4f 09       	lddpc	r9,8000b6e4 <fat_mount+0x5e0>
8000b526:	f3 58 00 14 	st.h	r9[20],r8

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
8000b52a:	ee c8 00 04 	sub	r8,r7,4
8000b52e:	f0 c9 ff ff 	sub	r9,r8,-1
8000b532:	4f 38       	lddpc	r8,8000b6fc <fat_mount+0x5f8>
8000b534:	f1 38 00 11 	ld.ub	r8,r8[17]
8000b538:	b2 88       	st.b	r9[0x0],r8
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
8000b53a:	ee c9 00 04 	sub	r9,r7,4
8000b53e:	4f 08       	lddpc	r8,8000b6fc <fat_mount+0x5f8>
8000b540:	f1 38 00 12 	ld.ub	r8,r8[18]
8000b544:	b2 88       	st.b	r9[0x0],r8
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
8000b546:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b54a:	f0 09 15 04 	lsl	r9,r8,0x4
8000b54e:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b552:	5c 78       	castu.h	r8
8000b554:	f2 08 00 08 	add	r8,r9,r8
8000b558:	a5 78       	lsl	r8,0x5
8000b55a:	f0 c9 00 01 	sub	r9,r8,1
8000b55e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b562:	a9 78       	lsl	r8,0x9
8000b564:	f2 08 0c 08 	divs	r8,r9,r8
8000b568:	5c 88       	casts.h	r8
8000b56a:	4d f9       	lddpc	r9,8000b6e4 <fat_mount+0x5e0>
8000b56c:	f3 58 00 16 	st.h	r9[22],r8
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
8000b570:	4d d8       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b572:	f1 08 00 16 	ld.sh	r8,r8[22]
8000b576:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b57a:	10 9a       	mov	r10,r8
8000b57c:	12 98       	mov	r8,r9
8000b57e:	f4 08 02 48 	mul	r8,r10,r8
8000b582:	5c 88       	casts.h	r8
8000b584:	4d 89       	lddpc	r9,8000b6e4 <fat_mount+0x5e0>
8000b586:	f3 58 00 16 	st.h	r9[22],r8

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
8000b58a:	ee c8 00 04 	sub	r8,r7,4
8000b58e:	f0 c9 ff ff 	sub	r9,r8,-1
8000b592:	4d b8       	lddpc	r8,8000b6fc <fat_mount+0x5f8>
8000b594:	f1 38 00 0e 	ld.ub	r8,r8[14]
8000b598:	b2 88       	st.b	r9[0x0],r8
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
8000b59a:	ee c9 00 04 	sub	r9,r7,4
8000b59e:	4d 88       	lddpc	r8,8000b6fc <fat_mount+0x5f8>
8000b5a0:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000b5a4:	b2 88       	st.b	r9[0x0],r8
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
8000b5a6:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b5aa:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b5ae:	4d 48       	lddpc	r8,8000b6fc <fat_mount+0x5f8>
8000b5b0:	f1 38 00 30 	ld.ub	r8,r8[48]
8000b5b4:	10 19       	sub	r9,r8
8000b5b6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b5ba:	f2 08 02 48 	mul	r8,r9,r8
8000b5be:	5c 88       	casts.h	r8
8000b5c0:	4c 99       	lddpc	r9,8000b6e4 <fat_mount+0x5e0>
8000b5c2:	b2 28       	st.h	r9[0x4],r8
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B
8000b5c4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b5c8:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000b5cc:	10 9a       	mov	r10,r8
8000b5ce:	12 98       	mov	r8,r9
8000b5d0:	f4 08 02 48 	mul	r8,r10,r8
8000b5d4:	5c 88       	casts.h	r8
8000b5d6:	ef 58 ff fc 	st.h	r7[-4],r8

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
8000b5da:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b5de:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b5e2:	4c 48       	lddpc	r8,8000b6f0 <fat_mount+0x5ec>
8000b5e4:	70 08       	ld.w	r8,r8[0x0]
8000b5e6:	10 09       	add	r9,r8
8000b5e8:	4b f8       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b5ea:	91 39       	st.w	r8[0xc],r9

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * (U32)fs_g_nav.u16_fat_size) + (U32)fs_g_nav.rootdir.seg.u16_size;
8000b5ec:	4b e8       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b5ee:	90 18       	ld.sh	r8,r8[0x2]
8000b5f0:	5c 78       	castu.h	r8
8000b5f2:	f0 09 15 01 	lsl	r9,r8,0x1
8000b5f6:	4b c8       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b5f8:	f1 08 00 16 	ld.sh	r8,r8[22]
8000b5fc:	5c 78       	castu.h	r8
8000b5fe:	10 09       	add	r9,r8
8000b600:	4b 98       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b602:	91 49       	st.w	r8[0x10],r9

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((U32)u16_tmp + fs_g_nav.u32_offset_data);
8000b604:	ee fa ff f8 	ld.w	r10,r7[-8]
8000b608:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b60c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b610:	4b 58       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b612:	70 48       	ld.w	r8,r8[0x10]
8000b614:	f2 08 00 08 	add	r8,r9,r8
8000b618:	f4 08 01 08 	sub	r8,r10,r8
8000b61c:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
8000b620:	4b 18       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b622:	11 98       	ld.ub	r8,r8[0x1]
8000b624:	58 08       	cp.w	r8,0
8000b626:	c0 51       	brne	8000b630 <fat_mount+0x52c>
     return FALSE;
8000b628:	30 08       	mov	r8,0
8000b62a:	ef 48 ff f4 	st.w	r7[-12],r8
8000b62e:	c5 58       	rjmp	8000b6d8 <fat_mount+0x5d4>
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
8000b630:	4a d8       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b632:	11 98       	ld.ub	r8,r8[0x1]
8000b634:	ef 68 ff ff 	st.b	r7[-1],r8
8000b638:	c0 b8       	rjmp	8000b64e <fat_mount+0x54a>
   {
     u32_tmp  >>= 1;   // This computation round down
8000b63a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b63e:	a1 98       	lsr	r8,0x1
8000b640:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return FALSE;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
8000b644:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b648:	a1 98       	lsr	r8,0x1
8000b64a:	ef 68 ff ff 	st.b	r7[-1],r8
8000b64e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b652:	30 18       	mov	r8,1
8000b654:	f0 09 18 00 	cp.b	r9,r8
8000b658:	cf 11       	brne	8000b63a <fat_mount+0x536>
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
8000b65a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b65e:	f0 c9 ff fe 	sub	r9,r8,-2
8000b662:	4a 18       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b664:	91 29       	st.w	r8[0x8],r9

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
8000b666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b66a:	e0 48 0f f4 	cp.w	r8,4084
8000b66e:	e0 8b 00 06 	brhi	8000b67a <fat_mount+0x576>
   {
      // Is FAT 12
#if (FS_FAT_12 == DISABLED)
      return FALSE;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
8000b672:	49 f9       	lddpc	r9,8000b6ec <fat_mount+0x5e8>
8000b674:	30 18       	mov	r8,1
8000b676:	b2 88       	st.b	r9[0x0],r8
8000b678:	c2 d8       	rjmp	8000b6d2 <fat_mount+0x5ce>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
8000b67a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b67e:	e0 48 ff f4 	cp.w	r8,65524
8000b682:	e0 8b 00 06 	brhi	8000b68e <fat_mount+0x58a>
   {
      // Is FAT 16
#if (FS_FAT_16 == DISABLED)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
8000b686:	49 a9       	lddpc	r9,8000b6ec <fat_mount+0x5e8>
8000b688:	30 28       	mov	r8,2
8000b68a:	b2 88       	st.b	r9[0x0],r8
8000b68c:	c2 38       	rjmp	8000b6d2 <fat_mount+0x5ce>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == DISABLED)
      return FALSE;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
8000b68e:	49 89       	lddpc	r9,8000b6ec <fat_mount+0x5e8>
8000b690:	30 38       	mov	r8,3
8000b692:	b2 88       	st.b	r9[0x0],r8
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
8000b694:	49 48       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b696:	2e c8       	sub	r8,-20
8000b698:	f0 c9 ff fd 	sub	r9,r8,-3
8000b69c:	49 88       	lddpc	r8,8000b6fc <fat_mount+0x5f8>
8000b69e:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000b6a2:	b2 88       	st.b	r9[0x0],r8
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
8000b6a4:	49 08       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b6a6:	2e c8       	sub	r8,-20
8000b6a8:	f0 c9 ff fe 	sub	r9,r8,-2
8000b6ac:	49 48       	lddpc	r8,8000b6fc <fat_mount+0x5f8>
8000b6ae:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000b6b2:	b2 88       	st.b	r9[0x0],r8
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
8000b6b4:	48 c8       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b6b6:	2e c8       	sub	r8,-20
8000b6b8:	f0 c9 ff ff 	sub	r9,r8,-1
8000b6bc:	49 08       	lddpc	r8,8000b6fc <fat_mount+0x5f8>
8000b6be:	f1 38 00 2e 	ld.ub	r8,r8[46]
8000b6c2:	b2 88       	st.b	r9[0x0],r8
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
8000b6c4:	48 88       	lddpc	r8,8000b6e4 <fat_mount+0x5e0>
8000b6c6:	f0 c9 ff ec 	sub	r9,r8,-20
8000b6ca:	48 d8       	lddpc	r8,8000b6fc <fat_mount+0x5f8>
8000b6cc:	f1 38 00 2f 	ld.ub	r8,r8[47]
8000b6d0:	b2 88       	st.b	r9[0x0],r8
   }
   }

   return TRUE;
8000b6d2:	30 18       	mov	r8,1
8000b6d4:	ef 48 ff f4 	st.w	r7[-12],r8
8000b6d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000b6dc:	10 9c       	mov	r12,r8
8000b6de:	2f dd       	sub	sp,-12
8000b6e0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b6e4:	00 00       	add	r0,r0
8000b6e6:	0d 58       	ld.sh	r8,--r6
8000b6e8:	80 00       	ld.sh	r0,r0[0x0]
8000b6ea:	a4 34       	st.h	r2[0x6],r4
8000b6ec:	00 00       	add	r0,r0
8000b6ee:	0e 3c       	cp.w	r12,r7
8000b6f0:	00 00       	add	r0,r0
8000b6f2:	0b 18       	ld.sh	r8,r5++
8000b6f4:	80 00       	ld.sh	r0,r0[0x0]
8000b6f6:	89 f4       	st.w	r4[0x3c],r4
8000b6f8:	80 00       	ld.sh	r0,r0[0x0]
8000b6fa:	aa 74       	st.h	r5[0xe],r4
8000b6fc:	00 00       	add	r0,r0
8000b6fe:	0b 58       	ld.sh	r8,--r5
8000b700:	00 00       	add	r0,r0
8000b702:	0e 40       	or	r0,r7
8000b704:	80 00       	ld.sh	r0,r0[0x0]
8000b706:	da d8       	*unknown*

8000b708 <fat_write_fat32_FSInfo>:
//!
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool  fat_write_fat32_FSInfo( U32 u32_nb_free_cluster )
{
8000b708:	eb cd 40 80 	pushm	r7,lr
8000b70c:	1a 97       	mov	r7,sp
8000b70e:	20 2d       	sub	sp,8
8000b710:	ef 4c ff fc 	st.w	r7[-4],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
8000b714:	4a c8       	lddpc	r8,8000b7c4 <fat_write_fat32_FSInfo+0xbc>
8000b716:	70 39       	ld.w	r9,r8[0xc]
8000b718:	4a b8       	lddpc	r8,8000b7c4 <fat_write_fat32_FSInfo+0xbc>
8000b71a:	90 28       	ld.sh	r8,r8[0x4]
8000b71c:	5c 78       	castu.h	r8
8000b71e:	10 19       	sub	r9,r8
8000b720:	4a a8       	lddpc	r8,8000b7c8 <fat_write_fat32_FSInfo+0xc0>
8000b722:	91 09       	st.w	r8[0x0],r9

   if( !fat_cache_read_sector( FALSE ))
8000b724:	30 0c       	mov	r12,0
8000b726:	f0 1f 00 2a 	mcall	8000b7cc <fat_write_fat32_FSInfo+0xc4>
8000b72a:	18 98       	mov	r8,r12
8000b72c:	58 08       	cp.w	r8,0
8000b72e:	c0 51       	brne	8000b738 <fat_write_fat32_FSInfo+0x30>
      return FALSE;
8000b730:	30 08       	mov	r8,0
8000b732:	ef 48 ff f8 	st.w	r7[-8],r8
8000b736:	c4 18       	rjmp	8000b7b8 <fat_write_fat32_FSInfo+0xb0>
   fat_cache_mark_sector_as_dirty();
8000b738:	f0 1f 00 26 	mcall	8000b7d0 <fat_write_fat32_FSInfo+0xc8>
   fat_cache_clear();
8000b73c:	f0 1f 00 26 	mcall	8000b7d4 <fat_write_fat32_FSInfo+0xcc>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
8000b740:	30 4a       	mov	r10,4
8000b742:	4a 6b       	lddpc	r11,8000b7d8 <fat_write_fat32_FSInfo+0xd0>
8000b744:	4a 6c       	lddpc	r12,8000b7dc <fat_write_fat32_FSInfo+0xd4>
8000b746:	f0 1f 00 27 	mcall	8000b7e0 <fat_write_fat32_FSInfo+0xd8>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
8000b74a:	4a 58       	lddpc	r8,8000b7dc <fat_write_fat32_FSInfo+0xd4>
8000b74c:	f0 c8 fe 1c 	sub	r8,r8,-484
8000b750:	30 4a       	mov	r10,4
8000b752:	4a 5b       	lddpc	r11,8000b7e4 <fat_write_fat32_FSInfo+0xdc>
8000b754:	10 9c       	mov	r12,r8
8000b756:	f0 1f 00 23 	mcall	8000b7e0 <fat_write_fat32_FSInfo+0xd8>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
8000b75a:	ee c8 00 04 	sub	r8,r7,4
8000b75e:	2f d8       	sub	r8,-3
8000b760:	11 88       	ld.ub	r8,r8[0x0]
8000b762:	49 f9       	lddpc	r9,8000b7dc <fat_write_fat32_FSInfo+0xd4>
8000b764:	f3 68 01 e8 	st.b	r9[488],r8
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
8000b768:	ee c8 00 04 	sub	r8,r7,4
8000b76c:	2f e8       	sub	r8,-2
8000b76e:	11 88       	ld.ub	r8,r8[0x0]
8000b770:	49 b9       	lddpc	r9,8000b7dc <fat_write_fat32_FSInfo+0xd4>
8000b772:	f3 68 01 e9 	st.b	r9[489],r8
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
8000b776:	ee c8 00 04 	sub	r8,r7,4
8000b77a:	2f f8       	sub	r8,-1
8000b77c:	11 88       	ld.ub	r8,r8[0x0]
8000b77e:	49 89       	lddpc	r9,8000b7dc <fat_write_fat32_FSInfo+0xd4>
8000b780:	f3 68 01 ea 	st.b	r9[490],r8
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
8000b784:	ee c8 00 04 	sub	r8,r7,4
8000b788:	11 88       	ld.ub	r8,r8[0x0]
8000b78a:	49 59       	lddpc	r9,8000b7dc <fat_write_fat32_FSInfo+0xd4>
8000b78c:	f3 68 01 eb 	st.b	r9[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
8000b790:	49 38       	lddpc	r8,8000b7dc <fat_write_fat32_FSInfo+0xd4>
8000b792:	f0 c8 fe 14 	sub	r8,r8,-492
8000b796:	30 4a       	mov	r10,4
8000b798:	e0 6b 00 ff 	mov	r11,255
8000b79c:	10 9c       	mov	r12,r8
8000b79e:	f0 1f 00 13 	mcall	8000b7e8 <fat_write_fat32_FSInfo+0xe0>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
8000b7a2:	48 f9       	lddpc	r9,8000b7dc <fat_write_fat32_FSInfo+0xd4>
8000b7a4:	35 58       	mov	r8,85
8000b7a6:	f3 68 01 fe 	st.b	r9[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
8000b7aa:	48 d9       	lddpc	r9,8000b7dc <fat_write_fat32_FSInfo+0xd4>
8000b7ac:	3a a8       	mov	r8,-86
8000b7ae:	f3 68 01 ff 	st.b	r9[511],r8
   return TRUE;
8000b7b2:	30 18       	mov	r8,1
8000b7b4:	ef 48 ff f8 	st.w	r7[-8],r8
8000b7b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000b7bc:	10 9c       	mov	r12,r8
8000b7be:	2f ed       	sub	sp,-8
8000b7c0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b7c4:	00 00       	add	r0,r0
8000b7c6:	0d 58       	ld.sh	r8,--r6
8000b7c8:	00 00       	add	r0,r0
8000b7ca:	0b 18       	ld.sh	r8,r5++
8000b7cc:	80 00       	ld.sh	r0,r0[0x0]
8000b7ce:	aa 74       	st.h	r5[0xe],r4
8000b7d0:	80 00       	ld.sh	r0,r0[0x0]
8000b7d2:	ab 74       	lsl	r4,0xb
8000b7d4:	80 00       	ld.sh	r0,r0[0x0]
8000b7d6:	ab 54       	asr	r4,0xb
8000b7d8:	80 00       	ld.sh	r0,r0[0x0]
8000b7da:	fb 78 00 00 	stcond	sp[0],r8
8000b7de:	0b 58       	ld.sh	r8,--r5
8000b7e0:	80 00       	ld.sh	r0,r0[0x0]
8000b7e2:	f0 a0 80 00 	rcall	7fe1b7e2 <_estack+0x7fe0b7e2>
8000b7e6:	fb 7c 80 00 	stcond	sp[-32768],r12
8000b7ea:	f1 e8 eb cd 	sthh.w	sp[0x2f0],r8:t,r8:b

8000b7ec <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
Bool  fat_initialize_dir( void )
{
8000b7ec:	eb cd 40 80 	pushm	r7,lr
8000b7f0:	1a 97       	mov	r7,sp
8000b7f2:	20 2d       	sub	sp,8
   U8 u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
8000b7f4:	f0 1f 00 46 	mcall	8000b90c <fat_initialize_dir+0x120>
8000b7f8:	18 98       	mov	r8,r12
8000b7fa:	58 08       	cp.w	r8,0
8000b7fc:	c0 51       	brne	8000b806 <fat_initialize_dir+0x1a>
      return FALSE;
8000b7fe:	30 08       	mov	r8,0
8000b800:	ef 48 ff f8 	st.w	r7[-8],r8
8000b804:	c7 d8       	rjmp	8000b8fe <fat_initialize_dir+0x112>
   fat_cache_mark_sector_as_dirty();
8000b806:	f0 1f 00 43 	mcall	8000b910 <fat_initialize_dir+0x124>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
8000b80a:	4c 38       	lddpc	r8,8000b914 <fat_initialize_dir+0x128>
8000b80c:	32 e9       	mov	r9,46
8000b80e:	b0 89       	st.b	r8[0x0],r9
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
8000b810:	30 18       	mov	r8,1
8000b812:	ef 68 ff ff 	st.b	r7[-1],r8
8000b816:	c0 c8       	rjmp	8000b82e <fat_initialize_dir+0x42>
      fs_g_sector[u8_i]=' ';
8000b818:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000b81c:	4b e9       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b81e:	32 08       	mov	r8,32
8000b820:	f2 0a 0b 08 	st.b	r9[r10],r8
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
8000b824:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b828:	2f f8       	sub	r8,-1
8000b82a:	ef 68 ff ff 	st.b	r7[-1],r8
8000b82e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b832:	30 a8       	mov	r8,10
8000b834:	f0 09 18 00 	cp.b	r9,r8
8000b838:	fe 98 ff f0 	brls	8000b818 <fat_initialize_dir+0x2c>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
8000b83c:	4b 69       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b83e:	31 08       	mov	r8,16
8000b840:	f3 68 00 0b 	st.b	r9[11],r8
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
8000b844:	4b 58       	lddpc	r8,8000b918 <fat_initialize_dir+0x12c>
8000b846:	2f c8       	sub	r8,-4
8000b848:	2f d8       	sub	r8,-3
8000b84a:	11 88       	ld.ub	r8,r8[0x0]
8000b84c:	4b 29       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b84e:	f3 68 00 1a 	st.b	r9[26],r8
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
8000b852:	4b 28       	lddpc	r8,8000b918 <fat_initialize_dir+0x12c>
8000b854:	2f c8       	sub	r8,-4
8000b856:	2f e8       	sub	r8,-2
8000b858:	11 88       	ld.ub	r8,r8[0x0]
8000b85a:	4a f9       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b85c:	f3 68 00 1b 	st.b	r9[27],r8
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
8000b860:	4a e8       	lddpc	r8,8000b918 <fat_initialize_dir+0x12c>
8000b862:	2f c8       	sub	r8,-4
8000b864:	2f f8       	sub	r8,-1
8000b866:	11 88       	ld.ub	r8,r8[0x0]
8000b868:	4a b9       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b86a:	f3 68 00 14 	st.b	r9[20],r8
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
8000b86e:	4a b8       	lddpc	r8,8000b918 <fat_initialize_dir+0x12c>
8000b870:	2f c8       	sub	r8,-4
8000b872:	11 88       	ld.ub	r8,r8[0x0]
8000b874:	4a 89       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b876:	f3 68 00 15 	st.b	r9[21],r8
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
8000b87a:	4a 79       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b87c:	32 e8       	mov	r8,46
8000b87e:	f3 68 00 20 	st.b	r9[32],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
8000b882:	4a 59       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b884:	32 e8       	mov	r8,46
8000b886:	f3 68 00 21 	st.b	r9[33],r8
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
8000b88a:	30 28       	mov	r8,2
8000b88c:	ef 68 ff ff 	st.b	r7[-1],r8
8000b890:	c0 e8       	rjmp	8000b8ac <fat_initialize_dir+0xc0>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
8000b892:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b896:	f0 ca ff e0 	sub	r10,r8,-32
8000b89a:	49 f9       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b89c:	32 08       	mov	r8,32
8000b89e:	f2 0a 0b 08 	st.b	r9[r10],r8
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
8000b8a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b8a6:	2f f8       	sub	r8,-1
8000b8a8:	ef 68 ff ff 	st.b	r7[-1],r8
8000b8ac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b8b0:	30 a8       	mov	r8,10
8000b8b2:	f0 09 18 00 	cp.b	r9,r8
8000b8b6:	fe 98 ff ee 	brls	8000b892 <fat_initialize_dir+0xa6>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
8000b8ba:	49 79       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b8bc:	31 08       	mov	r8,16
8000b8be:	f3 68 00 2b 	st.b	r9[43],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
8000b8c2:	49 78       	lddpc	r8,8000b91c <fat_initialize_dir+0x130>
8000b8c4:	2e 48       	sub	r8,-28
8000b8c6:	2f d8       	sub	r8,-3
8000b8c8:	11 88       	ld.ub	r8,r8[0x0]
8000b8ca:	49 39       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b8cc:	f3 68 00 3a 	st.b	r9[58],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
8000b8d0:	49 38       	lddpc	r8,8000b91c <fat_initialize_dir+0x130>
8000b8d2:	2e 48       	sub	r8,-28
8000b8d4:	2f e8       	sub	r8,-2
8000b8d6:	11 88       	ld.ub	r8,r8[0x0]
8000b8d8:	48 f9       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b8da:	f3 68 00 3b 	st.b	r9[59],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
8000b8de:	49 08       	lddpc	r8,8000b91c <fat_initialize_dir+0x130>
8000b8e0:	2e 48       	sub	r8,-28
8000b8e2:	2f f8       	sub	r8,-1
8000b8e4:	11 88       	ld.ub	r8,r8[0x0]
8000b8e6:	48 c9       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b8e8:	f3 68 00 34 	st.b	r9[52],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
8000b8ec:	48 c8       	lddpc	r8,8000b91c <fat_initialize_dir+0x130>
8000b8ee:	2e 48       	sub	r8,-28
8000b8f0:	11 88       	ld.ub	r8,r8[0x0]
8000b8f2:	48 99       	lddpc	r9,8000b914 <fat_initialize_dir+0x128>
8000b8f4:	f3 68 00 35 	st.b	r9[53],r8

   return TRUE;
8000b8f8:	30 18       	mov	r8,1
8000b8fa:	ef 48 ff f8 	st.w	r7[-8],r8
8000b8fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000b902:	10 9c       	mov	r12,r8
8000b904:	2f ed       	sub	sp,-8
8000b906:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b90a:	00 00       	add	r0,r0
8000b90c:	80 00       	ld.sh	r0,r0[0x0]
8000b90e:	c8 20       	breq	8000b812 <fat_initialize_dir+0x26>
8000b910:	80 00       	ld.sh	r0,r0[0x0]
8000b912:	ab 74       	lsl	r4,0xb
8000b914:	00 00       	add	r0,r0
8000b916:	0b 58       	ld.sh	r8,--r5
8000b918:	00 00       	add	r0,r0
8000b91a:	0b 1c       	ld.sh	r12,r5++
8000b91c:	00 00       	add	r0,r0
8000b91e:	0d 58       	ld.sh	r8,--r6

8000b920 <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
Bool  fat_create_entry_file_name( FS_STRING sz_name )
{
8000b920:	eb cd 40 80 	pushm	r7,lr
8000b924:	1a 97       	mov	r7,sp
8000b926:	20 3d       	sub	sp,12
8000b928:	ef 4c ff f8 	st.w	r7[-8],r12
   U8 u8_i, u8_nb;
   U8 u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
8000b92c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b930:	f0 1f 00 47 	mcall	8000ba4c <fat_create_entry_file_name+0x12c>
8000b934:	18 98       	mov	r8,r12
8000b936:	ef 68 ff ff 	st.b	r7[-1],r8
   if( 0 == u8_nb_entry )
8000b93a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b93e:	30 08       	mov	r8,0
8000b940:	f0 09 18 00 	cp.b	r9,r8
8000b944:	c0 51       	brne	8000b94e <fat_create_entry_file_name+0x2e>
      return FALSE;
8000b946:	30 08       	mov	r8,0
8000b948:	ef 48 ff f4 	st.w	r7[-12],r8
8000b94c:	c7 98       	rjmp	8000ba3e <fat_create_entry_file_name+0x11e>

   // Search a unik short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
8000b94e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b952:	f0 1f 00 40 	mcall	8000ba50 <fat_create_entry_file_name+0x130>
8000b956:	18 98       	mov	r8,r12
8000b958:	ef 68 ff fd 	st.b	r7[-3],r8
   if( 0 == u8_nb )
8000b95c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b960:	30 08       	mov	r8,0
8000b962:	f0 09 18 00 	cp.b	r9,r8
8000b966:	c0 81       	brne	8000b976 <fat_create_entry_file_name+0x56>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000b968:	4b b9       	lddpc	r9,8000ba54 <fat_create_entry_file_name+0x134>
8000b96a:	32 a8       	mov	r8,42
8000b96c:	b2 88       	st.b	r9[0x0],r8
      return FALSE;  // All short name exist
8000b96e:	30 08       	mov	r8,0
8000b970:	ef 48 ff f4 	st.w	r7[-12],r8
8000b974:	c6 58       	rjmp	8000ba3e <fat_create_entry_file_name+0x11e>
   }
   
   // Alloc a space for entrys
   if( !fat_alloc_entry_free( u8_nb_entry ))
8000b976:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b97a:	10 9c       	mov	r12,r8
8000b97c:	f0 1f 00 37 	mcall	8000ba58 <fat_create_entry_file_name+0x138>
8000b980:	18 98       	mov	r8,r12
8000b982:	58 08       	cp.w	r8,0
8000b984:	c0 51       	brne	8000b98e <fat_create_entry_file_name+0x6e>
      return FALSE;
8000b986:	30 08       	mov	r8,0
8000b988:	ef 48 ff f4 	st.w	r7[-12],r8
8000b98c:	c5 98       	rjmp	8000ba3e <fat_create_entry_file_name+0x11e>
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, FALSE  );
8000b98e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000b992:	30 09       	mov	r9,0
8000b994:	10 9a       	mov	r10,r8
8000b996:	30 0b       	mov	r11,0
8000b998:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b99c:	f0 1f 00 30 	mcall	8000ba5c <fat_create_entry_file_name+0x13c>
8000b9a0:	18 98       	mov	r8,r12
8000b9a2:	ef 68 ff fe 	st.b	r7[-2],r8
   u8_nb_entry--;
8000b9a6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b9aa:	20 18       	sub	r8,1
8000b9ac:	ef 68 ff ff 	st.b	r7[-1],r8

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
8000b9b0:	30 18       	mov	r8,1
8000b9b2:	ef 68 ff fc 	st.b	r7[-4],r8
8000b9b6:	c3 08       	rjmp	8000ba16 <fat_create_entry_file_name+0xf6>
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000b9b8:	4a a8       	lddpc	r8,8000ba60 <fat_create_entry_file_name+0x140>
8000b9ba:	90 18       	ld.sh	r8,r8[0x2]
8000b9bc:	20 18       	sub	r8,1
8000b9be:	5c 88       	casts.h	r8
8000b9c0:	4a 89       	lddpc	r9,8000ba60 <fat_create_entry_file_name+0x140>
8000b9c2:	b2 18       	st.h	r9[0x2],r8
      if( !fat_read_dir())
8000b9c4:	f0 1f 00 28 	mcall	8000ba64 <fat_create_entry_file_name+0x144>
8000b9c8:	18 98       	mov	r8,r12
8000b9ca:	58 08       	cp.w	r8,0
8000b9cc:	c0 51       	brne	8000b9d6 <fat_create_entry_file_name+0xb6>
         return FALSE;
8000b9ce:	30 08       	mov	r8,0
8000b9d0:	ef 48 ff f4 	st.w	r7[-12],r8
8000b9d4:	c3 58       	rjmp	8000ba3e <fat_create_entry_file_name+0x11e>
      // Write a long name entry
      if( u8_i == u8_nb_entry )
8000b9d6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b9da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b9de:	f0 09 18 00 	cp.b	r9,r8
8000b9e2:	c0 61       	brne	8000b9ee <fat_create_entry_file_name+0xce>
      {
         u8_i += FS_ENTRY_LFN_LAST;
8000b9e4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b9e8:	2c 08       	sub	r8,-64
8000b9ea:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
8000b9ee:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b9f2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b9f6:	10 9a       	mov	r10,r8
8000b9f8:	12 9b       	mov	r11,r9
8000b9fa:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b9fe:	f0 1f 00 1b 	mcall	8000ba68 <fat_create_entry_file_name+0x148>
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
8000ba02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ba06:	2f 38       	sub	r8,-13
8000ba08:	ef 48 ff f8 	st.w	r7[-8],r8
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, FALSE  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
8000ba0c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ba10:	2f f8       	sub	r8,-1
8000ba12:	ef 68 ff fc 	st.b	r7[-4],r8
8000ba16:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000ba1a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ba1e:	f0 09 18 00 	cp.b	r9,r8
8000ba22:	fe 98 ff cb 	brls	8000b9b8 <fat_create_entry_file_name+0x98>
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
8000ba26:	48 f8       	lddpc	r8,8000ba60 <fat_create_entry_file_name+0x140>
8000ba28:	90 19       	ld.sh	r9,r8[0x2]
8000ba2a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ba2e:	f2 08 00 08 	add	r8,r9,r8
8000ba32:	5c 88       	casts.h	r8
8000ba34:	48 b9       	lddpc	r9,8000ba60 <fat_create_entry_file_name+0x140>
8000ba36:	b2 18       	st.h	r9[0x2],r8
  return TRUE;
8000ba38:	30 18       	mov	r8,1
8000ba3a:	ef 48 ff f4 	st.w	r7[-12],r8
8000ba3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000ba42:	10 9c       	mov	r12,r8
8000ba44:	2f dd       	sub	sp,-12
8000ba46:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ba4a:	00 00       	add	r0,r0
8000ba4c:	80 00       	ld.sh	r0,r0[0x0]
8000ba4e:	c0 4c       	rcall	8000ba56 <fat_create_entry_file_name+0x136>
8000ba50:	80 00       	ld.sh	r0,r0[0x0]
8000ba52:	be f4       	st.b	pc[0x7],r4
8000ba54:	00 00       	add	r0,r0
8000ba56:	0e 40       	or	r0,r7
8000ba58:	80 00       	ld.sh	r0,r0[0x0]
8000ba5a:	c1 e0       	breq	8000ba96 <fat_create_long_name_entry+0x2a>
8000ba5c:	80 00       	ld.sh	r0,r0[0x0]
8000ba5e:	bb bc       	sbr	r12,0x1b
8000ba60:	00 00       	add	r0,r0
8000ba62:	0e 3c       	cp.w	r12,r7
8000ba64:	80 00       	ld.sh	r0,r0[0x0]
8000ba66:	a1 84       	lsr	r4,0x0
8000ba68:	80 00       	ld.sh	r0,r0[0x0]
8000ba6a:	ba 6c       	st.h	sp[0xc],r12

8000ba6c <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , U8 u8_crc , U8 u8_id  )
{
8000ba6c:	eb cd 40 80 	pushm	r7,lr
8000ba70:	1a 97       	mov	r7,sp
8000ba72:	20 6d       	sub	sp,24
8000ba74:	ef 4c ff f0 	st.w	r7[-16],r12
8000ba78:	16 98       	mov	r8,r11
8000ba7a:	14 99       	mov	r9,r10
8000ba7c:	ef 68 ff ec 	st.b	r7[-20],r8
8000ba80:	12 98       	mov	r8,r9
8000ba82:	ef 68 ff e8 	st.b	r7[-24],r8
   PTR_CACHE ptr_entry;
   Bool b_end_of_name = FALSE;
8000ba86:	30 08       	mov	r8,0
8000ba88:	ef 68 ff ff 	st.b	r7[-1],r8

   fat_cache_mark_sector_as_dirty();
8000ba8c:	f0 1f 00 4a 	mcall	8000bbb4 <fat_create_long_name_entry+0x148>
   ptr_entry = fat_get_ptr_entry();
8000ba90:	f0 1f 00 4a 	mcall	8000bbb8 <fat_create_long_name_entry+0x14c>
8000ba94:	18 98       	mov	r8,r12
8000ba96:	ef 48 ff f8 	st.w	r7[-8],r8
   *ptr_entry = u8_id;
8000ba9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ba9e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000baa2:	b2 88       	st.b	r9[0x0],r8
   ptr_entry++;   // The long name start at offset 1 of the entry file
8000baa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000baa8:	2f f8       	sub	r8,-1
8000baaa:	ef 48 ff f8 	st.w	r7[-8],r8

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
8000baae:	30 18       	mov	r8,1
8000bab0:	ef 68 ff e8 	st.b	r7[-24],r8
8000bab4:	c7 68       	rjmp	8000bba0 <fat_create_long_name_entry+0x134>
   {
      // fields with no character
      if( 11 == u8_id)
8000bab6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000baba:	30 b8       	mov	r8,11
8000babc:	f0 09 18 00 	cp.b	r9,r8
8000bac0:	c0 61       	brne	8000bacc <fat_create_long_name_entry+0x60>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
8000bac2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bac6:	30 f8       	mov	r8,15
8000bac8:	b2 88       	st.b	r9[0x0],r8
8000baca:	c6 18       	rjmp	8000bb8c <fat_create_long_name_entry+0x120>
         continue;
      }
      if( (12 == u8_id)
8000bacc:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000bad0:	30 c8       	mov	r8,12
8000bad2:	f0 09 18 00 	cp.b	r9,r8
8000bad6:	c5 b0       	breq	8000bb8c <fat_create_long_name_entry+0x120>
8000bad8:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000badc:	31 a8       	mov	r8,26
8000bade:	f0 09 18 00 	cp.b	r9,r8
8000bae2:	c5 50       	breq	8000bb8c <fat_create_long_name_entry+0x120>
8000bae4:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000bae8:	31 b8       	mov	r8,27
8000baea:	f0 09 18 00 	cp.b	r9,r8
8000baee:	c4 f0       	breq	8000bb8c <fat_create_long_name_entry+0x120>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
8000baf0:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000baf4:	30 d8       	mov	r8,13
8000baf6:	f0 09 18 00 	cp.b	r9,r8
8000bafa:	c0 71       	brne	8000bb08 <fat_create_long_name_entry+0x9c>
      {
         *ptr_entry = u8_crc;             // CRC field
8000bafc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb00:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000bb04:	b2 88       	st.b	r9[0x0],r8
8000bb06:	c4 38       	rjmp	8000bb8c <fat_create_long_name_entry+0x120>
         continue;
      }

      // fields with a character
      if( !b_end_of_name )
8000bb08:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000bb0c:	30 08       	mov	r8,0
8000bb0e:	f0 09 18 00 	cp.b	r9,r8
8000bb12:	c3 91       	brne	8000bb84 <fat_create_long_name_entry+0x118>
         U16 u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
8000bb14:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bb18:	11 88       	ld.ub	r8,r8[0x0]
8000bb1a:	ef 58 ff f6 	st.h	r7[-10],r8
         }
         if(('\\' == u16_tmp )
8000bb1e:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000bb22:	35 c8       	mov	r8,92
8000bb24:	f0 09 19 00 	cp.h	r9,r8
8000bb28:	c0 70       	breq	8000bb36 <fat_create_long_name_entry+0xca>
8000bb2a:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000bb2e:	32 f8       	mov	r8,47
8000bb30:	f0 09 19 00 	cp.h	r9,r8
8000bb34:	c0 41       	brne	8000bb3c <fat_create_long_name_entry+0xd0>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
8000bb36:	30 08       	mov	r8,0
8000bb38:	ef 58 ff f6 	st.h	r7[-10],r8
         }
         if( 0 == u16_tmp )
8000bb3c:	ef 08 ff f6 	ld.sh	r8,r7[-10]
8000bb40:	58 08       	cp.w	r8,0
8000bb42:	c0 41       	brne	8000bb4a <fat_create_long_name_entry+0xde>
         {
            b_end_of_name = TRUE;
8000bb44:	30 18       	mov	r8,1
8000bb46:	ef 68 ff ff 	st.b	r7[-1],r8
         }
         *ptr_entry = LSB(u16_tmp);
8000bb4a:	ee c8 00 0a 	sub	r8,r7,10
8000bb4e:	2f f8       	sub	r8,-1
8000bb50:	11 88       	ld.ub	r8,r8[0x0]
8000bb52:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb56:	b2 88       	st.b	r9[0x0],r8
         ptr_entry++;
8000bb58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb5c:	2f f8       	sub	r8,-1
8000bb5e:	ef 48 ff f8 	st.w	r7[-8],r8
         *ptr_entry = MSB(u16_tmp);
8000bb62:	ee c8 00 0a 	sub	r8,r7,10
8000bb66:	11 88       	ld.ub	r8,r8[0x0]
8000bb68:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb6c:	b2 88       	st.b	r9[0x0],r8
         u8_id++;
8000bb6e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000bb72:	2f f8       	sub	r8,-1
8000bb74:	ef 68 ff e8 	st.b	r7[-24],r8
         sz_name += (Is_unicode? 2 : 1 );
8000bb78:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bb7c:	2f f8       	sub	r8,-1
8000bb7e:	ef 48 ff f0 	st.w	r7[-16],r8
8000bb82:	c0 58       	rjmp	8000bb8c <fat_create_long_name_entry+0x120>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
8000bb84:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb88:	3f f8       	mov	r8,-1
8000bb8a:	b2 88       	st.b	r9[0x0],r8
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
8000bb8c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000bb90:	2f f8       	sub	r8,-1
8000bb92:	ef 68 ff e8 	st.b	r7[-24],r8
8000bb96:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb9a:	2f f8       	sub	r8,-1
8000bb9c:	ef 48 ff f8 	st.w	r7[-8],r8
8000bba0:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000bba4:	31 f8       	mov	r8,31
8000bba6:	f0 09 18 00 	cp.b	r9,r8
8000bbaa:	fe 98 ff 86 	brls	8000bab6 <fat_create_long_name_entry+0x4a>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
8000bbae:	2f ad       	sub	sp,-24
8000bbb0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bbb4:	80 00       	ld.sh	r0,r0[0x0]
8000bbb6:	ab 74       	lsl	r4,0xb
8000bbb8:	80 00       	ld.sh	r0,r0[0x0]
8000bbba:	aa 4c       	st.h	r5[0x8],r12

8000bbbc <fat_create_short_entry_name>:
//!                           FALSE to write in internal cache
//!
//! @return    short name CRC
//!
U8    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , U8 nb , Bool mode  )
{
8000bbbc:	eb cd 40 80 	pushm	r7,lr
8000bbc0:	1a 97       	mov	r7,sp
8000bbc2:	20 7d       	sub	sp,28
8000bbc4:	ef 4c ff f0 	st.w	r7[-16],r12
8000bbc8:	ef 4b ff ec 	st.w	r7[-20],r11
8000bbcc:	14 98       	mov	r8,r10
8000bbce:	ef 68 ff e8 	st.b	r7[-24],r8
8000bbd2:	12 98       	mov	r8,r9
8000bbd4:	ef 68 ff e4 	st.b	r7[-28],r8
   PTR_CACHE ptr_entry = 0;
8000bbd8:	30 08       	mov	r8,0
8000bbda:	ef 48 ff f4 	st.w	r7[-12],r8
   U8 u8_i, u8_step, character;
   U8 crc;
   U8 nb_digit;

   if( !mode )
8000bbde:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000bbe2:	30 08       	mov	r8,0
8000bbe4:	f0 09 18 00 	cp.b	r9,r8
8000bbe8:	c0 81       	brne	8000bbf8 <fat_create_short_entry_name+0x3c>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
8000bbea:	f0 1f 00 bf 	mcall	8000bee4 <fat_create_short_entry_name+0x328>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
8000bbee:	f0 1f 00 bf 	mcall	8000bee8 <fat_create_short_entry_name+0x32c>
8000bbf2:	18 98       	mov	r8,r12
8000bbf4:	ef 48 ff f4 	st.w	r7[-12],r8
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
8000bbf8:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000bbfc:	30 98       	mov	r8,9
8000bbfe:	f0 09 18 00 	cp.b	r9,r8
8000bc02:	e0 8b 00 06 	brhi	8000bc0e <fat_create_short_entry_name+0x52>
8000bc06:	30 18       	mov	r8,1
8000bc08:	ef 68 ff ff 	st.b	r7[-1],r8
8000bc0c:	c0 f8       	rjmp	8000bc2a <fat_create_short_entry_name+0x6e>
   else if( nb < 100 )  nb_digit = 2;
8000bc0e:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000bc12:	36 38       	mov	r8,99
8000bc14:	f0 09 18 00 	cp.b	r9,r8
8000bc18:	e0 8b 00 06 	brhi	8000bc24 <fat_create_short_entry_name+0x68>
8000bc1c:	30 28       	mov	r8,2
8000bc1e:	ef 68 ff ff 	st.b	r7[-1],r8
8000bc22:	c0 48       	rjmp	8000bc2a <fat_create_short_entry_name+0x6e>
   else                 nb_digit = 3;
8000bc24:	30 38       	mov	r8,3
8000bc26:	ef 68 ff ff 	st.b	r7[-1],r8
   
   crc = u8_i = 0;
8000bc2a:	30 08       	mov	r8,0
8000bc2c:	ef 68 ff fb 	st.b	r7[-5],r8
8000bc30:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bc34:	ef 68 ff fe 	st.b	r7[-2],r8
   u8_step = 1;
8000bc38:	30 18       	mov	r8,1
8000bc3a:	ef 68 ff fc 	st.b	r7[-4],r8
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
8000bc3e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bc42:	11 88       	ld.ub	r8,r8[0x0]
8000bc44:	ef 68 ff fd 	st.b	r7[-3],r8
      }

      if( 1 == u8_step )
8000bc48:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bc4c:	30 18       	mov	r8,1
8000bc4e:	f0 09 18 00 	cp.b	r9,r8
8000bc52:	c1 e1       	brne	8000bc8e <fat_create_short_entry_name+0xd2>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
8000bc54:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bc58:	5c d8       	com	r8
8000bc5a:	f0 c9 ff f8 	sub	r9,r8,-8
8000bc5e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bc62:	10 39       	cp.w	r9,r8
8000bc64:	c0 f0       	breq	8000bc82 <fat_create_short_entry_name+0xc6>
8000bc66:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000bc6a:	32 e8       	mov	r8,46
8000bc6c:	f0 09 18 00 	cp.b	r9,r8
8000bc70:	c0 90       	breq	8000bc82 <fat_create_short_entry_name+0xc6>
8000bc72:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bc76:	10 9c       	mov	r12,r8
8000bc78:	f0 1f 00 9d 	mcall	8000beec <fat_create_short_entry_name+0x330>
8000bc7c:	18 98       	mov	r8,r12
8000bc7e:	58 08       	cp.w	r8,0
8000bc80:	c0 70       	breq	8000bc8e <fat_create_short_entry_name+0xd2>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
8000bc82:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bc86:	2f f8       	sub	r8,-1
8000bc88:	ef 68 ff fc 	st.b	r7[-4],r8
8000bc8c:	cd 9b       	rjmp	8000bc3e <fat_create_short_entry_name+0x82>
            continue;
         }
      }
      if( 8 == u8_step )
8000bc8e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bc92:	30 88       	mov	r8,8
8000bc94:	f0 09 18 00 	cp.b	r9,r8
8000bc98:	c1 51       	brne	8000bcc2 <fat_create_short_entry_name+0x106>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
8000bc9a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bc9e:	30 b8       	mov	r8,11
8000bca0:	f0 09 18 00 	cp.b	r9,r8
8000bca4:	c0 90       	breq	8000bcb6 <fat_create_short_entry_name+0xfa>
8000bca6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bcaa:	10 9c       	mov	r12,r8
8000bcac:	f0 1f 00 90 	mcall	8000beec <fat_create_short_entry_name+0x330>
8000bcb0:	18 98       	mov	r8,r12
8000bcb2:	58 08       	cp.w	r8,0
8000bcb4:	c0 70       	breq	8000bcc2 <fat_create_short_entry_name+0x106>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
8000bcb6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bcba:	2f f8       	sub	r8,-1
8000bcbc:	ef 68 ff fc 	st.b	r7[-4],r8
8000bcc0:	cb fb       	rjmp	8000bc3e <fat_create_short_entry_name+0x82>
            continue;
         }
      }
      if( (1==u8_step) || (8==u8_step) )
8000bcc2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bcc6:	30 18       	mov	r8,1
8000bcc8:	f0 09 18 00 	cp.b	r9,r8
8000bccc:	c0 70       	breq	8000bcda <fat_create_short_entry_name+0x11e>
8000bcce:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bcd2:	30 88       	mov	r8,8
8000bcd4:	f0 09 18 00 	cp.b	r9,r8
8000bcd8:	c1 41       	brne	8000bd00 <fat_create_short_entry_name+0x144>
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
8000bcda:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bcde:	10 9c       	mov	r12,r8
8000bce0:	f0 1f 00 84 	mcall	8000bef0 <fat_create_short_entry_name+0x334>
8000bce4:	18 98       	mov	r8,r12
8000bce6:	ef 68 ff fd 	st.b	r7[-3],r8
         sz_name += (Is_unicode? 2 : 1 );
8000bcea:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bcee:	2f f8       	sub	r8,-1
8000bcf0:	ef 48 ff f0 	st.w	r7[-16],r8
         if( 0 == character )
8000bcf4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000bcf8:	30 08       	mov	r8,0
8000bcfa:	f0 09 18 00 	cp.b	r9,r8
8000bcfe:	ca 00       	breq	8000bc3e <fat_create_short_entry_name+0x82>
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
8000bd00:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bd04:	30 78       	mov	r8,7
8000bd06:	f0 09 18 00 	cp.b	r9,r8
8000bd0a:	c1 b1       	brne	8000bd40 <fat_create_short_entry_name+0x184>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
8000bd0c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000bd10:	32 e8       	mov	r8,46
8000bd12:	f0 09 18 00 	cp.b	r9,r8
8000bd16:	c0 90       	breq	8000bd28 <fat_create_short_entry_name+0x16c>
8000bd18:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bd1c:	10 9c       	mov	r12,r8
8000bd1e:	f0 1f 00 74 	mcall	8000beec <fat_create_short_entry_name+0x330>
8000bd22:	18 98       	mov	r8,r12
8000bd24:	58 08       	cp.w	r8,0
8000bd26:	c0 70       	breq	8000bd34 <fat_create_short_entry_name+0x178>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
8000bd28:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bd2c:	2f f8       	sub	r8,-1
8000bd2e:	ef 68 ff fc 	st.b	r7[-4],r8
8000bd32:	c8 6b       	rjmp	8000bc3e <fat_create_short_entry_name+0x82>
         } else {
            sz_name += (Is_unicode? 2 : 1 );
8000bd34:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bd38:	2f f8       	sub	r8,-1
8000bd3a:	ef 48 ff f0 	st.w	r7[-16],r8
8000bd3e:	c8 0b       	rjmp	8000bc3e <fat_create_short_entry_name+0x82>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
8000bd40:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bd44:	30 68       	mov	r8,6
8000bd46:	f0 09 18 00 	cp.b	r9,r8
8000bd4a:	c1 01       	brne	8000bd6a <fat_create_short_entry_name+0x1ae>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
8000bd4c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bd50:	30 88       	mov	r8,8
8000bd52:	f0 09 18 00 	cp.b	r9,r8
8000bd56:	c0 71       	brne	8000bd64 <fat_create_short_entry_name+0x1a8>
         {
            u8_step++;                                   // go to next step
8000bd58:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bd5c:	2f f8       	sub	r8,-1
8000bd5e:	ef 68 ff fc 	st.b	r7[-4],r8
8000bd62:	c6 eb       	rjmp	8000bc3e <fat_create_short_entry_name+0x82>
            continue;
         }
         character = ' ';
8000bd64:	32 08       	mov	r8,32
8000bd66:	ef 68 ff fd 	st.b	r7[-3],r8
      }
      if( 9 == u8_step )
8000bd6a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bd6e:	30 98       	mov	r8,9
8000bd70:	f0 09 18 00 	cp.b	r9,r8
8000bd74:	c0 b1       	brne	8000bd8a <fat_create_short_entry_name+0x1ce>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
8000bd76:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bd7a:	30 b8       	mov	r8,11
8000bd7c:	f0 09 18 00 	cp.b	r9,r8
8000bd80:	e0 80 00 ac 	breq	8000bed8 <fat_create_short_entry_name+0x31c>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
8000bd84:	32 08       	mov	r8,32
8000bd86:	ef 68 ff fd 	st.b	r7[-3],r8
      }
      if( 5 == u8_step )
8000bd8a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bd8e:	30 58       	mov	r8,5
8000bd90:	f0 09 18 00 	cp.b	r9,r8
8000bd94:	c1 91       	brne	8000bdc6 <fat_create_short_entry_name+0x20a>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
8000bd96:	ef 3a ff e8 	ld.ub	r10,r7[-24]
8000bd9a:	e0 68 cc cd 	mov	r8,52429
8000bd9e:	ea 18 cc cc 	orh	r8,0xcccc
8000bda2:	f4 08 06 48 	mulu.d	r8,r10,r8
8000bda6:	a3 99       	lsr	r9,0x3
8000bda8:	12 98       	mov	r8,r9
8000bdaa:	a3 68       	lsl	r8,0x2
8000bdac:	12 08       	add	r8,r9
8000bdae:	a1 78       	lsl	r8,0x1
8000bdb0:	f4 08 01 08 	sub	r8,r10,r8
8000bdb4:	5c 58       	castu.b	r8
8000bdb6:	2d 08       	sub	r8,-48
8000bdb8:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
8000bdbc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bdc0:	2f f8       	sub	r8,-1
8000bdc2:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 4 == u8_step )
8000bdc6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bdca:	30 48       	mov	r8,4
8000bdcc:	f0 09 18 00 	cp.b	r9,r8
8000bdd0:	c2 21       	brne	8000be14 <fat_create_short_entry_name+0x258>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
8000bdd2:	ef 3a ff e8 	ld.ub	r10,r7[-24]
8000bdd6:	e0 68 85 1f 	mov	r8,34079
8000bdda:	ea 18 51 eb 	orh	r8,0x51eb
8000bdde:	f4 08 06 48 	mulu.d	r8,r10,r8
8000bde2:	f2 08 16 05 	lsr	r8,r9,0x5
8000bde6:	f0 08 10 64 	mul	r8,r8,100
8000bdea:	f4 08 01 08 	sub	r8,r10,r8
8000bdee:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000bdf2:	e0 68 cc cd 	mov	r8,52429
8000bdf6:	ea 18 cc cc 	orh	r8,0xcccc
8000bdfa:	f2 08 06 48 	mulu.d	r8,r9,r8
8000bdfe:	f2 08 16 03 	lsr	r8,r9,0x3
8000be02:	5c 58       	castu.b	r8
8000be04:	2d 08       	sub	r8,-48
8000be06:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
8000be0a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000be0e:	2f f8       	sub	r8,-1
8000be10:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 3 == u8_step )
8000be14:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000be18:	30 38       	mov	r8,3
8000be1a:	f0 09 18 00 	cp.b	r9,r8
8000be1e:	c1 41       	brne	8000be46 <fat_create_short_entry_name+0x28a>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
8000be20:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000be24:	e0 68 85 1f 	mov	r8,34079
8000be28:	ea 18 51 eb 	orh	r8,0x51eb
8000be2c:	f2 08 06 48 	mulu.d	r8,r9,r8
8000be30:	f2 08 16 05 	lsr	r8,r9,0x5
8000be34:	5c 58       	castu.b	r8
8000be36:	2d 08       	sub	r8,-48
8000be38:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
8000be3c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000be40:	2f f8       	sub	r8,-1
8000be42:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 2 == u8_step )
8000be46:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000be4a:	30 28       	mov	r8,2
8000be4c:	f0 09 18 00 	cp.b	r9,r8
8000be50:	c0 e1       	brne	8000be6c <fat_create_short_entry_name+0x2b0>
      {  // step 2 = add character '~'
         character = '~';
8000be52:	37 e8       	mov	r8,126
8000be54:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step+=(4-nb_digit);                          // go to next step
8000be58:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000be5c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be60:	f2 08 01 08 	sub	r8,r9,r8
8000be64:	5c 58       	castu.b	r8
8000be66:	2f c8       	sub	r8,-4
8000be68:	ef 68 ff fc 	st.b	r7[-4],r8
      }

      if( mode )
8000be6c:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000be70:	30 08       	mov	r8,0
8000be72:	f0 09 18 00 	cp.b	r9,r8
8000be76:	c0 c0       	breq	8000be8e <fat_create_short_entry_name+0x2d2>
      {
         // Record the short name in buffer
         *short_name = character;
8000be78:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000be7c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000be80:	b2 88       	st.b	r9[0x0],r8
         short_name++;
8000be82:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000be86:	2f f8       	sub	r8,-1
8000be88:	ef 48 ff ec 	st.w	r7[-20],r8
8000be8c:	c0 b8       	rjmp	8000bea2 <fat_create_short_entry_name+0x2e6>
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
8000be8e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000be92:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000be96:	b2 88       	st.b	r9[0x0],r8
         ptr_entry++;
8000be98:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000be9c:	2f f8       	sub	r8,-1
8000be9e:	ef 48 ff f4 	st.w	r7[-12],r8
      }
      u8_i++;
8000bea2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bea6:	2f f8       	sub	r8,-1
8000bea8:	ef 68 ff fb 	st.b	r7[-5],r8

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
8000beac:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000beb0:	a1 98       	lsr	r8,0x1
8000beb2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000beb6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000beba:	a7 78       	lsl	r8,0x7
8000bebc:	5c 58       	castu.b	r8
8000bebe:	f2 08 00 08 	add	r8,r9,r8
8000bec2:	ef 68 ff fe 	st.b	r7[-2],r8
      crc += character;                                  // add next char
8000bec6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000beca:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bece:	f2 08 00 08 	add	r8,r9,r8
8000bed2:	ef 68 ff fe 	st.b	r7[-2],r8
8000bed6:	cb 4a       	rjmp	8000bc3e <fat_create_short_entry_name+0x82>
   } // End of loop while
   return crc;
8000bed8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
8000bedc:	10 9c       	mov	r12,r8
8000bede:	2f 9d       	sub	sp,-28
8000bee0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bee4:	80 00       	ld.sh	r0,r0[0x0]
8000bee6:	ab 74       	lsl	r4,0xb
8000bee8:	80 00       	ld.sh	r0,r0[0x0]
8000beea:	aa 4c       	st.h	r5[0x8],r12
8000beec:	80 00       	ld.sh	r0,r0[0x0]
8000beee:	a9 fc       	*unknown*
8000bef0:	80 00       	ld.sh	r0,r0[0x0]
8000bef2:	c1 30       	breq	8000bf18 <fat_find_short_entry_name+0x24>

8000bef4 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
U8    fat_find_short_entry_name( FS_STRING sz_name  )
{
8000bef4:	eb cd 40 80 	pushm	r7,lr
8000bef8:	1a 97       	mov	r7,sp
8000befa:	20 5d       	sub	sp,20
8000befc:	ef 4c ff f0 	st.w	r7[-16],r12
   char _MEM_TYPE_SLOW_ short_name[11];
   U8 u8_nb;

   u8_nb = 0;
8000bf00:	30 08       	mov	r8,0
8000bf02:	ef 68 ff ff 	st.b	r7[-1],r8
   while(1)
   {
      if( 0xFF == u8_nb )
8000bf06:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000bf0a:	3f f8       	mov	r8,-1
8000bf0c:	f0 09 18 00 	cp.b	r9,r8
8000bf10:	c0 51       	brne	8000bf1a <fat_find_short_entry_name+0x26>
         return 0;                                       // All short name exist
8000bf12:	30 08       	mov	r8,0
8000bf14:	ef 48 ff ec 	st.w	r7[-20],r8
8000bf18:	c4 18       	rjmp	8000bf9a <fat_find_short_entry_name+0xa6>
         
      u8_nb++;                                           // Try next short name
8000bf1a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bf1e:	2f f8       	sub	r8,-1
8000bf20:	ef 68 ff ff 	st.b	r7[-1],r8
      fat_create_short_entry_name( sz_name , short_name , u8_nb , TRUE  ); // Compute the short name
8000bf24:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bf28:	ee cb 00 0c 	sub	r11,r7,12
8000bf2c:	30 19       	mov	r9,1
8000bf2e:	10 9a       	mov	r10,r8
8000bf30:	ee fc ff f0 	ld.w	r12,r7[-16]
8000bf34:	f0 1f 00 1d 	mcall	8000bfa8 <fat_find_short_entry_name+0xb4>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
8000bf38:	49 d9       	lddpc	r9,8000bfac <fat_find_short_entry_name+0xb8>
8000bf3a:	30 08       	mov	r8,0
8000bf3c:	b2 18       	st.h	r9[0x2],r8
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
8000bf3e:	f0 1f 00 1d 	mcall	8000bfb0 <fat_find_short_entry_name+0xbc>
8000bf42:	18 98       	mov	r8,r12
8000bf44:	58 08       	cp.w	r8,0
8000bf46:	c1 01       	brne	8000bf66 <fat_find_short_entry_name+0x72>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
8000bf48:	49 b8       	lddpc	r8,8000bfb4 <fat_find_short_entry_name+0xc0>
8000bf4a:	11 89       	ld.ub	r9,r8[0x0]
8000bf4c:	31 a8       	mov	r8,26
8000bf4e:	f0 09 18 00 	cp.b	r9,r8
8000bf52:	c0 61       	brne	8000bf5e <fat_find_short_entry_name+0x6a>
               return u8_nb;                             // short name don't exist, then good number
8000bf54:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bf58:	ef 48 ff ec 	st.w	r7[-20],r8
8000bf5c:	c1 f8       	rjmp	8000bf9a <fat_find_short_entry_name+0xa6>
            return 0;                                    // System or Disk Error
8000bf5e:	30 08       	mov	r8,0
8000bf60:	ef 48 ff ec 	st.w	r7[-20],r8
8000bf64:	c1 b8       	rjmp	8000bf9a <fat_find_short_entry_name+0xa6>
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
8000bf66:	ee c8 00 0c 	sub	r8,r7,12
8000bf6a:	10 9c       	mov	r12,r8
8000bf6c:	f0 1f 00 13 	mcall	8000bfb8 <fat_find_short_entry_name+0xc4>
8000bf70:	18 98       	mov	r8,r12
8000bf72:	58 08       	cp.w	r8,0
8000bf74:	cc 91       	brne	8000bf06 <fat_find_short_entry_name+0x12>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000bf76:	49 08       	lddpc	r8,8000bfb4 <fat_find_short_entry_name+0xc0>
8000bf78:	11 89       	ld.ub	r9,r8[0x0]
8000bf7a:	30 a8       	mov	r8,10
8000bf7c:	f0 09 18 00 	cp.b	r9,r8
8000bf80:	c0 61       	brne	8000bf8c <fat_find_short_entry_name+0x98>
            return u8_nb;                                // Short name don't exist, then good number
8000bf82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bf86:	ef 48 ff ec 	st.w	r7[-20],r8
8000bf8a:	c0 88       	rjmp	8000bf9a <fat_find_short_entry_name+0xa6>
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
8000bf8c:	48 88       	lddpc	r8,8000bfac <fat_find_short_entry_name+0xb8>
8000bf8e:	90 18       	ld.sh	r8,r8[0x2]
8000bf90:	2f f8       	sub	r8,-1
8000bf92:	5c 88       	casts.h	r8
8000bf94:	48 69       	lddpc	r9,8000bfac <fat_find_short_entry_name+0xb8>
8000bf96:	b2 18       	st.h	r9[0x2],r8
8000bf98:	cd 3b       	rjmp	8000bf3e <fat_find_short_entry_name+0x4a>
      }
   }
8000bf9a:	ee f8 ff ec 	ld.w	r8,r7[-20]
}
8000bf9e:	10 9c       	mov	r12,r8
8000bfa0:	2f bd       	sub	sp,-20
8000bfa2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfa6:	00 00       	add	r0,r0
8000bfa8:	80 00       	ld.sh	r0,r0[0x0]
8000bfaa:	bb bc       	sbr	r12,0x1b
8000bfac:	00 00       	add	r0,r0
8000bfae:	0e 3c       	cp.w	r12,r7
8000bfb0:	80 00       	ld.sh	r0,r0[0x0]
8000bfb2:	a1 84       	lsr	r4,0x0
8000bfb4:	00 00       	add	r0,r0
8000bfb6:	0e 40       	or	r0,r7
8000bfb8:	80 00       	ld.sh	r0,r0[0x0]
8000bfba:	bf bc       	sbr	r12,0x1f

8000bfbc <fat_entry_shortname_compare>:
//!
//! @return    TRUE it is the same
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//!
Bool  fat_entry_shortname_compare( FS_STRING short_name )
{
8000bfbc:	eb cd 40 80 	pushm	r7,lr
8000bfc0:	1a 97       	mov	r7,sp
8000bfc2:	20 3d       	sub	sp,12
8000bfc4:	ef 4c ff f8 	st.w	r7[-8],r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
8000bfc8:	f0 1f 00 1e 	mcall	8000c040 <fat_entry_shortname_compare+0x84>
8000bfcc:	18 98       	mov	r8,r12
8000bfce:	ef 48 ff fc 	st.w	r7[-4],r8
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
8000bfd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bfd6:	11 88       	ld.ub	r8,r8[0x0]
8000bfd8:	58 08       	cp.w	r8,0
8000bfda:	c0 81       	brne	8000bfea <fat_entry_shortname_compare+0x2e>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
8000bfdc:	49 a9       	lddpc	r9,8000c044 <fat_entry_shortname_compare+0x88>
8000bfde:	30 a8       	mov	r8,10
8000bfe0:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
8000bfe2:	30 08       	mov	r8,0
8000bfe4:	ef 48 ff f4 	st.w	r7[-12],r8
8000bfe8:	c2 68       	rjmp	8000c034 <fat_entry_shortname_compare+0x78>
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
8000bfea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bfee:	11 89       	ld.ub	r9,r8[0x0]
8000bff0:	3e 58       	mov	r8,-27
8000bff2:	f0 09 18 00 	cp.b	r9,r8
8000bff6:	c0 90       	breq	8000c008 <fat_entry_shortname_compare+0x4c>
8000bff8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bffc:	2f 58       	sub	r8,-11
8000bffe:	11 89       	ld.ub	r9,r8[0x0]
8000c000:	30 f8       	mov	r8,15
8000c002:	f0 09 18 00 	cp.b	r9,r8
8000c006:	c0 81       	brne	8000c016 <fat_entry_shortname_compare+0x5a>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
8000c008:	48 f9       	lddpc	r9,8000c044 <fat_entry_shortname_compare+0x88>
8000c00a:	30 b8       	mov	r8,11
8000c00c:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
8000c00e:	30 08       	mov	r8,0
8000c010:	ef 48 ff f4 	st.w	r7[-12],r8
8000c014:	c1 08       	rjmp	8000c034 <fat_entry_shortname_compare+0x78>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
8000c016:	48 c8       	lddpc	r8,8000c044 <fat_entry_shortname_compare+0x88>
8000c018:	30 b9       	mov	r9,11
8000c01a:	b0 89       	st.b	r8[0x0],r9
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
8000c01c:	30 ba       	mov	r10,11
8000c01e:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c022:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c026:	f0 1f 00 09 	mcall	8000c048 <fat_entry_shortname_compare+0x8c>
8000c02a:	18 98       	mov	r8,r12
8000c02c:	58 08       	cp.w	r8,0
8000c02e:	5f 08       	sreq	r8
8000c030:	ef 48 ff f4 	st.w	r7[-12],r8
8000c034:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000c038:	10 9c       	mov	r12,r8
8000c03a:	2f dd       	sub	sp,-12
8000c03c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c040:	80 00       	ld.sh	r0,r0[0x0]
8000c042:	aa 4c       	st.h	r5[0x8],r12
8000c044:	00 00       	add	r0,r0
8000c046:	0e 40       	or	r0,r7
8000c048:	80 00       	ld.sh	r0,r0[0x0]
8000c04a:	f0 78 eb cd 	mov	r8,-922675

8000c04c <fat_check_name>:
//!
//! @return    number of entry file to strore the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
U8    fat_check_name( FS_STRING sz_name  )
{
8000c04c:	eb cd 40 80 	pushm	r7,lr
8000c050:	1a 97       	mov	r7,sp
8000c052:	20 4d       	sub	sp,16
8000c054:	ef 4c ff f4 	st.w	r7[-12],r12
   U8 u8_nb_entry, u8_i, u8_j;
   U16 u16_character;

   u8_nb_entry = 2;        // a short entry + one long name entry minimum
8000c058:	30 28       	mov	r8,2
8000c05a:	ef 68 ff fb 	st.b	r7[-5],r8
   u8_i = FS_SIZE_LFN_ENTRY;
8000c05e:	30 d8       	mov	r8,13
8000c060:	ef 68 ff fc 	st.b	r7[-4],r8
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
8000c064:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c068:	11 88       	ld.ub	r8,r8[0x0]
8000c06a:	ef 58 ff fe 	st.h	r7[-2],r8
      }
      if( fat_check_eof_name( u16_character ) )
8000c06e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000c072:	10 9c       	mov	r12,r8
8000c074:	f0 1f 00 2c 	mcall	8000c124 <fat_check_name+0xd8>
8000c078:	18 98       	mov	r8,r12
8000c07a:	58 08       	cp.w	r8,0
8000c07c:	c3 c1       	brne	8000c0f4 <fat_check_name+0xa8>
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
8000c07e:	30 08       	mov	r8,0
8000c080:	ef 68 ff fd 	st.b	r7[-3],r8
8000c084:	c1 88       	rjmp	8000c0b4 <fat_check_name+0x68>
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
8000c086:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000c08a:	4a 88       	lddpc	r8,8000c128 <fat_check_name+0xdc>
8000c08c:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000c090:	10 99       	mov	r9,r8
8000c092:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c096:	f2 08 19 00 	cp.h	r8,r9
8000c09a:	c0 81       	brne	8000c0aa <fat_check_name+0x5e>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
8000c09c:	4a 49       	lddpc	r9,8000c12c <fat_check_name+0xe0>
8000c09e:	31 c8       	mov	r8,28
8000c0a0:	b2 88       	st.b	r9[0x0],r8
            return 0;      // incorrect character
8000c0a2:	30 08       	mov	r8,0
8000c0a4:	ef 48 ff f0 	st.w	r7[-16],r8
8000c0a8:	c3 88       	rjmp	8000c118 <fat_check_name+0xcc>
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
8000c0aa:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000c0ae:	2f f8       	sub	r8,-1
8000c0b0:	ef 68 ff fd 	st.b	r7[-3],r8
8000c0b4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000c0b8:	30 68       	mov	r8,6
8000c0ba:	f0 09 18 00 	cp.b	r9,r8
8000c0be:	fe 98 ff e4 	brls	8000c086 <fat_check_name+0x3a>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
8000c0c2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c0c6:	30 08       	mov	r8,0
8000c0c8:	f0 09 18 00 	cp.b	r9,r8
8000c0cc:	c0 91       	brne	8000c0de <fat_check_name+0x92>
      {
         u8_nb_entry++;
8000c0ce:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c0d2:	2f f8       	sub	r8,-1
8000c0d4:	ef 68 ff fb 	st.b	r7[-5],r8
         u8_i = FS_SIZE_LFN_ENTRY;
8000c0d8:	30 d8       	mov	r8,13
8000c0da:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      u8_i--;
8000c0de:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c0e2:	20 18       	sub	r8,1
8000c0e4:	ef 68 ff fc 	st.b	r7[-4],r8
      sz_name += (Is_unicode? 2 : 1 );
8000c0e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c0ec:	2f f8       	sub	r8,-1
8000c0ee:	ef 48 ff f4 	st.w	r7[-12],r8
8000c0f2:	cb 9b       	rjmp	8000c064 <fat_check_name+0x18>
   }
   if( 0x14 < u8_nb_entry )
8000c0f4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c0f8:	31 48       	mov	r8,20
8000c0fa:	f0 09 18 00 	cp.b	r9,r8
8000c0fe:	e0 88 00 09 	brls	8000c110 <fat_check_name+0xc4>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
8000c102:	48 b9       	lddpc	r9,8000c12c <fat_check_name+0xe0>
8000c104:	32 b8       	mov	r8,43
8000c106:	b2 88       	st.b	r9[0x0],r8
      return 0;            // Name too large
8000c108:	30 08       	mov	r8,0
8000c10a:	ef 48 ff f0 	st.w	r7[-16],r8
8000c10e:	c0 58       	rjmp	8000c118 <fat_check_name+0xcc>
   }
   return u8_nb_entry;
8000c110:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c114:	ef 48 ff f0 	st.w	r7[-16],r8
8000c118:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
8000c11c:	10 9c       	mov	r12,r8
8000c11e:	2f cd       	sub	sp,-16
8000c120:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c124:	80 00       	ld.sh	r0,r0[0x0]
8000c126:	a9 fc       	*unknown*
8000c128:	80 00       	ld.sh	r0,r0[0x0]
8000c12a:	fb 80       	*unknown*
8000c12c:	00 00       	add	r0,r0
8000c12e:	0e 40       	or	r0,r7

8000c130 <fat_translate_char_shortname>:
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
U8    fat_translate_char_shortname( U8 character )
{
8000c130:	eb cd 40 80 	pushm	r7,lr
8000c134:	1a 97       	mov	r7,sp
8000c136:	20 3d       	sub	sp,12
8000c138:	18 98       	mov	r8,r12
8000c13a:	ef 68 ff f8 	st.b	r7[-8],r8
   U8 u8_j;

   if( (character<=' ') || ('~'<character) )
8000c13e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c142:	32 08       	mov	r8,32
8000c144:	f0 09 18 00 	cp.b	r9,r8
8000c148:	e0 88 00 09 	brls	8000c15a <fat_translate_char_shortname+0x2a>
8000c14c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c150:	37 e8       	mov	r8,126
8000c152:	f0 09 18 00 	cp.b	r9,r8
8000c156:	e0 88 00 06 	brls	8000c162 <fat_translate_char_shortname+0x32>
      return 0;
8000c15a:	30 08       	mov	r8,0
8000c15c:	ef 48 ff f4 	st.w	r7[-12],r8
8000c160:	c3 88       	rjmp	8000c1d0 <fat_translate_char_shortname+0xa0>
   if( ('a'<=character) && (character<='z') )
8000c162:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c166:	36 08       	mov	r8,96
8000c168:	f0 09 18 00 	cp.b	r9,r8
8000c16c:	e0 88 00 10 	brls	8000c18c <fat_translate_char_shortname+0x5c>
8000c170:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c174:	37 a8       	mov	r8,122
8000c176:	f0 09 18 00 	cp.b	r9,r8
8000c17a:	e0 8b 00 09 	brhi	8000c18c <fat_translate_char_shortname+0x5c>
   {
      return (character - ('a'-'A'));  // Change to upper case
8000c17e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c182:	22 08       	sub	r8,32
8000c184:	5c 58       	castu.b	r8
8000c186:	ef 48 ff f4 	st.w	r7[-12],r8
8000c18a:	c2 38       	rjmp	8000c1d0 <fat_translate_char_shortname+0xa0>
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000c18c:	30 08       	mov	r8,0
8000c18e:	ef 68 ff ff 	st.b	r7[-1],r8
8000c192:	c1 48       	rjmp	8000c1ba <fat_translate_char_shortname+0x8a>
   {
      if( character == fs_s_execption_char[u8_j] )
8000c194:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c198:	49 18       	lddpc	r8,8000c1dc <fat_translate_char_shortname+0xac>
8000c19a:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000c19e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c1a2:	f2 08 18 00 	cp.b	r8,r9
8000c1a6:	c0 51       	brne	8000c1b0 <fat_translate_char_shortname+0x80>
         return 0;
8000c1a8:	30 08       	mov	r8,0
8000c1aa:	ef 48 ff f4 	st.w	r7[-12],r8
8000c1ae:	c1 18       	rjmp	8000c1d0 <fat_translate_char_shortname+0xa0>
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000c1b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c1b4:	2f f8       	sub	r8,-1
8000c1b6:	ef 68 ff ff 	st.b	r7[-1],r8
8000c1ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c1be:	30 68       	mov	r8,6
8000c1c0:	f0 09 18 00 	cp.b	r9,r8
8000c1c4:	fe 98 ff e8 	brls	8000c194 <fat_translate_char_shortname+0x64>
   {
      if( character == fs_s_execption_char[u8_j] )
         return 0;
   }
   return character;
8000c1c8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c1cc:	ef 48 ff f4 	st.w	r7[-12],r8
8000c1d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000c1d4:	10 9c       	mov	r12,r8
8000c1d6:	2f dd       	sub	sp,-12
8000c1d8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1dc:	80 00       	ld.sh	r0,r0[0x0]
8000c1de:	fb 88       	*unknown*

8000c1e0 <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialise the system on the last alloced free entry
//! @endverbatim
//!
Bool  fat_alloc_entry_free( U8 u8_nb_entry )
{
8000c1e0:	eb cd 40 80 	pushm	r7,lr
8000c1e4:	1a 97       	mov	r7,sp
8000c1e6:	20 4d       	sub	sp,16
8000c1e8:	18 98       	mov	r8,r12
8000c1ea:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE ptr_entry;
   Bool b_garbage_collector_used = FALSE;
8000c1ee:	30 08       	mov	r8,0
8000c1f0:	ef 68 ff fe 	st.b	r7[-2],r8
   U8 u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;
8000c1f4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000c1f8:	ef 68 ff ff 	st.b	r7[-1],r8

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000c1fc:	4c 69       	lddpc	r9,8000c314 <fat_alloc_entry_free+0x134>
8000c1fe:	30 08       	mov	r8,0
8000c200:	b2 18       	st.h	r9[0x2],r8
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000c202:	f0 1f 00 46 	mcall	8000c318 <fat_alloc_entry_free+0x138>
8000c206:	18 98       	mov	r8,r12
8000c208:	58 08       	cp.w	r8,0
8000c20a:	c3 a1       	brne	8000c27e <fat_alloc_entry_free+0x9e>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000c20c:	4c 48       	lddpc	r8,8000c31c <fat_alloc_entry_free+0x13c>
8000c20e:	11 89       	ld.ub	r9,r8[0x0]
8000c210:	31 a8       	mov	r8,26
8000c212:	f0 09 18 00 	cp.b	r9,r8
8000c216:	c0 50       	breq	8000c220 <fat_alloc_entry_free+0x40>
            return FALSE;
8000c218:	30 08       	mov	r8,0
8000c21a:	ef 48 ff f0 	st.w	r7[-16],r8
8000c21e:	c7 48       	rjmp	8000c306 <fat_alloc_entry_free+0x126>

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000c220:	4c 09       	lddpc	r9,8000c320 <fat_alloc_entry_free+0x140>
8000c222:	30 18       	mov	r8,1
8000c224:	93 18       	st.w	r9[0x4],r8
         if( !fat_allocfreespace())
8000c226:	f0 1f 00 40 	mcall	8000c324 <fat_alloc_entry_free+0x144>
8000c22a:	18 98       	mov	r8,r12
8000c22c:	58 08       	cp.w	r8,0
8000c22e:	c1 f1       	brne	8000c26c <fat_alloc_entry_free+0x8c>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
8000c230:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c234:	30 08       	mov	r8,0
8000c236:	f0 09 18 00 	cp.b	r9,r8
8000c23a:	c0 50       	breq	8000c244 <fat_alloc_entry_free+0x64>
               return FALSE;
8000c23c:	30 08       	mov	r8,0
8000c23e:	ef 48 ff f0 	st.w	r7[-16],r8
8000c242:	c6 28       	rjmp	8000c306 <fat_alloc_entry_free+0x126>
            if( !fat_garbage_collector_entry())
8000c244:	f0 1f 00 39 	mcall	8000c328 <fat_alloc_entry_free+0x148>
8000c248:	18 98       	mov	r8,r12
8000c24a:	58 08       	cp.w	r8,0
8000c24c:	c0 51       	brne	8000c256 <fat_alloc_entry_free+0x76>
               return FALSE;
8000c24e:	30 08       	mov	r8,0
8000c250:	ef 48 ff f0 	st.w	r7[-16],r8
8000c254:	c5 98       	rjmp	8000c306 <fat_alloc_entry_free+0x126>
            b_garbage_collector_used = TRUE;
8000c256:	30 18       	mov	r8,1
8000c258:	ef 68 ff fe 	st.b	r7[-2],r8
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000c25c:	4a e9       	lddpc	r9,8000c314 <fat_alloc_entry_free+0x134>
8000c25e:	30 08       	mov	r8,0
8000c260:	b2 18       	st.h	r9[0x2],r8
            u8_nb_entry = u8_nb_entry_save;
8000c262:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c266:	ef 68 ff f4 	st.b	r7[-12],r8
8000c26a:	cc cb       	rjmp	8000c202 <fat_alloc_entry_free+0x22>
            continue;
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
8000c26c:	f0 1f 00 30 	mcall	8000c32c <fat_alloc_entry_free+0x14c>
8000c270:	18 98       	mov	r8,r12
8000c272:	58 08       	cp.w	r8,0
8000c274:	cc 71       	brne	8000c202 <fat_alloc_entry_free+0x22>
            return FALSE;
8000c276:	30 08       	mov	r8,0
8000c278:	ef 48 ff f0 	st.w	r7[-16],r8
8000c27c:	c4 58       	rjmp	8000c306 <fat_alloc_entry_free+0x126>

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
8000c27e:	f0 1f 00 2d 	mcall	8000c330 <fat_alloc_entry_free+0x150>
8000c282:	18 98       	mov	r8,r12
8000c284:	ef 48 ff f8 	st.w	r7[-8],r8
      if ( FS_ENTRY_END == *ptr_entry )
8000c288:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c28c:	11 88       	ld.ub	r8,r8[0x0]
8000c28e:	58 08       	cp.w	r8,0
8000c290:	c1 01       	brne	8000c2b0 <fat_alloc_entry_free+0xd0>
      {  // The entry is free
         u8_nb_entry--;
8000c292:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000c296:	20 18       	sub	r8,1
8000c298:	ef 68 ff f4 	st.b	r7[-12],r8
         if( 0 == u8_nb_entry )
8000c29c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000c2a0:	30 08       	mov	r8,0
8000c2a2:	f0 09 18 00 	cp.b	r9,r8
8000c2a6:	c0 51       	brne	8000c2b0 <fat_alloc_entry_free+0xd0>
         {
            return TRUE;  // All free entry is found
8000c2a8:	30 18       	mov	r8,1
8000c2aa:	ef 48 ff f0 	st.w	r7[-16],r8
8000c2ae:	c2 c8       	rjmp	8000c306 <fat_alloc_entry_free+0x126>
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
8000c2b0:	49 98       	lddpc	r8,8000c314 <fat_alloc_entry_free+0x134>
8000c2b2:	90 18       	ld.sh	r8,r8[0x2]
8000c2b4:	2f f8       	sub	r8,-1
8000c2b6:	5c 88       	casts.h	r8
8000c2b8:	49 79       	lddpc	r9,8000c314 <fat_alloc_entry_free+0x134>
8000c2ba:	b2 18       	st.h	r9[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000c2bc:	49 68       	lddpc	r8,8000c314 <fat_alloc_entry_free+0x134>
8000c2be:	90 18       	ld.sh	r8,r8[0x2]
8000c2c0:	58 08       	cp.w	r8,0
8000c2c2:	ca 01       	brne	8000c202 <fat_alloc_entry_free+0x22>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
8000c2c4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c2c8:	30 08       	mov	r8,0
8000c2ca:	f0 09 18 00 	cp.b	r9,r8
8000c2ce:	c0 80       	breq	8000c2de <fat_alloc_entry_free+0xfe>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
8000c2d0:	49 39       	lddpc	r9,8000c31c <fat_alloc_entry_free+0x13c>
8000c2d2:	31 b8       	mov	r8,27
8000c2d4:	b2 88       	st.b	r9[0x0],r8
            return FALSE;
8000c2d6:	30 08       	mov	r8,0
8000c2d8:	ef 48 ff f0 	st.w	r7[-16],r8
8000c2dc:	c1 58       	rjmp	8000c306 <fat_alloc_entry_free+0x126>
         }
         if( !fat_garbage_collector_entry())
8000c2de:	f0 1f 00 13 	mcall	8000c328 <fat_alloc_entry_free+0x148>
8000c2e2:	18 98       	mov	r8,r12
8000c2e4:	58 08       	cp.w	r8,0
8000c2e6:	c0 51       	brne	8000c2f0 <fat_alloc_entry_free+0x110>
            return FALSE;
8000c2e8:	30 08       	mov	r8,0
8000c2ea:	ef 48 ff f0 	st.w	r7[-16],r8
8000c2ee:	c0 c8       	rjmp	8000c306 <fat_alloc_entry_free+0x126>
         b_garbage_collector_used = TRUE;
8000c2f0:	30 18       	mov	r8,1
8000c2f2:	ef 68 ff fe 	st.b	r7[-2],r8
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000c2f6:	48 89       	lddpc	r9,8000c314 <fat_alloc_entry_free+0x134>
8000c2f8:	30 08       	mov	r8,0
8000c2fa:	b2 18       	st.h	r9[0x2],r8
         u8_nb_entry = u8_nb_entry_save;
8000c2fc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c300:	ef 68 ff f4 	st.b	r7[-12],r8
8000c304:	c7 fb       	rjmp	8000c202 <fat_alloc_entry_free+0x22>
         continue;
      }
   }  // end of while(1)
8000c306:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
8000c30a:	10 9c       	mov	r12,r8
8000c30c:	2f cd       	sub	sp,-16
8000c30e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c312:	00 00       	add	r0,r0
8000c314:	00 00       	add	r0,r0
8000c316:	0e 3c       	cp.w	r12,r7
8000c318:	80 00       	ld.sh	r0,r0[0x0]
8000c31a:	a1 84       	lsr	r4,0x0
8000c31c:	00 00       	add	r0,r0
8000c31e:	0e 40       	or	r0,r7
8000c320:	00 00       	add	r0,r0
8000c322:	10 18       	sub	r8,r8
8000c324:	80 00       	ld.sh	r0,r0[0x0]
8000c326:	c5 50       	breq	8000c3d0 <fat_garbage_collector_entry+0x9c>
8000c328:	80 00       	ld.sh	r0,r0[0x0]
8000c32a:	c3 34       	brge	8000c390 <fat_garbage_collector_entry+0x5c>
8000c32c:	80 00       	ld.sh	r0,r0[0x0]
8000c32e:	c8 20       	breq	8000c232 <fat_alloc_entry_free+0x52>
8000c330:	80 00       	ld.sh	r0,r0[0x0]
8000c332:	aa 4c       	st.h	r5[0x8],r12

8000c334 <fat_garbage_collector_entry>:
//!
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool fat_garbage_collector_entry( void )
{
8000c334:	eb cd 40 80 	pushm	r7,lr
8000c338:	1a 97       	mov	r7,sp
8000c33a:	20 bd       	sub	sp,44
   _MEM_TYPE_SLOW_   U8 entry[ FS_SIZE_FILE_ENTRY ];
   PTR_CACHE ptr_entry;
   U16 u16_pos_old = 0;
8000c33c:	30 08       	mov	r8,0
8000c33e:	ef 58 ff fc 	st.h	r7[-4],r8
   U16 u16_pos_new = 0;
8000c342:	30 08       	mov	r8,0
8000c344:	ef 58 ff fe 	st.h	r7[-2],r8

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
8000c348:	4c 39       	lddpc	r9,8000c454 <fat_garbage_collector_entry+0x120>
8000c34a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000c34e:	b2 18       	st.h	r9[0x2],r8
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000c350:	f0 1f 00 42 	mcall	8000c458 <fat_garbage_collector_entry+0x124>
8000c354:	18 98       	mov	r8,r12
8000c356:	58 08       	cp.w	r8,0
8000c358:	c0 b1       	brne	8000c36e <fat_garbage_collector_entry+0x3a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000c35a:	4c 18       	lddpc	r8,8000c45c <fat_garbage_collector_entry+0x128>
8000c35c:	11 89       	ld.ub	r9,r8[0x0]
8000c35e:	31 a8       	mov	r8,26
8000c360:	f0 09 18 00 	cp.b	r9,r8
8000c364:	c0 f0       	breq	8000c382 <fat_garbage_collector_entry+0x4e>
            return FALSE;
8000c366:	30 08       	mov	r8,0
8000c368:	ef 48 ff d4 	st.w	r7[-44],r8
8000c36c:	c6 e8       	rjmp	8000c448 <fat_garbage_collector_entry+0x114>
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
8000c36e:	f0 1f 00 3d 	mcall	8000c460 <fat_garbage_collector_entry+0x12c>
8000c372:	18 98       	mov	r8,r12
8000c374:	ef 48 ff f8 	st.w	r7[-8],r8

      if ( FS_ENTRY_END == *ptr_entry )
8000c378:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c37c:	11 88       	ld.ub	r8,r8[0x0]
8000c37e:	58 08       	cp.w	r8,0
8000c380:	c2 a1       	brne	8000c3d4 <fat_garbage_collector_entry+0xa0>
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
8000c382:	4b 59       	lddpc	r9,8000c454 <fat_garbage_collector_entry+0x120>
8000c384:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c388:	b2 18       	st.h	r9[0x2],r8
8000c38a:	c1 a8       	rjmp	8000c3be <fat_garbage_collector_entry+0x8a>
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
8000c38c:	f0 1f 00 33 	mcall	8000c458 <fat_garbage_collector_entry+0x124>
8000c390:	18 98       	mov	r8,r12
8000c392:	58 08       	cp.w	r8,0
8000c394:	c0 51       	brne	8000c39e <fat_garbage_collector_entry+0x6a>
               return FALSE;
8000c396:	30 08       	mov	r8,0
8000c398:	ef 48 ff d4 	st.w	r7[-44],r8
8000c39c:	c5 68       	rjmp	8000c448 <fat_garbage_collector_entry+0x114>
            memset( fat_get_ptr_entry() , 0 , 32 );
8000c39e:	f0 1f 00 31 	mcall	8000c460 <fat_garbage_collector_entry+0x12c>
8000c3a2:	18 98       	mov	r8,r12
8000c3a4:	32 0a       	mov	r10,32
8000c3a6:	30 0b       	mov	r11,0
8000c3a8:	10 9c       	mov	r12,r8
8000c3aa:	f0 1f 00 2f 	mcall	8000c464 <fat_garbage_collector_entry+0x130>
            fat_cache_mark_sector_as_dirty();
8000c3ae:	f0 1f 00 2f 	mcall	8000c468 <fat_garbage_collector_entry+0x134>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
8000c3b2:	4a 98       	lddpc	r8,8000c454 <fat_garbage_collector_entry+0x120>
8000c3b4:	90 18       	ld.sh	r8,r8[0x2]
8000c3b6:	2f f8       	sub	r8,-1
8000c3b8:	5c 88       	casts.h	r8
8000c3ba:	4a 79       	lddpc	r9,8000c454 <fat_garbage_collector_entry+0x120>
8000c3bc:	b2 18       	st.h	r9[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
8000c3be:	4a 68       	lddpc	r8,8000c454 <fat_garbage_collector_entry+0x120>
8000c3c0:	90 19       	ld.sh	r9,r8[0x2]
8000c3c2:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000c3c6:	f2 08 19 00 	cp.h	r8,r9
8000c3ca:	ce 11       	brne	8000c38c <fat_garbage_collector_entry+0x58>
               return FALSE;
            memset( fat_get_ptr_entry() , 0 , 32 );
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return TRUE;  // End of garbage
8000c3cc:	30 18       	mov	r8,1
8000c3ce:	ef 48 ff d4 	st.w	r7[-44],r8
8000c3d2:	c3 b8       	rjmp	8000c448 <fat_garbage_collector_entry+0x114>
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
8000c3d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c3d8:	11 89       	ld.ub	r9,r8[0x0]
8000c3da:	3e 58       	mov	r8,-27
8000c3dc:	f0 09 18 00 	cp.b	r9,r8
8000c3e0:	c2 e0       	breq	8000c43c <fat_garbage_collector_entry+0x108>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
8000c3e2:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000c3e6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c3ea:	f0 09 19 00 	cp.h	r9,r8
8000c3ee:	c2 20       	breq	8000c432 <fat_garbage_collector_entry+0xfe>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
8000c3f0:	ee c8 00 28 	sub	r8,r7,40
8000c3f4:	32 0a       	mov	r10,32
8000c3f6:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c3fa:	10 9c       	mov	r12,r8
8000c3fc:	f0 1f 00 1c 	mcall	8000c46c <fat_garbage_collector_entry+0x138>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
8000c400:	49 59       	lddpc	r9,8000c454 <fat_garbage_collector_entry+0x120>
8000c402:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c406:	b2 18       	st.h	r9[0x2],r8
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
8000c408:	f0 1f 00 14 	mcall	8000c458 <fat_garbage_collector_entry+0x124>
8000c40c:	18 98       	mov	r8,r12
8000c40e:	58 08       	cp.w	r8,0
8000c410:	c0 51       	brne	8000c41a <fat_garbage_collector_entry+0xe6>
               return FALSE;
8000c412:	30 08       	mov	r8,0
8000c414:	ef 48 ff d4 	st.w	r7[-44],r8
8000c418:	c1 88       	rjmp	8000c448 <fat_garbage_collector_entry+0x114>
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
8000c41a:	f0 1f 00 12 	mcall	8000c460 <fat_garbage_collector_entry+0x12c>
8000c41e:	18 99       	mov	r9,r12
8000c420:	ee c8 00 28 	sub	r8,r7,40
8000c424:	32 0a       	mov	r10,32
8000c426:	10 9b       	mov	r11,r8
8000c428:	12 9c       	mov	r12,r9
8000c42a:	f0 1f 00 11 	mcall	8000c46c <fat_garbage_collector_entry+0x138>
            fat_cache_mark_sector_as_dirty();
8000c42e:	f0 1f 00 0f 	mcall	8000c468 <fat_garbage_collector_entry+0x134>
         }
         u16_pos_new++;
8000c432:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c436:	2f f8       	sub	r8,-1
8000c438:	ef 58 ff fe 	st.h	r7[-2],r8
      }
      u16_pos_old++;
8000c43c:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000c440:	2f f8       	sub	r8,-1
8000c442:	ef 58 ff fc 	st.h	r7[-4],r8
8000c446:	c8 1b       	rjmp	8000c348 <fat_garbage_collector_entry+0x14>
   }  // end of while(1)
8000c448:	ee f8 ff d4 	ld.w	r8,r7[-44]
}
8000c44c:	10 9c       	mov	r12,r8
8000c44e:	2f 5d       	sub	sp,-44
8000c450:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c454:	00 00       	add	r0,r0
8000c456:	0e 3c       	cp.w	r12,r7
8000c458:	80 00       	ld.sh	r0,r0[0x0]
8000c45a:	a1 84       	lsr	r4,0x0
8000c45c:	00 00       	add	r0,r0
8000c45e:	0e 40       	or	r0,r7
8000c460:	80 00       	ld.sh	r0,r0[0x0]
8000c462:	aa 4c       	st.h	r5[0x8],r12
8000c464:	80 00       	ld.sh	r0,r0[0x0]
8000c466:	f1 e8 80 00 	sthh.w	r0[r0],r8:b,r8:b
8000c46a:	ab 74       	lsl	r4,0xb
8000c46c:	80 00       	ld.sh	r0,r0[0x0]
8000c46e:	f0 a0 eb cd 	rcall	7fe29c08 <_estack+0x7fe19c08>

8000c470 <fat_delete_file>:
//!
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool  fat_delete_file( Bool b_cluster_list )
{
8000c470:	eb cd 40 80 	pushm	r7,lr
8000c474:	1a 97       	mov	r7,sp
8000c476:	20 4d       	sub	sp,16
8000c478:	18 98       	mov	r8,r12
8000c47a:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE ptr_entry;
   U8 u8_tmp;
   Bool b_short_del = FALSE;
8000c47e:	30 08       	mov	r8,0
8000c480:	ef 68 ff ff 	st.b	r7[-1],r8

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000c484:	f0 1f 00 2d 	mcall	8000c538 <fat_delete_file+0xc8>
8000c488:	18 98       	mov	r8,r12
8000c48a:	58 08       	cp.w	r8,0
8000c48c:	c0 51       	brne	8000c496 <fat_delete_file+0x26>
         return FALSE;
8000c48e:	30 08       	mov	r8,0
8000c490:	ef 48 ff f0 	st.w	r7[-16],r8
8000c494:	c4 c8       	rjmp	8000c52c <fat_delete_file+0xbc>

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
8000c496:	f0 1f 00 2a 	mcall	8000c53c <fat_delete_file+0xcc>
8000c49a:	18 98       	mov	r8,r12
8000c49c:	ef 48 ff f8 	st.w	r7[-8],r8
      u8_tmp = ptr_entry[0];
8000c4a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c4a4:	11 88       	ld.ub	r8,r8[0x0]
8000c4a6:	ef 68 ff fe 	st.b	r7[-2],r8

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
8000c4aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c4ae:	2f 58       	sub	r8,-11
8000c4b0:	11 89       	ld.ub	r9,r8[0x0]
8000c4b2:	30 f8       	mov	r8,15
8000c4b4:	f0 09 18 00 	cp.b	r9,r8
8000c4b8:	c0 70       	breq	8000c4c6 <fat_delete_file+0x56>
8000c4ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c4be:	30 08       	mov	r8,0
8000c4c0:	f0 09 18 00 	cp.b	r9,r8
8000c4c4:	c1 e1       	brne	8000c500 <fat_delete_file+0x90>
         // no long entry exist, then only a short entry to delete
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = TRUE;
8000c4c6:	30 18       	mov	r8,1
8000c4c8:	ef 68 ff ff 	st.b	r7[-1],r8
      ptr_entry[0] = FS_ENTRY_DEL;
8000c4cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c4d0:	3e 58       	mov	r8,-27
8000c4d2:	b2 88       	st.b	r9[0x0],r8
      fat_cache_mark_sector_as_dirty();
8000c4d4:	f0 1f 00 1b 	mcall	8000c540 <fat_delete_file+0xd0>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
8000c4d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c4dc:	2f 58       	sub	r8,-11
8000c4de:	11 89       	ld.ub	r9,r8[0x0]
8000c4e0:	30 f8       	mov	r8,15
8000c4e2:	f0 09 18 00 	cp.b	r9,r8
8000c4e6:	c0 61       	brne	8000c4f2 <fat_delete_file+0x82>
8000c4e8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c4ec:	e2 18 00 40 	andl	r8,0x40,COH
8000c4f0:	c0 81       	brne	8000c500 <fat_delete_file+0x90>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000c4f2:	49 58       	lddpc	r8,8000c544 <fat_delete_file+0xd4>
8000c4f4:	90 18       	ld.sh	r8,r8[0x2]
8000c4f6:	20 18       	sub	r8,1
8000c4f8:	5c 88       	casts.h	r8
8000c4fa:	49 39       	lddpc	r9,8000c544 <fat_delete_file+0xd4>
8000c4fc:	b2 18       	st.h	r9[0x2],r8
8000c4fe:	cc 3b       	rjmp	8000c484 <fat_delete_file+0x14>
   }  // end of while(1)

   if( b_cluster_list )
8000c500:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000c504:	30 08       	mov	r8,0
8000c506:	f0 09 18 00 	cp.b	r9,r8
8000c50a:	c0 e0       	breq	8000c526 <fat_delete_file+0xb6>
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
8000c50c:	48 f9       	lddpc	r9,8000c548 <fat_delete_file+0xd8>
8000c50e:	30 08       	mov	r8,0
8000c510:	93 38       	st.w	r9[0xc],r8
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
8000c512:	30 3c       	mov	r12,3
8000c514:	f0 1f 00 0e 	mcall	8000c54c <fat_delete_file+0xdc>
8000c518:	18 98       	mov	r8,r12
8000c51a:	58 08       	cp.w	r8,0
8000c51c:	c0 51       	brne	8000c526 <fat_delete_file+0xb6>
         return FALSE;
8000c51e:	30 08       	mov	r8,0
8000c520:	ef 48 ff f0 	st.w	r7[-16],r8
8000c524:	c0 48       	rjmp	8000c52c <fat_delete_file+0xbc>
   }

   return TRUE;
8000c526:	30 18       	mov	r8,1
8000c528:	ef 48 ff f0 	st.w	r7[-16],r8
8000c52c:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
8000c530:	10 9c       	mov	r12,r8
8000c532:	2f cd       	sub	sp,-16
8000c534:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c538:	80 00       	ld.sh	r0,r0[0x0]
8000c53a:	a1 84       	lsr	r4,0x0
8000c53c:	80 00       	ld.sh	r0,r0[0x0]
8000c53e:	aa 4c       	st.h	r5[0x8],r12
8000c540:	80 00       	ld.sh	r0,r0[0x0]
8000c542:	ab 74       	lsl	r4,0xb
8000c544:	00 00       	add	r0,r0
8000c546:	0e 3c       	cp.w	r12,r7
8000c548:	00 00       	add	r0,r0
8000c54a:	0b 1c       	ld.sh	r12,r5++
8000c54c:	80 00       	ld.sh	r0,r0[0x0]
8000c54e:	9e b0       	ld.uh	r0,pc[0x6]

8000c550 <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remainning (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
Bool  fat_allocfreespace( void )
{
8000c550:	eb cd 40 80 	pushm	r7,lr
8000c554:	1a 97       	mov	r7,sp
8000c556:	20 2d       	sub	sp,8
   // Flag to signal the first step which search the first free cluster of the new list
   Bool first_cluster_free_is_found = FALSE;
8000c558:	30 08       	mov	r8,0
8000c55a:	ef 68 ff fe 	st.b	r7[-2],r8
   // If TRUE then use a quick procedure but don't scan all FAT else use a slow proceudre but scan all FAT
   Bool b_quick_find = TRUE;
8000c55e:	30 18       	mov	r8,1
8000c560:	ef 68 ff ff 	st.b	r7[-1],r8

   if( Is_fat32 )
8000c564:	4f 38       	lddpc	r8,8000c730 <fat_allocfreespace+0x1e0>
8000c566:	11 89       	ld.ub	r9,r8[0x0]
8000c568:	30 38       	mov	r8,3
8000c56a:	f0 09 18 00 	cp.b	r9,r8
8000c56e:	c0 b1       	brne	8000c584 <fat_allocfreespace+0x34>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
8000c570:	3f fc       	mov	r12,-1
8000c572:	f0 1f 00 71 	mcall	8000c734 <fat_allocfreespace+0x1e4>
8000c576:	18 98       	mov	r8,r12
8000c578:	58 08       	cp.w	r8,0
8000c57a:	c0 51       	brne	8000c584 <fat_allocfreespace+0x34>
         return FALSE;
8000c57c:	30 08       	mov	r8,0
8000c57e:	ef 48 ff f8 	st.w	r7[-8],r8
8000c582:	cd 08       	rjmp	8000c722 <fat_allocfreespace+0x1d2>
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
8000c584:	4e d8       	lddpc	r8,8000c738 <fat_allocfreespace+0x1e8>
8000c586:	11 89       	ld.ub	r9,r8[0x0]
8000c588:	3f f8       	mov	r8,-1
8000c58a:	f0 09 18 00 	cp.b	r9,r8
8000c58e:	c0 51       	brne	8000c598 <fat_allocfreespace+0x48>
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
8000c590:	4e b9       	lddpc	r9,8000c73c <fat_allocfreespace+0x1ec>
8000c592:	30 28       	mov	r8,2
8000c594:	93 08       	st.w	r9[0x0],r8
8000c596:	c0 78       	rjmp	8000c5a4 <fat_allocfreespace+0x54>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
8000c598:	4e 88       	lddpc	r8,8000c738 <fat_allocfreespace+0x1e8>
8000c59a:	70 08       	ld.w	r8,r8[0x0]
8000c59c:	f0 c9 ff ff 	sub	r9,r8,-1
8000c5a0:	4e 78       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c5a2:	91 09       	st.w	r8[0x0],r9
   }

   fat_clear_info_fat_mod();
8000c5a4:	f0 1f 00 67 	mcall	8000c740 <fat_allocfreespace+0x1f0>
8000c5a8:	c9 a8       	rjmp	8000c6dc <fat_allocfreespace+0x18c>
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
8000c5aa:	30 0c       	mov	r12,0
8000c5ac:	f0 1f 00 66 	mcall	8000c744 <fat_allocfreespace+0x1f4>
8000c5b0:	18 98       	mov	r8,r12
8000c5b2:	58 08       	cp.w	r8,0
8000c5b4:	c0 51       	brne	8000c5be <fat_allocfreespace+0x6e>
         return FALSE;
8000c5b6:	30 08       	mov	r8,0
8000c5b8:	ef 48 ff f8 	st.w	r7[-8],r8
8000c5bc:	cb 38       	rjmp	8000c722 <fat_allocfreespace+0x1d2>

      if ( 0 == fs_g_cluster.u32_val )
8000c5be:	4e 08       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c5c0:	70 18       	ld.w	r8,r8[0x4]
8000c5c2:	58 08       	cp.w	r8,0
8000c5c4:	e0 81 00 74 	brne	8000c6ac <fat_allocfreespace+0x15c>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
8000c5c8:	4d d8       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c5ca:	70 09       	ld.w	r9,r8[0x0]
8000c5cc:	4d c8       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c5ce:	91 19       	st.w	r8[0x4],r9
         if( TRUE == first_cluster_free_is_found )
8000c5d0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c5d4:	30 18       	mov	r8,1
8000c5d6:	f0 09 18 00 	cp.b	r9,r8
8000c5da:	c1 11       	brne	8000c5fc <fat_allocfreespace+0xac>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
8000c5dc:	4d 88       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c5de:	70 08       	ld.w	r8,r8[0x0]
8000c5e0:	f0 c9 00 01 	sub	r9,r8,1
8000c5e4:	4d 68       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c5e6:	91 09       	st.w	r8[0x0],r9
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000c5e8:	30 1c       	mov	r12,1
8000c5ea:	f0 1f 00 57 	mcall	8000c744 <fat_allocfreespace+0x1f4>
8000c5ee:	18 98       	mov	r8,r12
8000c5f0:	58 08       	cp.w	r8,0
8000c5f2:	c3 61       	brne	8000c65e <fat_allocfreespace+0x10e>
               return FALSE;
8000c5f4:	30 08       	mov	r8,0
8000c5f6:	ef 48 ff f8 	st.w	r7[-8],r8
8000c5fa:	c9 48       	rjmp	8000c722 <fat_allocfreespace+0x1d2>
         }
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = TRUE;
8000c5fc:	30 18       	mov	r8,1
8000c5fe:	ef 68 ff fe 	st.b	r7[-2],r8

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
8000c602:	4c e8       	lddpc	r8,8000c738 <fat_allocfreespace+0x1e8>
8000c604:	11 89       	ld.ub	r9,r8[0x0]
8000c606:	3f f8       	mov	r8,-1
8000c608:	f0 09 18 00 	cp.b	r9,r8
8000c60c:	c2 50       	breq	8000c656 <fat_allocfreespace+0x106>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
8000c60e:	4c b8       	lddpc	r8,8000c738 <fat_allocfreespace+0x1e8>
8000c610:	70 08       	ld.w	r8,r8[0x0]
8000c612:	58 08       	cp.w	r8,0
8000c614:	c1 31       	brne	8000c63a <fat_allocfreespace+0xea>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
8000c616:	4c 78       	lddpc	r8,8000c730 <fat_allocfreespace+0x1e0>
8000c618:	11 89       	ld.ub	r9,r8[0x0]
8000c61a:	30 38       	mov	r8,3
8000c61c:	f0 09 18 00 	cp.b	r9,r8
8000c620:	c0 80       	breq	8000c630 <fat_allocfreespace+0xe0>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
8000c622:	4c a9       	lddpc	r9,8000c748 <fat_allocfreespace+0x1f8>
8000c624:	31 b8       	mov	r8,27
8000c626:	b2 88       	st.b	r9[0x0],r8
                     return FALSE;
8000c628:	30 08       	mov	r8,0
8000c62a:	ef 48 ff f8 	st.w	r7[-8],r8
8000c62e:	c7 a8       	rjmp	8000c722 <fat_allocfreespace+0x1d2>
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000c630:	4c 78       	lddpc	r8,8000c74c <fat_allocfreespace+0x1fc>
8000c632:	70 59       	ld.w	r9,r8[0x14]
8000c634:	4c 28       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c636:	91 09       	st.w	r8[0x0],r9
8000c638:	c0 58       	rjmp	8000c642 <fat_allocfreespace+0xf2>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
8000c63a:	4c 08       	lddpc	r8,8000c738 <fat_allocfreespace+0x1e8>
8000c63c:	70 09       	ld.w	r9,r8[0x0]
8000c63e:	4c 08       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c640:	91 09       	st.w	r8[0x0],r9
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000c642:	30 1c       	mov	r12,1
8000c644:	f0 1f 00 40 	mcall	8000c744 <fat_allocfreespace+0x1f4>
8000c648:	18 98       	mov	r8,r12
8000c64a:	58 08       	cp.w	r8,0
8000c64c:	c0 51       	brne	8000c656 <fat_allocfreespace+0x106>
                  return FALSE;
8000c64e:	30 08       	mov	r8,0
8000c650:	ef 48 ff f8 	st.w	r7[-8],r8
8000c654:	c6 78       	rjmp	8000c722 <fat_allocfreespace+0x1d2>
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
8000c656:	4b a8       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c658:	70 19       	ld.w	r9,r8[0x4]
8000c65a:	4b 88       	lddpc	r8,8000c738 <fat_allocfreespace+0x1e8>
8000c65c:	91 09       	st.w	r8[0x0],r9
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
8000c65e:	4b 88       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c660:	70 19       	ld.w	r9,r8[0x4]
8000c662:	4b 78       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c664:	91 09       	st.w	r8[0x0],r9
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
8000c666:	4b 69       	lddpc	r9,8000c73c <fat_allocfreespace+0x1ec>
8000c668:	e0 68 ff ff 	mov	r8,65535
8000c66c:	ea 18 0f ff 	orh	r8,0xfff
8000c670:	93 18       	st.w	r9[0x4],r8
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000c672:	30 1c       	mov	r12,1
8000c674:	f0 1f 00 34 	mcall	8000c744 <fat_allocfreespace+0x1f4>
8000c678:	18 98       	mov	r8,r12
8000c67a:	58 08       	cp.w	r8,0
8000c67c:	c0 51       	brne	8000c686 <fat_allocfreespace+0x136>
            return FALSE;
8000c67e:	30 08       	mov	r8,0
8000c680:	ef 48 ff f8 	st.w	r7[-8],r8
8000c684:	c4 f8       	rjmp	8000c722 <fat_allocfreespace+0x1d2>

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
8000c686:	4a d8       	lddpc	r8,8000c738 <fat_allocfreespace+0x1e8>
8000c688:	70 19       	ld.w	r9,r8[0x4]
8000c68a:	4b 18       	lddpc	r8,8000c74c <fat_allocfreespace+0x1fc>
8000c68c:	11 98       	ld.ub	r8,r8[0x1]
8000c68e:	10 39       	cp.w	r9,r8
8000c690:	e0 8b 00 06 	brhi	8000c69c <fat_allocfreespace+0x14c>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
8000c694:	4a 99       	lddpc	r9,8000c738 <fat_allocfreespace+0x1e8>
8000c696:	30 08       	mov	r8,0
8000c698:	93 18       	st.w	r9[0x4],r8
8000c69a:	c2 88       	rjmp	8000c6ea <fat_allocfreespace+0x19a>
            break;                        // Stop loop
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
8000c69c:	4a 78       	lddpc	r8,8000c738 <fat_allocfreespace+0x1e8>
8000c69e:	70 19       	ld.w	r9,r8[0x4]
8000c6a0:	4a b8       	lddpc	r8,8000c74c <fat_allocfreespace+0x1fc>
8000c6a2:	11 98       	ld.ub	r8,r8[0x1]
8000c6a4:	10 19       	sub	r9,r8
8000c6a6:	4a 58       	lddpc	r8,8000c738 <fat_allocfreespace+0x1e8>
8000c6a8:	91 19       	st.w	r8[0x4],r9
8000c6aa:	c1 38       	rjmp	8000c6d0 <fat_allocfreespace+0x180>
      }
      else
      {
         // The next cluster is not free
         if( TRUE == first_cluster_free_is_found )
8000c6ac:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c6b0:	30 18       	mov	r8,1
8000c6b2:	f0 09 18 00 	cp.b	r9,r8
8000c6b6:	c1 a0       	breq	8000c6ea <fat_allocfreespace+0x19a>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
8000c6b8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c6bc:	30 08       	mov	r8,0
8000c6be:	f0 09 18 00 	cp.b	r9,r8
8000c6c2:	c0 70       	breq	8000c6d0 <fat_allocfreespace+0x180>
            {
               fs_g_cluster.u32_pos += 500;
8000c6c4:	49 e8       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c6c6:	70 08       	ld.w	r8,r8[0x0]
8000c6c8:	f0 c9 fe 0c 	sub	r9,r8,-500
8000c6cc:	49 c8       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c6ce:	91 09       	st.w	r8[0x0],r9
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
8000c6d0:	49 b8       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c6d2:	70 08       	ld.w	r8,r8[0x0]
8000c6d4:	f0 c9 ff ff 	sub	r9,r8,-1
8000c6d8:	49 98       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c6da:	91 09       	st.w	r8[0x0],r9

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
8000c6dc:	49 88       	lddpc	r8,8000c73c <fat_allocfreespace+0x1ec>
8000c6de:	70 09       	ld.w	r9,r8[0x0]
8000c6e0:	49 b8       	lddpc	r8,8000c74c <fat_allocfreespace+0x1fc>
8000c6e2:	70 28       	ld.w	r8,r8[0x8]
8000c6e4:	10 39       	cp.w	r9,r8
8000c6e6:	fe 93 ff 62 	brlo	8000c5aa <fat_allocfreespace+0x5a>
         }
      }
   }

   // End of alloc
   if( FALSE == first_cluster_free_is_found )
8000c6ea:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c6ee:	30 08       	mov	r8,0
8000c6f0:	f0 09 18 00 	cp.b	r9,r8
8000c6f4:	c1 21       	brne	8000c718 <fat_allocfreespace+0x1c8>
   {
      if( b_quick_find )
8000c6f6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c6fa:	30 08       	mov	r8,0
8000c6fc:	f0 09 18 00 	cp.b	r9,r8
8000c700:	c0 50       	breq	8000c70a <fat_allocfreespace+0x1ba>
      {
         // Retry in normal mode to scann all FAT (= no quick mode)
         b_quick_find = FALSE;
8000c702:	30 08       	mov	r8,0
8000c704:	ef 68 ff ff 	st.b	r7[-1],r8
8000c708:	c4 4b       	rjmp	8000c590 <fat_allocfreespace+0x40>
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
8000c70a:	49 09       	lddpc	r9,8000c748 <fat_allocfreespace+0x1f8>
8000c70c:	31 b8       	mov	r8,27
8000c70e:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
8000c710:	30 08       	mov	r8,0
8000c712:	ef 48 ff f8 	st.w	r7[-8],r8
8000c716:	c0 68       	rjmp	8000c722 <fat_allocfreespace+0x1d2>
   }

   return fat_update_fat2();
8000c718:	f0 1f 00 0e 	mcall	8000c750 <fat_allocfreespace+0x200>
8000c71c:	18 98       	mov	r8,r12
8000c71e:	ef 48 ff f8 	st.w	r7[-8],r8
8000c722:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000c726:	10 9c       	mov	r12,r8
8000c728:	2f ed       	sub	sp,-8
8000c72a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c72e:	00 00       	add	r0,r0
8000c730:	00 00       	add	r0,r0
8000c732:	0e 3c       	cp.w	r12,r7
8000c734:	80 00       	ld.sh	r0,r0[0x0]
8000c736:	b7 08       	ld.d	r8,r11
8000c738:	00 00       	add	r0,r0
8000c73a:	10 18       	sub	r8,r8
8000c73c:	00 00       	add	r0,r0
8000c73e:	10 10       	sub	r0,r8
8000c740:	80 00       	ld.sh	r0,r0[0x0]
8000c742:	c7 54       	brge	8000c82c <fat_clear_cluster+0xc>
8000c744:	80 00       	ld.sh	r0,r0[0x0]
8000c746:	92 ac       	ld.uh	r12,r9[0x4]
8000c748:	00 00       	add	r0,r0
8000c74a:	0e 40       	or	r0,r7
8000c74c:	00 00       	add	r0,r0
8000c74e:	0d 58       	ld.sh	r8,--r6
8000c750:	80 00       	ld.sh	r0,r0[0x0]
8000c752:	c7 74       	brge	8000c840 <fat_clear_cluster+0x20>

8000c754 <fat_clear_info_fat_mod>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
8000c754:	eb cd 40 80 	pushm	r7,lr
8000c758:	1a 97       	mov	r7,sp
   fs_g_u16_first_mod_fat = 0xFFFF;
8000c75a:	48 59       	lddpc	r9,8000c76c <fat_clear_info_fat_mod+0x18>
8000c75c:	3f f8       	mov	r8,-1
8000c75e:	b2 08       	st.h	r9[0x0],r8
   fs_g_u16_last_mod_fat = 0;
8000c760:	48 49       	lddpc	r9,8000c770 <fat_clear_info_fat_mod+0x1c>
8000c762:	30 08       	mov	r8,0
8000c764:	b2 08       	st.h	r9[0x0],r8
}
8000c766:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c76a:	00 00       	add	r0,r0
8000c76c:	00 00       	add	r0,r0
8000c76e:	0e 44       	or	r4,r7
8000c770:	00 00       	add	r0,r0
8000c772:	10 20       	rsub	r0,r8

8000c774 <fat_update_fat2>:
//!
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool  fat_update_fat2( void )
{
8000c774:	eb cd 40 80 	pushm	r7,lr
8000c778:	1a 97       	mov	r7,sp
8000c77a:	20 1d       	sub	sp,4
8000c77c:	c3 48       	rjmp	8000c7e4 <fat_update_fat2+0x70>
  while( fs_g_u16_first_mod_fat <= fs_g_u16_last_mod_fat )
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u16_first_mod_fat;
8000c77e:	4a 38       	lddpc	r8,8000c808 <fat_update_fat2+0x94>
8000c780:	70 39       	ld.w	r9,r8[0xc]
8000c782:	4a 38       	lddpc	r8,8000c80c <fat_update_fat2+0x98>
8000c784:	90 08       	ld.sh	r8,r8[0x0]
8000c786:	5c 78       	castu.h	r8
8000c788:	10 09       	add	r9,r8
8000c78a:	4a 28       	lddpc	r8,8000c810 <fat_update_fat2+0x9c>
8000c78c:	91 09       	st.w	r8[0x0],r9
     // Read FAT1
      if( !fat_cache_read_sector( TRUE ))
8000c78e:	30 1c       	mov	r12,1
8000c790:	f0 1f 00 21 	mcall	8000c814 <fat_update_fat2+0xa0>
8000c794:	18 98       	mov	r8,r12
8000c796:	58 08       	cp.w	r8,0
8000c798:	c0 51       	brne	8000c7a2 <fat_update_fat2+0x2e>
         return FALSE;
8000c79a:	30 08       	mov	r8,0
8000c79c:	ef 48 ff fc 	st.w	r7[-4],r8
8000c7a0:	c2 d8       	rjmp	8000c7fa <fat_update_fat2+0x86>
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + ((U32)fs_g_u16_first_mod_fat + fs_g_nav.u16_fat_size);
8000c7a2:	49 a8       	lddpc	r8,8000c808 <fat_update_fat2+0x94>
8000c7a4:	70 3a       	ld.w	r10,r8[0xc]
8000c7a6:	49 a8       	lddpc	r8,8000c80c <fat_update_fat2+0x98>
8000c7a8:	90 08       	ld.sh	r8,r8[0x0]
8000c7aa:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000c7ae:	49 78       	lddpc	r8,8000c808 <fat_update_fat2+0x94>
8000c7b0:	90 18       	ld.sh	r8,r8[0x2]
8000c7b2:	5c 78       	castu.h	r8
8000c7b4:	f2 08 00 08 	add	r8,r9,r8
8000c7b8:	f4 08 00 09 	add	r9,r10,r8
8000c7bc:	49 58       	lddpc	r8,8000c810 <fat_update_fat2+0x9c>
8000c7be:	91 09       	st.w	r8[0x0],r9
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( FALSE ))
8000c7c0:	30 0c       	mov	r12,0
8000c7c2:	f0 1f 00 15 	mcall	8000c814 <fat_update_fat2+0xa0>
8000c7c6:	18 98       	mov	r8,r12
8000c7c8:	58 08       	cp.w	r8,0
8000c7ca:	c0 51       	brne	8000c7d4 <fat_update_fat2+0x60>
         return FALSE;
8000c7cc:	30 08       	mov	r8,0
8000c7ce:	ef 48 ff fc 	st.w	r7[-4],r8
8000c7d2:	c1 48       	rjmp	8000c7fa <fat_update_fat2+0x86>
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
8000c7d4:	f0 1f 00 11 	mcall	8000c818 <fat_update_fat2+0xa4>
     fs_g_u16_first_mod_fat++;
8000c7d8:	48 d8       	lddpc	r8,8000c80c <fat_update_fat2+0x98>
8000c7da:	90 08       	ld.sh	r8,r8[0x0]
8000c7dc:	2f f8       	sub	r8,-1
8000c7de:	5c 88       	casts.h	r8
8000c7e0:	48 b9       	lddpc	r9,8000c80c <fat_update_fat2+0x98>
8000c7e2:	b2 08       	st.h	r9[0x0],r8
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool  fat_update_fat2( void )
{
  while( fs_g_u16_first_mod_fat <= fs_g_u16_last_mod_fat )
8000c7e4:	48 a8       	lddpc	r8,8000c80c <fat_update_fat2+0x98>
8000c7e6:	90 09       	ld.sh	r9,r8[0x0]
8000c7e8:	48 d8       	lddpc	r8,8000c81c <fat_update_fat2+0xa8>
8000c7ea:	90 08       	ld.sh	r8,r8[0x0]
8000c7ec:	f0 09 19 00 	cp.h	r9,r8
8000c7f0:	fe 98 ff c7 	brls	8000c77e <fat_update_fat2+0xa>
         return FALSE;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
     fs_g_u16_first_mod_fat++;
  }
  return TRUE;
8000c7f4:	30 18       	mov	r8,1
8000c7f6:	ef 48 ff fc 	st.w	r7[-4],r8
8000c7fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c7fe:	10 9c       	mov	r12,r8
8000c800:	2f fd       	sub	sp,-4
8000c802:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c806:	00 00       	add	r0,r0
8000c808:	00 00       	add	r0,r0
8000c80a:	0d 58       	ld.sh	r8,--r6
8000c80c:	00 00       	add	r0,r0
8000c80e:	0e 44       	or	r4,r7
8000c810:	00 00       	add	r0,r0
8000c812:	0b 18       	ld.sh	r8,r5++
8000c814:	80 00       	ld.sh	r0,r0[0x0]
8000c816:	aa 74       	st.h	r5[0xe],r4
8000c818:	80 00       	ld.sh	r0,r0[0x0]
8000c81a:	ab 74       	lsl	r4,0xb
8000c81c:	00 00       	add	r0,r0
8000c81e:	10 20       	rsub	r0,r8

8000c820 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
Bool  fat_clear_cluster( void )
{
8000c820:	eb cd 40 80 	pushm	r7,lr
8000c824:	1a 97       	mov	r7,sp
8000c826:	20 2d       	sub	sp,8
   U8 u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
8000c828:	4a 69       	lddpc	r9,8000c8c0 <fat_clear_cluster+0xa0>
8000c82a:	30 08       	mov	r8,0
8000c82c:	93 18       	st.w	r9[0x4],r8
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, FALSE ))
8000c82e:	30 0b       	mov	r11,0
8000c830:	30 2c       	mov	r12,2
8000c832:	f0 1f 00 25 	mcall	8000c8c4 <fat_clear_cluster+0xa4>
8000c836:	18 98       	mov	r8,r12
8000c838:	58 08       	cp.w	r8,0
8000c83a:	c0 51       	brne	8000c844 <fat_clear_cluster+0x24>
      return FALSE;
8000c83c:	30 08       	mov	r8,0
8000c83e:	ef 48 ff f8 	st.w	r7[-8],r8
8000c842:	c3 88       	rjmp	8000c8b2 <fat_clear_cluster+0x92>

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
8000c844:	49 f8       	lddpc	r8,8000c8c0 <fat_clear_cluster+0xa0>
8000c846:	70 09       	ld.w	r9,r8[0x0]
8000c848:	4a 08       	lddpc	r8,8000c8c8 <fat_clear_cluster+0xa8>
8000c84a:	11 98       	ld.ub	r8,r8[0x1]
8000c84c:	f2 08 00 08 	add	r8,r9,r8
8000c850:	f0 c9 00 01 	sub	r9,r8,1
8000c854:	49 e8       	lddpc	r8,8000c8cc <fat_clear_cluster+0xac>
8000c856:	91 09       	st.w	r8[0x0],r9
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
8000c858:	30 08       	mov	r8,0
8000c85a:	ef 68 ff ff 	st.b	r7[-1],r8
8000c85e:	c2 08       	rjmp	8000c89e <fat_clear_cluster+0x7e>
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector inforamtion but don't read data from memory
      if( !fat_cache_read_sector( FALSE ))
8000c860:	30 0c       	mov	r12,0
8000c862:	f0 1f 00 1c 	mcall	8000c8d0 <fat_clear_cluster+0xb0>
8000c866:	18 98       	mov	r8,r12
8000c868:	58 08       	cp.w	r8,0
8000c86a:	c0 51       	brne	8000c874 <fat_clear_cluster+0x54>
         return FALSE;
8000c86c:	30 08       	mov	r8,0
8000c86e:	ef 48 ff f8 	st.w	r7[-8],r8
8000c872:	c2 08       	rjmp	8000c8b2 <fat_clear_cluster+0x92>

      if(0 == u8_loop)
8000c874:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c878:	30 08       	mov	r8,0
8000c87a:	f0 09 18 00 	cp.b	r9,r8
8000c87e:	c0 31       	brne	8000c884 <fat_clear_cluster+0x64>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
8000c880:	f0 1f 00 15 	mcall	8000c8d4 <fat_clear_cluster+0xb4>
      }
      fat_cache_mark_sector_as_dirty();
8000c884:	f0 1f 00 15 	mcall	8000c8d8 <fat_clear_cluster+0xb8>
      fs_gu32_addrsector--;         // go to previous sector
8000c888:	49 18       	lddpc	r8,8000c8cc <fat_clear_cluster+0xac>
8000c88a:	70 08       	ld.w	r8,r8[0x0]
8000c88c:	f0 c9 00 01 	sub	r9,r8,1
8000c890:	48 f8       	lddpc	r8,8000c8cc <fat_clear_cluster+0xac>
8000c892:	91 09       	st.w	r8[0x0],r9

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
8000c894:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c898:	2f f8       	sub	r8,-1
8000c89a:	ef 68 ff ff 	st.b	r7[-1],r8
      return FALSE;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
8000c89e:	48 b8       	lddpc	r8,8000c8c8 <fat_clear_cluster+0xa8>
8000c8a0:	11 99       	ld.ub	r9,r8[0x1]
8000c8a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c8a6:	f2 08 18 00 	cp.b	r8,r9
8000c8aa:	cd b1       	brne	8000c860 <fat_clear_cluster+0x40>
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
   }
   return TRUE;
8000c8ac:	30 18       	mov	r8,1
8000c8ae:	ef 48 ff f8 	st.w	r7[-8],r8
8000c8b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000c8b6:	10 9c       	mov	r12,r8
8000c8b8:	2f ed       	sub	sp,-8
8000c8ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8be:	00 00       	add	r0,r0
8000c8c0:	00 00       	add	r0,r0
8000c8c2:	10 18       	sub	r8,r8
8000c8c4:	80 00       	ld.sh	r0,r0[0x0]
8000c8c6:	8d cc       	st.w	r6[0x30],r12
8000c8c8:	00 00       	add	r0,r0
8000c8ca:	0d 58       	ld.sh	r8,--r6
8000c8cc:	00 00       	add	r0,r0
8000c8ce:	0b 18       	ld.sh	r8,r5++
8000c8d0:	80 00       	ld.sh	r0,r0[0x0]
8000c8d2:	aa 74       	st.h	r5[0xe],r4
8000c8d4:	80 00       	ld.sh	r0,r0[0x0]
8000c8d6:	ab 54       	asr	r4,0xb
8000c8d8:	80 00       	ld.sh	r0,r0[0x0]
8000c8da:	ab 74       	lsl	r4,0xb

8000c8dc <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
8000c8dc:	eb cd 40 80 	pushm	r7,lr
8000c8e0:	1a 97       	mov	r7,sp
8000c8e2:	20 1d       	sub	sp,4
#if ( (FS_ASCII   == ENABLED) && (FS_UNICODE == ENABLED))
   g_b_unicode = TRUE;
#endif
   g_b_string_length = FALSE;
8000c8e4:	49 99       	lddpc	r9,8000c948 <nav_reset+0x6c>
8000c8e6:	30 08       	mov	r8,0
8000c8e8:	b2 88       	st.b	r9[0x0],r8
   g_b_no_check_disk = FALSE;
8000c8ea:	49 99       	lddpc	r9,8000c94c <nav_reset+0x70>
8000c8ec:	30 08       	mov	r8,0
8000c8ee:	b2 88       	st.b	r9[0x0],r8

   fat_cache_reset();
8000c8f0:	f0 1f 00 18 	mcall	8000c950 <nav_reset+0x74>
   fat_cache_clusterlist_reset();
8000c8f4:	f0 1f 00 18 	mcall	8000c954 <nav_reset+0x78>

#if (FS_NB_NAVIGATOR > 1)
   {
   U8 i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
8000c8f8:	30 08       	mov	r8,0
8000c8fa:	ef 68 ff ff 	st.b	r7[-1],r8
8000c8fe:	c1 88       	rjmp	8000c92e <nav_reset+0x52>
   {
      nav_select(i);
8000c900:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c904:	10 9c       	mov	r12,r8
8000c906:	f0 1f 00 15 	mcall	8000c958 <nav_reset+0x7c>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000c90a:	49 59       	lddpc	r9,8000c95c <nav_reset+0x80>
8000c90c:	30 08       	mov	r8,0
8000c90e:	b2 88       	st.b	r9[0x0],r8
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
8000c910:	49 49       	lddpc	r9,8000c960 <nav_reset+0x84>
8000c912:	3f f8       	mov	r8,-1
8000c914:	b2 88       	st.b	r9[0x0],r8
#if (FS_MULTI_PARTITION  ==  ENABLED)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
8000c916:	49 49       	lddpc	r9,8000c964 <nav_reset+0x88>
8000c918:	30 08       	mov	r8,0
8000c91a:	b2 88       	st.b	r9[0x0],r8
      fs_g_nav.b_mode_nav_single = FALSE;          // By default display files and directories
8000c91c:	49 19       	lddpc	r9,8000c960 <nav_reset+0x84>
8000c91e:	30 08       	mov	r8,0
8000c920:	f3 68 00 29 	st.b	r9[41],r8

#if (FS_NB_NAVIGATOR > 1)
   {
   U8 i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
8000c924:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c928:	2f f8       	sub	r8,-1
8000c92a:	ef 68 ff ff 	st.b	r7[-1],r8
8000c92e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c932:	30 a8       	mov	r8,10
8000c934:	f0 09 18 00 	cp.b	r9,r8
8000c938:	ce 41       	brne	8000c900 <nav_reset+0x24>
#endif
      Fat_file_close();                            // By default no file is opened
      fs_g_nav.b_mode_nav_single = FALSE;          // By default display files and directories
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
8000c93a:	48 c9       	lddpc	r9,8000c968 <nav_reset+0x8c>
8000c93c:	30 08       	mov	r8,0
8000c93e:	b2 88       	st.b	r9[0x0],r8
#  if (FS_MULTI_PARTITION  ==  ENABLED)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
8000c940:	2f fd       	sub	sp,-4
8000c942:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c946:	00 00       	add	r0,r0
8000c948:	00 00       	add	r0,r0
8000c94a:	0e 41       	or	r1,r7
8000c94c:	00 00       	add	r0,r0
8000c94e:	0b 2e       	ld.uh	lr,r5++
8000c950:	80 00       	ld.sh	r0,r0[0x0]
8000c952:	ab 30       	mul	r0,r5
8000c954:	80 00       	ld.sh	r0,r0[0x0]
8000c956:	98 f4       	ld.uh	r4,r12[0xe]
8000c958:	80 00       	ld.sh	r0,r0[0x0]
8000c95a:	c9 6c       	rcall	8000ca86 <nav_drive_get+0x2>
8000c95c:	00 00       	add	r0,r0
8000c95e:	0e 3c       	cp.w	r12,r7
8000c960:	00 00       	add	r0,r0
8000c962:	0d 58       	ld.sh	r8,--r6
8000c964:	00 00       	add	r0,r0
8000c966:	0b 1c       	ld.sh	r12,r5++
8000c968:	00 00       	add	r0,r0
8000c96a:	10 3c       	cp.w	r12,r8

8000c96c <nav_select>:
//!
//! @return    FALSE if ID navigator don't exist
//! @return    TRUE otherwise
//!
Bool  nav_select( U8 u8_idnav )
{
8000c96c:	eb cd 40 80 	pushm	r7,lr
8000c970:	1a 97       	mov	r7,sp
8000c972:	20 2d       	sub	sp,8
8000c974:	18 98       	mov	r8,r12
8000c976:	ef 68 ff fc 	st.b	r7[-4],r8
   if( FS_NB_NAVIGATOR <= u8_idnav )
8000c97a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c97e:	30 98       	mov	r8,9
8000c980:	f0 09 18 00 	cp.b	r9,r8
8000c984:	e0 88 00 09 	brls	8000c996 <nav_select+0x2a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
8000c988:	49 39       	lddpc	r9,8000c9d4 <nav_select+0x68>
8000c98a:	32 78       	mov	r8,39
8000c98c:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
8000c98e:	30 08       	mov	r8,0
8000c990:	ef 48 ff f8 	st.w	r7[-8],r8
8000c994:	c1 98       	rjmp	8000c9c6 <nav_select+0x5a>
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
8000c996:	49 18       	lddpc	r8,8000c9d8 <nav_select+0x6c>
8000c998:	11 89       	ld.ub	r9,r8[0x0]
8000c99a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c99e:	f2 08 18 00 	cp.b	r8,r9
8000c9a2:	c0 f0       	breq	8000c9c0 <nav_select+0x54>
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
8000c9a4:	48 d8       	lddpc	r8,8000c9d8 <nav_select+0x6c>
8000c9a6:	11 88       	ld.ub	r8,r8[0x0]
8000c9a8:	10 9c       	mov	r12,r8
8000c9aa:	f0 1f 00 0d 	mcall	8000c9dc <nav_select+0x70>
      fat_invert_nav( u8_idnav );               // Select new navigator
8000c9ae:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c9b2:	10 9c       	mov	r12,r8
8000c9b4:	f0 1f 00 0a 	mcall	8000c9dc <nav_select+0x70>
      fs_g_u8_nav_selected = u8_idnav;
8000c9b8:	48 89       	lddpc	r9,8000c9d8 <nav_select+0x6c>
8000c9ba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c9be:	b2 88       	st.b	r9[0x0],r8
   }
#endif
   return TRUE;
8000c9c0:	30 18       	mov	r8,1
8000c9c2:	ef 48 ff f8 	st.w	r7[-8],r8
8000c9c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000c9ca:	10 9c       	mov	r12,r8
8000c9cc:	2f ed       	sub	sp,-8
8000c9ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9d2:	00 00       	add	r0,r0
8000c9d4:	00 00       	add	r0,r0
8000c9d6:	0e 40       	or	r0,r7
8000c9d8:	00 00       	add	r0,r0
8000c9da:	10 3c       	cp.w	r12,r8
8000c9dc:	80 00       	ld.sh	r0,r0[0x0]
8000c9de:	ad 1c       	ld.d	r12,--r6

8000c9e0 <nav_drive_nb>:
//! @verbatim
//! This value may be dynamic because it depends of memory drivers (e.g. Mass Storage disk on USB host mode)
//! @endverbatim
//!
U8    nav_drive_nb( void )
{
8000c9e0:	eb cd 40 80 	pushm	r7,lr
8000c9e4:	1a 97       	mov	r7,sp
   return get_nb_lun(); // Number of devices = Number of lun
8000c9e6:	f0 1f 00 04 	mcall	8000c9f4 <nav_drive_nb+0x14>
8000c9ea:	18 98       	mov	r8,r12
}
8000c9ec:	10 9c       	mov	r12,r8
8000c9ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9f2:	00 00       	add	r0,r0
8000c9f4:	80 00       	ld.sh	r0,r0[0x0]
8000c9f6:	da 14       	*unknown*

8000c9f8 <nav_drive_set>:
//!
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool  nav_drive_set( U8 u8_number )
{
8000c9f8:	eb cd 40 80 	pushm	r7,lr
8000c9fc:	1a 97       	mov	r7,sp
8000c9fe:	20 2d       	sub	sp,8
8000ca00:	18 98       	mov	r8,r12
8000ca02:	ef 68 ff fc 	st.b	r7[-4],r8
   if ( !fat_check_noopen() )
8000ca06:	f0 1f 00 1b 	mcall	8000ca70 <nav_drive_set+0x78>
8000ca0a:	18 98       	mov	r8,r12
8000ca0c:	58 08       	cp.w	r8,0
8000ca0e:	c0 51       	brne	8000ca18 <nav_drive_set+0x20>
      return FALSE;
8000ca10:	30 08       	mov	r8,0
8000ca12:	ef 48 ff f8 	st.w	r7[-8],r8
8000ca16:	c2 68       	rjmp	8000ca62 <nav_drive_set+0x6a>

   if (u8_number >= get_nb_lun() )
8000ca18:	f0 1f 00 17 	mcall	8000ca74 <nav_drive_set+0x7c>
8000ca1c:	18 98       	mov	r8,r12
8000ca1e:	10 99       	mov	r9,r8
8000ca20:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ca24:	f2 08 18 00 	cp.b	r8,r9
8000ca28:	c0 83       	brcs	8000ca38 <nav_drive_set+0x40>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
8000ca2a:	49 49       	lddpc	r9,8000ca78 <nav_drive_set+0x80>
8000ca2c:	30 68       	mov	r8,6
8000ca2e:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
8000ca30:	30 08       	mov	r8,0
8000ca32:	ef 48 ff f8 	st.w	r7[-8],r8
8000ca36:	c1 68       	rjmp	8000ca62 <nav_drive_set+0x6a>
   }

   if ( fs_g_nav.u8_lun == u8_number)
8000ca38:	49 18       	lddpc	r8,8000ca7c <nav_drive_set+0x84>
8000ca3a:	11 89       	ld.ub	r9,r8[0x0]
8000ca3c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ca40:	f2 08 18 00 	cp.b	r8,r9
8000ca44:	c0 51       	brne	8000ca4e <nav_drive_set+0x56>
      return TRUE;   // It is the same drive number
8000ca46:	30 18       	mov	r8,1
8000ca48:	ef 48 ff f8 	st.w	r7[-8],r8
8000ca4c:	c0 b8       	rjmp	8000ca62 <nav_drive_set+0x6a>

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
8000ca4e:	48 c9       	lddpc	r9,8000ca7c <nav_drive_set+0x84>
8000ca50:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ca54:	b2 88       	st.b	r9[0x0],r8
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
8000ca56:	48 b9       	lddpc	r9,8000ca80 <nav_drive_set+0x88>
8000ca58:	30 08       	mov	r8,0
8000ca5a:	b2 88       	st.b	r9[0x0],r8
#if (FS_MULTI_PARTITION  ==  ENABLED)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return TRUE;
8000ca5c:	30 18       	mov	r8,1
8000ca5e:	ef 48 ff f8 	st.w	r7[-8],r8
8000ca62:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000ca66:	10 9c       	mov	r12,r8
8000ca68:	2f ed       	sub	sp,-8
8000ca6a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca6e:	00 00       	add	r0,r0
8000ca70:	80 00       	ld.sh	r0,r0[0x0]
8000ca72:	8b a0       	st.w	r5[0x28],r0
8000ca74:	80 00       	ld.sh	r0,r0[0x0]
8000ca76:	da 14       	*unknown*
8000ca78:	00 00       	add	r0,r0
8000ca7a:	0e 40       	or	r0,r7
8000ca7c:	00 00       	add	r0,r0
8000ca7e:	0d 58       	ld.sh	r8,--r6
8000ca80:	00 00       	add	r0,r0
8000ca82:	0e 3c       	cp.w	r12,r7

8000ca84 <nav_drive_get>:
//!
//! @return    0 to nav_drive_nb()-1
//! @return    0xFF in case of no drive selected
//!
U8    nav_drive_get( void )
{
8000ca84:	eb cd 40 80 	pushm	r7,lr
8000ca88:	1a 97       	mov	r7,sp
#if (FS_MULTI_PARTITION  ==  ENABLED)
   if(0xFF == fs_g_nav.u8_lun)
      return 0xFF;
   return ((fs_g_nav.u8_lun*4) + fs_g_nav.u8_partition); // Maximum 4 partitions per device
#else
   return (fs_g_nav.u8_lun);
8000ca8a:	48 38       	lddpc	r8,8000ca94 <nav_drive_get+0x10>
8000ca8c:	11 88       	ld.ub	r8,r8[0x0]
#endif
}
8000ca8e:	10 9c       	mov	r12,r8
8000ca90:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca94:	00 00       	add	r0,r0
8000ca96:	0d 58       	ld.sh	r8,--r6

8000ca98 <nav_drive_getname>:
//!
//! @return    'A','B',...
//! @return    'X', in case of no drive selected
//!
U8    nav_drive_getname( void )
{
8000ca98:	eb cd 40 80 	pushm	r7,lr
8000ca9c:	1a 97       	mov	r7,sp
8000ca9e:	20 1d       	sub	sp,4
   if(0xFF == fs_g_nav.u8_lun)
8000caa0:	48 b8       	lddpc	r8,8000cacc <nav_drive_getname+0x34>
8000caa2:	11 89       	ld.ub	r9,r8[0x0]
8000caa4:	3f f8       	mov	r8,-1
8000caa6:	f0 09 18 00 	cp.b	r9,r8
8000caaa:	c0 51       	brne	8000cab4 <nav_drive_getname+0x1c>
      return 'X';
8000caac:	35 88       	mov	r8,88
8000caae:	ef 48 ff fc 	st.w	r7[-4],r8
8000cab2:	c0 78       	rjmp	8000cac0 <nav_drive_getname+0x28>
#if (FS_MULTI_PARTITION  ==  ENABLED)
   return ('A' + (fs_g_nav.u8_lun*4) + fs_g_nav.u8_partition); // Maximum 4 partitions per device
#else
   return ('A' + fs_g_nav.u8_lun);
8000cab4:	48 68       	lddpc	r8,8000cacc <nav_drive_getname+0x34>
8000cab6:	11 88       	ld.ub	r8,r8[0x0]
8000cab8:	2b f8       	sub	r8,-65
8000caba:	5c 58       	castu.b	r8
8000cabc:	ef 48 ff fc 	st.w	r7[-4],r8
8000cac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
#endif
}
8000cac4:	10 9c       	mov	r12,r8
8000cac6:	2f fd       	sub	sp,-4
8000cac8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cacc:	00 00       	add	r0,r0
8000cace:	0d 58       	ld.sh	r8,--r6

8000cad0 <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
Bool  nav_partition_mount( void )
{
8000cad0:	eb cd 40 80 	pushm	r7,lr
8000cad4:	1a 97       	mov	r7,sp
8000cad6:	20 1d       	sub	sp,4
   if ( !fat_check_noopen() )
8000cad8:	f0 1f 00 11 	mcall	8000cb1c <nav_partition_mount+0x4c>
8000cadc:	18 98       	mov	r8,r12
8000cade:	58 08       	cp.w	r8,0
8000cae0:	c0 51       	brne	8000caea <nav_partition_mount+0x1a>
      return FALSE;
8000cae2:	30 08       	mov	r8,0
8000cae4:	ef 48 ff fc 	st.w	r7[-4],r8
8000cae8:	c1 38       	rjmp	8000cb0e <nav_partition_mount+0x3e>

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
8000caea:	48 e8       	lddpc	r8,8000cb20 <nav_partition_mount+0x50>
8000caec:	11 88       	ld.ub	r8,r8[0x0]
8000caee:	58 08       	cp.w	r8,0
8000caf0:	c0 a0       	breq	8000cb04 <nav_partition_mount+0x34>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
8000caf2:	48 d9       	lddpc	r9,8000cb24 <nav_partition_mount+0x54>
8000caf4:	30 08       	mov	r8,0
8000caf6:	93 78       	st.w	r9[0x1c],r8
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
8000caf8:	f0 1f 00 0c 	mcall	8000cb28 <nav_partition_mount+0x58>
      return TRUE;
8000cafc:	30 18       	mov	r8,1
8000cafe:	ef 48 ff fc 	st.w	r7[-4],r8
8000cb02:	c0 68       	rjmp	8000cb0e <nav_partition_mount+0x3e>
   }

   return fat_mount();
8000cb04:	f0 1f 00 0a 	mcall	8000cb2c <nav_partition_mount+0x5c>
8000cb08:	18 98       	mov	r8,r12
8000cb0a:	ef 48 ff fc 	st.w	r7[-4],r8
8000cb0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000cb12:	10 9c       	mov	r12,r8
8000cb14:	2f fd       	sub	sp,-4
8000cb16:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb1a:	00 00       	add	r0,r0
8000cb1c:	80 00       	ld.sh	r0,r0[0x0]
8000cb1e:	8b a0       	st.w	r5[0x28],r0
8000cb20:	00 00       	add	r0,r0
8000cb22:	0e 3c       	cp.w	r12,r7
8000cb24:	00 00       	add	r0,r0
8000cb26:	0d 58       	ld.sh	r8,--r6
8000cb28:	80 00       	ld.sh	r0,r0[0x0]
8000cb2a:	a4 34       	st.h	r2[0x6],r4
8000cb2c:	80 00       	ld.sh	r0,r0[0x0]
8000cb2e:	b1 04       	ld.d	r4,r8

8000cb30 <nav_filelist_reset>:
//!
//! @return  FALSE in case of error, see global value "fs_g_status" for more detail
//! @return  TRUE otherwise
//!
Bool  nav_filelist_reset( void )
{
8000cb30:	eb cd 40 80 	pushm	r7,lr
8000cb34:	1a 97       	mov	r7,sp
8000cb36:	20 1d       	sub	sp,4
   if ( !fat_check_mount_noopen())
8000cb38:	f0 1f 00 0a 	mcall	8000cb60 <nav_filelist_reset+0x30>
8000cb3c:	18 98       	mov	r8,r12
8000cb3e:	58 08       	cp.w	r8,0
8000cb40:	c0 51       	brne	8000cb4a <nav_filelist_reset+0x1a>
      return FALSE;
8000cb42:	30 08       	mov	r8,0
8000cb44:	ef 48 ff fc 	st.w	r7[-4],r8
8000cb48:	c0 68       	rjmp	8000cb54 <nav_filelist_reset+0x24>

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
8000cb4a:	f0 1f 00 07 	mcall	8000cb64 <nav_filelist_reset+0x34>
   return TRUE;
8000cb4e:	30 18       	mov	r8,1
8000cb50:	ef 48 ff fc 	st.w	r7[-4],r8
8000cb54:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000cb58:	10 9c       	mov	r12,r8
8000cb5a:	2f fd       	sub	sp,-4
8000cb5c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb60:	80 00       	ld.sh	r0,r0[0x0]
8000cb62:	8c 78       	ld.sh	r8,r6[0xe]
8000cb64:	80 00       	ld.sh	r0,r0[0x0]
8000cb66:	a4 34       	st.h	r2[0x6],r4

8000cb68 <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
Bool  nav_filelist_set( U16 u16_nb , Bool b_direction )
{
8000cb68:	eb cd 40 80 	pushm	r7,lr
8000cb6c:	1a 97       	mov	r7,sp
8000cb6e:	20 5d       	sub	sp,20
8000cb70:	18 98       	mov	r8,r12
8000cb72:	16 99       	mov	r9,r11
8000cb74:	ef 58 ff f4 	st.h	r7[-12],r8
8000cb78:	12 98       	mov	r8,r9
8000cb7a:	ef 68 ff f0 	st.b	r7[-16],r8
   U16   u16_ptr_save_entry;
   U16   u16_save_pos_sel_file;
   Bool  b_save_entry_type;
   Bool  b_find_last_entry = FALSE;
8000cb7e:	30 08       	mov	r8,0
8000cb80:	ef 68 ff ff 	st.b	r7[-1],r8

   if ( !fat_check_mount_noopen())
8000cb84:	f0 1f 00 74 	mcall	8000cd54 <nav_filelist_set+0x1ec>
8000cb88:	18 98       	mov	r8,r12
8000cb8a:	58 08       	cp.w	r8,0
8000cb8c:	c0 51       	brne	8000cb96 <nav_filelist_set+0x2e>
      return FALSE;
8000cb8e:	30 08       	mov	r8,0
8000cb90:	ef 48 ff ec 	st.w	r7[-20],r8
8000cb94:	cd a8       	rjmp	8000cd48 <nav_filelist_set+0x1e0>

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
8000cb96:	4f 18       	lddpc	r8,8000cd58 <nav_filelist_set+0x1f0>
8000cb98:	90 18       	ld.sh	r8,r8[0x2]
8000cb9a:	ef 58 ff fa 	st.h	r7[-6],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
8000cb9e:	4f 08       	lddpc	r8,8000cd5c <nav_filelist_set+0x1f4>
8000cba0:	f1 08 00 20 	ld.sh	r8,r8[32]
8000cba4:	ef 58 ff fc 	st.h	r7[-4],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;
8000cba8:	4e d8       	lddpc	r8,8000cd5c <nav_filelist_set+0x1f4>
8000cbaa:	f1 38 00 28 	ld.ub	r8,r8[40]
8000cbae:	ef 68 ff fe 	st.b	r7[-2],r8

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000cbb2:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000cbb6:	30 18       	mov	r8,1
8000cbb8:	f0 09 18 00 	cp.b	r9,r8
8000cbbc:	c0 70       	breq	8000cbca <nav_filelist_set+0x62>
8000cbbe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cbc2:	30 08       	mov	r8,0
8000cbc4:	f0 09 18 00 	cp.b	r9,r8
8000cbc8:	c1 20       	breq	8000cbec <nav_filelist_set+0x84>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000cbca:	4e 48       	lddpc	r8,8000cd58 <nav_filelist_set+0x1f0>
8000cbcc:	90 19       	ld.sh	r9,r8[0x2]
8000cbce:	3f e8       	mov	r8,-2
8000cbd0:	f0 09 19 00 	cp.h	r9,r8
8000cbd4:	c0 51       	brne	8000cbde <nav_filelist_set+0x76>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
8000cbd6:	4e 39       	lddpc	r9,8000cd60 <nav_filelist_set+0x1f8>
8000cbd8:	30 88       	mov	r8,8
8000cbda:	b2 88       	st.b	r9[0x0],r8
8000cbdc:	ca 58       	rjmp	8000cd26 <nav_filelist_set+0x1be>
            break;
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
8000cbde:	4d f8       	lddpc	r8,8000cd58 <nav_filelist_set+0x1f0>
8000cbe0:	90 18       	ld.sh	r8,r8[0x2]
8000cbe2:	2f f8       	sub	r8,-1
8000cbe4:	5c 88       	casts.h	r8
8000cbe6:	4d d9       	lddpc	r9,8000cd58 <nav_filelist_set+0x1f0>
8000cbe8:	b2 18       	st.h	r9[0x2],r8
8000cbea:	c2 78       	rjmp	8000cc38 <nav_filelist_set+0xd0>
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
8000cbec:	4d b8       	lddpc	r8,8000cd58 <nav_filelist_set+0x1f0>
8000cbee:	90 19       	ld.sh	r9,r8[0x2]
8000cbf0:	3f f8       	mov	r8,-1
8000cbf2:	f0 09 19 00 	cp.h	r9,r8
8000cbf6:	c0 51       	brne	8000cc00 <nav_filelist_set+0x98>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
8000cbf8:	4d a9       	lddpc	r9,8000cd60 <nav_filelist_set+0x1f8>
8000cbfa:	30 98       	mov	r8,9
8000cbfc:	b2 88       	st.b	r9[0x0],r8
8000cbfe:	c9 48       	rjmp	8000cd26 <nav_filelist_set+0x1be>
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000cc00:	4d 68       	lddpc	r8,8000cd58 <nav_filelist_set+0x1f0>
8000cc02:	90 18       	ld.sh	r8,r8[0x2]
8000cc04:	58 08       	cp.w	r8,0
8000cc06:	c1 31       	brne	8000cc2c <nav_filelist_set+0xc4>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
8000cc08:	4d 58       	lddpc	r8,8000cd5c <nav_filelist_set+0x1f4>
8000cc0a:	f1 38 00 28 	ld.ub	r8,r8[40]
8000cc0e:	58 08       	cp.w	r8,0
8000cc10:	c0 60       	breq	8000cc1c <nav_filelist_set+0xb4>
8000cc12:	4d 38       	lddpc	r8,8000cd5c <nav_filelist_set+0x1f4>
8000cc14:	f1 38 00 29 	ld.ub	r8,r8[41]
8000cc18:	58 08       	cp.w	r8,0
8000cc1a:	c0 50       	breq	8000cc24 <nav_filelist_set+0xbc>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
8000cc1c:	4d 19       	lddpc	r9,8000cd60 <nav_filelist_set+0x1f8>
8000cc1e:	30 98       	mov	r8,9
8000cc20:	b2 88       	st.b	r9[0x0],r8
8000cc22:	c8 28       	rjmp	8000cd26 <nav_filelist_set+0x1be>
               break;
            }
            // End of file scan, then find last directory
            b_find_last_entry = TRUE;
8000cc24:	30 18       	mov	r8,1
8000cc26:	ef 68 ff ff 	st.b	r7[-1],r8
8000cc2a:	c0 78       	rjmp	8000cc38 <nav_filelist_set+0xd0>
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
8000cc2c:	4c b8       	lddpc	r8,8000cd58 <nav_filelist_set+0x1f0>
8000cc2e:	90 18       	ld.sh	r8,r8[0x2]
8000cc30:	20 18       	sub	r8,1
8000cc32:	5c 88       	casts.h	r8
8000cc34:	4c 99       	lddpc	r9,8000cd58 <nav_filelist_set+0x1f0>
8000cc36:	b2 18       	st.h	r9[0x2],r8
         }
      }

      if( !fat_read_dir())
8000cc38:	f0 1f 00 4b 	mcall	8000cd64 <nav_filelist_set+0x1fc>
8000cc3c:	18 98       	mov	r8,r12
8000cc3e:	58 08       	cp.w	r8,0
8000cc40:	c0 81       	brne	8000cc50 <nav_filelist_set+0xe8>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000cc42:	4c 88       	lddpc	r8,8000cd60 <nav_filelist_set+0x1f8>
8000cc44:	11 89       	ld.ub	r9,r8[0x0]
8000cc46:	31 a8       	mov	r8,26
8000cc48:	f0 09 18 00 	cp.b	r9,r8
8000cc4c:	c6 d1       	brne	8000cd26 <nav_filelist_set+0x1be>
8000cc4e:	c3 98       	rjmp	8000ccc0 <nav_filelist_set+0x158>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
8000cc50:	4c 38       	lddpc	r8,8000cd5c <nav_filelist_set+0x1f4>
8000cc52:	f1 38 00 28 	ld.ub	r8,r8[40]
8000cc56:	10 9c       	mov	r12,r8
8000cc58:	f0 1f 00 44 	mcall	8000cd68 <nav_filelist_set+0x200>
8000cc5c:	18 98       	mov	r8,r12
8000cc5e:	58 08       	cp.w	r8,0
8000cc60:	c3 00       	breq	8000ccc0 <nav_filelist_set+0x158>
         {
           // HERE, the file entry match with the type seached

           if( b_find_last_entry )
8000cc62:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cc66:	30 08       	mov	r8,0
8000cc68:	f0 09 18 00 	cp.b	r9,r8
8000cc6c:	ca 31       	brne	8000cbb2 <nav_filelist_set+0x4a>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
8000cc6e:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000cc72:	30 18       	mov	r8,1
8000cc74:	f0 09 18 00 	cp.b	r9,r8
8000cc78:	c0 a1       	brne	8000cc8c <nav_filelist_set+0x124>
              fs_g_nav.u16_pos_sel_file++;
8000cc7a:	4b 98       	lddpc	r8,8000cd5c <nav_filelist_set+0x1f4>
8000cc7c:	f1 08 00 20 	ld.sh	r8,r8[32]
8000cc80:	2f f8       	sub	r8,-1
8000cc82:	5c 88       	casts.h	r8
8000cc84:	4b 69       	lddpc	r9,8000cd5c <nav_filelist_set+0x1f4>
8000cc86:	f3 58 00 20 	st.h	r9[32],r8
8000cc8a:	c0 98       	rjmp	8000cc9c <nav_filelist_set+0x134>
           else
              fs_g_nav.u16_pos_sel_file--;
8000cc8c:	4b 48       	lddpc	r8,8000cd5c <nav_filelist_set+0x1f4>
8000cc8e:	f1 08 00 20 	ld.sh	r8,r8[32]
8000cc92:	20 18       	sub	r8,1
8000cc94:	5c 88       	casts.h	r8
8000cc96:	4b 29       	lddpc	r9,8000cd5c <nav_filelist_set+0x1f4>
8000cc98:	f3 58 00 20 	st.h	r9[32],r8

           if (0 == u16_nb)
8000cc9c:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000cca0:	30 08       	mov	r8,0
8000cca2:	f0 09 19 00 	cp.h	r9,r8
8000cca6:	c0 71       	brne	8000ccb4 <nav_filelist_set+0x14c>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
8000cca8:	f0 1f 00 31 	mcall	8000cd6c <nav_filelist_set+0x204>
              return TRUE;         // NB FILE FIND
8000ccac:	30 18       	mov	r8,1
8000ccae:	ef 48 ff ec 	st.w	r7[-20],r8
8000ccb2:	c4 b8       	rjmp	8000cd48 <nav_filelist_set+0x1e0>
           }
           u16_nb--;
8000ccb4:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000ccb8:	20 18       	sub	r8,1
8000ccba:	ef 58 ff f4 	st.h	r7[-12],r8
8000ccbe:	c7 ab       	rjmp	8000cbb2 <nav_filelist_set+0x4a>
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000ccc0:	4a 88       	lddpc	r8,8000cd60 <nav_filelist_set+0x1f8>
8000ccc2:	11 89       	ld.ub	r9,r8[0x0]
8000ccc4:	30 a8       	mov	r8,10
8000ccc6:	f0 09 18 00 	cp.b	r9,r8
8000ccca:	c0 80       	breq	8000ccda <nav_filelist_set+0x172>
8000cccc:	4a 58       	lddpc	r8,8000cd60 <nav_filelist_set+0x1f8>
8000ccce:	11 89       	ld.ub	r9,r8[0x0]
8000ccd0:	31 a8       	mov	r8,26
8000ccd2:	f0 09 18 00 	cp.b	r9,r8
8000ccd6:	fe 91 ff 6e 	brne	8000cbb2 <nav_filelist_set+0x4a>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
8000ccda:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ccde:	30 08       	mov	r8,0
8000cce0:	f0 09 18 00 	cp.b	r9,r8
8000cce4:	c0 90       	breq	8000ccf6 <nav_filelist_set+0x18e>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = FALSE;
8000cce6:	30 08       	mov	r8,0
8000cce8:	ef 68 ff ff 	st.b	r7[-1],r8
            fs_g_nav.b_mode_nav = FS_DIR;
8000ccec:	49 c9       	lddpc	r9,8000cd5c <nav_filelist_set+0x1f4>
8000ccee:	30 08       	mov	r8,0
8000ccf0:	f3 68 00 28 	st.b	r9[40],r8
8000ccf4:	c5 fb       	rjmp	8000cbb2 <nav_filelist_set+0x4a>
            continue;
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
8000ccf6:	49 a8       	lddpc	r8,8000cd5c <nav_filelist_set+0x1f4>
8000ccf8:	f1 39 00 28 	ld.ub	r9,r8[40]
8000ccfc:	30 18       	mov	r8,1
8000ccfe:	f0 09 18 00 	cp.b	r9,r8
8000cd02:	c0 60       	breq	8000cd0e <nav_filelist_set+0x1a6>
8000cd04:	49 68       	lddpc	r8,8000cd5c <nav_filelist_set+0x1f4>
8000cd06:	f1 38 00 29 	ld.ub	r8,r8[41]
8000cd0a:	58 08       	cp.w	r8,0
8000cd0c:	c0 50       	breq	8000cd16 <nav_filelist_set+0x1ae>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
8000cd0e:	49 59       	lddpc	r9,8000cd60 <nav_filelist_set+0x1f8>
8000cd10:	30 98       	mov	r8,9
8000cd12:	b2 88       	st.b	r9[0x0],r8
8000cd14:	c0 98       	rjmp	8000cd26 <nav_filelist_set+0x1be>
            break;                        // end of search
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
8000cd16:	49 19       	lddpc	r9,8000cd58 <nav_filelist_set+0x1f0>
8000cd18:	3f f8       	mov	r8,-1
8000cd1a:	b2 18       	st.h	r9[0x2],r8
            fs_g_nav.b_mode_nav = FS_FILE;
8000cd1c:	49 09       	lddpc	r9,8000cd5c <nav_filelist_set+0x1f4>
8000cd1e:	30 18       	mov	r8,1
8000cd20:	f3 68 00 28 	st.b	r9[40],r8
8000cd24:	c4 7b       	rjmp	8000cbb2 <nav_filelist_set+0x4a>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
8000cd26:	48 e9       	lddpc	r9,8000cd5c <nav_filelist_set+0x1f4>
8000cd28:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000cd2c:	f3 68 00 28 	st.b	r9[40],r8
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
8000cd30:	48 a9       	lddpc	r9,8000cd58 <nav_filelist_set+0x1f0>
8000cd32:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000cd36:	b2 18       	st.h	r9[0x2],r8
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
8000cd38:	48 99       	lddpc	r9,8000cd5c <nav_filelist_set+0x1f4>
8000cd3a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000cd3e:	f3 58 00 20 	st.h	r9[32],r8
   return FALSE;
8000cd42:	30 08       	mov	r8,0
8000cd44:	ef 48 ff ec 	st.w	r7[-20],r8
8000cd48:	ee f8 ff ec 	ld.w	r8,r7[-20]
}
8000cd4c:	10 9c       	mov	r12,r8
8000cd4e:	2f bd       	sub	sp,-20
8000cd50:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd54:	80 00       	ld.sh	r0,r0[0x0]
8000cd56:	8c 78       	ld.sh	r8,r6[0xe]
8000cd58:	00 00       	add	r0,r0
8000cd5a:	0e 3c       	cp.w	r12,r7
8000cd5c:	00 00       	add	r0,r0
8000cd5e:	0d 58       	ld.sh	r8,--r6
8000cd60:	00 00       	add	r0,r0
8000cd62:	0e 40       	or	r0,r7
8000cd64:	80 00       	ld.sh	r0,r0[0x0]
8000cd66:	a1 84       	lsr	r4,0x0
8000cd68:	80 00       	ld.sh	r0,r0[0x0]
8000cd6a:	a2 44       	st.h	r1[0x8],r4
8000cd6c:	80 00       	ld.sh	r0,r0[0x0]
8000cd6e:	a3 38       	mul	r8,r1

8000cd70 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
Bool  nav_filelist_findname( const FS_STRING sz_name , Bool b_match_case )
{
8000cd70:	eb cd 40 80 	pushm	r7,lr
8000cd74:	1a 97       	mov	r7,sp
8000cd76:	20 3d       	sub	sp,12
8000cd78:	ef 4c ff fc 	st.w	r7[-4],r12
8000cd7c:	16 98       	mov	r8,r11
8000cd7e:	ef 68 ff f8 	st.b	r7[-8],r8
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
8000cd82:	30 1b       	mov	r11,1
8000cd84:	30 0c       	mov	r12,0
8000cd86:	f0 1f 00 10 	mcall	8000cdc4 <nav_filelist_findname+0x54>
8000cd8a:	18 98       	mov	r8,r12
8000cd8c:	58 08       	cp.w	r8,0
8000cd8e:	c0 51       	brne	8000cd98 <nav_filelist_findname+0x28>
         return FALSE;
8000cd90:	30 08       	mov	r8,0
8000cd92:	ef 48 ff f4 	st.w	r7[-12],r8
8000cd96:	c1 08       	rjmp	8000cdb6 <nav_filelist_findname+0x46>
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
8000cd98:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd9c:	10 99       	mov	r9,r8
8000cd9e:	30 0a       	mov	r10,0
8000cda0:	30 0b       	mov	r11,0
8000cda2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cda6:	f0 1f 00 09 	mcall	8000cdc8 <nav_filelist_findname+0x58>
8000cdaa:	18 98       	mov	r8,r12
8000cdac:	58 08       	cp.w	r8,0
8000cdae:	ce a0       	breq	8000cd82 <nav_filelist_findname+0x12>
         return TRUE;
8000cdb0:	30 18       	mov	r8,1
8000cdb2:	ef 48 ff f4 	st.w	r7[-12],r8
   }
8000cdb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000cdba:	10 9c       	mov	r12,r8
8000cdbc:	2f dd       	sub	sp,-12
8000cdbe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cdc2:	00 00       	add	r0,r0
8000cdc4:	80 00       	ld.sh	r0,r0[0x0]
8000cdc6:	cb 68       	rjmp	8000cf32 <nav_filelist_last+0x3a>
8000cdc8:	80 00       	ld.sh	r0,r0[0x0]
8000cdca:	d7 98       	*unknown*

8000cdcc <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
U16   nav_filelist_nb( Bool b_type )
{
8000cdcc:	eb cd 40 80 	pushm	r7,lr
8000cdd0:	1a 97       	mov	r7,sp
8000cdd2:	20 4d       	sub	sp,16
8000cdd4:	18 98       	mov	r8,r12
8000cdd6:	ef 68 ff f4 	st.b	r7[-12],r8
   U16   u16_save_position;
   U16   u16_save_number_dir;
   U16   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
8000cdda:	4a 98       	lddpc	r8,8000ce7c <nav_filelist_nb+0xb0>
8000cddc:	f1 08 00 20 	ld.sh	r8,r8[32]
8000cde0:	ef 58 ff fa 	st.h	r7[-6],r8
   // Reset position
   if ( !nav_filelist_reset())
8000cde4:	f0 1f 00 27 	mcall	8000ce80 <nav_filelist_nb+0xb4>
8000cde8:	18 98       	mov	r8,r12
8000cdea:	58 08       	cp.w	r8,0
8000cdec:	c0 51       	brne	8000cdf6 <nav_filelist_nb+0x2a>
      return 0;
8000cdee:	30 08       	mov	r8,0
8000cdf0:	ef 48 ff f0 	st.w	r7[-16],r8
8000cdf4:	c3 e8       	rjmp	8000ce70 <nav_filelist_nb+0xa4>
   // Scan all directory
   u16_save_number_dir  = 0;
8000cdf6:	30 08       	mov	r8,0
8000cdf8:	ef 58 ff fc 	st.h	r7[-4],r8
   u16_save_number_file = 0;
8000cdfc:	30 08       	mov	r8,0
8000cdfe:	ef 58 ff fe 	st.h	r7[-2],r8
8000ce02:	c1 38       	rjmp	8000ce28 <nav_filelist_nb+0x5c>
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
8000ce04:	49 e8       	lddpc	r8,8000ce7c <nav_filelist_nb+0xb0>
8000ce06:	f1 39 00 28 	ld.ub	r9,r8[40]
8000ce0a:	30 18       	mov	r8,1
8000ce0c:	f0 09 18 00 	cp.b	r9,r8
8000ce10:	c0 71       	brne	8000ce1e <nav_filelist_nb+0x52>
         u16_save_number_file++;    // It is a file
8000ce12:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000ce16:	2f f8       	sub	r8,-1
8000ce18:	ef 58 ff fe 	st.h	r7[-2],r8
8000ce1c:	c0 68       	rjmp	8000ce28 <nav_filelist_nb+0x5c>
      else
         u16_save_number_dir++;     // It is a directory
8000ce1e:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000ce22:	2f f8       	sub	r8,-1
8000ce24:	ef 58 ff fc 	st.h	r7[-4],r8
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000ce28:	30 1b       	mov	r11,1
8000ce2a:	30 0c       	mov	r12,0
8000ce2c:	f0 1f 00 16 	mcall	8000ce84 <nav_filelist_nb+0xb8>
8000ce30:	18 98       	mov	r8,r12
8000ce32:	58 08       	cp.w	r8,0
8000ce34:	ce 81       	brne	8000ce04 <nav_filelist_nb+0x38>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
8000ce36:	f0 1f 00 13 	mcall	8000ce80 <nav_filelist_nb+0xb4>
   if ( u16_save_position != FS_NO_SEL )
8000ce3a:	ef 09 ff fa 	ld.sh	r9,r7[-6]
8000ce3e:	3f f8       	mov	r8,-1
8000ce40:	f0 09 19 00 	cp.h	r9,r8
8000ce44:	c0 70       	breq	8000ce52 <nav_filelist_nb+0x86>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
8000ce46:	ef 18 ff fa 	ld.uh	r8,r7[-6]
8000ce4a:	30 1b       	mov	r11,1
8000ce4c:	10 9c       	mov	r12,r8
8000ce4e:	f0 1f 00 0e 	mcall	8000ce84 <nav_filelist_nb+0xb8>
   }
   // Return the value asked
   if( FS_FILE == b_type )
8000ce52:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000ce56:	30 18       	mov	r8,1
8000ce58:	f0 09 18 00 	cp.b	r9,r8
8000ce5c:	c0 61       	brne	8000ce68 <nav_filelist_nb+0x9c>
      return u16_save_number_file;
8000ce5e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000ce62:	ef 48 ff f0 	st.w	r7[-16],r8
8000ce66:	c0 58       	rjmp	8000ce70 <nav_filelist_nb+0xa4>
   else
      return u16_save_number_dir;
8000ce68:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000ce6c:	ef 48 ff f0 	st.w	r7[-16],r8
8000ce70:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
8000ce74:	10 9c       	mov	r12,r8
8000ce76:	2f cd       	sub	sp,-16
8000ce78:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ce7c:	00 00       	add	r0,r0
8000ce7e:	0d 58       	ld.sh	r8,--r6
8000ce80:	80 00       	ld.sh	r0,r0[0x0]
8000ce82:	cb 30       	breq	8000cde8 <nav_filelist_nb+0x1c>
8000ce84:	80 00       	ld.sh	r0,r0[0x0]
8000ce86:	cb 68       	rjmp	8000cff2 <nav_gotoindex+0x1a>

8000ce88 <nav_filelist_first>:
//!
//! @return  FALSE in case of error, see global value "fs_g_status" for more detail
//! @return  TRUE otherwise
//!
Bool  nav_filelist_first( Bool b_type )
{
8000ce88:	eb cd 40 80 	pushm	r7,lr
8000ce8c:	1a 97       	mov	r7,sp
8000ce8e:	20 2d       	sub	sp,8
8000ce90:	18 98       	mov	r8,r12
8000ce92:	ef 68 ff fc 	st.b	r7[-4],r8
   // Reset position
   if ( !nav_filelist_reset())
8000ce96:	f0 1f 00 15 	mcall	8000cee8 <nav_filelist_first+0x60>
8000ce9a:	18 98       	mov	r8,r12
8000ce9c:	58 08       	cp.w	r8,0
8000ce9e:	c1 11       	brne	8000cec0 <nav_filelist_first+0x38>
      return FALSE;
8000cea0:	30 08       	mov	r8,0
8000cea2:	ef 48 ff f8 	st.w	r7[-8],r8
8000cea6:	c1 a8       	rjmp	8000ceda <nav_filelist_first+0x52>
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
8000cea8:	49 18       	lddpc	r8,8000ceec <nav_filelist_first+0x64>
8000ceaa:	f1 39 00 28 	ld.ub	r9,r8[40]
8000ceae:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ceb2:	f2 08 18 00 	cp.b	r8,r9
8000ceb6:	c0 51       	brne	8000cec0 <nav_filelist_first+0x38>
         return TRUE;   // First file or directory found
8000ceb8:	30 18       	mov	r8,1
8000ceba:	ef 48 ff f8 	st.w	r7[-8],r8
8000cebe:	c0 e8       	rjmp	8000ceda <nav_filelist_first+0x52>
{
   // Reset position
   if ( !nav_filelist_reset())
      return FALSE;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000cec0:	30 1b       	mov	r11,1
8000cec2:	30 0c       	mov	r12,0
8000cec4:	f0 1f 00 0b 	mcall	8000cef0 <nav_filelist_first+0x68>
8000cec8:	18 98       	mov	r8,r12
8000ceca:	58 08       	cp.w	r8,0
8000cecc:	ce e1       	brne	8000cea8 <nav_filelist_first+0x20>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return TRUE;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
8000cece:	48 a9       	lddpc	r9,8000cef4 <nav_filelist_first+0x6c>
8000ced0:	30 98       	mov	r8,9
8000ced2:	b2 88       	st.b	r9[0x0],r8
   return FALSE;
8000ced4:	30 08       	mov	r8,0
8000ced6:	ef 48 ff f8 	st.w	r7[-8],r8
8000ceda:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000cede:	10 9c       	mov	r12,r8
8000cee0:	2f ed       	sub	sp,-8
8000cee2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cee6:	00 00       	add	r0,r0
8000cee8:	80 00       	ld.sh	r0,r0[0x0]
8000ceea:	cb 30       	breq	8000ce50 <nav_filelist_nb+0x84>
8000ceec:	00 00       	add	r0,r0
8000ceee:	0d 58       	ld.sh	r8,--r6
8000cef0:	80 00       	ld.sh	r0,r0[0x0]
8000cef2:	cb 68       	rjmp	8000d05e <nav_gotoindex+0x86>
8000cef4:	00 00       	add	r0,r0
8000cef6:	0e 40       	or	r0,r7

8000cef8 <nav_filelist_last>:
//!
//! @return  FALSE in case of error, see global value "fs_g_status" for more detail
//! @return  TRUE otherwise
//!
Bool  nav_filelist_last( Bool b_type )
{
8000cef8:	eb cd 40 80 	pushm	r7,lr
8000cefc:	1a 97       	mov	r7,sp
8000cefe:	20 3d       	sub	sp,12
8000cf00:	18 98       	mov	r8,r12
8000cf02:	ef 68 ff f8 	st.b	r7[-8],r8
   U16 u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
8000cf06:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cf0a:	10 9c       	mov	r12,r8
8000cf0c:	f0 1f 00 1f 	mcall	8000cf88 <nav_filelist_last+0x90>
8000cf10:	18 98       	mov	r8,r12
8000cf12:	5c 88       	casts.h	r8
8000cf14:	ef 58 ff fe 	st.h	r7[-2],r8
   if( 0 == u16_nb )
8000cf18:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000cf1c:	30 08       	mov	r8,0
8000cf1e:	f0 09 19 00 	cp.h	r9,r8
8000cf22:	c0 81       	brne	8000cf32 <nav_filelist_last+0x3a>
   {
      fs_g_status = FS_ERR_NO_FIND;
8000cf24:	49 a9       	lddpc	r9,8000cf8c <nav_filelist_last+0x94>
8000cf26:	30 98       	mov	r8,9
8000cf28:	b2 88       	st.b	r9[0x0],r8
      return FALSE;  // NO FILE FOUND
8000cf2a:	30 08       	mov	r8,0
8000cf2c:	ef 48 ff f4 	st.w	r7[-12],r8
8000cf30:	c2 58       	rjmp	8000cf7a <nav_filelist_last+0x82>
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
8000cf32:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cf36:	10 9c       	mov	r12,r8
8000cf38:	f0 1f 00 16 	mcall	8000cf90 <nav_filelist_last+0x98>
8000cf3c:	18 98       	mov	r8,r12
8000cf3e:	58 08       	cp.w	r8,0
8000cf40:	c0 51       	brne	8000cf4a <nav_filelist_last+0x52>
      return FALSE;
8000cf42:	30 08       	mov	r8,0
8000cf44:	ef 48 ff f4 	st.w	r7[-12],r8
8000cf48:	c1 98       	rjmp	8000cf7a <nav_filelist_last+0x82>
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
8000cf4a:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000cf4e:	30 18       	mov	r8,1
8000cf50:	f0 09 19 00 	cp.h	r9,r8
8000cf54:	c0 51       	brne	8000cf5e <nav_filelist_last+0x66>
      return TRUE;
8000cf56:	30 18       	mov	r8,1
8000cf58:	ef 48 ff f4 	st.w	r7[-12],r8
8000cf5c:	c0 f8       	rjmp	8000cf7a <nav_filelist_last+0x82>
   u16_nb -= 2;
8000cf5e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000cf62:	20 28       	sub	r8,2
8000cf64:	ef 58 ff fe 	st.h	r7[-2],r8
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
8000cf68:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000cf6c:	30 1b       	mov	r11,1
8000cf6e:	10 9c       	mov	r12,r8
8000cf70:	f0 1f 00 09 	mcall	8000cf94 <nav_filelist_last+0x9c>
8000cf74:	18 98       	mov	r8,r12
8000cf76:	ef 48 ff f4 	st.w	r7[-12],r8
8000cf7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000cf7e:	10 9c       	mov	r12,r8
8000cf80:	2f dd       	sub	sp,-12
8000cf82:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cf86:	00 00       	add	r0,r0
8000cf88:	80 00       	ld.sh	r0,r0[0x0]
8000cf8a:	cd cc       	rcall	8000d142 <nav_dir_gotoparent+0x2e>
8000cf8c:	00 00       	add	r0,r0
8000cf8e:	0e 40       	or	r0,r7
8000cf90:	80 00       	ld.sh	r0,r0[0x0]
8000cf92:	ce 88       	rjmp	8000d162 <nav_dir_gotoparent+0x4e>
8000cf94:	80 00       	ld.sh	r0,r0[0x0]
8000cf96:	cb 68       	rjmp	8000d102 <nav_dir_cd+0x6a>

8000cf98 <nav_getindex>:
//! This routine is interresting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
8000cf98:	eb cd 40 80 	pushm	r7,lr
8000cf9c:	1a 97       	mov	r7,sp
8000cf9e:	20 3d       	sub	sp,12
   Fs_index index;

   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
8000cfa0:	48 c8       	lddpc	r8,8000cfd0 <nav_getindex+0x38>
8000cfa2:	11 88       	ld.ub	r8,r8[0x0]
8000cfa4:	ef 68 ff f4 	st.b	r7[-12],r8
#if (FS_MULTI_PARTITION  ==  ENABLED)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
8000cfa8:	48 a8       	lddpc	r8,8000cfd0 <nav_getindex+0x38>
8000cfaa:	70 78       	ld.w	r8,r8[0x1c]
8000cfac:	ef 48 ff f8 	st.w	r7[-8],r8
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
8000cfb0:	48 98       	lddpc	r8,8000cfd4 <nav_getindex+0x3c>
8000cfb2:	90 18       	ld.sh	r8,r8[0x2]
8000cfb4:	ef 58 ff fc 	st.h	r7[-4],r8
   return index;
8000cfb8:	18 9b       	mov	r11,r12
8000cfba:	ee ca 00 0c 	sub	r10,r7,12
8000cfbe:	f4 e8 00 00 	ld.d	r8,r10[0]
8000cfc2:	f6 e9 00 00 	st.d	r11[0],r8
8000cfc6:	74 28       	ld.w	r8,r10[0x8]
8000cfc8:	97 28       	st.w	r11[0x8],r8
}
8000cfca:	2f dd       	sub	sp,-12
8000cfcc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfd0:	00 00       	add	r0,r0
8000cfd2:	0d 58       	ld.sh	r8,--r6
8000cfd4:	00 00       	add	r0,r0
8000cfd6:	0e 3c       	cp.w	r12,r7

8000cfd8 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
Bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
8000cfd8:	eb cd 40 80 	pushm	r7,lr
8000cfdc:	1a 97       	mov	r7,sp
8000cfde:	20 2d       	sub	sp,8
8000cfe0:	ef 4c ff fc 	st.w	r7[-4],r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
8000cfe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cfe8:	11 88       	ld.ub	r8,r8[0x0]
8000cfea:	10 9c       	mov	r12,r8
8000cfec:	f0 1f 00 1f 	mcall	8000d068 <nav_gotoindex+0x90>
8000cff0:	18 98       	mov	r8,r12
8000cff2:	58 08       	cp.w	r8,0
8000cff4:	c0 51       	brne	8000cffe <nav_gotoindex+0x26>
      return FALSE;
8000cff6:	30 08       	mov	r8,0
8000cff8:	ef 48 ff f8 	st.w	r7[-8],r8
8000cffc:	c3 08       	rjmp	8000d05c <nav_gotoindex+0x84>
#if (FS_MULTI_PARTITION  ==  ENABLED)
   if( !nav_partition_set(index->u8_partition))
      return FALSE;
#endif
   if( !nav_partition_mount())
8000cffe:	f0 1f 00 1c 	mcall	8000d06c <nav_gotoindex+0x94>
8000d002:	18 98       	mov	r8,r12
8000d004:	58 08       	cp.w	r8,0
8000d006:	c0 51       	brne	8000d010 <nav_gotoindex+0x38>
      return FALSE;
8000d008:	30 08       	mov	r8,0
8000d00a:	ef 48 ff f8 	st.w	r7[-8],r8
8000d00e:	c2 78       	rjmp	8000d05c <nav_gotoindex+0x84>

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
8000d010:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d014:	70 19       	ld.w	r9,r8[0x4]
8000d016:	49 78       	lddpc	r8,8000d070 <nav_gotoindex+0x98>
8000d018:	91 79       	st.w	r8[0x1c],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
8000d01a:	f0 1f 00 17 	mcall	8000d074 <nav_gotoindex+0x9c>
8000d01e:	18 98       	mov	r8,r12
8000d020:	58 08       	cp.w	r8,0
8000d022:	c1 21       	brne	8000d046 <nav_gotoindex+0x6e>
      return FALSE;
8000d024:	30 08       	mov	r8,0
8000d026:	ef 48 ff f8 	st.w	r7[-8],r8
8000d02a:	c1 98       	rjmp	8000d05c <nav_gotoindex+0x84>
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000d02c:	30 1b       	mov	r11,1
8000d02e:	30 0c       	mov	r12,0
8000d030:	f0 1f 00 12 	mcall	8000d078 <nav_gotoindex+0xa0>
8000d034:	18 98       	mov	r8,r12
8000d036:	58 08       	cp.w	r8,0
8000d038:	c0 71       	brne	8000d046 <nav_gotoindex+0x6e>
      {
         nav_filelist_reset();
8000d03a:	f0 1f 00 0f 	mcall	8000d074 <nav_gotoindex+0x9c>
         return FALSE;
8000d03e:	30 08       	mov	r8,0
8000d040:	ef 48 ff f8 	st.w	r7[-8],r8
8000d044:	c0 c8       	rjmp	8000d05c <nav_gotoindex+0x84>
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return FALSE;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
8000d046:	48 e8       	lddpc	r8,8000d07c <nav_gotoindex+0xa4>
8000d048:	90 19       	ld.sh	r9,r8[0x2]
8000d04a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d04e:	90 48       	ld.sh	r8,r8[0x8]
8000d050:	f0 09 19 00 	cp.h	r9,r8
8000d054:	ce c1       	brne	8000d02c <nav_gotoindex+0x54>
      {
         nav_filelist_reset();
         return FALSE;
      }
   }
   return TRUE;
8000d056:	30 18       	mov	r8,1
8000d058:	ef 48 ff f8 	st.w	r7[-8],r8
8000d05c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000d060:	10 9c       	mov	r12,r8
8000d062:	2f ed       	sub	sp,-8
8000d064:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d068:	80 00       	ld.sh	r0,r0[0x0]
8000d06a:	c9 f8       	rjmp	8000d1a8 <nav_dir_gotoparent+0x94>
8000d06c:	80 00       	ld.sh	r0,r0[0x0]
8000d06e:	ca d0       	breq	8000cfc8 <nav_getindex+0x30>
8000d070:	00 00       	add	r0,r0
8000d072:	0d 58       	ld.sh	r8,--r6
8000d074:	80 00       	ld.sh	r0,r0[0x0]
8000d076:	cb 30       	breq	8000cfdc <nav_gotoindex+0x4>
8000d078:	80 00       	ld.sh	r0,r0[0x0]
8000d07a:	cb 68       	rjmp	8000d1e6 <nav_dir_gotoparent+0xd2>
8000d07c:	00 00       	add	r0,r0
8000d07e:	0e 3c       	cp.w	r12,r7

8000d080 <nav_dir_root>:
//!
//! @return  FALSE in case of error, see global value "fs_g_status" for more detail
//! @return  TRUE otherwise
//!
Bool  nav_dir_root( void )
{
8000d080:	eb cd 40 80 	pushm	r7,lr
8000d084:	1a 97       	mov	r7,sp
   return nav_partition_mount();
8000d086:	f0 1f 00 04 	mcall	8000d094 <nav_dir_root+0x14>
8000d08a:	18 98       	mov	r8,r12
}
8000d08c:	10 9c       	mov	r12,r8
8000d08e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d092:	00 00       	add	r0,r0
8000d094:	80 00       	ld.sh	r0,r0[0x0]
8000d096:	ca d0       	breq	8000cff0 <nav_gotoindex+0x18>

8000d098 <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
Bool  nav_dir_cd( void )
{
8000d098:	eb cd 40 80 	pushm	r7,lr
8000d09c:	1a 97       	mov	r7,sp
8000d09e:	20 1d       	sub	sp,4
   if ( !fat_check_mount_select_noopen())
8000d0a0:	f0 1f 00 17 	mcall	8000d0fc <nav_dir_cd+0x64>
8000d0a4:	18 98       	mov	r8,r12
8000d0a6:	58 08       	cp.w	r8,0
8000d0a8:	c0 51       	brne	8000d0b2 <nav_dir_cd+0x1a>
      return FALSE;
8000d0aa:	30 08       	mov	r8,0
8000d0ac:	ef 48 ff fc 	st.w	r7[-4],r8
8000d0b0:	c1 f8       	rjmp	8000d0ee <nav_dir_cd+0x56>

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
8000d0b2:	f0 1f 00 14 	mcall	8000d100 <nav_dir_cd+0x68>
8000d0b6:	18 98       	mov	r8,r12
8000d0b8:	58 08       	cp.w	r8,0
8000d0ba:	c0 51       	brne	8000d0c4 <nav_dir_cd+0x2c>
      return FALSE;
8000d0bc:	30 08       	mov	r8,0
8000d0be:	ef 48 ff fc 	st.w	r7[-4],r8
8000d0c2:	c1 68       	rjmp	8000d0ee <nav_dir_cd+0x56>

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
8000d0c4:	49 08       	lddpc	r8,8000d104 <nav_dir_cd+0x6c>
8000d0c6:	90 18       	ld.sh	r8,r8[0x2]
8000d0c8:	49 09       	lddpc	r9,8000d108 <nav_dir_cd+0x70>
8000d0ca:	f3 58 00 18 	st.h	r9[24],r8
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
8000d0ce:	49 08       	lddpc	r8,8000d10c <nav_dir_cd+0x74>
8000d0d0:	70 19       	ld.w	r9,r8[0x4]
8000d0d2:	48 e8       	lddpc	r8,8000d108 <nav_dir_cd+0x70>
8000d0d4:	91 79       	st.w	r8[0x1c],r9

   // Reset file list
   if( FALSE == nav_filelist_reset())
8000d0d6:	f0 1f 00 0f 	mcall	8000d110 <nav_dir_cd+0x78>
8000d0da:	18 98       	mov	r8,r12
8000d0dc:	58 08       	cp.w	r8,0
8000d0de:	c0 51       	brne	8000d0e8 <nav_dir_cd+0x50>
      return FALSE;
8000d0e0:	30 08       	mov	r8,0
8000d0e2:	ef 48 ff fc 	st.w	r7[-4],r8
8000d0e6:	c0 48       	rjmp	8000d0ee <nav_dir_cd+0x56>
   return TRUE;
8000d0e8:	30 18       	mov	r8,1
8000d0ea:	ef 48 ff fc 	st.w	r7[-4],r8
8000d0ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000d0f2:	10 9c       	mov	r12,r8
8000d0f4:	2f fd       	sub	sp,-4
8000d0f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d0fa:	00 00       	add	r0,r0
8000d0fc:	80 00       	ld.sh	r0,r0[0x0]
8000d0fe:	8c b0       	ld.uh	r0,r6[0x6]
8000d100:	80 00       	ld.sh	r0,r0[0x0]
8000d102:	a4 10       	st.h	r2[0x2],r0
8000d104:	00 00       	add	r0,r0
8000d106:	0e 3c       	cp.w	r12,r7
8000d108:	00 00       	add	r0,r0
8000d10a:	0d 58       	ld.sh	r8,--r6
8000d10c:	00 00       	add	r0,r0
8000d10e:	0b 1c       	ld.sh	r12,r5++
8000d110:	80 00       	ld.sh	r0,r0[0x0]
8000d112:	cb 30       	breq	8000d078 <nav_gotoindex+0xa0>

8000d114 <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
Bool  nav_dir_gotoparent( void )
{
8000d114:	eb cd 40 80 	pushm	r7,lr
8000d118:	1a 97       	mov	r7,sp
8000d11a:	20 2d       	sub	sp,8
   U32 u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
8000d11c:	f0 1f 00 2f 	mcall	8000d1d8 <nav_dir_gotoparent+0xc4>
8000d120:	18 98       	mov	r8,r12
8000d122:	58 08       	cp.w	r8,0
8000d124:	c0 51       	brne	8000d12e <nav_dir_gotoparent+0x1a>
      return FALSE;
8000d126:	30 08       	mov	r8,0
8000d128:	ef 48 ff f8 	st.w	r7[-8],r8
8000d12c:	c5 08       	rjmp	8000d1cc <nav_dir_gotoparent+0xb8>

   if (0 == fs_g_nav.u32_cluster_sel_dir)
8000d12e:	4a c8       	lddpc	r8,8000d1dc <nav_dir_gotoparent+0xc8>
8000d130:	70 78       	ld.w	r8,r8[0x1c]
8000d132:	58 08       	cp.w	r8,0
8000d134:	c0 81       	brne	8000d144 <nav_dir_gotoparent+0x30>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
8000d136:	4a b9       	lddpc	r9,8000d1e0 <nav_dir_gotoparent+0xcc>
8000d138:	31 98       	mov	r8,25
8000d13a:	b2 88       	st.b	r9[0x0],r8
      return FALSE;
8000d13c:	30 08       	mov	r8,0
8000d13e:	ef 48 ff f8 	st.w	r7[-8],r8
8000d142:	c4 58       	rjmp	8000d1cc <nav_dir_gotoparent+0xb8>
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
8000d144:	4a 89       	lddpc	r9,8000d1e4 <nav_dir_gotoparent+0xd0>
8000d146:	30 18       	mov	r8,1
8000d148:	b2 18       	st.h	r9[0x2],r8
   if ( !fat_read_dir())
8000d14a:	f0 1f 00 28 	mcall	8000d1e8 <nav_dir_gotoparent+0xd4>
8000d14e:	18 98       	mov	r8,r12
8000d150:	58 08       	cp.w	r8,0
8000d152:	c0 51       	brne	8000d15c <nav_dir_gotoparent+0x48>
      return FALSE;
8000d154:	30 08       	mov	r8,0
8000d156:	ef 48 ff f8 	st.w	r7[-8],r8
8000d15a:	c3 98       	rjmp	8000d1cc <nav_dir_gotoparent+0xb8>
   fat_get_entry_info();
8000d15c:	f0 1f 00 24 	mcall	8000d1ec <nav_dir_gotoparent+0xd8>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
8000d160:	49 f8       	lddpc	r8,8000d1dc <nav_dir_gotoparent+0xc8>
8000d162:	70 78       	ld.w	r8,r8[0x1c]
8000d164:	ef 48 ff fc 	st.w	r7[-4],r8

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
8000d168:	4a 28       	lddpc	r8,8000d1f0 <nav_dir_gotoparent+0xdc>
8000d16a:	70 19       	ld.w	r9,r8[0x4]
8000d16c:	49 c8       	lddpc	r8,8000d1dc <nav_dir_gotoparent+0xc8>
8000d16e:	91 79       	st.w	r8[0x1c],r9

   // Select the children directory in new directory (=parent directory)
   if( FALSE == nav_filelist_reset())
8000d170:	f0 1f 00 21 	mcall	8000d1f4 <nav_dir_gotoparent+0xe0>
8000d174:	18 98       	mov	r8,r12
8000d176:	58 08       	cp.w	r8,0
8000d178:	c0 51       	brne	8000d182 <nav_dir_gotoparent+0x6e>
      return FALSE;
8000d17a:	30 08       	mov	r8,0
8000d17c:	ef 48 ff f8 	st.w	r7[-8],r8
8000d180:	c2 68       	rjmp	8000d1cc <nav_dir_gotoparent+0xb8>
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
8000d182:	49 78       	lddpc	r8,8000d1dc <nav_dir_gotoparent+0xc8>
8000d184:	f1 38 00 29 	ld.ub	r8,r8[41]
8000d188:	58 08       	cp.w	r8,0
8000d18a:	c1 40       	breq	8000d1b2 <nav_dir_gotoparent+0x9e>
8000d18c:	49 48       	lddpc	r8,8000d1dc <nav_dir_gotoparent+0xc8>
8000d18e:	f1 38 00 28 	ld.ub	r8,r8[40]
8000d192:	58 08       	cp.w	r8,0
8000d194:	c0 f0       	breq	8000d1b2 <nav_dir_gotoparent+0x9e>
      return TRUE;
8000d196:	30 18       	mov	r8,1
8000d198:	ef 48 ff f8 	st.w	r7[-8],r8
8000d19c:	c1 88       	rjmp	8000d1cc <nav_dir_gotoparent+0xb8>
   
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000d19e:	49 58       	lddpc	r8,8000d1f0 <nav_dir_gotoparent+0xdc>
8000d1a0:	70 19       	ld.w	r9,r8[0x4]
8000d1a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d1a6:	10 39       	cp.w	r9,r8
8000d1a8:	c0 51       	brne	8000d1b2 <nav_dir_gotoparent+0x9e>
         return TRUE;         // It is the children directory
8000d1aa:	30 18       	mov	r8,1
8000d1ac:	ef 48 ff f8 	st.w	r7[-8],r8
8000d1b0:	c0 e8       	rjmp	8000d1cc <nav_dir_gotoparent+0xb8>
   if( FALSE == nav_filelist_reset())
      return FALSE;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return TRUE;
   
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000d1b2:	30 1b       	mov	r11,1
8000d1b4:	30 0c       	mov	r12,0
8000d1b6:	f0 1f 00 11 	mcall	8000d1f8 <nav_dir_gotoparent+0xe4>
8000d1ba:	18 98       	mov	r8,r12
8000d1bc:	58 08       	cp.w	r8,0
8000d1be:	cf 01       	brne	8000d19e <nav_dir_gotoparent+0x8a>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return TRUE;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
8000d1c0:	48 89       	lddpc	r9,8000d1e0 <nav_dir_gotoparent+0xcc>
8000d1c2:	30 88       	mov	r8,8
8000d1c4:	b2 88       	st.b	r9[0x0],r8
   return FALSE;
8000d1c6:	30 08       	mov	r8,0
8000d1c8:	ef 48 ff f8 	st.w	r7[-8],r8
8000d1cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000d1d0:	10 9c       	mov	r12,r8
8000d1d2:	2f ed       	sub	sp,-8
8000d1d4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d1d8:	80 00       	ld.sh	r0,r0[0x0]
8000d1da:	8c 78       	ld.sh	r8,r6[0xe]
8000d1dc:	00 00       	add	r0,r0
8000d1de:	0d 58       	ld.sh	r8,--r6
8000d1e0:	00 00       	add	r0,r0
8000d1e2:	0e 40       	or	r0,r7
8000d1e4:	00 00       	add	r0,r0
8000d1e6:	0e 3c       	cp.w	r12,r7
8000d1e8:	80 00       	ld.sh	r0,r0[0x0]
8000d1ea:	a1 84       	lsr	r4,0x0
8000d1ec:	80 00       	ld.sh	r0,r0[0x0]
8000d1ee:	a3 38       	mul	r8,r1
8000d1f0:	00 00       	add	r0,r0
8000d1f2:	0b 1c       	ld.sh	r12,r5++
8000d1f4:	80 00       	ld.sh	r0,r0[0x0]
8000d1f6:	cb 30       	breq	8000d15c <nav_dir_gotoparent+0x48>
8000d1f8:	80 00       	ld.sh	r0,r0[0x0]
8000d1fa:	cb 68       	rjmp	8000d366 <nav_dir_name+0x16a>

8000d1fc <nav_dir_name>:
//!
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool  nav_dir_name( FS_STRING sz_path  , U8 u8_size_max  )
{
8000d1fc:	eb cd 40 80 	pushm	r7,lr
8000d200:	1a 97       	mov	r7,sp
8000d202:	20 bd       	sub	sp,44
8000d204:	ef 4c ff e0 	st.w	r7[-32],r12
8000d208:	16 98       	mov	r8,r11
8000d20a:	ef 68 ff dc 	st.b	r7[-36],r8
   U8 u8_i, u8_character;
   Bool status = FALSE;
8000d20e:	30 08       	mov	r8,0
8000d210:	ef 68 ff e9 	st.b	r7[-23],r8
   U32 save_u32_cluster      ;
   U32 save_u32_size         ;
   Bool b_mode_nav_single_save;
   Bool b_mode_nav_mode_save;

   if ( !fat_check_mount_noopen())
8000d214:	f0 1f 00 62 	mcall	8000d39c <nav_dir_name+0x1a0>
8000d218:	18 98       	mov	r8,r12
8000d21a:	58 08       	cp.w	r8,0
8000d21c:	c0 51       	brne	8000d226 <nav_dir_name+0x2a>
      return FALSE;
8000d21e:	30 08       	mov	r8,0
8000d220:	ef 48 ff d4 	st.w	r7[-44],r8
8000d224:	cb 58       	rjmp	8000d38e <nav_dir_name+0x192>

   if (0 != fs_g_nav.u32_cluster_sel_dir)
8000d226:	4d f8       	lddpc	r8,8000d3a0 <nav_dir_name+0x1a4>
8000d228:	70 78       	ld.w	r8,r8[0x1c]
8000d22a:	58 08       	cp.w	r8,0
8000d22c:	c6 a0       	breq	8000d300 <nav_dir_name+0x104>
   {
      // Save context
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
8000d22e:	4d e8       	lddpc	r8,8000d3a4 <nav_dir_name+0x1a8>
8000d230:	90 18       	ld.sh	r8,r8[0x2]
8000d232:	ef 58 ff ea 	st.h	r7[-22],r8
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
8000d236:	4d b8       	lddpc	r8,8000d3a0 <nav_dir_name+0x1a4>
8000d238:	70 78       	ld.w	r8,r8[0x1c]
8000d23a:	ef 48 ff ec 	st.w	r7[-20],r8
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
8000d23e:	4d b8       	lddpc	r8,8000d3a8 <nav_dir_name+0x1ac>
8000d240:	11 a8       	ld.ub	r8,r8[0x2]
8000d242:	ef 68 ff f3 	st.b	r7[-13],r8
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
8000d246:	4d 98       	lddpc	r8,8000d3a8 <nav_dir_name+0x1ac>
8000d248:	70 18       	ld.w	r8,r8[0x4]
8000d24a:	ef 48 ff f4 	st.w	r7[-12],r8
      save_u32_size              = fs_g_nav_entry.u32_size             ;
8000d24e:	4d 78       	lddpc	r8,8000d3a8 <nav_dir_name+0x1ac>
8000d250:	70 28       	ld.w	r8,r8[0x8]
8000d252:	ef 48 ff f8 	st.w	r7[-8],r8
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
8000d256:	4d 38       	lddpc	r8,8000d3a0 <nav_dir_name+0x1a4>
8000d258:	f1 38 00 29 	ld.ub	r8,r8[41]
8000d25c:	ef 68 ff fe 	st.b	r7[-2],r8
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
8000d260:	4d 08       	lddpc	r8,8000d3a0 <nav_dir_name+0x1a4>
8000d262:	f1 38 00 28 	ld.ub	r8,r8[40]
8000d266:	ef 68 ff ff 	st.b	r7[-1],r8
      fs_g_nav.b_mode_nav_single = TRUE;
8000d26a:	4c e9       	lddpc	r9,8000d3a0 <nav_dir_name+0x1a4>
8000d26c:	30 18       	mov	r8,1
8000d26e:	f3 68 00 29 	st.b	r9[41],r8
      fs_g_nav.b_mode_nav = FS_FILE;
8000d272:	4c c9       	lddpc	r9,8000d3a0 <nav_dir_name+0x1a4>
8000d274:	30 18       	mov	r8,1
8000d276:	f3 68 00 28 	st.b	r9[40],r8
      // Go to parent directory and select the children directory
      if( !nav_dir_gotoparent() )
8000d27a:	f0 1f 00 4d 	mcall	8000d3ac <nav_dir_name+0x1b0>
8000d27e:	18 98       	mov	r8,r12
8000d280:	58 08       	cp.w	r8,0
8000d282:	c0 f1       	brne	8000d2a0 <nav_dir_name+0xa4>
      {
         fs_g_nav.b_mode_nav_single = b_mode_nav_single_save;
8000d284:	4c 79       	lddpc	r9,8000d3a0 <nav_dir_name+0x1a4>
8000d286:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000d28a:	f3 68 00 29 	st.b	r9[41],r8
         fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
8000d28e:	4c 59       	lddpc	r9,8000d3a0 <nav_dir_name+0x1a4>
8000d290:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d294:	f3 68 00 28 	st.b	r9[40],r8
         return FALSE;
8000d298:	30 08       	mov	r8,0
8000d29a:	ef 48 ff d4 	st.w	r7[-44],r8
8000d29e:	c7 88       	rjmp	8000d38e <nav_dir_name+0x192>
      }
      fs_g_nav.b_mode_nav_single = b_mode_nav_single_save ;
8000d2a0:	4c 09       	lddpc	r9,8000d3a0 <nav_dir_name+0x1a4>
8000d2a2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000d2a6:	f3 68 00 29 	st.b	r9[41],r8
      fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
8000d2aa:	4b e9       	lddpc	r9,8000d3a0 <nav_dir_name+0x1a4>
8000d2ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d2b0:	f3 68 00 28 	st.b	r9[40],r8
      // Go to directory name position
      fs_g_nav_fast.u16_entry_pos_sel_file = fs_g_nav.u16_entry_pos_sel_dir;
8000d2b4:	4b b8       	lddpc	r8,8000d3a0 <nav_dir_name+0x1a4>
8000d2b6:	f1 08 00 18 	ld.sh	r8,r8[24]
8000d2ba:	4b b9       	lddpc	r9,8000d3a4 <nav_dir_name+0x1a8>
8000d2bc:	b2 18       	st.h	r9[0x2],r8
      status = nav_file_name( sz_path  , u8_size_max , FS_NAME_GET , FALSE  );
8000d2be:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d2c2:	30 09       	mov	r9,0
8000d2c4:	30 1a       	mov	r10,1
8000d2c6:	10 9b       	mov	r11,r8
8000d2c8:	ee fc ff e0 	ld.w	r12,r7[-32]
8000d2cc:	f0 1f 00 39 	mcall	8000d3b0 <nav_dir_name+0x1b4>
8000d2d0:	18 98       	mov	r8,r12
8000d2d2:	ef 68 ff e9 	st.b	r7[-23],r8
      // Restore previous context
      fs_g_nav_fast.u16_entry_pos_sel_file= save_u16_entry_pos_sel_file;
8000d2d6:	4b 49       	lddpc	r9,8000d3a4 <nav_dir_name+0x1a8>
8000d2d8:	ef 08 ff ea 	ld.sh	r8,r7[-22]
8000d2dc:	b2 18       	st.h	r9[0x2],r8
      fs_g_nav.u32_cluster_sel_dir        = save_u32_cluster_sel_dir   ;
8000d2de:	4b 19       	lddpc	r9,8000d3a0 <nav_dir_name+0x1a4>
8000d2e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000d2e4:	93 78       	st.w	r9[0x1c],r8
      fs_g_nav_entry.u8_attr              = save_u8_attr               ;
8000d2e6:	4b 19       	lddpc	r9,8000d3a8 <nav_dir_name+0x1ac>
8000d2e8:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000d2ec:	b2 a8       	st.b	r9[0x2],r8
      fs_g_nav_entry.u32_cluster          = save_u32_cluster           ;
8000d2ee:	4a f9       	lddpc	r9,8000d3a8 <nav_dir_name+0x1ac>
8000d2f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d2f4:	93 18       	st.w	r9[0x4],r8
      fs_g_nav_entry.u32_size             = save_u32_size              ;
8000d2f6:	4a d9       	lddpc	r9,8000d3a8 <nav_dir_name+0x1ac>
8000d2f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2fc:	93 28       	st.w	r9[0x8],r8
8000d2fe:	c4 48       	rjmp	8000d386 <nav_dir_name+0x18a>
   }
   else
   {
      // No parent directory, then it is the root directory
      if( g_b_string_length )
8000d300:	4a d8       	lddpc	r8,8000d3b4 <nav_dir_name+0x1b8>
8000d302:	11 88       	ld.ub	r8,r8[0x0]
8000d304:	58 08       	cp.w	r8,0
8000d306:	c0 90       	breq	8000d318 <nav_dir_name+0x11c>
      {
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
8000d308:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d30c:	30 39       	mov	r9,3
8000d30e:	b0 09       	st.h	r8[0x0],r9
         status = TRUE;
8000d310:	30 18       	mov	r8,1
8000d312:	ef 68 ff e9 	st.b	r7[-23],r8
8000d316:	c3 58       	rjmp	8000d380 <nav_dir_name+0x184>
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
8000d318:	30 08       	mov	r8,0
8000d31a:	ef 68 ff e7 	st.b	r7[-25],r8
8000d31e:	c2 a8       	rjmp	8000d372 <nav_dir_name+0x176>
      {
         switch( u8_i )
8000d320:	ef 38 ff e7 	ld.ub	r8,r7[-25]
8000d324:	ef 48 ff d8 	st.w	r7[-40],r8
8000d328:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000d32c:	58 08       	cp.w	r8,0
8000d32e:	c0 60       	breq	8000d33a <nav_dir_name+0x13e>
8000d330:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000d334:	58 18       	cp.w	r8,1
8000d336:	c0 80       	breq	8000d346 <nav_dir_name+0x14a>
8000d338:	c0 b8       	rjmp	8000d34e <nav_dir_name+0x152>
         {
            case 0:
            u8_character = nav_drive_getname();    // Letter
8000d33a:	f0 1f 00 20 	mcall	8000d3b8 <nav_dir_name+0x1bc>
8000d33e:	18 98       	mov	r8,r12
8000d340:	ef 68 ff e8 	st.b	r7[-24],r8
8000d344:	c0 88       	rjmp	8000d354 <nav_dir_name+0x158>
            break;
            case 1:
            u8_character = ':';                     // ":"
8000d346:	33 a8       	mov	r8,58
8000d348:	ef 68 ff e8 	st.b	r7[-24],r8
8000d34c:	c0 48       	rjmp	8000d354 <nav_dir_name+0x158>
            break;
            case 2:
            default:
            u8_character = 0;                       // end of string
8000d34e:	30 08       	mov	r8,0
8000d350:	ef 68 ff e8 	st.b	r7[-24],r8
         }
         if( Is_unicode )
         {
            ((FS_STR_UNICODE)sz_path )[0] = u8_character;
         }else{
            sz_path [0] = u8_character;
8000d354:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000d358:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d35c:	b2 88       	st.b	r9[0x0],r8
         }
         sz_path  += (Is_unicode? 2 : 1 );
8000d35e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d362:	2f f8       	sub	r8,-1
8000d364:	ef 48 ff e0 	st.w	r7[-32],r8
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
         status = TRUE;
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
8000d368:	ef 38 ff e7 	ld.ub	r8,r7[-25]
8000d36c:	2f f8       	sub	r8,-1
8000d36e:	ef 68 ff e7 	st.b	r7[-25],r8
8000d372:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8000d376:	30 28       	mov	r8,2
8000d378:	f0 09 18 00 	cp.b	r9,r8
8000d37c:	fe 98 ff d2 	brls	8000d320 <nav_dir_name+0x124>
         }else{
            sz_path [0] = u8_character;
         }
         sz_path  += (Is_unicode? 2 : 1 );
      }
      status = TRUE;
8000d380:	30 18       	mov	r8,1
8000d382:	ef 68 ff e9 	st.b	r7[-23],r8

   }
   return status;
8000d386:	ef 38 ff e9 	ld.ub	r8,r7[-23]
8000d38a:	ef 48 ff d4 	st.w	r7[-44],r8
8000d38e:	ee f8 ff d4 	ld.w	r8,r7[-44]
}
8000d392:	10 9c       	mov	r12,r8
8000d394:	2f 5d       	sub	sp,-44
8000d396:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d39a:	00 00       	add	r0,r0
8000d39c:	80 00       	ld.sh	r0,r0[0x0]
8000d39e:	8c 78       	ld.sh	r8,r6[0xe]
8000d3a0:	00 00       	add	r0,r0
8000d3a2:	0d 58       	ld.sh	r8,--r6
8000d3a4:	00 00       	add	r0,r0
8000d3a6:	0e 3c       	cp.w	r12,r7
8000d3a8:	00 00       	add	r0,r0
8000d3aa:	0b 1c       	ld.sh	r12,r5++
8000d3ac:	80 00       	ld.sh	r0,r0[0x0]
8000d3ae:	d1 14       	*unknown*
8000d3b0:	80 00       	ld.sh	r0,r0[0x0]
8000d3b2:	d7 98       	*unknown*
8000d3b4:	00 00       	add	r0,r0
8000d3b6:	0e 41       	or	r1,r7
8000d3b8:	80 00       	ld.sh	r0,r0[0x0]
8000d3ba:	ca 98       	rjmp	8000d50c <nav_setcwd+0x60>

8000d3bc <nav_dir_make>:
//!
//! @return    FALSE in case of error, see global value "fs_g_status" for more detail
//! @return    TRUE otherwise
//!
Bool  nav_dir_make( const FS_STRING sz_name  )
{
8000d3bc:	eb cd 40 80 	pushm	r7,lr
8000d3c0:	1a 97       	mov	r7,sp
8000d3c2:	20 2d       	sub	sp,8
8000d3c4:	ef 4c ff fc 	st.w	r7[-4],r12
   if ( !fat_check_mount_noopen())
8000d3c8:	f0 1f 00 2e 	mcall	8000d480 <nav_dir_make+0xc4>
8000d3cc:	18 98       	mov	r8,r12
8000d3ce:	58 08       	cp.w	r8,0
8000d3d0:	c0 51       	brne	8000d3da <nav_dir_make+0x1e>
      return FALSE;
8000d3d2:	30 08       	mov	r8,0
8000d3d4:	ef 48 ff f8 	st.w	r7[-8],r8
8000d3d8:	c4 d8       	rjmp	8000d472 <nav_dir_make+0xb6>

   // Create an entry file
   if ( !nav_file_create( sz_name ))
8000d3da:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d3de:	f0 1f 00 2a 	mcall	8000d484 <nav_dir_make+0xc8>
8000d3e2:	18 98       	mov	r8,r12
8000d3e4:	58 08       	cp.w	r8,0
8000d3e6:	c0 51       	brne	8000d3f0 <nav_dir_make+0x34>
      return FALSE;
8000d3e8:	30 08       	mov	r8,0
8000d3ea:	ef 48 ff f8 	st.w	r7[-8],r8
8000d3ee:	c4 28       	rjmp	8000d472 <nav_dir_make+0xb6>

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
8000d3f0:	4a 69       	lddpc	r9,8000d488 <nav_dir_make+0xcc>
8000d3f2:	3f f8       	mov	r8,-1
8000d3f4:	b2 88       	st.b	r9[0x0],r8
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
8000d3f6:	4a 59       	lddpc	r9,8000d488 <nav_dir_make+0xcc>
8000d3f8:	30 18       	mov	r8,1
8000d3fa:	93 18       	st.w	r9[0x4],r8
   if ( !fat_allocfreespace())
8000d3fc:	f0 1f 00 24 	mcall	8000d48c <nav_dir_make+0xd0>
8000d400:	18 98       	mov	r8,r12
8000d402:	58 08       	cp.w	r8,0
8000d404:	c0 a1       	brne	8000d418 <nav_dir_make+0x5c>
   {
      fat_delete_file( FALSE );
8000d406:	30 0c       	mov	r12,0
8000d408:	f0 1f 00 22 	mcall	8000d490 <nav_dir_make+0xd4>
      fat_cache_flush();
8000d40c:	f0 1f 00 22 	mcall	8000d494 <nav_dir_make+0xd8>
      return FALSE;
8000d410:	30 08       	mov	r8,0
8000d412:	ef 48 ff f8 	st.w	r7[-8],r8
8000d416:	c2 e8       	rjmp	8000d472 <nav_dir_make+0xb6>
   }
   
   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
8000d418:	49 c8       	lddpc	r8,8000d488 <nav_dir_make+0xcc>
8000d41a:	70 09       	ld.w	r9,r8[0x0]
8000d41c:	49 f8       	lddpc	r8,8000d498 <nav_dir_make+0xdc>
8000d41e:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
8000d420:	49 e9       	lddpc	r9,8000d498 <nav_dir_make+0xdc>
8000d422:	30 08       	mov	r8,0
8000d424:	93 28       	st.w	r9[0x8],r8
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory attribut
8000d426:	49 d9       	lddpc	r9,8000d498 <nav_dir_make+0xdc>
8000d428:	31 08       	mov	r8,16
8000d42a:	b2 a8       	st.b	r9[0x2],r8

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
8000d42c:	f0 1f 00 1c 	mcall	8000d49c <nav_dir_make+0xe0>
8000d430:	18 98       	mov	r8,r12
8000d432:	58 08       	cp.w	r8,0
8000d434:	c0 51       	brne	8000d43e <nav_dir_make+0x82>
      return FALSE;
8000d436:	30 08       	mov	r8,0
8000d438:	ef 48 ff f8 	st.w	r7[-8],r8
8000d43c:	c1 b8       	rjmp	8000d472 <nav_dir_make+0xb6>

   // Write directory information in her entry file
   if ( !fat_read_dir())
8000d43e:	f0 1f 00 19 	mcall	8000d4a0 <nav_dir_make+0xe4>
8000d442:	18 98       	mov	r8,r12
8000d444:	58 08       	cp.w	r8,0
8000d446:	c0 51       	brne	8000d450 <nav_dir_make+0x94>
      return FALSE;
8000d448:	30 08       	mov	r8,0
8000d44a:	ef 48 ff f8 	st.w	r7[-8],r8
8000d44e:	c1 28       	rjmp	8000d472 <nav_dir_make+0xb6>
   fat_write_entry_file();
8000d450:	f0 1f 00 15 	mcall	8000d4a4 <nav_dir_make+0xe8>
   if( !fat_cache_flush())
8000d454:	f0 1f 00 10 	mcall	8000d494 <nav_dir_make+0xd8>
8000d458:	18 98       	mov	r8,r12
8000d45a:	58 08       	cp.w	r8,0
8000d45c:	c0 51       	brne	8000d466 <nav_dir_make+0xaa>
      return FALSE;
8000d45e:	30 08       	mov	r8,0
8000d460:	ef 48 ff f8 	st.w	r7[-8],r8
8000d464:	c0 78       	rjmp	8000d472 <nav_dir_make+0xb6>

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
8000d466:	30 0c       	mov	r12,0
8000d468:	f0 1f 00 10 	mcall	8000d4a8 <nav_dir_make+0xec>
8000d46c:	18 98       	mov	r8,r12
8000d46e:	ef 48 ff f8 	st.w	r7[-8],r8
8000d472:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000d476:	10 9c       	mov	r12,r8
8000d478:	2f ed       	sub	sp,-8
8000d47a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d47e:	00 00       	add	r0,r0
8000d480:	80 00       	ld.sh	r0,r0[0x0]
8000d482:	8c 78       	ld.sh	r8,r6[0xe]
8000d484:	80 00       	ld.sh	r0,r0[0x0]
8000d486:	d9 4c       	*unknown*
8000d488:	00 00       	add	r0,r0
8000d48a:	10 18       	sub	r8,r8
8000d48c:	80 00       	ld.sh	r0,r0[0x0]
8000d48e:	c5 50       	breq	8000d538 <nav_setcwd+0x8c>
8000d490:	80 00       	ld.sh	r0,r0[0x0]
8000d492:	c4 70       	breq	8000d520 <nav_setcwd+0x74>
8000d494:	80 00       	ld.sh	r0,r0[0x0]
8000d496:	ab 8c       	lsr	r12,0xa
8000d498:	00 00       	add	r0,r0
8000d49a:	0b 1c       	ld.sh	r12,r5++
8000d49c:	80 00       	ld.sh	r0,r0[0x0]
8000d49e:	b7 ec       	*unknown*
8000d4a0:	80 00       	ld.sh	r0,r0[0x0]
8000d4a2:	a1 84       	lsr	r4,0x0
8000d4a4:	80 00       	ld.sh	r0,r0[0x0]
8000d4a6:	a4 84       	st.b	r2[0x0],r4
8000d4a8:	80 00       	ld.sh	r0,r0[0x0]
8000d4aa:	ce f8       	rjmp	8000d688 <nav_setcwd+0x1dc>

8000d4ac <nav_setcwd>:
//! With syntact "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntact "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
Bool  nav_setcwd( FS_STRING sz_path , Bool b_match_case , Bool b_create )
{
8000d4ac:	eb cd 40 80 	pushm	r7,lr
8000d4b0:	1a 97       	mov	r7,sp
8000d4b2:	20 ed       	sub	sp,56
8000d4b4:	ef 4c ff e4 	st.w	r7[-28],r12
8000d4b8:	16 98       	mov	r8,r11
8000d4ba:	14 99       	mov	r9,r10
8000d4bc:	ef 68 ff e0 	st.b	r7[-32],r8
8000d4c0:	12 98       	mov	r8,r9
8000d4c2:	ef 68 ff dc 	st.b	r7[-36],r8
   _MEM_TYPE_SLOW_   Fs_index index;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE)) ||              \
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
8000d4c6:	30 08       	mov	r8,0
8000d4c8:	ef 48 ff f4 	st.w	r7[-12],r8
#endif
   Bool b_create_name = FALSE;
8000d4cc:	30 08       	mov	r8,0
8000d4ce:	ef 68 ff fb 	st.b	r7[-5],r8

   if ( !fat_check_noopen())
8000d4d2:	f0 1f 00 a4 	mcall	8000d760 <nav_setcwd+0x2b4>
8000d4d6:	18 98       	mov	r8,r12
8000d4d8:	58 08       	cp.w	r8,0
8000d4da:	c0 51       	brne	8000d4e4 <nav_setcwd+0x38>
      return FALSE;
8000d4dc:	30 08       	mov	r8,0
8000d4de:	ef 48 ff c8 	st.w	r7[-56],r8
8000d4e2:	c3 99       	rjmp	8000d754 <nav_setcwd+0x2a8>

   index = nav_getindex();             // Save current position
8000d4e4:	ee c8 00 30 	sub	r8,r7,48
8000d4e8:	10 9c       	mov	r12,r8
8000d4ea:	f0 1f 00 9f 	mcall	8000d764 <nav_setcwd+0x2b8>
8000d4ee:	ee cb 00 18 	sub	r11,r7,24
8000d4f2:	ee ca 00 30 	sub	r10,r7,48
8000d4f6:	f4 e8 00 00 	ld.d	r8,r10[0]
8000d4fa:	f6 e9 00 00 	st.d	r11[0],r8
8000d4fe:	74 28       	ld.w	r8,r10[0x8]
8000d500:	97 28       	st.w	r11[0x8],r8

   // Check syntact "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
8000d502:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d506:	11 89       	ld.ub	r9,r8[0x0]
8000d508:	35 c8       	mov	r8,92
8000d50a:	f0 09 18 00 	cp.b	r9,r8
8000d50e:	c0 80       	breq	8000d51e <nav_setcwd+0x72>
8000d510:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d514:	11 89       	ld.ub	r9,r8[0x0]
8000d516:	32 f8       	mov	r8,47
8000d518:	f0 09 18 00 	cp.b	r9,r8
8000d51c:	c0 d1       	brne	8000d536 <nav_setcwd+0x8a>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
8000d51e:	f0 1f 00 93 	mcall	8000d768 <nav_setcwd+0x2bc>
8000d522:	18 98       	mov	r8,r12
8000d524:	58 08       	cp.w	r8,0
8000d526:	e0 80 01 0f 	breq	8000d744 <nav_setcwd+0x298>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
8000d52a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d52e:	2f f8       	sub	r8,-1
8000d530:	ef 48 ff e4 	st.w	r7[-28],r8
8000d534:	ca 18       	rjmp	8000d676 <nav_setcwd+0x1ca>
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000d536:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d53a:	2f f8       	sub	r8,-1
8000d53c:	11 89       	ld.ub	r9,r8[0x0]
8000d53e:	33 a8       	mov	r8,58
8000d540:	f0 09 18 00 	cp.b	r9,r8
8000d544:	c4 21       	brne	8000d5c8 <nav_setcwd+0x11c>
8000d546:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d54a:	2f e8       	sub	r8,-2
8000d54c:	11 89       	ld.ub	r9,r8[0x0]
8000d54e:	35 c8       	mov	r8,92
8000d550:	f0 09 18 00 	cp.b	r9,r8
8000d554:	c0 90       	breq	8000d566 <nav_setcwd+0xba>
8000d556:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d55a:	2f e8       	sub	r8,-2
8000d55c:	11 89       	ld.ub	r9,r8[0x0]
8000d55e:	32 f8       	mov	r8,47
8000d560:	f0 09 18 00 	cp.b	r9,r8
8000d564:	c3 21       	brne	8000d5c8 <nav_setcwd+0x11c>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
8000d566:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d56a:	11 88       	ld.ub	r8,r8[0x0]
8000d56c:	ef 48 ff fc 	st.w	r7[-4],r8
8000d570:	4f f8       	lddpc	r8,8000d76c <nav_setcwd+0x2c0>
8000d572:	70 09       	ld.w	r9,r8[0x0]
8000d574:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d578:	f2 08 00 08 	add	r8,r9,r8
8000d57c:	11 88       	ld.ub	r8,r8[0x0]
8000d57e:	e2 18 00 02 	andl	r8,0x2,COH
8000d582:	c0 70       	breq	8000d590 <nav_setcwd+0xe4>
8000d584:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d588:	22 08       	sub	r8,32
8000d58a:	ef 48 ff cc 	st.w	r7[-52],r8
8000d58e:	c0 58       	rjmp	8000d598 <nav_setcwd+0xec>
8000d590:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d594:	ef 48 ff cc 	st.w	r7[-52],r8
8000d598:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000d59c:	5c 58       	castu.b	r8
8000d59e:	24 18       	sub	r8,65
8000d5a0:	5c 58       	castu.b	r8
8000d5a2:	10 9c       	mov	r12,r8
8000d5a4:	f0 1f 00 73 	mcall	8000d770 <nav_setcwd+0x2c4>
8000d5a8:	18 98       	mov	r8,r12
8000d5aa:	58 08       	cp.w	r8,0
8000d5ac:	e0 80 00 cc 	breq	8000d744 <nav_setcwd+0x298>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
8000d5b0:	f0 1f 00 71 	mcall	8000d774 <nav_setcwd+0x2c8>
8000d5b4:	18 98       	mov	r8,r12
8000d5b6:	58 08       	cp.w	r8,0
8000d5b8:	e0 80 00 c6 	breq	8000d744 <nav_setcwd+0x298>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
8000d5bc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d5c0:	2f d8       	sub	r8,-3
8000d5c2:	ef 48 ff e4 	st.w	r7[-28],r8
8000d5c6:	c5 88       	rjmp	8000d676 <nav_setcwd+0x1ca>
   }else

   // Check syntact ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000d5c8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d5cc:	11 89       	ld.ub	r9,r8[0x0]
8000d5ce:	32 e8       	mov	r8,46
8000d5d0:	f0 09 18 00 	cp.b	r9,r8
8000d5d4:	c2 c1       	brne	8000d62c <nav_setcwd+0x180>
8000d5d6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d5da:	2f f8       	sub	r8,-1
8000d5dc:	11 89       	ld.ub	r9,r8[0x0]
8000d5de:	35 c8       	mov	r8,92
8000d5e0:	f0 09 18 00 	cp.b	r9,r8
8000d5e4:	c0 90       	breq	8000d5f6 <nav_setcwd+0x14a>
8000d5e6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d5ea:	2f f8       	sub	r8,-1
8000d5ec:	11 89       	ld.ub	r9,r8[0x0]
8000d5ee:	32 f8       	mov	r8,47
8000d5f0:	f0 09 18 00 	cp.b	r9,r8
8000d5f4:	c1 c1       	brne	8000d62c <nav_setcwd+0x180>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
8000d5f6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d5fa:	2f e8       	sub	r8,-2
8000d5fc:	ef 48 ff e4 	st.w	r7[-28],r8
8000d600:	c3 b8       	rjmp	8000d676 <nav_setcwd+0x1ca>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
8000d602:	f0 1f 00 5e 	mcall	8000d778 <nav_setcwd+0x2cc>
8000d606:	18 98       	mov	r8,r12
8000d608:	58 08       	cp.w	r8,0
8000d60a:	e0 80 00 9d 	breq	8000d744 <nav_setcwd+0x298>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
8000d60e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d612:	2f e8       	sub	r8,-2
8000d614:	ef 48 ff e4 	st.w	r7[-28],r8
            if( 0 != sz_path [0])
8000d618:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d61c:	11 88       	ld.ub	r8,r8[0x0]
8000d61e:	58 08       	cp.w	r8,0
8000d620:	c0 60       	breq	8000d62c <nav_setcwd+0x180>
               sz_path  +=1; // jump "/"
8000d622:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d626:	2f f8       	sub	r8,-1
8000d628:	ef 48 ff e4 	st.w	r7[-28],r8
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d62c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d630:	11 89       	ld.ub	r9,r8[0x0]
8000d632:	32 e8       	mov	r8,46
8000d634:	f0 09 18 00 	cp.b	r9,r8
8000d638:	c1 f1       	brne	8000d676 <nav_setcwd+0x1ca>
8000d63a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d63e:	2f f8       	sub	r8,-1
8000d640:	11 89       	ld.ub	r9,r8[0x0]
8000d642:	32 e8       	mov	r8,46
8000d644:	f0 09 18 00 	cp.b	r9,r8
8000d648:	c1 71       	brne	8000d676 <nav_setcwd+0x1ca>
8000d64a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d64e:	2f e8       	sub	r8,-2
8000d650:	11 89       	ld.ub	r9,r8[0x0]
8000d652:	35 c8       	mov	r8,92
8000d654:	f0 09 18 00 	cp.b	r9,r8
8000d658:	cd 50       	breq	8000d602 <nav_setcwd+0x156>
8000d65a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d65e:	2f e8       	sub	r8,-2
8000d660:	11 89       	ld.ub	r9,r8[0x0]
8000d662:	32 f8       	mov	r8,47
8000d664:	f0 09 18 00 	cp.b	r9,r8
8000d668:	cc d0       	breq	8000d602 <nav_setcwd+0x156>
8000d66a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d66e:	2f e8       	sub	r8,-2
8000d670:	11 88       	ld.ub	r8,r8[0x0]
8000d672:	58 08       	cp.w	r8,0
8000d674:	cc 70       	breq	8000d602 <nav_setcwd+0x156>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
8000d676:	f0 1f 00 42 	mcall	8000d77c <nav_setcwd+0x2d0>
8000d67a:	18 98       	mov	r8,r12
8000d67c:	58 08       	cp.w	r8,0
8000d67e:	c6 30       	breq	8000d744 <nav_setcwd+0x298>
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
8000d680:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d684:	11 88       	ld.ub	r8,r8[0x0]
8000d686:	58 08       	cp.w	r8,0
8000d688:	c0 51       	brne	8000d692 <nav_setcwd+0x1e6>
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
      {
         return TRUE;   // path (without file) is found or create
8000d68a:	30 18       	mov	r8,1
8000d68c:	ef 48 ff c8 	st.w	r7[-56],r8
8000d690:	c6 28       	rjmp	8000d754 <nav_setcwd+0x2a8>
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
8000d692:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d696:	10 9b       	mov	r11,r8
8000d698:	ee fc ff e4 	ld.w	r12,r7[-28]
8000d69c:	f0 1f 00 39 	mcall	8000d780 <nav_setcwd+0x2d4>
8000d6a0:	18 98       	mov	r8,r12
8000d6a2:	58 08       	cp.w	r8,0
8000d6a4:	c0 e1       	brne	8000d6c0 <nav_setcwd+0x214>
      {
         // The file or directory is not found
         if( !b_create )
8000d6a6:	ef 39 ff dc 	ld.ub	r9,r7[-36]
8000d6aa:	30 08       	mov	r8,0
8000d6ac:	f0 09 18 00 	cp.b	r9,r8
8000d6b0:	c4 a0       	breq	8000d744 <nav_setcwd+0x298>
            goto nav_setcwd_fail;   // don't creat the directory then exit
         // Set flag to create the directory
         b_create_name = TRUE;
8000d6b2:	30 18       	mov	r8,1
8000d6b4:	ef 68 ff fb 	st.b	r7[-5],r8
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE)) ||              \
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
         sz_save_path = sz_path;
8000d6b8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d6bc:	ef 48 ff f4 	st.w	r7[-12],r8
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
8000d6c0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d6c4:	2f f8       	sub	r8,-1
8000d6c6:	ef 48 ff e4 	st.w	r7[-28],r8
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
8000d6ca:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d6ce:	11 88       	ld.ub	r8,r8[0x0]
8000d6d0:	58 08       	cp.w	r8,0
8000d6d2:	c0 f1       	brne	8000d6f0 <nav_setcwd+0x244>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
8000d6d4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000d6d8:	30 08       	mov	r8,0
8000d6da:	f0 09 18 00 	cp.b	r9,r8
8000d6de:	cd 10       	breq	8000d680 <nav_setcwd+0x1d4>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
8000d6e0:	ee fc ff f4 	ld.w	r12,r7[-12]
8000d6e4:	f0 1f 00 28 	mcall	8000d784 <nav_setcwd+0x2d8>
8000d6e8:	18 98       	mov	r8,r12
8000d6ea:	58 08       	cp.w	r8,0
8000d6ec:	c2 c0       	breq	8000d744 <nav_setcwd+0x298>
8000d6ee:	cc 9b       	rjmp	8000d680 <nav_setcwd+0x1d4>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
8000d6f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d6f4:	11 89       	ld.ub	r9,r8[0x0]
8000d6f6:	35 c8       	mov	r8,92
8000d6f8:	f0 09 18 00 	cp.b	r9,r8
8000d6fc:	c0 80       	breq	8000d70c <nav_setcwd+0x260>
8000d6fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d702:	11 89       	ld.ub	r9,r8[0x0]
8000d704:	32 f8       	mov	r8,47
8000d706:	f0 09 18 00 	cp.b	r9,r8
8000d70a:	cd b1       	brne	8000d6c0 <nav_setcwd+0x214>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
8000d70c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000d710:	30 08       	mov	r8,0
8000d712:	f0 09 18 00 	cp.b	r9,r8
8000d716:	c0 80       	breq	8000d726 <nav_setcwd+0x27a>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
8000d718:	ee fc ff f4 	ld.w	r12,r7[-12]
8000d71c:	f0 1f 00 1b 	mcall	8000d788 <nav_setcwd+0x2dc>
8000d720:	18 98       	mov	r8,r12
8000d722:	58 08       	cp.w	r8,0
8000d724:	c1 00       	breq	8000d744 <nav_setcwd+0x298>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
8000d726:	f0 1f 00 1a 	mcall	8000d78c <nav_setcwd+0x2e0>
8000d72a:	18 98       	mov	r8,r12
8000d72c:	58 08       	cp.w	r8,0
8000d72e:	c0 b0       	breq	8000d744 <nav_setcwd+0x298>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
8000d730:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d734:	2f f8       	sub	r8,-1
8000d736:	ef 48 ff e4 	st.w	r7[-28],r8
            if( !nav_dir_cd())
8000d73a:	f0 1f 00 16 	mcall	8000d790 <nav_setcwd+0x2e4>
8000d73e:	18 98       	mov	r8,r12
8000d740:	58 08       	cp.w	r8,0
8000d742:	c9 f1       	brne	8000d680 <nav_setcwd+0x1d4>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
8000d744:	ee c8 00 18 	sub	r8,r7,24
8000d748:	10 9c       	mov	r12,r8
8000d74a:	f0 1f 00 13 	mcall	8000d794 <nav_setcwd+0x2e8>
   return FALSE;
8000d74e:	30 08       	mov	r8,0
8000d750:	ef 48 ff c8 	st.w	r7[-56],r8
8000d754:	ee f8 ff c8 	ld.w	r8,r7[-56]
}
8000d758:	10 9c       	mov	r12,r8
8000d75a:	2f 2d       	sub	sp,-56
8000d75c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d760:	80 00       	ld.sh	r0,r0[0x0]
8000d762:	8b a0       	st.w	r5[0x28],r0
8000d764:	80 00       	ld.sh	r0,r0[0x0]
8000d766:	cf 98       	rjmp	8000d958 <nav_file_create+0xc>
8000d768:	80 00       	ld.sh	r0,r0[0x0]
8000d76a:	d0 80       	acall	0x20
8000d76c:	00 00       	add	r0,r0
8000d76e:	00 4c       	or	r12,r0
8000d770:	80 00       	ld.sh	r0,r0[0x0]
8000d772:	c9 f8       	rjmp	8000d8b0 <nav_file_name+0x118>
8000d774:	80 00       	ld.sh	r0,r0[0x0]
8000d776:	ca d0       	breq	8000d6d0 <nav_setcwd+0x224>
8000d778:	80 00       	ld.sh	r0,r0[0x0]
8000d77a:	d1 14       	*unknown*
8000d77c:	80 00       	ld.sh	r0,r0[0x0]
8000d77e:	cb 30       	breq	8000d6e4 <nav_setcwd+0x238>
8000d780:	80 00       	ld.sh	r0,r0[0x0]
8000d782:	cd 70       	breq	8000d730 <nav_setcwd+0x284>
8000d784:	80 00       	ld.sh	r0,r0[0x0]
8000d786:	d9 4c       	*unknown*
8000d788:	80 00       	ld.sh	r0,r0[0x0]
8000d78a:	d3 bc       	*unknown*
8000d78c:	80 00       	ld.sh	r0,r0[0x0]
8000d78e:	a4 10       	st.h	r2[0x2],r0
8000d790:	80 00       	ld.sh	r0,r0[0x0]
8000d792:	d0 98       	*unknown*
8000d794:	80 00       	ld.sh	r0,r0[0x0]
8000d796:	cf d8       	rjmp	8000d990 <nav_file_create+0x44>

8000d798 <nav_file_name>:
//!
//! @return  FALSE in case of error, see global value "fs_g_status" for more detail
//! @return  TRUE otherwise
//!
Bool  nav_file_name( FS_STRING sz_name , U8 u8_size_max , Bool b_mode , Bool b_match_case  )
{
8000d798:	eb cd 40 80 	pushm	r7,lr
8000d79c:	1a 97       	mov	r7,sp
8000d79e:	20 7d       	sub	sp,28
8000d7a0:	ef 4c ff f4 	st.w	r7[-12],r12
8000d7a4:	16 98       	mov	r8,r11
8000d7a6:	ef 68 ff f0 	st.b	r7[-16],r8
8000d7aa:	14 98       	mov	r8,r10
8000d7ac:	ef 68 ff ec 	st.b	r7[-20],r8
8000d7b0:	12 98       	mov	r8,r9
8000d7b2:	ef 68 ff e8 	st.b	r7[-24],r8
   _MEM_TYPE_SLOW_   U16 u16_lgt;   // Only used if LENGTH string mode enabled
   U16  u16_ptr_save_entry;
   Bool  b_readshortname = FALSE;
8000d7b6:	30 08       	mov	r8,0
8000d7b8:	ef 68 ff ff 	st.b	r7[-1],r8

   if ( !fat_check_mount_select())
8000d7bc:	f0 1f 00 52 	mcall	8000d904 <nav_file_name+0x16c>
8000d7c0:	18 98       	mov	r8,r12
8000d7c2:	58 08       	cp.w	r8,0
8000d7c4:	c0 51       	brne	8000d7ce <nav_file_name+0x36>
      return FALSE;
8000d7c6:	30 08       	mov	r8,0
8000d7c8:	ef 48 ff e4 	st.w	r7[-28],r8
8000d7cc:	c9 58       	rjmp	8000d8f6 <nav_file_name+0x15e>

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
8000d7ce:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000d7d2:	30 18       	mov	r8,1
8000d7d4:	f0 09 18 00 	cp.b	r9,r8
8000d7d8:	c0 b1       	brne	8000d7ee <nav_file_name+0x56>
8000d7da:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d7de:	30 08       	mov	r8,0
8000d7e0:	f0 09 18 00 	cp.b	r9,r8
8000d7e4:	c0 51       	brne	8000d7ee <nav_file_name+0x56>
   &&  (0 == u8_size_max) )
   {
      return TRUE;
8000d7e6:	30 18       	mov	r8,1
8000d7e8:	ef 48 ff e4 	st.w	r7[-28],r8
8000d7ec:	c8 58       	rjmp	8000d8f6 <nav_file_name+0x15e>
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
8000d7ee:	4c 78       	lddpc	r8,8000d908 <nav_file_name+0x170>
8000d7f0:	90 18       	ld.sh	r8,r8[0x2]
8000d7f2:	ef 58 ff fc 	st.h	r7[-4],r8
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000d7f6:	4c 58       	lddpc	r8,8000d908 <nav_file_name+0x170>
8000d7f8:	90 18       	ld.sh	r8,r8[0x2]
8000d7fa:	58 08       	cp.w	r8,0
8000d7fc:	c0 51       	brne	8000d806 <nav_file_name+0x6e>
   {
      b_readshortname = TRUE;                   // It isn't possibled to have a long name
8000d7fe:	30 18       	mov	r8,1
8000d800:	ef 68 ff ff 	st.b	r7[-1],r8
8000d804:	c0 78       	rjmp	8000d812 <nav_file_name+0x7a>
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
8000d806:	4c 18       	lddpc	r8,8000d908 <nav_file_name+0x170>
8000d808:	90 18       	ld.sh	r8,r8[0x2]
8000d80a:	20 18       	sub	r8,1
8000d80c:	5c 88       	casts.h	r8
8000d80e:	4b f9       	lddpc	r9,8000d908 <nav_file_name+0x170>
8000d810:	b2 18       	st.h	r9[0x2],r8
   }

   // Loop in directory entry
   u16_lgt = 0;
8000d812:	30 08       	mov	r8,0
8000d814:	ef 58 ff fa 	st.h	r7[-6],r8
   while( 1 )
   {
      if ( !fat_read_dir())
8000d818:	f0 1f 00 3d 	mcall	8000d90c <nav_file_name+0x174>
8000d81c:	18 98       	mov	r8,r12
8000d81e:	58 08       	cp.w	r8,0
8000d820:	c6 80       	breq	8000d8f0 <nav_file_name+0x158>
         break; // error

      if ( b_readshortname )
8000d822:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d826:	30 08       	mov	r8,0
8000d828:	f0 09 18 00 	cp.b	r9,r8
8000d82c:	c0 f0       	breq	8000d84a <nav_file_name+0xb2>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
8000d82e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000d832:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d836:	10 9a       	mov	r10,r8
8000d838:	12 9b       	mov	r11,r9
8000d83a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000d83e:	f0 1f 00 35 	mcall	8000d910 <nav_file_name+0x178>
8000d842:	18 98       	mov	r8,r12
8000d844:	ef 48 ff e4 	st.w	r7[-28],r8
8000d848:	c5 78       	rjmp	8000d8f6 <nav_file_name+0x15e>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
8000d84a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d84e:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000d852:	ef 3b ff f0 	ld.ub	r11,r7[-16]
8000d856:	10 99       	mov	r9,r8
8000d858:	ee fc ff f4 	ld.w	r12,r7[-12]
8000d85c:	f0 1f 00 2e 	mcall	8000d914 <nav_file_name+0x17c>
8000d860:	18 98       	mov	r8,r12
8000d862:	58 08       	cp.w	r8,0
8000d864:	c1 70       	breq	8000d892 <nav_file_name+0xfa>
      {
         if( g_b_string_length )
8000d866:	4a d8       	lddpc	r8,8000d918 <nav_file_name+0x180>
8000d868:	11 88       	ld.ub	r8,r8[0x0]
8000d86a:	58 08       	cp.w	r8,0
8000d86c:	c0 b0       	breq	8000d882 <nav_file_name+0xea>
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
8000d86e:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d872:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d876:	90 09       	ld.sh	r9,r8[0x0]
8000d878:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d87c:	12 08       	add	r8,r9
8000d87e:	5c 88       	casts.h	r8
8000d880:	b4 08       	st.h	r10[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000d882:	4a 29       	lddpc	r9,8000d908 <nav_file_name+0x170>
8000d884:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000d888:	b2 18       	st.h	r9[0x2],r8
         return TRUE;
8000d88a:	30 18       	mov	r8,1
8000d88c:	ef 48 ff e4 	st.w	r7[-28],r8
8000d890:	c3 38       	rjmp	8000d8f6 <nav_file_name+0x15e>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
8000d892:	4a 38       	lddpc	r8,8000d91c <nav_file_name+0x184>
8000d894:	11 89       	ld.ub	r9,r8[0x0]
8000d896:	31 08       	mov	r8,16
8000d898:	f0 09 18 00 	cp.b	r9,r8
8000d89c:	c0 f0       	breq	8000d8ba <nav_file_name+0x122>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000d89e:	49 b9       	lddpc	r9,8000d908 <nav_file_name+0x170>
8000d8a0:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000d8a4:	b2 18       	st.h	r9[0x2],r8

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
8000d8a6:	49 e8       	lddpc	r8,8000d91c <nav_file_name+0x184>
8000d8a8:	11 89       	ld.ub	r9,r8[0x0]
8000d8aa:	30 b8       	mov	r8,11
8000d8ac:	f0 09 18 00 	cp.b	r9,r8
8000d8b0:	c2 01       	brne	8000d8f0 <nav_file_name+0x158>
         {
            // It isn't a long name entry then there aren't long file name
            b_readshortname = TRUE;   // It is mandatory to use the short name
8000d8b2:	30 18       	mov	r8,1
8000d8b4:	ef 68 ff ff 	st.b	r7[-1],r8
8000d8b8:	cb 0b       	rjmp	8000d818 <nav_file_name+0x80>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
8000d8ba:	49 88       	lddpc	r8,8000d918 <nav_file_name+0x180>
8000d8bc:	11 88       	ld.ub	r8,r8[0x0]
8000d8be:	58 08       	cp.w	r8,0
8000d8c0:	c0 70       	breq	8000d8ce <nav_file_name+0x136>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
8000d8c2:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d8c6:	2f 38       	sub	r8,-13
8000d8c8:	ef 58 ff fa 	st.h	r7[-6],r8
8000d8cc:	c0 b8       	rjmp	8000d8e2 <nav_file_name+0x14a>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
8000d8ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d8d2:	2f 38       	sub	r8,-13
8000d8d4:	ef 48 ff f4 	st.w	r7[-12],r8
         u8_size_max -= FS_SIZE_LFN_ENTRY;
8000d8d8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d8dc:	20 d8       	sub	r8,13
8000d8de:	ef 68 ff f0 	st.b	r7[-16],r8
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
8000d8e2:	48 a8       	lddpc	r8,8000d908 <nav_file_name+0x170>
8000d8e4:	90 18       	ld.sh	r8,r8[0x2]
8000d8e6:	20 18       	sub	r8,1
8000d8e8:	5c 88       	casts.h	r8
8000d8ea:	48 89       	lddpc	r9,8000d908 <nav_file_name+0x170>
8000d8ec:	b2 18       	st.h	r9[0x2],r8
8000d8ee:	c9 5b       	rjmp	8000d818 <nav_file_name+0x80>

   }  // end of loop while(1)
   return FALSE;
8000d8f0:	30 08       	mov	r8,0
8000d8f2:	ef 48 ff e4 	st.w	r7[-28],r8
8000d8f6:	ee f8 ff e4 	ld.w	r8,r7[-28]
}
8000d8fa:	10 9c       	mov	r12,r8
8000d8fc:	2f 9d       	sub	sp,-28
8000d8fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d902:	00 00       	add	r0,r0
8000d904:	80 00       	ld.sh	r0,r0[0x0]
8000d906:	8d 50       	st.w	r6[0x14],r0
8000d908:	00 00       	add	r0,r0
8000d90a:	0e 3c       	cp.w	r12,r7
8000d90c:	80 00       	ld.sh	r0,r0[0x0]
8000d90e:	a1 84       	lsr	r4,0x0
8000d910:	80 00       	ld.sh	r0,r0[0x0]
8000d912:	a5 60       	lsl	r0,0x4
8000d914:	80 00       	ld.sh	r0,r0[0x0]
8000d916:	a7 48       	asr	r8,0x6
8000d918:	00 00       	add	r0,r0
8000d91a:	0e 41       	or	r1,r7
8000d91c:	00 00       	add	r0,r0
8000d91e:	0e 40       	or	r0,r7

8000d920 <nav_file_lgt>:
//! This function returns the size of selected file (unit byte)
//!
//! @return    Size of selected file (unit byte)
//!
U32   nav_file_lgt( void )
{
8000d920:	eb cd 40 80 	pushm	r7,lr
8000d924:	1a 97       	mov	r7,sp
   return fs_g_nav_entry.u32_size;
8000d926:	48 38       	lddpc	r8,8000d930 <nav_file_lgt+0x10>
8000d928:	70 28       	ld.w	r8,r8[0x8]
}
8000d92a:	10 9c       	mov	r12,r8
8000d92c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d930:	00 00       	add	r0,r0
8000d932:	0b 1c       	ld.sh	r12,r5++

8000d934 <nav_file_isdir>:
//!
//! @return    TRUE, it is a directory
//! @return    FALSE, in other case
//!
Bool  nav_file_isdir( void )
{
8000d934:	eb cd 40 80 	pushm	r7,lr
8000d938:	1a 97       	mov	r7,sp
   return fat_entry_is_dir();
8000d93a:	f0 1f 00 04 	mcall	8000d948 <nav_file_isdir+0x14>
8000d93e:	18 98       	mov	r8,r12
}
8000d940:	10 9c       	mov	r12,r8
8000d942:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d946:	00 00       	add	r0,r0
8000d948:	80 00       	ld.sh	r0,r0[0x0]
8000d94a:	a4 10       	st.h	r2[0x2],r0

8000d94c <nav_file_create>:
//! @verbatim
//! If you ues this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
Bool  nav_file_create( const FS_STRING sz_name  )
{
8000d94c:	eb cd 40 80 	pushm	r7,lr
8000d950:	1a 97       	mov	r7,sp
8000d952:	20 2d       	sub	sp,8
8000d954:	ef 4c ff fc 	st.w	r7[-4],r12
   // Check if the name already exists
   if (!nav_filelist_reset())
8000d958:	f0 1f 00 22 	mcall	8000d9e0 <nav_file_create+0x94>
8000d95c:	18 98       	mov	r8,r12
8000d95e:	58 08       	cp.w	r8,0
8000d960:	c0 51       	brne	8000d96a <nav_file_create+0x1e>
      return FALSE;
8000d962:	30 08       	mov	r8,0
8000d964:	ef 48 ff f8 	st.w	r7[-8],r8
8000d968:	c3 58       	rjmp	8000d9d2 <nav_file_create+0x86>
   if (nav_filelist_findname(sz_name , FALSE))
8000d96a:	30 0b       	mov	r11,0
8000d96c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d970:	f0 1f 00 1d 	mcall	8000d9e4 <nav_file_create+0x98>
8000d974:	18 98       	mov	r8,r12
8000d976:	58 08       	cp.w	r8,0
8000d978:	c0 80       	breq	8000d988 <nav_file_create+0x3c>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000d97a:	49 c9       	lddpc	r9,8000d9e8 <nav_file_create+0x9c>
8000d97c:	32 a8       	mov	r8,42
8000d97e:	b2 88       	st.b	r9[0x0],r8
      return FALSE;  // File exist -> it is not possible to create this name
8000d980:	30 08       	mov	r8,0
8000d982:	ef 48 ff f8 	st.w	r7[-8],r8
8000d986:	c2 68       	rjmp	8000d9d2 <nav_file_create+0x86>
   }
   // FYC: here, the selection is at the end of the list
   // Create name entrys
   if ( !fat_create_entry_file_name( sz_name ))
8000d988:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d98c:	f0 1f 00 18 	mcall	8000d9ec <nav_file_create+0xa0>
8000d990:	18 98       	mov	r8,r12
8000d992:	58 08       	cp.w	r8,0
8000d994:	c0 51       	brne	8000d99e <nav_file_create+0x52>
      return FALSE; // error
8000d996:	30 08       	mov	r8,0
8000d998:	ef 48 ff f8 	st.w	r7[-8],r8
8000d99c:	c1 b8       	rjmp	8000d9d2 <nav_file_create+0x86>
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
8000d99e:	49 59       	lddpc	r9,8000d9f0 <nav_file_create+0xa4>
8000d9a0:	30 08       	mov	r8,0
8000d9a2:	93 18       	st.w	r9[0x4],r8
   fs_g_nav_entry.u32_size    = 0;     // The size is null
8000d9a4:	49 39       	lddpc	r9,8000d9f0 <nav_file_create+0xa4>
8000d9a6:	30 08       	mov	r8,0
8000d9a8:	93 28       	st.w	r9[0x8],r8
   fs_g_nav_entry.u8_attr     = 0;     // Attribut is a file
8000d9aa:	49 29       	lddpc	r9,8000d9f0 <nav_file_create+0xa4>
8000d9ac:	30 08       	mov	r8,0
8000d9ae:	b2 a8       	st.b	r9[0x2],r8

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
8000d9b0:	49 18       	lddpc	r8,8000d9f4 <nav_file_create+0xa8>
8000d9b2:	f1 08 00 20 	ld.sh	r8,r8[32]
8000d9b6:	2f f8       	sub	r8,-1
8000d9b8:	5c 88       	casts.h	r8
8000d9ba:	48 f9       	lddpc	r9,8000d9f4 <nav_file_create+0xa8>
8000d9bc:	f3 58 00 20 	st.h	r9[32],r8
   fs_g_nav.b_mode_nav = FS_FILE;
8000d9c0:	48 d9       	lddpc	r9,8000d9f4 <nav_file_create+0xa8>
8000d9c2:	30 18       	mov	r8,1
8000d9c4:	f3 68 00 28 	st.b	r9[40],r8
   return fat_cache_flush();
8000d9c8:	f0 1f 00 0c 	mcall	8000d9f8 <nav_file_create+0xac>
8000d9cc:	18 98       	mov	r8,r12
8000d9ce:	ef 48 ff f8 	st.w	r7[-8],r8
8000d9d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000d9d6:	10 9c       	mov	r12,r8
8000d9d8:	2f ed       	sub	sp,-8
8000d9da:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d9de:	00 00       	add	r0,r0
8000d9e0:	80 00       	ld.sh	r0,r0[0x0]
8000d9e2:	cb 30       	breq	8000d948 <nav_file_isdir+0x14>
8000d9e4:	80 00       	ld.sh	r0,r0[0x0]
8000d9e6:	cd 70       	breq	8000d994 <nav_file_create+0x48>
8000d9e8:	00 00       	add	r0,r0
8000d9ea:	0e 40       	or	r0,r7
8000d9ec:	80 00       	ld.sh	r0,r0[0x0]
8000d9ee:	b9 20       	st.d	r12++,r0
8000d9f0:	00 00       	add	r0,r0
8000d9f2:	0b 1c       	ld.sh	r12,r5++
8000d9f4:	00 00       	add	r0,r0
8000d9f6:	0d 58       	ld.sh	r8,--r6
8000d9f8:	80 00       	ld.sh	r0,r0[0x0]
8000d9fa:	ab 8c       	lsr	r12,0xa
8000d9fc:	22 53       	sub	r3,37
8000d9fe:	44 2f       	lddsp	pc,sp[0x108]
8000da00:	4d 4d       	lddpc	sp,8000db50 <mem_wr_protect+0x4c>
8000da02:	43 20       	lddsp	r0,sp[0xc8]
8000da04:	43 61       	lddsp	r1,sp[0xd8]
8000da06:	72 64       	ld.w	r4,r9[0x18]
8000da08:	20 6f       	sub	pc,6
8000da0a:	76 65       	ld.w	r5,r11[0x18]
8000da0c:	72 20       	ld.w	r0,r9[0x8]
8000da0e:	53 50       	stdsp	sp[0xd4],r0
8000da10:	49 22       	lddpc	r2,8000da58 <mem_test_unit_ready+0x34>
	...

8000da14 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
8000da14:	eb cd 40 80 	pushm	r7,lr
8000da18:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
8000da1a:	30 18       	mov	r8,1
#endif
}
8000da1c:	10 9c       	mov	r12,r8
8000da1e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da22:	d7 03       	nop

8000da24 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000da24:	eb cd 40 80 	pushm	r7,lr
8000da28:	1a 97       	mov	r7,sp
8000da2a:	20 3d       	sub	sp,12
8000da2c:	18 98       	mov	r8,r12
8000da2e:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000da32:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000da36:	30 08       	mov	r8,0
8000da38:	f0 09 18 00 	cp.b	r9,r8
8000da3c:	c1 01       	brne	8000da5c <mem_test_unit_ready+0x38>
8000da3e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000da42:	48 ea       	lddpc	r10,8000da78 <mem_test_unit_ready+0x54>
8000da44:	12 98       	mov	r8,r9
8000da46:	a3 78       	lsl	r8,0x3
8000da48:	12 18       	sub	r8,r9
8000da4a:	a3 68       	lsl	r8,0x2
8000da4c:	f4 08 00 08 	add	r8,r10,r8
8000da50:	70 08       	ld.w	r8,r8[0x0]
8000da52:	5d 18       	icall	r8
8000da54:	18 98       	mov	r8,r12
8000da56:	ef 48 ff f4 	st.w	r7[-12],r8
8000da5a:	c0 48       	rjmp	8000da62 <mem_test_unit_ready+0x3e>
8000da5c:	30 18       	mov	r8,1
8000da5e:	ef 48 ff f4 	st.w	r7[-12],r8
8000da62:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000da66:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000da6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000da6e:	10 9c       	mov	r12,r8
8000da70:	2f dd       	sub	sp,-12
8000da72:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da76:	00 00       	add	r0,r0
8000da78:	80 00       	ld.sh	r0,r0[0x0]
8000da7a:	fb 90       	*unknown*

8000da7c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
8000da7c:	eb cd 40 80 	pushm	r7,lr
8000da80:	1a 97       	mov	r7,sp
8000da82:	20 4d       	sub	sp,16
8000da84:	18 98       	mov	r8,r12
8000da86:	ef 4b ff f4 	st.w	r7[-12],r11
8000da8a:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000da8e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000da92:	30 08       	mov	r8,0
8000da94:	f0 09 18 00 	cp.b	r9,r8
8000da98:	c1 11       	brne	8000daba <mem_read_capacity+0x3e>
8000da9a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000da9e:	48 ea       	lddpc	r10,8000dad4 <mem_read_capacity+0x58>
8000daa0:	12 98       	mov	r8,r9
8000daa2:	a3 78       	lsl	r8,0x3
8000daa4:	12 18       	sub	r8,r9
8000daa6:	2f f8       	sub	r8,-1
8000daa8:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000daac:	ee fc ff f4 	ld.w	r12,r7[-12]
8000dab0:	5d 18       	icall	r8
8000dab2:	18 98       	mov	r8,r12
8000dab4:	ef 48 ff f0 	st.w	r7[-16],r8
8000dab8:	c0 48       	rjmp	8000dac0 <mem_read_capacity+0x44>
8000daba:	30 18       	mov	r8,1
8000dabc:	ef 48 ff f0 	st.w	r7[-16],r8
8000dac0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000dac4:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000dac8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000dacc:	10 9c       	mov	r12,r8
8000dace:	2f cd       	sub	sp,-16
8000dad0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dad4:	80 00       	ld.sh	r0,r0[0x0]
8000dad6:	fb 90       	*unknown*

8000dad8 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
8000dad8:	eb cd 40 80 	pushm	r7,lr
8000dadc:	1a 97       	mov	r7,sp
8000dade:	20 2d       	sub	sp,8
8000dae0:	18 98       	mov	r8,r12
8000dae2:	ef 68 ff f8 	st.b	r7[-8],r8
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
8000dae6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000daea:	30 08       	mov	r8,0
8000daec:	f0 09 18 00 	cp.b	r9,r8
8000daf0:	5f 08       	sreq	r8
8000daf2:	ef 68 ff ff 	st.b	r7[-1],r8
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
8000daf6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000dafa:	10 9c       	mov	r12,r8
8000dafc:	2f ed       	sub	sp,-8
8000dafe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000db02:	d7 03       	nop

8000db04 <mem_wr_protect>:


Bool mem_wr_protect(U8 lun)
{
8000db04:	eb cd 40 80 	pushm	r7,lr
8000db08:	1a 97       	mov	r7,sp
8000db0a:	20 3d       	sub	sp,12
8000db0c:	18 98       	mov	r8,r12
8000db0e:	ef 68 ff f8 	st.b	r7[-8],r8
  Bool wr_protect;

  if (!Ctrl_access_lock()) return TRUE;

  wr_protect =
8000db12:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000db16:	30 08       	mov	r8,0
8000db18:	f0 09 18 00 	cp.b	r9,r8
8000db1c:	c1 11       	brne	8000db3e <mem_wr_protect+0x3a>
8000db1e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000db22:	48 fa       	lddpc	r10,8000db5c <mem_wr_protect+0x58>
8000db24:	12 98       	mov	r8,r9
8000db26:	a3 78       	lsl	r8,0x3
8000db28:	12 18       	sub	r8,r9
8000db2a:	a3 68       	lsl	r8,0x2
8000db2c:	f4 08 00 08 	add	r8,r10,r8
8000db30:	2f 88       	sub	r8,-8
8000db32:	70 08       	ld.w	r8,r8[0x0]
8000db34:	5d 18       	icall	r8
8000db36:	18 98       	mov	r8,r12
8000db38:	ef 48 ff f4 	st.w	r7[-12],r8
8000db3c:	c0 48       	rjmp	8000db44 <mem_wr_protect+0x40>
8000db3e:	30 19       	mov	r9,1
8000db40:	ef 49 ff f4 	st.w	r7[-12],r9
8000db44:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000db48:	12 98       	mov	r8,r9
8000db4a:	ef 68 ff ff 	st.b	r7[-1],r8
                                 TRUE;
#endif

  Ctrl_access_unlock();

  return wr_protect;
8000db4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000db52:	10 9c       	mov	r12,r8
8000db54:	2f dd       	sub	sp,-12
8000db56:	e3 cd 80 80 	ldm	sp++,r7,pc
8000db5a:	00 00       	add	r0,r0
8000db5c:	80 00       	ld.sh	r0,r0[0x0]
8000db5e:	fb 90       	*unknown*

8000db60 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
8000db60:	eb cd 40 80 	pushm	r7,lr
8000db64:	1a 97       	mov	r7,sp
8000db66:	20 5d       	sub	sp,20
8000db68:	18 98       	mov	r8,r12
8000db6a:	ef 4b ff f4 	st.w	r7[-12],r11
8000db6e:	ef 4a ff f0 	st.w	r7[-16],r10
8000db72:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
8000db76:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000db7a:	30 08       	mov	r8,0
8000db7c:	f0 09 18 00 	cp.b	r9,r8
8000db80:	c1 51       	brne	8000dbaa <memory_2_ram+0x4a>
8000db82:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000db86:	49 0a       	lddpc	r10,8000dbc4 <memory_2_ram+0x64>
8000db88:	12 98       	mov	r8,r9
8000db8a:	a3 78       	lsl	r8,0x3
8000db8c:	12 18       	sub	r8,r9
8000db8e:	a3 68       	lsl	r8,0x2
8000db90:	f4 08 00 08 	add	r8,r10,r8
8000db94:	2f 08       	sub	r8,-16
8000db96:	70 08       	ld.w	r8,r8[0x0]
8000db98:	ee fb ff f0 	ld.w	r11,r7[-16]
8000db9c:	ee fc ff f4 	ld.w	r12,r7[-12]
8000dba0:	5d 18       	icall	r8
8000dba2:	18 98       	mov	r8,r12
8000dba4:	ef 48 ff ec 	st.w	r7[-20],r8
8000dba8:	c0 48       	rjmp	8000dbb0 <memory_2_ram+0x50>
8000dbaa:	30 18       	mov	r8,1
8000dbac:	ef 48 ff ec 	st.w	r7[-20],r8
8000dbb0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000dbb4:	ef 48 ff fc 	st.w	r7[-4],r8
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
8000dbb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000dbbc:	10 9c       	mov	r12,r8
8000dbbe:	2f bd       	sub	sp,-20
8000dbc0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dbc4:	80 00       	ld.sh	r0,r0[0x0]
8000dbc6:	fb 90       	*unknown*

8000dbc8 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
8000dbc8:	eb cd 40 80 	pushm	r7,lr
8000dbcc:	1a 97       	mov	r7,sp
8000dbce:	20 5d       	sub	sp,20
8000dbd0:	18 98       	mov	r8,r12
8000dbd2:	ef 4b ff f4 	st.w	r7[-12],r11
8000dbd6:	ef 4a ff f0 	st.w	r7[-16],r10
8000dbda:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
8000dbde:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000dbe2:	30 08       	mov	r8,0
8000dbe4:	f0 09 18 00 	cp.b	r9,r8
8000dbe8:	c1 51       	brne	8000dc12 <ram_2_memory+0x4a>
8000dbea:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000dbee:	49 0a       	lddpc	r10,8000dc2c <ram_2_memory+0x64>
8000dbf0:	12 98       	mov	r8,r9
8000dbf2:	a3 78       	lsl	r8,0x3
8000dbf4:	12 18       	sub	r8,r9
8000dbf6:	a3 68       	lsl	r8,0x2
8000dbf8:	f4 08 00 08 	add	r8,r10,r8
8000dbfc:	2e c8       	sub	r8,-20
8000dbfe:	70 08       	ld.w	r8,r8[0x0]
8000dc00:	ee fb ff f0 	ld.w	r11,r7[-16]
8000dc04:	ee fc ff f4 	ld.w	r12,r7[-12]
8000dc08:	5d 18       	icall	r8
8000dc0a:	18 98       	mov	r8,r12
8000dc0c:	ef 48 ff ec 	st.w	r7[-20],r8
8000dc10:	c0 48       	rjmp	8000dc18 <ram_2_memory+0x50>
8000dc12:	30 18       	mov	r8,1
8000dc14:	ef 48 ff ec 	st.w	r7[-20],r8
8000dc18:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000dc1c:	ef 48 ff fc 	st.w	r7[-4],r8
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
8000dc20:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000dc24:	10 9c       	mov	r12,r8
8000dc26:	2f bd       	sub	sp,-20
8000dc28:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dc2c:	80 00       	ld.sh	r0,r0[0x0]
8000dc2e:	fb 90       	*unknown*
8000dc30:	63 64       	ld.w	r4,r1[0x58]
8000dc32:	00 00       	add	r0,r0
8000dc34:	6c 73       	ld.w	r3,r6[0x1c]
8000dc36:	00 00       	add	r0,r0
8000dc38:	6d 6b       	ld.w	r11,r6[0x58]
8000dc3a:	64 69       	ld.w	r9,r2[0x18]
8000dc3c:	72 00       	ld.w	r0,r9[0x0]
8000dc3e:	00 00       	add	r0,r0
8000dc40:	74 6f       	ld.w	pc,r10[0x18]
8000dc42:	75 63       	ld.w	r3,r10[0x58]
8000dc44:	68 00       	ld.w	r0,r4[0x0]
8000dc46:	00 00       	add	r0,r0
8000dc48:	63 61       	ld.w	r1,r1[0x58]
8000dc4a:	74 00       	ld.w	r0,r10[0x0]
8000dc4c:	73 74       	ld.w	r4,r9[0x5c]
8000dc4e:	61 72       	ld.w	r2,r0[0x5c]
8000dc50:	74 00       	ld.w	r0,r10[0x0]
8000dc52:	00 00       	add	r0,r0
8000dc54:	73 74       	ld.w	r4,r9[0x5c]
8000dc56:	6f 70       	ld.w	r0,r7[0x5c]
8000dc58:	00 00       	add	r0,r0
8000dc5a:	00 00       	add	r0,r0
8000dc5c:	43 6f       	lddsp	pc,sp[0xd8]
8000dc5e:	6d 6d       	ld.w	sp,r6[0x58]
8000dc60:	61 6e       	ld.w	lr,r0[0x58]
8000dc62:	64 20       	ld.w	r0,r2[0x8]
8000dc64:	6e 6f       	ld.w	pc,r7[0x18]
8000dc66:	74 20       	ld.w	r0,r10[0x8]
8000dc68:	66 6f       	ld.w	pc,r3[0x18]
8000dc6a:	75 6e       	ld.w	lr,r10[0x58]
8000dc6c:	64 0a       	ld.w	r10,r2[0x0]
8000dc6e:	0d 00       	ld.w	r0,r6++
8000dc70:	08 20       	rsub	r0,r4
8000dc72:	08 00       	add	r0,r4
8000dc74:	0a 0d       	add	sp,r5
8000dc76:	56 6f       	stdsp	sp[0x198],pc
8000dc78:	6c 75       	ld.w	r5,r6[0x1c]
8000dc7a:	6d 65       	ld.w	r5,r6[0x58]
8000dc7c:	20 69       	sub	r9,6
8000dc7e:	73 00       	ld.w	r0,r9[0x40]
8000dc80:	3a 0a       	mov	r10,-96
8000dc82:	0d 44       	ld.w	r4,--r6
8000dc84:	69 72       	ld.w	r2,r4[0x5c]
8000dc86:	20 6e       	sub	lr,6
8000dc88:	61 6d       	ld.w	sp,r0[0x58]
8000dc8a:	65 20       	ld.w	r0,r2[0x48]
8000dc8c:	69 73       	ld.w	r3,r4[0x5c]
8000dc8e:	00 00       	add	r0,r0
8000dc90:	09 53       	ld.sh	r3,--r4
8000dc92:	69 7a       	ld.w	r10,r4[0x5c]
8000dc94:	65 20       	ld.w	r0,r2[0x48]
8000dc96:	28 42       	sub	r2,-124
8000dc98:	79 74       	ld.w	r4,r12[0x5c]
8000dc9a:	65 73       	ld.w	r3,r2[0x5c]
8000dc9c:	29 09       	sub	r9,-112
8000dc9e:	4e 61       	lddpc	r1,8000de34 <PrintNumber+0x8c>
8000dca0:	6d 65       	ld.w	r5,r6[0x58]
8000dca2:	0a 0d       	add	sp,r5
8000dca4:	00 00       	add	r0,r0
8000dca6:	00 00       	add	r0,r0
8000dca8:	44 69       	lddsp	r9,sp[0x118]
8000dcaa:	72 09       	ld.w	r9,r9[0x0]
8000dcac:	00 00       	add	r0,r0
8000dcae:	00 00       	add	r0,r0
8000dcb0:	20 20       	sub	r0,2
8000dcb2:	20 09       	sub	r9,0
8000dcb4:	00 00       	add	r0,r0
8000dcb6:	00 00       	add	r0,r0
8000dcb8:	09 09       	ld.w	r9,r4++
8000dcba:	00 00       	add	r0,r0
8000dcbc:	20 20       	sub	r0,2
8000dcbe:	46 69       	lddsp	r9,sp[0x198]
8000dcc0:	6c 65       	ld.w	r5,r6[0x18]
8000dcc2:	73 0a       	ld.w	r10,r9[0x40]
8000dcc4:	0d 00       	ld.w	r0,r6++
8000dcc6:	00 00       	add	r0,r0
8000dcc8:	20 20       	sub	r0,2
8000dcca:	44 69       	lddsp	r9,sp[0x118]
8000dccc:	72 0a       	ld.w	r10,r9[0x0]
8000dcce:	0d 00       	ld.w	r0,r6++
8000dcd0:	55 6e       	stdsp	sp[0x158],lr
8000dcd2:	6b 6e       	ld.w	lr,r5[0x58]
8000dcd4:	6f 77       	ld.w	r7,r7[0x5c]
8000dcd6:	6e 20       	ld.w	r0,r7[0x8]
8000dcd8:	66 69       	ld.w	r9,r3[0x18]
8000dcda:	6c 65       	ld.w	r5,r6[0x18]
8000dcdc:	0a 0d       	add	sp,r5
8000dcde:	00 00       	add	r0,r0
8000dce0:	53 74       	stdsp	sp[0xdc],r4
8000dce2:	61 72       	ld.w	r2,r0[0x5c]
8000dce4:	74 20       	ld.w	r0,r10[0x8]
8000dce6:	52 65       	stdsp	sp[0x98],r5
8000dce8:	63 6f       	ld.w	pc,r1[0x58]
8000dcea:	72 64       	ld.w	r4,r9[0x18]
8000dcec:	69 6e       	ld.w	lr,r4[0x58]
8000dcee:	67 00       	ld.w	r0,r3[0x40]
8000dcf0:	09 6f       	ld.uh	pc,--r4
8000dcf2:	70 65       	ld.w	r5,r8[0x18]
8000dcf4:	6e 20       	ld.w	r0,r7[0x8]
8000dcf6:	66 69       	ld.w	r9,r3[0x18]
8000dcf8:	6c 65       	ld.w	r5,r6[0x18]
8000dcfa:	20 73       	sub	r3,7
8000dcfc:	75 63       	ld.w	r3,r10[0x58]
8000dcfe:	63 65       	ld.w	r5,r1[0x58]
8000dd00:	73 73       	ld.w	r3,r9[0x5c]
8000dd02:	66 75       	ld.w	r5,r3[0x1c]
8000dd04:	6c 6c       	ld.w	r12,r6[0x18]
8000dd06:	79 0a       	ld.w	r10,r12[0x40]
8000dd08:	0d 00       	ld.w	r0,r6++
8000dd0a:	00 00       	add	r0,r0
8000dd0c:	53 74       	stdsp	sp[0xdc],r4
8000dd0e:	6f 70       	ld.w	r0,r7[0x5c]
8000dd10:	20 52       	sub	r2,5
8000dd12:	65 63       	ld.w	r3,r2[0x58]
8000dd14:	6f 72       	ld.w	r2,r7[0x5c]
8000dd16:	64 69       	ld.w	r9,r2[0x18]
8000dd18:	6e 67       	ld.w	r7,r7[0x18]
8000dd1a:	00 00       	add	r0,r0
8000dd1c:	09 63       	ld.uh	r3,--r4
8000dd1e:	6c 6f       	ld.w	pc,r6[0x18]
8000dd20:	73 65       	ld.w	r5,r9[0x58]
8000dd22:	20 66       	sub	r6,6
8000dd24:	69 6c       	ld.w	r12,r4[0x58]
8000dd26:	65 20       	ld.w	r0,r2[0x48]
8000dd28:	73 75       	ld.w	r5,r9[0x5c]
8000dd2a:	63 63       	ld.w	r3,r1[0x58]
8000dd2c:	65 73       	ld.w	r3,r2[0x5c]
8000dd2e:	73 66       	ld.w	r6,r9[0x58]
8000dd30:	75 6c       	ld.w	r12,r10[0x58]
8000dd32:	6c 79       	ld.w	r9,r6[0x1c]
8000dd34:	0a 0d       	add	sp,r5
	...

8000dd38 <_init_startup>:
 * add-ons' interrupt vectors are not compatible with the interrupt management
 * of the INTC module.
 * More low-level initializations are besides added here.
 */
int _init_startup(void)
{
8000dd38:	eb cd 40 80 	pushm	r7,lr
8000dd3c:	1a 97       	mov	r7,sp
  // Import the Exception Vector Base Address.
  extern void _evba;

  // Load the Exception Vector Base Address in the corresponding system register.
  Set_system_register(AVR32_EVBA, (int)&_evba);
8000dd3e:	48 88       	lddpc	r8,8000dd5c <_init_startup+0x24>
8000dd40:	e3 b8 00 01 	mtsr	0x4,r8

  // Enable exceptions.
  Enable_global_exception();
8000dd44:	d5 53       	csrf	0x15

  // Initialize interrupt handling.
  INTC_init_interrupts();
8000dd46:	f0 1f 00 07 	mcall	8000dd60 <_init_startup+0x28>

  // Initialize the USART used for the debug trace with the configured parameters.
  set_usart_base( ( void * ) DBG_USART );
8000dd4a:	fe 7c 18 00 	mov	r12,-59392
8000dd4e:	f0 1f 00 06 	mcall	8000dd64 <_init_startup+0x2c>

  // Don't-care value for GCC.
  return 1;
8000dd52:	30 18       	mov	r8,1
}
8000dd54:	10 9c       	mov	r12,r8
8000dd56:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dd5a:	00 00       	add	r0,r0
8000dd5c:	80 00       	ld.sh	r0,r0[0x0]
8000dd5e:	f8 00       	*unknown*
8000dd60:	80 00       	ld.sh	r0,r0[0x0]
8000dd62:	26 f0       	sub	r0,111
8000dd64:	80 00       	ld.sh	r0,r0[0x0]
8000dd66:	eb 60 eb cd 	st.b	r5[-5171],r0

8000dd68 <PrintString>:
 *
 * This function allows to set the \ref cmd_type variable to the command type
 * decoded with its respective arguments \ref par_str1 and \ref par_str2.
 */
static void PrintString(char* s)
{
8000dd68:	eb cd 40 80 	pushm	r7,lr
8000dd6c:	1a 97       	mov	r7,sp
8000dd6e:	20 1d       	sub	sp,4
8000dd70:	ef 4c ff fc 	st.w	r7[-4],r12
8000dd74:	c0 c8       	rjmp	8000dd8c <PrintString+0x24>
    for(;*s!='\0';s++)
    {
    	uart_usb_putchar(*s);
8000dd76:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd7a:	11 88       	ld.ub	r8,r8[0x0]
8000dd7c:	10 9c       	mov	r12,r8
8000dd7e:	f0 1f 00 09 	mcall	8000dda0 <PrintString+0x38>
 * This function allows to set the \ref cmd_type variable to the command type
 * decoded with its respective arguments \ref par_str1 and \ref par_str2.
 */
static void PrintString(char* s)
{
    for(;*s!='\0';s++)
8000dd82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd86:	2f f8       	sub	r8,-1
8000dd88:	ef 48 ff fc 	st.w	r7[-4],r8
8000dd8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd90:	11 88       	ld.ub	r8,r8[0x0]
8000dd92:	58 08       	cp.w	r8,0
8000dd94:	cf 11       	brne	8000dd76 <PrintString+0xe>
    {
    	uart_usb_putchar(*s);
    }
    uart_usb_flush();
8000dd96:	f0 1f 00 04 	mcall	8000dda4 <PrintString+0x3c>
}
8000dd9a:	2f fd       	sub	sp,-4
8000dd9c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dda0:	80 00       	ld.sh	r0,r0[0x0]
8000dda2:	84 70       	ld.sh	r0,r2[0xe]
8000dda4:	80 00       	ld.sh	r0,r0[0x0]
8000dda6:	84 d4       	ld.uh	r4,r2[0xa]

8000dda8 <PrintNumber>:

static void PrintNumber(unsigned long n)
{
8000dda8:	eb cd 40 80 	pushm	r7,lr
8000ddac:	1a 97       	mov	r7,sp
8000ddae:	20 6d       	sub	sp,24
8000ddb0:	ef 4c ff ec 	st.w	r7[-20],r12
    char tmp[11];
    int i = sizeof(tmp) - 1;
8000ddb4:	30 a8       	mov	r8,10
8000ddb6:	ef 48 ff fc 	st.w	r7[-4],r8
    // Convert the given number to an ASCII decimal representation.
    tmp[i] = '\0';
8000ddba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ddbe:	ee 08 00 09 	add	r9,r7,r8
8000ddc2:	30 08       	mov	r8,0
8000ddc4:	f3 68 ff f0 	st.b	r9[-16],r8
    do
    {
        tmp[--i] = '0' + n % 10;
8000ddc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ddcc:	20 18       	sub	r8,1
8000ddce:	ef 48 ff fc 	st.w	r7[-4],r8
8000ddd2:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ddd6:	ee fa ff ec 	ld.w	r10,r7[-20]
8000ddda:	e0 68 cc cd 	mov	r8,52429
8000ddde:	ea 18 cc cc 	orh	r8,0xcccc
8000dde2:	f4 08 06 48 	mulu.d	r8,r10,r8
8000dde6:	f2 0c 16 03 	lsr	r12,r9,0x3
8000ddea:	ef 4c ff e8 	st.w	r7[-24],r12
8000ddee:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000ddf2:	a3 68       	lsl	r8,0x2
8000ddf4:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ddf8:	12 08       	add	r8,r9
8000ddfa:	a1 78       	lsl	r8,0x1
8000ddfc:	f4 08 01 08 	sub	r8,r10,r8
8000de00:	ef 48 ff e8 	st.w	r7[-24],r8
8000de04:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000de08:	5c 58       	castu.b	r8
8000de0a:	2d 08       	sub	r8,-48
8000de0c:	5c 58       	castu.b	r8
8000de0e:	ee 0b 00 09 	add	r9,r7,r11
8000de12:	f3 68 ff f0 	st.b	r9[-16],r8
        n /= 10;
8000de16:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000de1a:	e0 68 cc cd 	mov	r8,52429
8000de1e:	ea 18 cc cc 	orh	r8,0xcccc
8000de22:	f2 08 06 48 	mulu.d	r8,r9,r8
8000de26:	f2 08 16 03 	lsr	r8,r9,0x3
8000de2a:	ef 48 ff ec 	st.w	r7[-20],r8
    } while (n);
8000de2e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000de32:	58 08       	cp.w	r8,0
8000de34:	cc a1       	brne	8000ddc8 <PrintNumber+0x20>

    PrintString(tmp+i);
8000de36:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000de3a:	ee c8 00 10 	sub	r8,r7,16
8000de3e:	12 08       	add	r8,r9
8000de40:	10 9c       	mov	r12,r8
8000de42:	f0 1f 00 03 	mcall	8000de4c <PrintNumber+0xa4>
}
8000de46:	2f ad       	sub	sp,-24
8000de48:	e3 cd 80 80 	ldm	sp++,r7,pc
8000de4c:	80 00       	ld.sh	r0,r0[0x0]
8000de4e:	dd 68       	*unknown*

8000de50 <fat_example_parse_cmd>:


static void fat_example_parse_cmd(void)
{
8000de50:	eb cd 40 80 	pushm	r7,lr
8000de54:	1a 97       	mov	r7,sp
8000de56:	20 1d       	sub	sp,4
  U8 i, j;

  // Get command type.
  for (i = 0; cmd_str[i] != ' ' && i < i_str; i++);
8000de58:	30 08       	mov	r8,0
8000de5a:	ef 68 ff fe 	st.b	r7[-2],r8
8000de5e:	c0 68       	rjmp	8000de6a <fat_example_parse_cmd+0x1a>
8000de60:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000de64:	2f f8       	sub	r8,-1
8000de66:	ef 68 ff fe 	st.b	r7[-2],r8
8000de6a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000de6e:	fe f8 03 2e 	ld.w	r8,pc[814]
8000de72:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000de76:	32 08       	mov	r8,32
8000de78:	f0 09 18 00 	cp.b	r9,r8
8000de7c:	c0 90       	breq	8000de8e <fat_example_parse_cmd+0x3e>
8000de7e:	fe f8 03 22 	ld.w	r8,pc[802]
8000de82:	11 89       	ld.ub	r9,r8[0x0]
8000de84:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000de88:	f2 08 18 00 	cp.b	r8,r9
8000de8c:	ce a3       	brcs	8000de60 <fat_example_parse_cmd+0x10>

  if (i)
8000de8e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000de92:	30 08       	mov	r8,0
8000de94:	f0 09 18 00 	cp.b	r9,r8
8000de98:	e0 80 00 8e 	breq	8000dfb4 <fat_example_parse_cmd+0x164>
  {
    cmd = TRUE;
8000de9c:	fe f9 03 08 	ld.w	r9,pc[776]
8000dea0:	30 18       	mov	r8,1
8000dea2:	b2 88       	st.b	r9[0x0],r8
    // Save last byte
    j = cmd_str[i];
8000dea4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000dea8:	fe f8 02 f4 	ld.w	r8,pc[756]
8000deac:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000deb0:	ef 68 ff ff 	st.b	r7[-1],r8
    // Reset vars
    cmd_str[i] = '\0';
8000deb4:	ef 3a ff fe 	ld.ub	r10,r7[-2]
8000deb8:	fe f9 02 e4 	ld.w	r9,pc[740]
8000debc:	30 08       	mov	r8,0
8000debe:	f2 0a 0b 08 	st.b	r9[r10],r8
    par_str1[0] = '\0';
8000dec2:	fe f9 02 e6 	ld.w	r9,pc[742]
8000dec6:	30 08       	mov	r8,0
8000dec8:	b2 88       	st.b	r9[0x0],r8
    par_str2[0] = '\0';
8000deca:	fe f9 02 e2 	ld.w	r9,pc[738]
8000dece:	30 08       	mov	r8,0
8000ded0:	b2 88       	st.b	r9[0x0],r8

    // Decode command type.
    if      (!strcmp(cmd_str, STR_CD      )) cmd_type = CMD_CD;
8000ded2:	fe fb 02 de 	ld.w	r11,pc[734]
8000ded6:	fe fc 02 c6 	ld.w	r12,pc[710]
8000deda:	f0 1f 00 b7 	mcall	8000e1b4 <fat_example_parse_cmd+0x364>
8000dede:	18 98       	mov	r8,r12
8000dee0:	58 08       	cp.w	r8,0
8000dee2:	c0 61       	brne	8000deee <fat_example_parse_cmd+0x9e>
8000dee4:	fe f9 02 d4 	ld.w	r9,pc[724]
8000dee8:	30 38       	mov	r8,3
8000deea:	b2 88       	st.b	r9[0x0],r8
8000deec:	c5 d8       	rjmp	8000dfa6 <fat_example_parse_cmd+0x156>
    else if (!strcmp(cmd_str, STR_LS      )) cmd_type = CMD_LS;
8000deee:	fe fb 02 ce 	ld.w	r11,pc[718]
8000def2:	fe fc 02 aa 	ld.w	r12,pc[682]
8000def6:	f0 1f 00 b0 	mcall	8000e1b4 <fat_example_parse_cmd+0x364>
8000defa:	18 98       	mov	r8,r12
8000defc:	58 08       	cp.w	r8,0
8000defe:	c0 61       	brne	8000df0a <fat_example_parse_cmd+0xba>
8000df00:	fe f9 02 b8 	ld.w	r9,pc[696]
8000df04:	30 28       	mov	r8,2
8000df06:	b2 88       	st.b	r9[0x0],r8
8000df08:	c4 f8       	rjmp	8000dfa6 <fat_example_parse_cmd+0x156>
    else if (!strcmp(cmd_str, STR_MKDIR   )) cmd_type = CMD_MKDIR;
8000df0a:	fe fb 02 b6 	ld.w	r11,pc[694]
8000df0e:	fe fc 02 8e 	ld.w	r12,pc[654]
8000df12:	f0 1f 00 a9 	mcall	8000e1b4 <fat_example_parse_cmd+0x364>
8000df16:	18 98       	mov	r8,r12
8000df18:	58 08       	cp.w	r8,0
8000df1a:	c0 61       	brne	8000df26 <fat_example_parse_cmd+0xd6>
8000df1c:	fe f9 02 9c 	ld.w	r9,pc[668]
8000df20:	30 68       	mov	r8,6
8000df22:	b2 88       	st.b	r9[0x0],r8
8000df24:	c4 18       	rjmp	8000dfa6 <fat_example_parse_cmd+0x156>
    else if (!strcmp(cmd_str, STR_TOUCH   )) cmd_type = CMD_TOUCH;
8000df26:	fe fb 02 9e 	ld.w	r11,pc[670]
8000df2a:	fe fc 02 72 	ld.w	r12,pc[626]
8000df2e:	f0 1f 00 a2 	mcall	8000e1b4 <fat_example_parse_cmd+0x364>
8000df32:	18 98       	mov	r8,r12
8000df34:	58 08       	cp.w	r8,0
8000df36:	c0 61       	brne	8000df42 <fat_example_parse_cmd+0xf2>
8000df38:	fe f9 02 80 	ld.w	r9,pc[640]
8000df3c:	30 78       	mov	r8,7
8000df3e:	b2 88       	st.b	r9[0x0],r8
8000df40:	c3 38       	rjmp	8000dfa6 <fat_example_parse_cmd+0x156>
    else if (!strcmp(cmd_str, STR_CAT     )) cmd_type = CMD_CAT;
8000df42:	fe fb 02 86 	ld.w	r11,pc[646]
8000df46:	fe fc 02 56 	ld.w	r12,pc[598]
8000df4a:	f0 1f 00 9b 	mcall	8000e1b4 <fat_example_parse_cmd+0x364>
8000df4e:	18 98       	mov	r8,r12
8000df50:	58 08       	cp.w	r8,0
8000df52:	c0 61       	brne	8000df5e <fat_example_parse_cmd+0x10e>
8000df54:	fe f9 02 64 	ld.w	r9,pc[612]
8000df58:	30 48       	mov	r8,4
8000df5a:	b2 88       	st.b	r9[0x0],r8
8000df5c:	c2 58       	rjmp	8000dfa6 <fat_example_parse_cmd+0x156>
    else if (!strcmp(cmd_str, STR_START))    cmd_type = CMD_START;
8000df5e:	fe fb 02 6e 	ld.w	r11,pc[622]
8000df62:	fe fc 02 3a 	ld.w	r12,pc[570]
8000df66:	f0 1f 00 94 	mcall	8000e1b4 <fat_example_parse_cmd+0x364>
8000df6a:	18 98       	mov	r8,r12
8000df6c:	58 08       	cp.w	r8,0
8000df6e:	c0 61       	brne	8000df7a <fat_example_parse_cmd+0x12a>
8000df70:	fe f9 02 48 	ld.w	r9,pc[584]
8000df74:	31 38       	mov	r8,19
8000df76:	b2 88       	st.b	r9[0x0],r8
8000df78:	c1 78       	rjmp	8000dfa6 <fat_example_parse_cmd+0x156>
    else if (!strcmp(cmd_str, STR_STOP))     cmd_type = CMD_STOP;
8000df7a:	fe fb 02 56 	ld.w	r11,pc[598]
8000df7e:	fe fc 02 1e 	ld.w	r12,pc[542]
8000df82:	f0 1f 00 8d 	mcall	8000e1b4 <fat_example_parse_cmd+0x364>
8000df86:	18 98       	mov	r8,r12
8000df88:	58 08       	cp.w	r8,0
8000df8a:	c0 61       	brne	8000df96 <fat_example_parse_cmd+0x146>
8000df8c:	fe f9 02 2c 	ld.w	r9,pc[556]
8000df90:	31 48       	mov	r8,20
8000df92:	b2 88       	st.b	r9[0x0],r8
8000df94:	c0 98       	rjmp	8000dfa6 <fat_example_parse_cmd+0x156>
    else
    {
      // error : command not found
      PrintString(MSG_ER_CMD_NOT_FOUND);
8000df96:	fe fc 02 3e 	ld.w	r12,pc[574]
8000df9a:	f0 1f 00 90 	mcall	8000e1d8 <fat_example_parse_cmd+0x388>
      cmd = FALSE;
8000df9e:	fe f9 02 06 	ld.w	r9,pc[518]
8000dfa2:	30 08       	mov	r8,0
8000dfa4:	b2 88       	st.b	r9[0x0],r8
    }
    // restore last byte
    cmd_str[i] = j;
8000dfa6:	ef 3a ff fe 	ld.ub	r10,r7[-2]
8000dfaa:	4f d9       	lddpc	r9,8000e19c <fat_example_parse_cmd+0x34c>
8000dfac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dfb0:	f2 0a 0b 08 	st.b	r9[r10],r8
  }
  // if command isn't found, display prompt
  if (!cmd)
8000dfb4:	4f c8       	lddpc	r8,8000e1a4 <fat_example_parse_cmd+0x354>
8000dfb6:	11 88       	ld.ub	r8,r8[0x0]
8000dfb8:	58 08       	cp.w	r8,0
8000dfba:	c0 a1       	brne	8000dfce <fat_example_parse_cmd+0x17e>
  {
    uart_usb_putchar('$');
8000dfbc:	32 4c       	mov	r12,36
8000dfbe:	f0 1f 00 88 	mcall	8000e1dc <fat_example_parse_cmd+0x38c>
    uart_usb_putchar('>');
8000dfc2:	33 ec       	mov	r12,62
8000dfc4:	f0 1f 00 86 	mcall	8000e1dc <fat_example_parse_cmd+0x38c>
    uart_usb_flush();
8000dfc8:	f0 1f 00 86 	mcall	8000e1e0 <fat_example_parse_cmd+0x390>
8000dfcc:	ce 58       	rjmp	8000e196 <fat_example_parse_cmd+0x346>
    return;
  }

  // Get first arg (if any).
  if (++i < i_str)
8000dfce:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dfd2:	2f f8       	sub	r8,-1
8000dfd4:	ef 68 ff fe 	st.b	r7[-2],r8
8000dfd8:	4f 28       	lddpc	r8,8000e1a0 <fat_example_parse_cmd+0x350>
8000dfda:	11 89       	ld.ub	r9,r8[0x0]
8000dfdc:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dfe0:	f2 08 18 00 	cp.b	r8,r9
8000dfe4:	c6 72       	brcc	8000e0b2 <fat_example_parse_cmd+0x262>
  {
    j = 0;
8000dfe6:	30 08       	mov	r8,0
8000dfe8:	ef 68 ff ff 	st.b	r7[-1],r8
    // remove " if used
    if (cmd_str[i] == '"')
8000dfec:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000dff0:	4e b8       	lddpc	r8,8000e19c <fat_example_parse_cmd+0x34c>
8000dff2:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000dff6:	32 28       	mov	r8,34
8000dff8:	f0 09 18 00 	cp.b	r9,r8
8000dffc:	c4 51       	brne	8000e086 <fat_example_parse_cmd+0x236>
    {
      i++;
8000dffe:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e002:	2f f8       	sub	r8,-1
8000e004:	ef 68 ff fe 	st.b	r7[-2],r8
8000e008:	c1 58       	rjmp	8000e032 <fat_example_parse_cmd+0x1e2>
      for (; cmd_str[i] != '"' && i < i_str; i++, j++)
      {
        par_str1[j] = cmd_str[i];
8000e00a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000e00e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000e012:	4e 38       	lddpc	r8,8000e19c <fat_example_parse_cmd+0x34c>
8000e014:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000e018:	4e 49       	lddpc	r9,8000e1a8 <fat_example_parse_cmd+0x358>
8000e01a:	f2 0a 0b 08 	st.b	r9[r10],r8
    j = 0;
    // remove " if used
    if (cmd_str[i] == '"')
    {
      i++;
      for (; cmd_str[i] != '"' && i < i_str; i++, j++)
8000e01e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e022:	2f f8       	sub	r8,-1
8000e024:	ef 68 ff fe 	st.b	r7[-2],r8
8000e028:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e02c:	2f f8       	sub	r8,-1
8000e02e:	ef 68 ff ff 	st.b	r7[-1],r8
8000e032:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000e036:	4d a8       	lddpc	r8,8000e19c <fat_example_parse_cmd+0x34c>
8000e038:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000e03c:	32 28       	mov	r8,34
8000e03e:	f0 09 18 00 	cp.b	r9,r8
8000e042:	c0 80       	breq	8000e052 <fat_example_parse_cmd+0x202>
8000e044:	4d 78       	lddpc	r8,8000e1a0 <fat_example_parse_cmd+0x350>
8000e046:	11 89       	ld.ub	r9,r8[0x0]
8000e048:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e04c:	f2 08 18 00 	cp.b	r8,r9
8000e050:	cd d3       	brcs	8000e00a <fat_example_parse_cmd+0x1ba>
      {
        par_str1[j] = cmd_str[i];
      }
      i++;
8000e052:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e056:	2f f8       	sub	r8,-1
8000e058:	ef 68 ff fe 	st.b	r7[-2],r8
8000e05c:	c2 58       	rjmp	8000e0a6 <fat_example_parse_cmd+0x256>
    // get the arg directly
    else
    {
      for(; cmd_str[i] != ' ' && i < i_str; i++, j++)
      {
        par_str1[j] = cmd_str[i];
8000e05e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000e062:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000e066:	4c e8       	lddpc	r8,8000e19c <fat_example_parse_cmd+0x34c>
8000e068:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000e06c:	4c f9       	lddpc	r9,8000e1a8 <fat_example_parse_cmd+0x358>
8000e06e:	f2 0a 0b 08 	st.b	r9[r10],r8
      i++;
    }
    // get the arg directly
    else
    {
      for(; cmd_str[i] != ' ' && i < i_str; i++, j++)
8000e072:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e076:	2f f8       	sub	r8,-1
8000e078:	ef 68 ff fe 	st.b	r7[-2],r8
8000e07c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e080:	2f f8       	sub	r8,-1
8000e082:	ef 68 ff ff 	st.b	r7[-1],r8
8000e086:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000e08a:	4c 58       	lddpc	r8,8000e19c <fat_example_parse_cmd+0x34c>
8000e08c:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000e090:	32 08       	mov	r8,32
8000e092:	f0 09 18 00 	cp.b	r9,r8
8000e096:	c0 80       	breq	8000e0a6 <fat_example_parse_cmd+0x256>
8000e098:	4c 28       	lddpc	r8,8000e1a0 <fat_example_parse_cmd+0x350>
8000e09a:	11 89       	ld.ub	r9,r8[0x0]
8000e09c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e0a0:	f2 08 18 00 	cp.b	r8,r9
8000e0a4:	cd d3       	brcs	8000e05e <fat_example_parse_cmd+0x20e>
      {
        par_str1[j] = cmd_str[i];
      }
    }
    // null terminated arg
    par_str1[j] = '\0';
8000e0a6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000e0aa:	4c 09       	lddpc	r9,8000e1a8 <fat_example_parse_cmd+0x358>
8000e0ac:	30 08       	mov	r8,0
8000e0ae:	f2 0a 0b 08 	st.b	r9[r10],r8
  }

  // Get second arg (if any).
  if (++i < i_str)
8000e0b2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e0b6:	2f f8       	sub	r8,-1
8000e0b8:	ef 68 ff fe 	st.b	r7[-2],r8
8000e0bc:	4b 98       	lddpc	r8,8000e1a0 <fat_example_parse_cmd+0x350>
8000e0be:	11 89       	ld.ub	r9,r8[0x0]
8000e0c0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e0c4:	f2 08 18 00 	cp.b	r8,r9
8000e0c8:	c6 72       	brcc	8000e196 <fat_example_parse_cmd+0x346>
  {
    j = 0;
8000e0ca:	30 08       	mov	r8,0
8000e0cc:	ef 68 ff ff 	st.b	r7[-1],r8
    // remove " if used
    if (cmd_str[i] == '"')
8000e0d0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000e0d4:	4b 28       	lddpc	r8,8000e19c <fat_example_parse_cmd+0x34c>
8000e0d6:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000e0da:	32 28       	mov	r8,34
8000e0dc:	f0 09 18 00 	cp.b	r9,r8
8000e0e0:	c4 51       	brne	8000e16a <fat_example_parse_cmd+0x31a>
    {
      i++;
8000e0e2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e0e6:	2f f8       	sub	r8,-1
8000e0e8:	ef 68 ff fe 	st.b	r7[-2],r8
8000e0ec:	c1 58       	rjmp	8000e116 <fat_example_parse_cmd+0x2c6>
      for (; cmd_str[i] != '"' && i < i_str; i++, j++)
      {
        par_str2[j] = cmd_str[i];
8000e0ee:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000e0f2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000e0f6:	4a a8       	lddpc	r8,8000e19c <fat_example_parse_cmd+0x34c>
8000e0f8:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000e0fc:	4a c9       	lddpc	r9,8000e1ac <fat_example_parse_cmd+0x35c>
8000e0fe:	f2 0a 0b 08 	st.b	r9[r10],r8
    j = 0;
    // remove " if used
    if (cmd_str[i] == '"')
    {
      i++;
      for (; cmd_str[i] != '"' && i < i_str; i++, j++)
8000e102:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e106:	2f f8       	sub	r8,-1
8000e108:	ef 68 ff fe 	st.b	r7[-2],r8
8000e10c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e110:	2f f8       	sub	r8,-1
8000e112:	ef 68 ff ff 	st.b	r7[-1],r8
8000e116:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000e11a:	4a 18       	lddpc	r8,8000e19c <fat_example_parse_cmd+0x34c>
8000e11c:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000e120:	32 28       	mov	r8,34
8000e122:	f0 09 18 00 	cp.b	r9,r8
8000e126:	c0 80       	breq	8000e136 <fat_example_parse_cmd+0x2e6>
8000e128:	49 e8       	lddpc	r8,8000e1a0 <fat_example_parse_cmd+0x350>
8000e12a:	11 89       	ld.ub	r9,r8[0x0]
8000e12c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e130:	f2 08 18 00 	cp.b	r8,r9
8000e134:	cd d3       	brcs	8000e0ee <fat_example_parse_cmd+0x29e>
      {
        par_str2[j] = cmd_str[i];
      }
      i++;
8000e136:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e13a:	2f f8       	sub	r8,-1
8000e13c:	ef 68 ff fe 	st.b	r7[-2],r8
8000e140:	c2 58       	rjmp	8000e18a <fat_example_parse_cmd+0x33a>
    // get the arg directly
    else
    {
      for (; cmd_str[i] != ' ' && i < i_str; i++, j++)
      {
        par_str2[j] = cmd_str[i];
8000e142:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000e146:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000e14a:	49 58       	lddpc	r8,8000e19c <fat_example_parse_cmd+0x34c>
8000e14c:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000e150:	49 79       	lddpc	r9,8000e1ac <fat_example_parse_cmd+0x35c>
8000e152:	f2 0a 0b 08 	st.b	r9[r10],r8
      i++;
    }
    // get the arg directly
    else
    {
      for (; cmd_str[i] != ' ' && i < i_str; i++, j++)
8000e156:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e15a:	2f f8       	sub	r8,-1
8000e15c:	ef 68 ff fe 	st.b	r7[-2],r8
8000e160:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e164:	2f f8       	sub	r8,-1
8000e166:	ef 68 ff ff 	st.b	r7[-1],r8
8000e16a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000e16e:	48 c8       	lddpc	r8,8000e19c <fat_example_parse_cmd+0x34c>
8000e170:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000e174:	32 08       	mov	r8,32
8000e176:	f0 09 18 00 	cp.b	r9,r8
8000e17a:	c0 80       	breq	8000e18a <fat_example_parse_cmd+0x33a>
8000e17c:	48 98       	lddpc	r8,8000e1a0 <fat_example_parse_cmd+0x350>
8000e17e:	11 89       	ld.ub	r9,r8[0x0]
8000e180:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000e184:	f2 08 18 00 	cp.b	r8,r9
8000e188:	cd d3       	brcs	8000e142 <fat_example_parse_cmd+0x2f2>
      {
        par_str2[j] = cmd_str[i];
      }
    }
    // null terminated arg
    par_str2[j] = '\0';
8000e18a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000e18e:	48 89       	lddpc	r9,8000e1ac <fat_example_parse_cmd+0x35c>
8000e190:	30 08       	mov	r8,0
8000e192:	f2 0a 0b 08 	st.b	r9[r10],r8
  }
}
8000e196:	2f fd       	sub	sp,-4
8000e198:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e19c:	00 00       	add	r0,r0
8000e19e:	06 80       	andn	r0,r3
8000e1a0:	00 00       	add	r0,r0
8000e1a2:	06 7a       	tst	r10,r3
8000e1a4:	00 00       	add	r0,r0
8000e1a6:	06 7d       	tst	sp,r3
8000e1a8:	00 00       	add	r0,r0
8000e1aa:	06 c8       	st.b	r3++,r8
8000e1ac:	00 00       	add	r0,r0
8000e1ae:	06 e8       	st.h	--r3,r8
8000e1b0:	80 00       	ld.sh	r0,r0[0x0]
8000e1b2:	dc 30       	acall	0x30c
8000e1b4:	80 00       	ld.sh	r0,r0[0x0]
8000e1b6:	f2 24 00 00 	sub	r4,-917504
8000e1ba:	06 7e       	tst	lr,r3
8000e1bc:	80 00       	ld.sh	r0,r0[0x0]
8000e1be:	dc 34       	*unknown*
8000e1c0:	80 00       	ld.sh	r0,r0[0x0]
8000e1c2:	dc 38       	*unknown*
8000e1c4:	80 00       	ld.sh	r0,r0[0x0]
8000e1c6:	dc 40       	acall	0x310
8000e1c8:	80 00       	ld.sh	r0,r0[0x0]
8000e1ca:	dc 48       	*unknown*
8000e1cc:	80 00       	ld.sh	r0,r0[0x0]
8000e1ce:	dc 4c       	*unknown*
8000e1d0:	80 00       	ld.sh	r0,r0[0x0]
8000e1d2:	dc 54       	*unknown*
8000e1d4:	80 00       	ld.sh	r0,r0[0x0]
8000e1d6:	dc 5c       	*unknown*
8000e1d8:	80 00       	ld.sh	r0,r0[0x0]
8000e1da:	dd 68       	*unknown*
8000e1dc:	80 00       	ld.sh	r0,r0[0x0]
8000e1de:	84 70       	ld.sh	r0,r2[0xe]
8000e1e0:	80 00       	ld.sh	r0,r0[0x0]
8000e1e2:	84 d4       	ld.uh	r4,r2[0xa]

8000e1e4 <fat_example_build_cmd>:

/*! \brief Gets the full command line on RS232 input to be interpreted.
 * The cmd_str variable is built with the user inputs.
 */
static void fat_example_build_cmd(void)
{
8000e1e4:	eb cd 40 80 	pushm	r7,lr
8000e1e8:	1a 97       	mov	r7,sp
8000e1ea:	20 2d       	sub	sp,8
  int c;

  if (uart_usb_test_hit())
8000e1ec:	f0 1f 00 34 	mcall	8000e2bc <fat_example_build_cmd+0xd8>
8000e1f0:	18 98       	mov	r8,r12
8000e1f2:	58 08       	cp.w	r8,0
8000e1f4:	c6 00       	breq	8000e2b4 <fat_example_build_cmd+0xd0>
  {
    c=uart_usb_getchar();
8000e1f6:	f0 1f 00 33 	mcall	8000e2c0 <fat_example_build_cmd+0xdc>
8000e1fa:	18 98       	mov	r8,r12
8000e1fc:	ef 48 ff fc 	st.w	r7[-4],r8
    switch (c)
8000e200:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e204:	ef 48 ff f8 	st.w	r7[-8],r8
8000e208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e20c:	58 88       	cp.w	r8,8
8000e20e:	c3 10       	breq	8000e270 <fat_example_build_cmd+0x8c>
8000e210:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e214:	58 d8       	cp.w	r8,13
8000e216:	c0 60       	breq	8000e222 <fat_example_build_cmd+0x3e>
8000e218:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e21c:	58 38       	cp.w	r8,3
8000e21e:	c1 70       	breq	8000e24c <fat_example_build_cmd+0x68>
8000e220:	c3 68       	rjmp	8000e28c <fat_example_build_cmd+0xa8>
    {
    case CR:
      // Add LF.
      uart_usb_putchar('\n');
8000e222:	30 ac       	mov	r12,10
8000e224:	f0 1f 00 28 	mcall	8000e2c4 <fat_example_build_cmd+0xe0>
      uart_usb_putchar('\r');
8000e228:	30 dc       	mov	r12,13
8000e22a:	f0 1f 00 27 	mcall	8000e2c4 <fat_example_build_cmd+0xe0>
      uart_usb_flush();
8000e22e:	f0 1f 00 27 	mcall	8000e2c8 <fat_example_build_cmd+0xe4>
      // Add NUL char.
      cmd_str[i_str] = '\0';
8000e232:	4a 78       	lddpc	r8,8000e2cc <fat_example_build_cmd+0xe8>
8000e234:	11 88       	ld.ub	r8,r8[0x0]
8000e236:	10 9a       	mov	r10,r8
8000e238:	4a 69       	lddpc	r9,8000e2d0 <fat_example_build_cmd+0xec>
8000e23a:	30 08       	mov	r8,0
8000e23c:	f2 0a 0b 08 	st.b	r9[r10],r8
      // Decode the command.
      fat_example_parse_cmd();
8000e240:	f0 1f 00 25 	mcall	8000e2d4 <fat_example_build_cmd+0xf0>
      i_str = 0;
8000e244:	4a 29       	lddpc	r9,8000e2cc <fat_example_build_cmd+0xe8>
8000e246:	30 08       	mov	r8,0
8000e248:	b2 88       	st.b	r9[0x0],r8
8000e24a:	c3 58       	rjmp	8000e2b4 <fat_example_build_cmd+0xd0>
      break;
    // ^c abort cmd.
    case ABORT_CHAR:
      // Reset command length.
      i_str = 0;
8000e24c:	4a 09       	lddpc	r9,8000e2cc <fat_example_build_cmd+0xe8>
8000e24e:	30 08       	mov	r8,0
8000e250:	b2 88       	st.b	r9[0x0],r8
      // Display prompt.
      uart_usb_putchar('\n');
8000e252:	30 ac       	mov	r12,10
8000e254:	f0 1f 00 1c 	mcall	8000e2c4 <fat_example_build_cmd+0xe0>
      uart_usb_putchar('\r');
8000e258:	30 dc       	mov	r12,13
8000e25a:	f0 1f 00 1b 	mcall	8000e2c4 <fat_example_build_cmd+0xe0>
      uart_usb_putchar('$');
8000e25e:	32 4c       	mov	r12,36
8000e260:	f0 1f 00 19 	mcall	8000e2c4 <fat_example_build_cmd+0xe0>
      uart_usb_putchar('>');
8000e264:	33 ec       	mov	r12,62
8000e266:	f0 1f 00 18 	mcall	8000e2c4 <fat_example_build_cmd+0xe0>
      uart_usb_flush();
8000e26a:	f0 1f 00 18 	mcall	8000e2c8 <fat_example_build_cmd+0xe4>
8000e26e:	c2 38       	rjmp	8000e2b4 <fat_example_build_cmd+0xd0>
      break;
    // Backspace.
    case BKSPACE_CHAR:
      if (i_str > 0)
8000e270:	49 78       	lddpc	r8,8000e2cc <fat_example_build_cmd+0xe8>
8000e272:	11 88       	ld.ub	r8,r8[0x0]
8000e274:	58 08       	cp.w	r8,0
8000e276:	c1 f0       	breq	8000e2b4 <fat_example_build_cmd+0xd0>
      {
        // Replace last char.
    	 PrintString("\b \b");
8000e278:	49 8c       	lddpc	r12,8000e2d8 <fat_example_build_cmd+0xf4>
8000e27a:	f0 1f 00 19 	mcall	8000e2dc <fat_example_build_cmd+0xf8>
        // Decraese command length.
        i_str--;
8000e27e:	49 48       	lddpc	r8,8000e2cc <fat_example_build_cmd+0xe8>
8000e280:	11 88       	ld.ub	r8,r8[0x0]
8000e282:	20 18       	sub	r8,1
8000e284:	5c 58       	castu.b	r8
8000e286:	49 29       	lddpc	r9,8000e2cc <fat_example_build_cmd+0xe8>
8000e288:	b2 88       	st.b	r9[0x0],r8
8000e28a:	c1 58       	rjmp	8000e2b4 <fat_example_build_cmd+0xd0>
      }
      break;
    default:
      // Echo.
      uart_usb_putchar(c);
8000e28c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e290:	f0 1f 00 0d 	mcall	8000e2c4 <fat_example_build_cmd+0xe0>
      uart_usb_flush();
8000e294:	f0 1f 00 0d 	mcall	8000e2c8 <fat_example_build_cmd+0xe4>
      // Append to cmd line.
      cmd_str[i_str++] = c;
8000e298:	48 d8       	lddpc	r8,8000e2cc <fat_example_build_cmd+0xe8>
8000e29a:	11 8a       	ld.ub	r10,r8[0x0]
8000e29c:	14 9b       	mov	r11,r10
8000e29e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e2a2:	5c 58       	castu.b	r8
8000e2a4:	48 b9       	lddpc	r9,8000e2d0 <fat_example_build_cmd+0xec>
8000e2a6:	f2 0b 0b 08 	st.b	r9[r11],r8
8000e2aa:	f4 c8 ff ff 	sub	r8,r10,-1
8000e2ae:	5c 58       	castu.b	r8
8000e2b0:	48 79       	lddpc	r9,8000e2cc <fat_example_build_cmd+0xe8>
8000e2b2:	b2 88       	st.b	r9[0x0],r8
      break;
    }
  }
}
8000e2b4:	2f ed       	sub	sp,-8
8000e2b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2ba:	00 00       	add	r0,r0
8000e2bc:	80 00       	ld.sh	r0,r0[0x0]
8000e2be:	83 4c       	st.w	r1[0x10],r12
8000e2c0:	80 00       	ld.sh	r0,r0[0x0]
8000e2c2:	83 c0       	st.w	r1[0x30],r0
8000e2c4:	80 00       	ld.sh	r0,r0[0x0]
8000e2c6:	84 70       	ld.sh	r0,r2[0xe]
8000e2c8:	80 00       	ld.sh	r0,r0[0x0]
8000e2ca:	84 d4       	ld.uh	r4,r2[0xa]
8000e2cc:	00 00       	add	r0,r0
8000e2ce:	06 7a       	tst	r10,r3
8000e2d0:	00 00       	add	r0,r0
8000e2d2:	06 80       	andn	r0,r3
8000e2d4:	80 00       	ld.sh	r0,r0[0x0]
8000e2d6:	de 50       	acall	0x394
8000e2d8:	80 00       	ld.sh	r0,r0[0x0]
8000e2da:	dc 70       	acall	0x31c
8000e2dc:	80 00       	ld.sh	r0,r0[0x0]
8000e2de:	dd 68       	*unknown*

8000e2e0 <BinaryDivide>:

int BinaryDivide(int a, int b, int* rest){//implement division and mod by bit operations
8000e2e0:	eb cd 40 80 	pushm	r7,lr
8000e2e4:	1a 97       	mov	r7,sp
8000e2e6:	20 6d       	sub	sp,24
8000e2e8:	ef 4c ff f0 	st.w	r7[-16],r12
8000e2ec:	ef 4b ff ec 	st.w	r7[-20],r11
8000e2f0:	ef 4a ff e8 	st.w	r7[-24],r10

    int msb = 0;
8000e2f4:	30 08       	mov	r8,0
8000e2f6:	ef 48 ff f4 	st.w	r7[-12],r8

    for(msb = 0; msb < 64; msb++) {
8000e2fa:	30 08       	mov	r8,0
8000e2fc:	ef 48 ff f4 	st.w	r7[-12],r8
8000e300:	c1 08       	rjmp	8000e320 <BinaryDivide+0x40>
        if((b << msb) >= a)
8000e302:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000e306:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e30a:	f2 08 09 49 	lsl	r9,r9,r8
8000e30e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e312:	10 39       	cp.w	r9,r8
8000e314:	c0 c4       	brge	8000e32c <BinaryDivide+0x4c>

int BinaryDivide(int a, int b, int* rest){//implement division and mod by bit operations

    int msb = 0;

    for(msb = 0; msb < 64; msb++) {
8000e316:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e31a:	2f f8       	sub	r8,-1
8000e31c:	ef 48 ff f4 	st.w	r7[-12],r8
8000e320:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e324:	e0 48 00 3f 	cp.w	r8,63
8000e328:	fe 9a ff ed 	brle	8000e302 <BinaryDivide+0x22>
        if((b << msb) >= a)
            break;
    }
    int q = 0;
8000e32c:	30 08       	mov	r8,0
8000e32e:	ef 48 ff f8 	st.w	r7[-8],r8
    int i;
    for(i = msb; i >= 0; i--) {
8000e332:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e336:	ef 48 ff fc 	st.w	r7[-4],r8
8000e33a:	c2 68       	rjmp	8000e386 <BinaryDivide+0xa6>
        if((b << i) > a)
8000e33c:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000e340:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e344:	f2 08 09 49 	lsl	r9,r9,r8
8000e348:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e34c:	10 39       	cp.w	r9,r8
8000e34e:	e0 89 00 17 	brgt	8000e37c <BinaryDivide+0x9c>
            continue;
        q |= (1 << i);
8000e352:	30 19       	mov	r9,1
8000e354:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e358:	f2 08 09 49 	lsl	r9,r9,r8
8000e35c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e360:	12 48       	or	r8,r9
8000e362:	ef 48 ff f8 	st.w	r7[-8],r8
        a -= (b << i);
8000e366:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000e36a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e36e:	f2 08 09 49 	lsl	r9,r9,r8
8000e372:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e376:	12 18       	sub	r8,r9
8000e378:	ef 48 ff f0 	st.w	r7[-16],r8
        if((b << msb) >= a)
            break;
    }
    int q = 0;
    int i;
    for(i = msb; i >= 0; i--) {
8000e37c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e380:	20 18       	sub	r8,1
8000e382:	ef 48 ff fc 	st.w	r7[-4],r8
8000e386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e38a:	58 08       	cp.w	r8,0
8000e38c:	cd 84       	brge	8000e33c <BinaryDivide+0x5c>
            continue;
        q |= (1 << i);
        a -= (b << i);
    }

    *rest = a;
8000e38e:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000e392:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e396:	93 08       	st.w	r9[0x0],r8
    return q;
8000e398:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000e39c:	10 9c       	mov	r12,r8
8000e39e:	2f ad       	sub	sp,-24
8000e3a0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e3a4 <tc_irq>:
//****************************************
static void tc_irq(void)
{
8000e3a4:	eb cd 40 80 	pushm	r7,lr
8000e3a8:	1a 97       	mov	r7,sp
  // get value for the potentiometer adc channel
	adc_start(adc);
8000e3aa:	49 18       	lddpc	r8,8000e3ec <tc_irq+0x48>
8000e3ac:	70 08       	ld.w	r8,r8[0x0]
8000e3ae:	10 9c       	mov	r12,r8
8000e3b0:	f0 1f 00 10 	mcall	8000e3f0 <tc_irq+0x4c>
	value=adc_get_value(adc, adc_channel_pot);
8000e3b4:	49 08       	lddpc	r8,8000e3f4 <tc_irq+0x50>
8000e3b6:	90 08       	ld.sh	r8,r8[0x0]
8000e3b8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000e3bc:	48 c8       	lddpc	r8,8000e3ec <tc_irq+0x48>
8000e3be:	70 08       	ld.w	r8,r8[0x0]
8000e3c0:	12 9b       	mov	r11,r9
8000e3c2:	10 9c       	mov	r12,r8
8000e3c4:	f0 1f 00 0d 	mcall	8000e3f8 <tc_irq+0x54>
8000e3c8:	18 98       	mov	r8,r12
8000e3ca:	5c 88       	casts.h	r8
8000e3cc:	48 c9       	lddpc	r9,8000e3fc <tc_irq+0x58>
8000e3ce:	b2 08       	st.h	r9[0x0],r8
	adcnew=TRUE;
8000e3d0:	48 c9       	lddpc	r9,8000e400 <tc_irq+0x5c>
8000e3d2:	30 18       	mov	r8,1
8000e3d4:	b2 88       	st.b	r9[0x0],r8
     tc_read_sr(EXAMPLE_TC, TC_CHANNEL);
8000e3d6:	30 0b       	mov	r11,0
8000e3d8:	fe 7c 38 00 	mov	r12,-51200
8000e3dc:	f0 1f 00 0a 	mcall	8000e404 <tc_irq+0x60>
     gpio_get_pin_interrupt_flag(GPIO_PUSH_BUTTON_0);
8000e3e0:	35 8c       	mov	r12,88
8000e3e2:	f0 1f 00 0a 	mcall	8000e408 <tc_irq+0x64>
	// Clear the interrupt flag. This is a side effect of reading the TC SR
}
8000e3e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3ea:	00 00       	add	r0,r0
8000e3ec:	00 00       	add	r0,r0
8000e3ee:	00 3c       	cp.w	r12,r0
8000e3f0:	80 00       	ld.sh	r0,r0[0x0]
8000e3f2:	36 62       	mov	r2,102
8000e3f4:	00 00       	add	r0,r0
8000e3f6:	00 40       	or	r0,r0
8000e3f8:	80 00       	ld.sh	r0,r0[0x0]
8000e3fa:	36 d8       	mov	r8,109
8000e3fc:	00 00       	add	r0,r0
8000e3fe:	06 78       	tst	r8,r3
8000e400:	00 00       	add	r0,r0
8000e402:	06 7c       	tst	r12,r3
8000e404:	80 00       	ld.sh	r0,r0[0x0]
8000e406:	3b 3a       	mov	r10,-77
8000e408:	80 00       	ld.sh	r0,r0[0x0]
8000e40a:	33 0a       	mov	r10,48

8000e40c <sd_mmc_resources_init>:
//*********************************************************
void sd_mmc_resources_init(void)
{
8000e40c:	eb cd 40 80 	pushm	r7,lr
8000e410:	1a 97       	mov	r7,sp
8000e412:	20 4d       	sub	sp,16
	    .spck_delay   = 0,
	    .trans_delay  = 0,
	    .stay_act     = 1,
	    .spi_mode     = 0,
	    .modfdis      = 1
	  };
8000e414:	49 d8       	lddpc	r8,8000e488 <sd_mmc_resources_init+0x7c>
8000e416:	ee cb 00 10 	sub	r11,r7,16
8000e41a:	10 9a       	mov	r10,r8
8000e41c:	f4 e8 00 00 	ld.d	r8,r10[0]
8000e420:	f6 e9 00 00 	st.d	r11[0],r8
8000e424:	f4 e8 00 08 	ld.d	r8,r10[8]
8000e428:	f6 e9 00 08 	st.d	r11[8],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));
8000e42c:	30 4b       	mov	r11,4
8000e42e:	49 8c       	lddpc	r12,8000e48c <sd_mmc_resources_init+0x80>
8000e430:	f0 1f 00 18 	mcall	8000e490 <sd_mmc_resources_init+0x84>

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
8000e434:	ee c8 00 10 	sub	r8,r7,16
8000e438:	10 9b       	mov	r11,r8
8000e43a:	fe 7c 28 00 	mov	r12,-55296
8000e43e:	f0 1f 00 16 	mcall	8000e494 <sd_mmc_resources_init+0x88>

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
8000e442:	30 09       	mov	r9,0
8000e444:	30 0a       	mov	r10,0
8000e446:	30 0b       	mov	r11,0
8000e448:	fe 7c 28 00 	mov	r12,-55296
8000e44c:	f0 1f 00 13 	mcall	8000e498 <sd_mmc_resources_init+0x8c>

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
8000e450:	fe 7c 28 00 	mov	r12,-55296
8000e454:	f0 1f 00 12 	mcall	8000e49c <sd_mmc_resources_init+0x90>

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, PBAf);
8000e458:	20 4d       	sub	sp,16
8000e45a:	1a 98       	mov	r8,sp
8000e45c:	10 9b       	mov	r11,r8
8000e45e:	ee ca 00 10 	sub	r10,r7,16
8000e462:	f4 e8 00 00 	ld.d	r8,r10[0]
8000e466:	f6 e9 00 00 	st.d	r11[0],r8
8000e46a:	f4 e8 00 08 	ld.d	r8,r10[8]
8000e46e:	f6 e9 00 08 	st.d	r11[8],r8
8000e472:	e0 6c 1b 00 	mov	r12,6912
8000e476:	ea 1c 00 b7 	orh	r12,0xb7
8000e47a:	f0 1f 00 0a 	mcall	8000e4a0 <sd_mmc_resources_init+0x94>
8000e47e:	2f cd       	sub	sp,-16
}
8000e480:	2f cd       	sub	sp,-16
8000e482:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e486:	00 00       	add	r0,r0
8000e488:	80 00       	ld.sh	r0,r0[0x0]
8000e48a:	fb b4       	*unknown*
8000e48c:	80 00       	ld.sh	r0,r0[0x0]
8000e48e:	fb ac       	*unknown*
8000e490:	80 00       	ld.sh	r0,r0[0x0]
8000e492:	31 68       	mov	r8,22
8000e494:	80 00       	ld.sh	r0,r0[0x0]
8000e496:	21 6c       	sub	r12,22
8000e498:	80 00       	ld.sh	r0,r0[0x0]
8000e49a:	22 0c       	sub	r12,32
8000e49c:	80 00       	ld.sh	r0,r0[0x0]
8000e49e:	25 80       	sub	r0,88
8000e4a0:	80 00       	ld.sh	r0,r0[0x0]
8000e4a2:	3d f8       	mov	r8,-33

8000e4a4 <main>:
//****************************************
int main(void)
{
8000e4a4:	eb cd 40 c0 	pushm	r6-r7,lr
8000e4a8:	1a 97       	mov	r7,sp
8000e4aa:	21 1d       	sub	sp,68
	  U8 i, j;
	  U32 VarTemp;

	//use power manger driver for setting the frequency
	    pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
8000e4ac:	30 3a       	mov	r10,3
8000e4ae:	e0 6b 1b 00 	mov	r11,6912
8000e4b2:	ea 1b 00 b7 	orh	r11,0xb7
8000e4b6:	fe 7c 0c 00 	mov	r12,-62464
8000e4ba:	f0 1f 01 2e 	mcall	8000e970 <main+0x4cc>
		pm_freq_param_t System_Clock = {
			    .cpu_f = CPUf,
			    .pba_f = PBAf,
			    .osc0_f = FOSC0,
			    .osc0_startup = OSC0_STARTUP
			};
8000e4be:	fe f8 04 b6 	ld.w	r8,pc[1206]
8000e4c2:	ee cb 00 28 	sub	r11,r7,40
8000e4c6:	10 9a       	mov	r10,r8
8000e4c8:	f4 e8 00 00 	ld.d	r8,r10[0]
8000e4cc:	f6 e9 00 00 	st.d	r11[0],r8
8000e4d0:	f4 e8 00 08 	ld.d	r8,r10[8]
8000e4d4:	f6 e9 00 08 	st.d	r11[8],r8
		pm_configure_clocks(&System_Clock);
8000e4d8:	ee c8 00 28 	sub	r8,r7,40
8000e4dc:	10 9c       	mov	r12,r8
8000e4de:	f0 1f 01 27 	mcall	8000e978 <main+0x4d4>
//*********************************************************
//*********************************************************
	 volatile avr32_tc_t *tc = EXAMPLE_TC;
8000e4e2:	fe 78 38 00 	mov	r8,-51200
8000e4e6:	ef 48 ff f0 	st.w	r7[-16],r8
	 {
      {EXAMPLE_ADC_POTENTIOMETER_PIN, EXAMPLE_ADC_POTENTIOMETER_FUNCTION}
	 };

      // Assign and enable GPIO pins to the ADC function.
     gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) / sizeof(ADC_GPIO_MAP[0]));
8000e4ea:	30 1b       	mov	r11,1
8000e4ec:	fe fc 04 90 	ld.w	r12,pc[1168]
8000e4f0:	f0 1f 01 24 	mcall	8000e980 <main+0x4dc>

     // configure ADC
       // Lower the ADC clock to match the ADC characteristics (because we configured
       // the CPU clock to 12MHz, and the ADC clock characteristics are usually lower;
       // cf. the ADC Characteristic section in the datasheet).
       AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
8000e4f4:	fe 79 3c 00 	mov	r9,-50176
8000e4f8:	fe 78 3c 00 	mov	r8,-50176
8000e4fc:	70 18       	ld.w	r8,r8[0x4]
8000e4fe:	a9 a8       	sbr	r8,0x8
8000e500:	93 18       	st.w	r9[0x4],r8
       adc_configure(adc);
8000e502:	fe f8 04 82 	ld.w	r8,pc[1154]
8000e506:	70 08       	ld.w	r8,r8[0x0]
8000e508:	10 9c       	mov	r12,r8
8000e50a:	f0 1f 01 20 	mcall	8000e988 <main+0x4e4>

       // Enable the ADC channels.
       adc_enable(adc,adc_channel_pot);
8000e50e:	fe f8 04 7e 	ld.w	r8,pc[1150]
8000e512:	90 08       	ld.sh	r8,r8[0x0]
8000e514:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000e518:	fe f8 04 6c 	ld.w	r8,pc[1132]
8000e51c:	70 08       	ld.w	r8,r8[0x0]
8000e51e:	12 9b       	mov	r11,r9
8000e520:	10 9c       	mov	r12,r8
8000e522:	f0 1f 01 1c 	mcall	8000e990 <main+0x4ec>
//**************************************************************
       INTC_init_interrupts ();
8000e526:	f0 1f 01 1c 	mcall	8000e994 <main+0x4f0>
//*********************************************************
       // Initialize the timer/counter.
         tc_init_waveform(tc, &WAVEFORM_OPT);         // Initialize the timer/counter waveform.
8000e52a:	fe fb 04 6e 	ld.w	r11,pc[1134]
8000e52e:	ee fc ff f0 	ld.w	r12,r7[-16]
8000e532:	f0 1f 01 1b 	mcall	8000e99c <main+0x4f8>
         // Set the compare triggers.
         // Remember TC counter is 16-bits, so counting second is not possible with fPBA = 12 MHz.
         // We configure it to count ms.
         // We want: (1/(fPBA/8)) * RC = 0.02 s, +hence RC = (fPBA/8)*0.02= 41250to get an interrupt every 20 ms.
         tc_write_rc(tc, TC_CHANNEL, (PBAf / 8)*0.02); // Set RC value.
8000e536:	e0 6a 75 30 	mov	r10,30000
8000e53a:	30 0b       	mov	r11,0
8000e53c:	ee fc ff f0 	ld.w	r12,r7[-16]
8000e540:	f0 1f 01 18 	mcall	8000e9a0 <main+0x4fc>
          tc_configure_interrupts(tc, TC_CHANNEL, &TC_INTERRUPT);
8000e544:	fe fa 04 60 	ld.w	r10,pc[1120]
8000e548:	30 0b       	mov	r11,0
8000e54a:	ee fc ff f0 	ld.w	r12,r7[-16]
8000e54e:	f0 1f 01 17 	mcall	8000e9a8 <main+0x504>
          INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, AVR32_INTC_INT1);
8000e552:	30 1a       	mov	r10,1
8000e554:	e0 6b 01 c0 	mov	r11,448
8000e558:	fe fc 04 54 	ld.w	r12,pc[1108]
8000e55c:	f0 1f 01 15 	mcall	8000e9b0 <main+0x50c>
//*********************************************************
           Enable_global_interrupt ();
8000e560:	d5 03       	csrf	0x10
        // launch conversion on all enabled channels
//*********************************************************
        // Initialize SD/MMC driver resources: GPIO, SPI and SD/MMC.
          sd_mmc_resources_init();
8000e562:	f0 1f 01 15 	mcall	8000e9b4 <main+0x510>

           tc_start(tc, TC_CHANNEL);
8000e566:	30 0b       	mov	r11,0
8000e568:	ee fc ff f0 	ld.w	r12,r7[-16]
8000e56c:	f0 1f 01 13 	mcall	8000e9b8 <main+0x514>

           if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD)
8000e570:	30 0c       	mov	r12,0
8000e572:	f0 1f 01 13 	mcall	8000e9bc <main+0x518>
8000e576:	18 98       	mov	r8,r12
8000e578:	58 08       	cp.w	r8,0
8000e57a:	c0 71       	brne	8000e588 <main+0xe4>
             {
               // Get and display the capacity
               mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &VarTemp);
8000e57c:	ee c8 00 18 	sub	r8,r7,24
8000e580:	10 9b       	mov	r11,r8
8000e582:	30 0c       	mov	r12,0
8000e584:	f0 1f 01 0f 	mcall	8000e9c0 <main+0x51c>
             }

        // reset vars
        cmd = FALSE;
8000e588:	fe f9 04 3c 	ld.w	r9,pc[1084]
8000e58c:	30 08       	mov	r8,0
8000e58e:	b2 88       	st.b	r9[0x0],r8
        cmd_type = CMD_NONE;
8000e590:	fe f9 04 38 	ld.w	r9,pc[1080]
8000e594:	30 08       	mov	r8,0
8000e596:	b2 88       	st.b	r9[0x0],r8
        first_ls = TRUE;
8000e598:	fe f9 04 34 	ld.w	r9,pc[1076]
8000e59c:	30 18       	mov	r8,1
8000e59e:	b2 88       	st.b	r9[0x0],r8
        // reset all navigators

       #ifndef FREERTOS_USED
       # if __GNUC__
         // Give the used CPU clock frequency to Newlib, so it can work properly.
         set_cpu_hz(pcl_freq_param.pba_f);
8000e5a0:	fe f8 04 30 	ld.w	r8,pc[1072]
8000e5a4:	70 18       	ld.w	r8,r8[0x4]
8000e5a6:	10 9c       	mov	r12,r8
8000e5a8:	f0 1f 01 0b 	mcall	8000e9d4 <main+0x530>
       # endif
       #endif

         // Initialize USB clock.
         pcl_configure_usb_clock();
8000e5ac:	f0 1f 01 0b 	mcall	8000e9d8 <main+0x534>

         nav_reset();
8000e5b0:	f0 1f 01 0b 	mcall	8000e9dc <main+0x538>

         // Initialize USB task
         usb_task_init();
8000e5b4:	f0 1f 01 0b 	mcall	8000e9e0 <main+0x53c>

       #if USB_DEVICE_FEATURE == ENABLED
         // Initialize device CDC USB task
         device_cdc_task_init();
8000e5b8:	f0 1f 01 0b 	mcall	8000e9e4 <main+0x540>
         vTaskStartScheduler();
         portDBG_TRACE("FreeRTOS returned.");
         return 42;
       #else
         // No OS here. Need to call each task in round-robin mode.
         write=FALSE;
8000e5bc:	fe f9 04 2c 	ld.w	r9,pc[1068]
8000e5c0:	30 08       	mov	r8,0
8000e5c2:	b2 88       	st.b	r9[0x0],r8

         while (TRUE)
         {
           usb_task();
8000e5c4:	f0 1f 01 0a 	mcall	8000e9ec <main+0x548>

           if(flag && uart_usb_tx_ready())
8000e5c8:	fe f8 04 28 	ld.w	r8,pc[1064]
8000e5cc:	11 88       	ld.ub	r8,r8[0x0]
8000e5ce:	58 08       	cp.w	r8,0
8000e5d0:	c1 20       	breq	8000e5f4 <main+0x150>
8000e5d2:	f0 1f 01 09 	mcall	8000e9f4 <main+0x550>
8000e5d6:	18 98       	mov	r8,r12
8000e5d8:	58 08       	cp.w	r8,0
8000e5da:	c0 d0       	breq	8000e5f4 <main+0x150>
           {
        	   uart_usb_putchar('$');
8000e5dc:	32 4c       	mov	r12,36
8000e5de:	f0 1f 01 07 	mcall	8000e9f8 <main+0x554>
               uart_usb_putchar('>');
8000e5e2:	33 ec       	mov	r12,62
8000e5e4:	f0 1f 01 05 	mcall	8000e9f8 <main+0x554>
               uart_usb_flush();
8000e5e8:	f0 1f 01 05 	mcall	8000e9fc <main+0x558>
               flag=FALSE;
8000e5ec:	fe f9 04 04 	ld.w	r9,pc[1028]
8000e5f0:	30 08       	mov	r8,0
8000e5f2:	b2 88       	st.b	r9[0x0],r8
           }

           // While a usable user command on RS232 isn't received, build it
              if (!cmd)
8000e5f4:	fe f8 03 d0 	ld.w	r8,pc[976]
8000e5f8:	11 88       	ld.ub	r8,r8[0x0]
8000e5fa:	58 08       	cp.w	r8,0
8000e5fc:	c0 71       	brne	8000e60a <main+0x166>
              {
                uart_usb_flush();
8000e5fe:	f0 1f 01 00 	mcall	8000e9fc <main+0x558>

                fat_example_build_cmd();
8000e602:	f0 1f 01 00 	mcall	8000ea00 <main+0x55c>
8000e606:	e0 8f 01 56 	bral	8000e8b2 <main+0x40e>
              }
              // perform the command
              else
              {
                switch (cmd_type)
8000e60a:	fe f8 03 be 	ld.w	r8,pc[958]
8000e60e:	11 88       	ld.ub	r8,r8[0x0]
8000e610:	20 28       	sub	r8,2
8000e612:	ef 48 ff bc 	st.w	r7[-68],r8
8000e616:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000e61a:	59 29       	cp.w	r9,18
8000e61c:	e0 8b 01 39 	brhi	8000e88e <main+0x3ea>
8000e620:	fe f8 03 e4 	ld.w	r8,pc[996]
8000e624:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000e628:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
                {
                // this is a "ls" command
                case CMD_LS:
                  // Check if params are correct or mount needed.
                  if (nav_drive_get() >= nav_drive_nb() || first_ls)
8000e62c:	f0 1f 00 f7 	mcall	8000ea08 <main+0x564>
8000e630:	18 98       	mov	r8,r12
8000e632:	10 96       	mov	r6,r8
8000e634:	f0 1f 00 f6 	mcall	8000ea0c <main+0x568>
8000e638:	18 98       	mov	r8,r12
8000e63a:	f0 06 18 00 	cp.b	r6,r8
8000e63e:	c0 62       	brcc	8000e64a <main+0x1a6>
8000e640:	fe f8 03 8c 	ld.w	r8,pc[908]
8000e644:	11 88       	ld.ub	r8,r8[0x0]
8000e646:	58 08       	cp.w	r8,0
8000e648:	c1 10       	breq	8000e66a <main+0x1c6>
                  {
                    first_ls = FALSE;
8000e64a:	fe f9 03 82 	ld.w	r9,pc[898]
8000e64e:	30 08       	mov	r8,0
8000e650:	b2 88       	st.b	r9[0x0],r8
                    // Reset navigators .
                    nav_reset();
8000e652:	f0 1f 00 e3 	mcall	8000e9dc <main+0x538>
                    // Use the last drive available as default.
                    nav_drive_set(nav_drive_nb() - 1);
8000e656:	f0 1f 00 ee 	mcall	8000ea0c <main+0x568>
8000e65a:	18 98       	mov	r8,r12
8000e65c:	20 18       	sub	r8,1
8000e65e:	5c 58       	castu.b	r8
8000e660:	10 9c       	mov	r12,r8
8000e662:	f0 1f 00 ec 	mcall	8000ea10 <main+0x56c>
                    // Mount it.
                    nav_partition_mount();
8000e666:	f0 1f 00 ec 	mcall	8000ea14 <main+0x570>
                  }
                  // Get the volume name
                  nav_dir_name((FS_STRING)str_buff, MAX_FILE_PATH_LENGTH);
8000e66a:	31 eb       	mov	r11,30
8000e66c:	fe fc 03 ac 	ld.w	r12,pc[940]
8000e670:	f0 1f 00 eb 	mcall	8000ea1c <main+0x578>
                  // Display general informations (drive letter and current path)
                  PrintString("\n\rVolume is");
8000e674:	fe fc 03 ac 	ld.w	r12,pc[940]
8000e678:	f0 1f 00 eb 	mcall	8000ea24 <main+0x580>
                  uart_usb_putchar('A'+nav_drive_get());
8000e67c:	f0 1f 00 e3 	mcall	8000ea08 <main+0x564>
8000e680:	18 98       	mov	r8,r12
8000e682:	2b f8       	sub	r8,-65
8000e684:	10 9c       	mov	r12,r8
8000e686:	f0 1f 00 dd 	mcall	8000e9f8 <main+0x554>
                  PrintString(":\n\rDir name is");
8000e68a:	fe fc 03 9e 	ld.w	r12,pc[926]
8000e68e:	f0 1f 00 e6 	mcall	8000ea24 <main+0x580>
                  PrintString(str_buff);
8000e692:	fe fc 03 86 	ld.w	r12,pc[902]
8000e696:	f0 1f 00 e4 	mcall	8000ea24 <main+0x580>
                  uart_usb_putchar(LF);
8000e69a:	30 ac       	mov	r12,10
8000e69c:	f0 1f 00 d7 	mcall	8000e9f8 <main+0x554>
                  uart_usb_putchar('\r');
8000e6a0:	30 dc       	mov	r12,13
8000e6a2:	f0 1f 00 d6 	mcall	8000e9f8 <main+0x554>
                  uart_usb_flush();
8000e6a6:	f0 1f 00 d6 	mcall	8000e9fc <main+0x558>
                  // Try to sort items by folders
                  if (!nav_filelist_first(FS_DIR))
8000e6aa:	30 0c       	mov	r12,0
8000e6ac:	f0 1f 00 e0 	mcall	8000ea2c <main+0x588>
8000e6b0:	18 98       	mov	r8,r12
8000e6b2:	58 08       	cp.w	r8,0
8000e6b4:	c0 41       	brne	8000e6bc <main+0x218>
                  {
                    // Sort items by files
                    nav_filelist_first(FS_FILE);
8000e6b6:	30 1c       	mov	r12,1
8000e6b8:	f0 1f 00 dd 	mcall	8000ea2c <main+0x588>
                  }
                  // Display items informations
                  PrintString("\tSize (Bytes)\tName\n\r");
8000e6bc:	fe fc 03 74 	ld.w	r12,pc[884]
8000e6c0:	f0 1f 00 d9 	mcall	8000ea24 <main+0x580>
                  // reset filelist before to start the listing
                  nav_filelist_reset();
8000e6c4:	f0 1f 00 dc 	mcall	8000ea34 <main+0x590>
8000e6c8:	c3 08       	rjmp	8000e728 <main+0x284>
                  // While an item can be found
                  while (nav_filelist_set(0, FS_FIND_NEXT))
                  {
                    // Get and display current item informations
                    PrintString((nav_file_isdir()) ? "Dir\t" : "   \t");
8000e6ca:	f0 1f 00 dc 	mcall	8000ea38 <main+0x594>
8000e6ce:	18 98       	mov	r8,r12
8000e6d0:	58 08       	cp.w	r8,0
8000e6d2:	c0 60       	breq	8000e6de <main+0x23a>
8000e6d4:	fe f8 03 68 	ld.w	r8,pc[872]
8000e6d8:	ef 48 ff c0 	st.w	r7[-64],r8
8000e6dc:	c0 58       	rjmp	8000e6e6 <main+0x242>
8000e6de:	fe f9 03 62 	ld.w	r9,pc[866]
8000e6e2:	ef 49 ff c0 	st.w	r7[-64],r9
8000e6e6:	ee fc ff c0 	ld.w	r12,r7[-64]
8000e6ea:	f0 1f 00 cf 	mcall	8000ea24 <main+0x580>
                    PrintNumber(nav_file_lgt());
8000e6ee:	f0 1f 00 d6 	mcall	8000ea44 <main+0x5a0>
8000e6f2:	18 98       	mov	r8,r12
8000e6f4:	10 9c       	mov	r12,r8
8000e6f6:	f0 1f 00 d5 	mcall	8000ea48 <main+0x5a4>
                    PrintString("\t\t");
8000e6fa:	fe fc 03 52 	ld.w	r12,pc[850]
8000e6fe:	f0 1f 00 ca 	mcall	8000ea24 <main+0x580>
                    nav_file_name((FS_STRING)str_buff, MAX_FILE_PATH_LENGTH, FS_NAME_GET, TRUE);
8000e702:	30 19       	mov	r9,1
8000e704:	30 1a       	mov	r10,1
8000e706:	31 eb       	mov	r11,30
8000e708:	fe fc 03 10 	ld.w	r12,pc[784]
8000e70c:	f0 1f 00 d1 	mcall	8000ea50 <main+0x5ac>
                    PrintString(str_buff);
8000e710:	fe fc 03 08 	ld.w	r12,pc[776]
8000e714:	f0 1f 00 c4 	mcall	8000ea24 <main+0x580>
                    uart_usb_putchar(LF);
8000e718:	30 ac       	mov	r12,10
8000e71a:	f0 1f 00 b8 	mcall	8000e9f8 <main+0x554>
                    uart_usb_putchar('\r');
8000e71e:	30 dc       	mov	r12,13
8000e720:	f0 1f 00 b6 	mcall	8000e9f8 <main+0x554>
                    uart_usb_flush();
8000e724:	f0 1f 00 b6 	mcall	8000e9fc <main+0x558>
                  // Display items informations
                  PrintString("\tSize (Bytes)\tName\n\r");
                  // reset filelist before to start the listing
                  nav_filelist_reset();
                  // While an item can be found
                  while (nav_filelist_set(0, FS_FIND_NEXT))
8000e728:	30 1b       	mov	r11,1
8000e72a:	30 0c       	mov	r12,0
8000e72c:	f0 1f 00 ca 	mcall	8000ea54 <main+0x5b0>
8000e730:	18 98       	mov	r8,r12
8000e732:	58 08       	cp.w	r8,0
8000e734:	cc b1       	brne	8000e6ca <main+0x226>
                    uart_usb_putchar(LF);
                    uart_usb_putchar('\r');
                    uart_usb_flush();
                  }
                  // Display the files number
                  PrintNumber(nav_filelist_nb(FS_FILE));
8000e736:	30 1c       	mov	r12,1
8000e738:	f0 1f 00 c8 	mcall	8000ea58 <main+0x5b4>
8000e73c:	18 98       	mov	r8,r12
8000e73e:	5c 88       	casts.h	r8
8000e740:	5c 78       	castu.h	r8
8000e742:	10 9c       	mov	r12,r8
8000e744:	f0 1f 00 c1 	mcall	8000ea48 <main+0x5a4>
                  PrintString("  Files\n\r");
8000e748:	fe fc 03 14 	ld.w	r12,pc[788]
8000e74c:	f0 1f 00 b6 	mcall	8000ea24 <main+0x580>
                  // Display the folders number

                  PrintNumber(nav_filelist_nb(FS_DIR));
8000e750:	30 0c       	mov	r12,0
8000e752:	f0 1f 00 c2 	mcall	8000ea58 <main+0x5b4>
8000e756:	18 98       	mov	r8,r12
8000e758:	5c 88       	casts.h	r8
8000e75a:	5c 78       	castu.h	r8
8000e75c:	10 9c       	mov	r12,r8
8000e75e:	f0 1f 00 bb 	mcall	8000ea48 <main+0x5a4>
                  PrintString("  Dir\n\r");
8000e762:	fe fc 02 fe 	ld.w	r12,pc[766]
8000e766:	f0 1f 00 b0 	mcall	8000ea24 <main+0x580>
8000e76a:	c9 68       	rjmp	8000e896 <main+0x3f2>
                  break;
                // this is a "cd" command
               case CMD_CD:
                                   // get arg1 length
                                   i = strlen(par_str1);
8000e76c:	fe fc 02 f8 	ld.w	r12,pc[760]
8000e770:	f0 1f 00 be 	mcall	8000ea68 <main+0x5c4>
8000e774:	18 98       	mov	r8,r12
8000e776:	ef 68 ff ee 	st.b	r7[-18],r8
                                   // Append the '/' char for the nav_setcwd to enter the chosen directory.
                                   if (par_str1[i - 1] != '/')
8000e77a:	ef 38 ff ee 	ld.ub	r8,r7[-18]
8000e77e:	f0 c9 00 01 	sub	r9,r8,1
8000e782:	fe f8 02 e2 	ld.w	r8,pc[738]
8000e786:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000e78a:	32 f8       	mov	r8,47
8000e78c:	f0 09 18 00 	cp.b	r9,r8
8000e790:	c1 10       	breq	8000e7b2 <main+0x30e>
                                   {
                                     par_str1[i] = '/';
8000e792:	ef 3a ff ee 	ld.ub	r10,r7[-18]
8000e796:	fe f9 02 ce 	ld.w	r9,pc[718]
8000e79a:	32 f8       	mov	r8,47
8000e79c:	f2 0a 0b 08 	st.b	r9[r10],r8
                                     par_str1[i + 1] = '\0';
8000e7a0:	ef 38 ff ee 	ld.ub	r8,r7[-18]
8000e7a4:	f0 ca ff ff 	sub	r10,r8,-1
8000e7a8:	fe f9 02 bc 	ld.w	r9,pc[700]
8000e7ac:	30 08       	mov	r8,0
8000e7ae:	f2 0a 0b 08 	st.b	r9[r10],r8
                                   }
                                   // Try to to set navigator on arg1 folder.
                                   if (!nav_setcwd((FS_STRING)par_str1, TRUE, FALSE))
8000e7b2:	30 0a       	mov	r10,0
8000e7b4:	30 1b       	mov	r11,1
8000e7b6:	fe fc 02 ae 	ld.w	r12,pc[686]
8000e7ba:	f0 1f 00 ad 	mcall	8000ea6c <main+0x5c8>
8000e7be:	18 98       	mov	r8,r12
8000e7c0:	58 08       	cp.w	r8,0
8000e7c2:	c6 a1       	brne	8000e896 <main+0x3f2>
                                   {
                                     // Display error message.
                                     PrintString(MSG_ER_UNKNOWN_FILE);
8000e7c4:	fe fc 02 ac 	ld.w	r12,pc[684]
8000e7c8:	f0 1f 00 97 	mcall	8000ea24 <main+0x580>
8000e7cc:	c6 58       	rjmp	8000e896 <main+0x3f2>
                                   }
                                   break;
                case CMD_CAT:
                  // Try to to set navigator on arg1 file.
                  if (!nav_setcwd((FS_STRING)par_str1, TRUE, FALSE))
8000e7ce:	30 0a       	mov	r10,0
8000e7d0:	30 1b       	mov	r11,1
8000e7d2:	fe fc 02 92 	ld.w	r12,pc[658]
8000e7d6:	f0 1f 00 a6 	mcall	8000ea6c <main+0x5c8>
8000e7da:	18 98       	mov	r8,r12
8000e7dc:	58 08       	cp.w	r8,0
8000e7de:	c0 61       	brne	8000e7ea <main+0x346>
                  {
                    // Display error message.
                    PrintString(MSG_ER_UNKNOWN_FILE);
8000e7e0:	fe fc 02 90 	ld.w	r12,pc[656]
8000e7e4:	f0 1f 00 90 	mcall	8000ea24 <main+0x580>
8000e7e8:	c5 78       	rjmp	8000e896 <main+0x3f2>
                  }
                  else
                  {
                    // Open the file.
                    file_open(FOPEN_MODE_R);
8000e7ea:	30 9c       	mov	r12,9
8000e7ec:	f0 1f 00 a2 	mcall	8000ea74 <main+0x5d0>
8000e7f0:	c0 98       	rjmp	8000e802 <main+0x35e>
                    // While the end isn't reached
                    while (!file_eof())
                    {
                    	// Display next char from file.
                      uart_usb_putchar(file_getc());
8000e7f2:	f0 1f 00 a2 	mcall	8000ea78 <main+0x5d4>
8000e7f6:	18 98       	mov	r8,r12
8000e7f8:	5c 88       	casts.h	r8
8000e7fa:	5c 78       	castu.h	r8
8000e7fc:	10 9c       	mov	r12,r8
8000e7fe:	f0 1f 00 7f 	mcall	8000e9f8 <main+0x554>
                  else
                  {
                    // Open the file.
                    file_open(FOPEN_MODE_R);
                    // While the end isn't reached
                    while (!file_eof())
8000e802:	f0 1f 00 9f 	mcall	8000ea7c <main+0x5d8>
8000e806:	18 98       	mov	r8,r12
8000e808:	58 08       	cp.w	r8,0
8000e80a:	cf 40       	breq	8000e7f2 <main+0x34e>
                    {
                    	// Display next char from file.
                      uart_usb_putchar(file_getc());
                    }
                    // Close the file.
                    file_close();
8000e80c:	f0 1f 00 9d 	mcall	8000ea80 <main+0x5dc>
                    uart_usb_putchar(LF);
8000e810:	30 ac       	mov	r12,10
8000e812:	f0 1f 00 7a 	mcall	8000e9f8 <main+0x554>
                    uart_usb_flush();
8000e816:	f0 1f 00 7a 	mcall	8000e9fc <main+0x558>
8000e81a:	c3 e8       	rjmp	8000e896 <main+0x3f2>
                  }
                  break;
                // this is a "mkdir" command
                case CMD_MKDIR:
                  // Create the folder;
                  nav_dir_make((FS_STRING)par_str1);
8000e81c:	fe fc 02 48 	ld.w	r12,pc[584]
8000e820:	f0 1f 00 99 	mcall	8000ea84 <main+0x5e0>
8000e824:	c3 98       	rjmp	8000e896 <main+0x3f2>
                  break;
                // this is a "touch" command
                case CMD_TOUCH:
                  // Create the file.
                  nav_file_create((FS_STRING)par_str1);
8000e826:	fe fc 02 3e 	ld.w	r12,pc[574]
8000e82a:	f0 1f 00 98 	mcall	8000ea88 <main+0x5e4>
8000e82e:	c3 48       	rjmp	8000e896 <main+0x3f2>
                  break;
                case CMD_START:
                	 nav_file_create((FS_STRING)par_str1);
8000e830:	fe fc 02 34 	ld.w	r12,pc[564]
8000e834:	f0 1f 00 95 	mcall	8000ea88 <main+0x5e4>
                	 PrintString("Start Recording");
8000e838:	fe fc 02 54 	ld.w	r12,pc[596]
8000e83c:	f0 1f 00 7a 	mcall	8000ea24 <main+0x580>
                	 if (!nav_setcwd((FS_STRING)par_str1, TRUE, TRUE))
8000e840:	30 1a       	mov	r10,1
8000e842:	30 1b       	mov	r11,1
8000e844:	fe fc 02 20 	ld.w	r12,pc[544]
8000e848:	f0 1f 00 89 	mcall	8000ea6c <main+0x5c8>
8000e84c:	18 98       	mov	r8,r12
8000e84e:	58 08       	cp.w	r8,0
8000e850:	c0 61       	brne	8000e85c <main+0x3b8>
                	 {
                	         // Display error message.
                	    PrintString(MSG_ER_UNKNOWN_FILE);
8000e852:	fe fc 02 1e 	ld.w	r12,pc[542]
8000e856:	f0 1f 00 74 	mcall	8000ea24 <main+0x580>
8000e85a:	c1 e8       	rjmp	8000e896 <main+0x3f2>
                	  }
                	  else
                	  {
                	        // File exists, open it in append mode
                	    file_open(FOPEN_MODE_APPEND);
8000e85c:	30 2c       	mov	r12,2
8000e85e:	f0 1f 00 86 	mcall	8000ea74 <main+0x5d0>
                	    write=TRUE;
8000e862:	4e 29       	lddpc	r9,8000e9e8 <main+0x544>
8000e864:	30 18       	mov	r8,1
8000e866:	b2 88       	st.b	r9[0x0],r8
                	    PrintString("\topen file successfully\n\r");
8000e868:	fe fc 02 28 	ld.w	r12,pc[552]
8000e86c:	f0 1f 00 6e 	mcall	8000ea24 <main+0x580>
8000e870:	c1 38       	rjmp	8000e896 <main+0x3f2>
                      }
                	break;
                case CMD_STOP:
                     PrintString("Stop Recording");
8000e872:	fe fc 02 22 	ld.w	r12,pc[546]
8000e876:	f0 1f 00 6c 	mcall	8000ea24 <main+0x580>
                     // Close the file
    	              file_close();
8000e87a:	f0 1f 00 82 	mcall	8000ea80 <main+0x5dc>
    	              write=FALSE;
8000e87e:	4d b9       	lddpc	r9,8000e9e8 <main+0x544>
8000e880:	30 08       	mov	r8,0
8000e882:	b2 88       	st.b	r9[0x0],r8
    	             // Display a line feed to user
    	              PrintString("\tclose file successfully\n\r");
8000e884:	fe fc 02 14 	ld.w	r12,pc[532]
8000e888:	f0 1f 00 67 	mcall	8000ea24 <main+0x580>
8000e88c:	c0 58       	rjmp	8000e896 <main+0x3f2>

                     break;
                // Unknown command.
                default:
                  // Display error message.
                  PrintString(MSG_ER_CMD_NOT_FOUND);
8000e88e:	fe fc 02 0e 	ld.w	r12,pc[526]
8000e892:	f0 1f 00 65 	mcall	8000ea24 <main+0x580>
                  break;
                }
                // Display prompt.
                uart_usb_putchar('$');
8000e896:	32 4c       	mov	r12,36
8000e898:	f0 1f 00 58 	mcall	8000e9f8 <main+0x554>
                uart_usb_putchar('>');
8000e89c:	33 ec       	mov	r12,62
8000e89e:	f0 1f 00 57 	mcall	8000e9f8 <main+0x554>
                uart_usb_flush();
8000e8a2:	f0 1f 00 57 	mcall	8000e9fc <main+0x558>
                // Reset vars.
                cmd_type = CMD_NONE;
8000e8a6:	4c 99       	lddpc	r9,8000e9c8 <main+0x524>
8000e8a8:	30 08       	mov	r8,0
8000e8aa:	b2 88       	st.b	r9[0x0],r8
                cmd = FALSE;
8000e8ac:	4c 69       	lddpc	r9,8000e9c4 <main+0x520>
8000e8ae:	30 08       	mov	r8,0
8000e8b0:	b2 88       	st.b	r9[0x0],r8
              }

              if(write && adcnew)//append adc sampling value into file digit by digit
8000e8b2:	4c e8       	lddpc	r8,8000e9e8 <main+0x544>
8000e8b4:	11 88       	ld.ub	r8,r8[0x0]
8000e8b6:	58 08       	cp.w	r8,0
8000e8b8:	fe 90 fe 86 	breq	8000e5c4 <main+0x120>
8000e8bc:	4f 98       	lddpc	r8,8000eaa0 <main+0x5fc>
8000e8be:	11 88       	ld.ub	r8,r8[0x0]
8000e8c0:	58 08       	cp.w	r8,0
8000e8c2:	fe 90 fe 81 	breq	8000e5c4 <main+0x120>
              {
                 int digit[4]={0};
8000e8c6:	30 08       	mov	r8,0
8000e8c8:	30 09       	mov	r9,0
8000e8ca:	ee e9 ff c8 	st.d	r7[-56],r8
8000e8ce:	30 08       	mov	r8,0
8000e8d0:	30 09       	mov	r9,0
8000e8d2:	ee e9 ff d0 	st.d	r7[-48],r8
            	 int res = 0;
8000e8d6:	30 08       	mov	r8,0
8000e8d8:	ef 48 ff c4 	st.w	r7[-60],r8
            	 int digitindex=3;
8000e8dc:	30 38       	mov	r8,3
8000e8de:	ef 48 ff f4 	st.w	r7[-12],r8

            	 int x=value;
8000e8e2:	4f 18       	lddpc	r8,8000eaa4 <main+0x600>
8000e8e4:	90 08       	ld.sh	r8,r8[0x0]
8000e8e6:	5c 78       	castu.h	r8
8000e8e8:	ef 48 ff f8 	st.w	r7[-8],r8
8000e8ec:	c1 a8       	rjmp	8000e920 <main+0x47c>
            	 while(x)
            	 {
            	   x=BinaryDivide(x,10,&res);
8000e8ee:	ee c8 00 3c 	sub	r8,r7,60
8000e8f2:	10 9a       	mov	r10,r8
8000e8f4:	30 ab       	mov	r11,10
8000e8f6:	ee fc ff f8 	ld.w	r12,r7[-8]
8000e8fa:	f0 1f 00 6c 	mcall	8000eaa8 <main+0x604>
8000e8fe:	18 98       	mov	r8,r12
8000e900:	ef 48 ff f8 	st.w	r7[-8],r8
            	   digit[digitindex--]=res;
8000e904:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e908:	ee f9 ff c4 	ld.w	r9,r7[-60]
8000e90c:	a3 68       	lsl	r8,0x2
8000e90e:	ee 08 00 08 	add	r8,r7,r8
8000e912:	f1 49 ff c8 	st.w	r8[-56],r9
8000e916:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e91a:	20 18       	sub	r8,1
8000e91c:	ef 48 ff f4 	st.w	r7[-12],r8
                 int digit[4]={0};
            	 int res = 0;
            	 int digitindex=3;

            	 int x=value;
            	 while(x)
8000e920:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e924:	58 08       	cp.w	r8,0
8000e926:	ce 41       	brne	8000e8ee <main+0x44a>
            	 {
            	   x=BinaryDivide(x,10,&res);
            	   digit[digitindex--]=res;
            	 }
            	 int j;
            	 for(j=0;j<4;j++)
8000e928:	30 08       	mov	r8,0
8000e92a:	ef 48 ff fc 	st.w	r7[-4],r8
8000e92e:	c1 38       	rjmp	8000e954 <main+0x4b0>
            	 {
            	   file_putc(digit[j]+48);
8000e930:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e934:	a3 68       	lsl	r8,0x2
8000e936:	ee 08 00 08 	add	r8,r7,r8
8000e93a:	f0 f8 ff c8 	ld.w	r8,r8[-56]
8000e93e:	5c 58       	castu.b	r8
8000e940:	2d 08       	sub	r8,-48
8000e942:	5c 58       	castu.b	r8
8000e944:	10 9c       	mov	r12,r8
8000e946:	f0 1f 00 5a 	mcall	8000eaac <main+0x608>
            	 {
            	   x=BinaryDivide(x,10,&res);
            	   digit[digitindex--]=res;
            	 }
            	 int j;
            	 for(j=0;j<4;j++)
8000e94a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e94e:	2f f8       	sub	r8,-1
8000e950:	ef 48 ff fc 	st.w	r7[-4],r8
8000e954:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e958:	58 38       	cp.w	r8,3
8000e95a:	fe 9a ff eb 	brle	8000e930 <main+0x48c>
            	 {
            	   file_putc(digit[j]+48);
            	 }
            	  adcnew=FALSE;
8000e95e:	4d 19       	lddpc	r9,8000eaa0 <main+0x5fc>
8000e960:	30 08       	mov	r8,0
8000e962:	b2 88       	st.b	r9[0x0],r8
            	  file_putc(LF);
8000e964:	30 ac       	mov	r12,10
8000e966:	f0 1f 00 52 	mcall	8000eaac <main+0x608>
8000e96a:	fe 9f fe 2d 	bral	8000e5c4 <main+0x120>
8000e96e:	00 00       	add	r0,r0
8000e970:	80 00       	ld.sh	r0,r0[0x0]
8000e972:	2d 3c       	sub	r12,-45
8000e974:	80 00       	ld.sh	r0,r0[0x0]
8000e976:	fb d4 80 00 	ldswp.w	r4,sp[0]
8000e97a:	2d 84       	sub	r4,-40
8000e97c:	80 00       	ld.sh	r0,r0[0x0]
8000e97e:	fb c4       	*unknown*
8000e980:	80 00       	ld.sh	r0,r0[0x0]
8000e982:	31 68       	mov	r8,22
8000e984:	00 00       	add	r0,r0
8000e986:	00 3c       	cp.w	r12,r0
8000e988:	80 00       	ld.sh	r0,r0[0x0]
8000e98a:	36 2c       	mov	r12,98
8000e98c:	00 00       	add	r0,r0
8000e98e:	00 40       	or	r0,r0
8000e990:	80 00       	ld.sh	r0,r0[0x0]
8000e992:	36 7c       	mov	r12,103
8000e994:	80 00       	ld.sh	r0,r0[0x0]
8000e996:	26 f0       	sub	r0,111
8000e998:	80 00       	ld.sh	r0,r0[0x0]
8000e99a:	fb cc       	*unknown*
8000e99c:	80 00       	ld.sh	r0,r0[0x0]
8000e99e:	39 94       	mov	r4,-103
8000e9a0:	80 00       	ld.sh	r0,r0[0x0]
8000e9a2:	3b 80       	mov	r0,-72
8000e9a4:	80 00       	ld.sh	r0,r0[0x0]
8000e9a6:	fb c8       	*unknown*
8000e9a8:	80 00       	ld.sh	r0,r0[0x0]
8000e9aa:	37 24       	mov	r4,114
8000e9ac:	80 00       	ld.sh	r0,r0[0x0]
8000e9ae:	e3 a4 80 00 	cop	cp4,cr0,cr0,cr0,0x28
8000e9b2:	27 94       	sub	r4,121
8000e9b4:	80 00       	ld.sh	r0,r0[0x0]
8000e9b6:	e4 0c       	*unknown*
8000e9b8:	80 00       	ld.sh	r0,r0[0x0]
8000e9ba:	3a f6       	mov	r6,-81
8000e9bc:	80 00       	ld.sh	r0,r0[0x0]
8000e9be:	da 24       	*unknown*
8000e9c0:	80 00       	ld.sh	r0,r0[0x0]
8000e9c2:	da 7c       	*unknown*
8000e9c4:	00 00       	add	r0,r0
8000e9c6:	06 7d       	tst	sp,r3
8000e9c8:	00 00       	add	r0,r0
8000e9ca:	06 7e       	tst	lr,r3
8000e9cc:	00 00       	add	r0,r0
8000e9ce:	06 7f       	tst	pc,r3
8000e9d0:	00 00       	add	r0,r0
8000e9d2:	00 2c       	rsub	r12,r0
8000e9d4:	80 00       	ld.sh	r0,r0[0x0]
8000e9d6:	ea b0 80 00 	rcall	8017e9d6 <_data_lma+0x16ec36>
8000e9da:	3c 08       	mov	r8,-64
8000e9dc:	80 00       	ld.sh	r0,r0[0x0]
8000e9de:	c8 dc       	rcall	8000eaf8 <_sbrk+0x28>
8000e9e0:	80 00       	ld.sh	r0,r0[0x0]
8000e9e2:	52 50       	stdsp	sp[0x94],r0
8000e9e4:	80 00       	ld.sh	r0,r0[0x0]
8000e9e6:	82 bc       	ld.uh	r12,r1[0x6]
8000e9e8:	00 00       	add	r0,r0
8000e9ea:	06 7b       	tst	r11,r3
8000e9ec:	80 00       	ld.sh	r0,r0[0x0]
8000e9ee:	53 14       	stdsp	sp[0xc4],r4
8000e9f0:	00 00       	add	r0,r0
8000e9f2:	00 42       	or	r2,r0
8000e9f4:	80 00       	ld.sh	r0,r0[0x0]
8000e9f6:	84 24       	ld.sh	r4,r2[0x4]
8000e9f8:	80 00       	ld.sh	r0,r0[0x0]
8000e9fa:	84 70       	ld.sh	r0,r2[0xe]
8000e9fc:	80 00       	ld.sh	r0,r0[0x0]
8000e9fe:	84 d4       	ld.uh	r4,r2[0xa]
8000ea00:	80 00       	ld.sh	r0,r0[0x0]
8000ea02:	e1 e4 80 00 	sthh.w	r0[r0],r0:b,r4:b
8000ea06:	fb e4 80 00 	sthh.w	r0[r0],sp:b,r4:b
8000ea0a:	ca 84       	brge	8000e95a <main+0x4b6>
8000ea0c:	80 00       	ld.sh	r0,r0[0x0]
8000ea0e:	c9 e0       	breq	8000e94a <main+0x4a6>
8000ea10:	80 00       	ld.sh	r0,r0[0x0]
8000ea12:	c9 f8       	rjmp	8000eb50 <_init_argv+0x8>
8000ea14:	80 00       	ld.sh	r0,r0[0x0]
8000ea16:	ca d0       	breq	8000e970 <main+0x4cc>
8000ea18:	00 00       	add	r0,r0
8000ea1a:	07 08       	ld.w	r8,r3++
8000ea1c:	80 00       	ld.sh	r0,r0[0x0]
8000ea1e:	d1 fc       	*unknown*
8000ea20:	80 00       	ld.sh	r0,r0[0x0]
8000ea22:	dc 74       	*unknown*
8000ea24:	80 00       	ld.sh	r0,r0[0x0]
8000ea26:	dd 68       	*unknown*
8000ea28:	80 00       	ld.sh	r0,r0[0x0]
8000ea2a:	dc 80       	acall	0x320
8000ea2c:	80 00       	ld.sh	r0,r0[0x0]
8000ea2e:	ce 88       	rjmp	8000ebfe <_malloc_r+0x6>
8000ea30:	80 00       	ld.sh	r0,r0[0x0]
8000ea32:	dc 90       	acall	0x324
8000ea34:	80 00       	ld.sh	r0,r0[0x0]
8000ea36:	cb 30       	breq	8000e99c <main+0x4f8>
8000ea38:	80 00       	ld.sh	r0,r0[0x0]
8000ea3a:	d9 34       	*unknown*
8000ea3c:	80 00       	ld.sh	r0,r0[0x0]
8000ea3e:	dc a8       	*unknown*
8000ea40:	80 00       	ld.sh	r0,r0[0x0]
8000ea42:	dc b0       	acall	0x32c
8000ea44:	80 00       	ld.sh	r0,r0[0x0]
8000ea46:	d9 20       	acall	0x248
8000ea48:	80 00       	ld.sh	r0,r0[0x0]
8000ea4a:	dd a8       	*unknown*
8000ea4c:	80 00       	ld.sh	r0,r0[0x0]
8000ea4e:	dc b8       	*unknown*
8000ea50:	80 00       	ld.sh	r0,r0[0x0]
8000ea52:	d7 98       	*unknown*
8000ea54:	80 00       	ld.sh	r0,r0[0x0]
8000ea56:	cb 68       	rjmp	8000ebc2 <exit+0x22>
8000ea58:	80 00       	ld.sh	r0,r0[0x0]
8000ea5a:	cd cc       	rcall	8000ec12 <_malloc_r+0x1a>
8000ea5c:	80 00       	ld.sh	r0,r0[0x0]
8000ea5e:	dc bc       	*unknown*
8000ea60:	80 00       	ld.sh	r0,r0[0x0]
8000ea62:	dc c8       	*unknown*
8000ea64:	00 00       	add	r0,r0
8000ea66:	06 c8       	st.b	r3++,r8
8000ea68:	80 00       	ld.sh	r0,r0[0x0]
8000ea6a:	f2 cc 80 00 	sub	r12,r9,-32768
8000ea6e:	d4 ac       	*unknown*
8000ea70:	80 00       	ld.sh	r0,r0[0x0]
8000ea72:	dc d0       	acall	0x334
8000ea74:	80 00       	ld.sh	r0,r0[0x0]
8000ea76:	ae 30       	st.h	r7[0x6],r0
8000ea78:	80 00       	ld.sh	r0,r0[0x0]
8000ea7a:	af 2c       	st.d	r7++,r12
8000ea7c:	80 00       	ld.sh	r0,r0[0x0]
8000ea7e:	b0 78       	st.h	r8[0xe],r8
8000ea80:	80 00       	ld.sh	r0,r0[0x0]
8000ea82:	b0 b8       	st.b	r8[0x3],r8
8000ea84:	80 00       	ld.sh	r0,r0[0x0]
8000ea86:	d3 bc       	*unknown*
8000ea88:	80 00       	ld.sh	r0,r0[0x0]
8000ea8a:	d9 4c       	*unknown*
8000ea8c:	80 00       	ld.sh	r0,r0[0x0]
8000ea8e:	dc e0       	acall	0x338
8000ea90:	80 00       	ld.sh	r0,r0[0x0]
8000ea92:	dc f0       	acall	0x33c
8000ea94:	80 00       	ld.sh	r0,r0[0x0]
8000ea96:	dd 0c       	*unknown*
8000ea98:	80 00       	ld.sh	r0,r0[0x0]
8000ea9a:	dd 1c       	*unknown*
8000ea9c:	80 00       	ld.sh	r0,r0[0x0]
8000ea9e:	dc 5c       	*unknown*
8000eaa0:	00 00       	add	r0,r0
8000eaa2:	06 7c       	tst	r12,r3
8000eaa4:	00 00       	add	r0,r0
8000eaa6:	06 78       	tst	r8,r3
8000eaa8:	80 00       	ld.sh	r0,r0[0x0]
8000eaaa:	e2 e0 80 00 	ld.d	r0,r1[-32768]
8000eaae:	af c8       	cbr	r8,0xe

8000eab0 <set_cpu_hz>:
8000eab0:	eb cd 40 80 	pushm	r7,lr
8000eab4:	1a 97       	mov	r7,sp
8000eab6:	20 1d       	sub	sp,4
8000eab8:	ef 4c ff fc 	st.w	r7[-4],r12
8000eabc:	48 49       	lddpc	r9,8000eacc <set_cpu_hz+0x1c>
8000eabe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eac2:	93 08       	st.w	r9[0x0],r8
8000eac4:	2f fd       	sub	sp,-4
8000eac6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000eaca:	00 00       	add	r0,r0
8000eacc:	00 00       	add	r0,r0
8000eace:	00 44       	or	r4,r0

8000ead0 <_sbrk>:
8000ead0:	eb cd 40 80 	pushm	r7,lr
8000ead4:	1a 97       	mov	r7,sp
8000ead6:	20 3d       	sub	sp,12
8000ead8:	ef 4c ff f8 	st.w	r7[-8],r12
8000eadc:	49 78       	lddpc	r8,8000eb38 <_sbrk+0x68>
8000eade:	70 08       	ld.w	r8,r8[0x0]
8000eae0:	58 08       	cp.w	r8,0
8000eae2:	c0 41       	brne	8000eaea <_sbrk+0x1a>
8000eae4:	49 59       	lddpc	r9,8000eb38 <_sbrk+0x68>
8000eae6:	49 68       	lddpc	r8,8000eb3c <_sbrk+0x6c>
8000eae8:	93 08       	st.w	r9[0x0],r8
8000eaea:	49 48       	lddpc	r8,8000eb38 <_sbrk+0x68>
8000eaec:	70 09       	ld.w	r9,r8[0x0]
8000eaee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000eaf2:	10 09       	add	r9,r8
8000eaf4:	49 38       	lddpc	r8,8000eb40 <_sbrk+0x70>
8000eaf6:	10 39       	cp.w	r9,r8
8000eaf8:	e0 8b 00 12 	brhi	8000eb1c <_sbrk+0x4c>
8000eafc:	48 f8       	lddpc	r8,8000eb38 <_sbrk+0x68>
8000eafe:	70 08       	ld.w	r8,r8[0x0]
8000eb00:	ef 48 ff fc 	st.w	r7[-4],r8
8000eb04:	48 d8       	lddpc	r8,8000eb38 <_sbrk+0x68>
8000eb06:	70 09       	ld.w	r9,r8[0x0]
8000eb08:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000eb0c:	10 09       	add	r9,r8
8000eb0e:	48 b8       	lddpc	r8,8000eb38 <_sbrk+0x68>
8000eb10:	91 09       	st.w	r8[0x0],r9
8000eb12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb16:	ef 48 ff f4 	st.w	r7[-12],r8
8000eb1a:	c0 98       	rjmp	8000eb2c <_sbrk+0x5c>
8000eb1c:	f0 1f 00 0a 	mcall	8000eb44 <_sbrk+0x74>
8000eb20:	18 99       	mov	r9,r12
8000eb22:	30 c8       	mov	r8,12
8000eb24:	93 08       	st.w	r9[0x0],r8
8000eb26:	3f f8       	mov	r8,-1
8000eb28:	ef 48 ff f4 	st.w	r7[-12],r8
8000eb2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000eb30:	10 9c       	mov	r12,r8
8000eb32:	2f dd       	sub	sp,-12
8000eb34:	e3 cd 80 80 	ldm	sp++,r7,pc
8000eb38:	00 00       	add	r0,r0
8000eb3a:	07 28       	ld.uh	r8,r3++
8000eb3c:	00 00       	add	r0,r0
8000eb3e:	10 48       	or	r8,r8
8000eb40:	00 00       	add	r0,r0
8000eb42:	f0 00       	*unknown*
8000eb44:	80 00       	ld.sh	r0,r0[0x0]
8000eb46:	eb 94       	*unknown*

8000eb48 <_init_argv>:
8000eb48:	eb cd 40 80 	pushm	r7,lr
8000eb4c:	1a 97       	mov	r7,sp
8000eb4e:	e3 cd 80 80 	ldm	sp++,r7,pc

8000eb52 <_exit>:
8000eb52:	eb cd 40 80 	pushm	r7,lr
8000eb56:	1a 97       	mov	r7,sp
8000eb58:	20 1d       	sub	sp,4
8000eb5a:	ef 4c ff fc 	st.w	r7[-4],r12
8000eb5e:	c0 08       	rjmp	8000eb5e <_exit+0xc>

8000eb60 <set_usart_base>:
8000eb60:	eb cd 40 80 	pushm	r7,lr
8000eb64:	1a 97       	mov	r7,sp
8000eb66:	20 1d       	sub	sp,4
8000eb68:	ef 4c ff fc 	st.w	r7[-4],r12
8000eb6c:	48 49       	lddpc	r9,8000eb7c <set_usart_base+0x1c>
8000eb6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb72:	93 08       	st.w	r9[0x0],r8
8000eb74:	2f fd       	sub	sp,-4
8000eb76:	e3 cd 80 80 	ldm	sp++,r7,pc
8000eb7a:	00 00       	add	r0,r0
8000eb7c:	00 00       	add	r0,r0
8000eb7e:	00 48       	or	r8,r0

8000eb80 <atexit>:
8000eb80:	d4 01       	pushm	lr
8000eb82:	30 09       	mov	r9,0
8000eb84:	18 9b       	mov	r11,r12
8000eb86:	12 9a       	mov	r10,r9
8000eb88:	12 9c       	mov	r12,r9
8000eb8a:	f0 1f 00 02 	mcall	8000eb90 <atexit+0x10>
8000eb8e:	d8 02       	popm	pc
8000eb90:	80 00       	ld.sh	r0,r0[0x0]
8000eb92:	f2 e0 48 28 	ld.d	r0,r9[18472]

8000eb94 <__errno>:
8000eb94:	48 28       	lddpc	r8,8000eb9c <__errno+0x8>
8000eb96:	70 0c       	ld.w	r12,r8[0x0]
8000eb98:	2f 4c       	sub	r12,-12
8000eb9a:	5e fc       	retal	r12
8000eb9c:	00 00       	add	r0,r0
8000eb9e:	01 40       	ld.w	r0,--r0

8000eba0 <exit>:
8000eba0:	d4 21       	pushm	r4-r7,lr
8000eba2:	30 0b       	mov	r11,0
8000eba4:	18 97       	mov	r7,r12
8000eba6:	f0 1f 00 06 	mcall	8000ebbc <exit+0x1c>
8000ebaa:	48 68       	lddpc	r8,8000ebc0 <exit+0x20>
8000ebac:	70 0c       	ld.w	r12,r8[0x0]
8000ebae:	78 a9       	ld.w	r9,r12[0x28]
8000ebb0:	58 09       	cp.w	r9,0
8000ebb2:	c0 20       	breq	8000ebb6 <exit+0x16>
8000ebb4:	5d 19       	icall	r9
8000ebb6:	0e 9c       	mov	r12,r7
8000ebb8:	f0 1f 00 03 	mcall	8000ebc4 <exit+0x24>
8000ebbc:	80 00       	ld.sh	r0,r0[0x0]
8000ebbe:	f3 8c       	*unknown*
8000ebc0:	80 00       	ld.sh	r0,r0[0x0]
8000ebc2:	fd 38 80 00 	ld.ub	r8,lr[-32768]
8000ebc6:	eb 52 d4 01 	st.h	r5[-11263],r2

8000ebc8 <free>:
8000ebc8:	d4 01       	pushm	lr
8000ebca:	48 48       	lddpc	r8,8000ebd8 <free+0x10>
8000ebcc:	18 9b       	mov	r11,r12
8000ebce:	70 0c       	ld.w	r12,r8[0x0]
8000ebd0:	f0 1f 00 03 	mcall	8000ebdc <free+0x14>
8000ebd4:	d8 02       	popm	pc
8000ebd6:	00 00       	add	r0,r0
8000ebd8:	00 00       	add	r0,r0
8000ebda:	01 40       	ld.w	r0,--r0
8000ebdc:	80 00       	ld.sh	r0,r0[0x0]
8000ebde:	f5 0c d4 01 	ld.sh	r12,r10[-11263]

8000ebe0 <malloc>:
8000ebe0:	d4 01       	pushm	lr
8000ebe2:	48 48       	lddpc	r8,8000ebf0 <malloc+0x10>
8000ebe4:	18 9b       	mov	r11,r12
8000ebe6:	70 0c       	ld.w	r12,r8[0x0]
8000ebe8:	f0 1f 00 03 	mcall	8000ebf4 <malloc+0x14>
8000ebec:	d8 02       	popm	pc
8000ebee:	00 00       	add	r0,r0
8000ebf0:	00 00       	add	r0,r0
8000ebf2:	01 40       	ld.w	r0,--r0
8000ebf4:	80 00       	ld.sh	r0,r0[0x0]
8000ebf6:	eb f8 d4 31 	ld.shvc	r8,r5[0x62]

8000ebf8 <_malloc_r>:
8000ebf8:	d4 31       	pushm	r0-r7,lr
8000ebfa:	f6 c8 ff f5 	sub	r8,r11,-11
8000ebfe:	18 92       	mov	r2,r12
8000ec00:	59 68       	cp.w	r8,22
8000ec02:	f9 b5 08 10 	movls	r5,16
8000ec06:	f9 b9 0b f8 	movhi	r9,-8
8000ec0a:	f1 d9 eb 25 	andhi	r5,r8,r9
8000ec0e:	16 35       	cp.w	r5,r11
8000ec10:	5f 38       	srlo	r8
8000ec12:	f1 e5 13 f8 	or	r8,r8,r5>>0x1f
8000ec16:	c0 50       	breq	8000ec20 <_malloc_r+0x28>
8000ec18:	30 c8       	mov	r8,12
8000ec1a:	99 38       	st.w	r12[0xc],r8
8000ec1c:	e0 8f 02 0b 	bral	8000f032 <_malloc_r+0x43a>
8000ec20:	f0 1f 00 53 	mcall	8000ed6c <_malloc_r+0x174>
8000ec24:	e0 45 01 f7 	cp.w	r5,503
8000ec28:	e0 8b 00 1a 	brhi	8000ec5c <_malloc_r+0x64>
8000ec2c:	ea 09 16 03 	lsr	r9,r5,0x3
8000ec30:	4d 08       	lddpc	r8,8000ed70 <_malloc_r+0x178>
8000ec32:	f0 09 00 38 	add	r8,r8,r9<<0x3
8000ec36:	70 36       	ld.w	r6,r8[0xc]
8000ec38:	10 36       	cp.w	r6,r8
8000ec3a:	c0 61       	brne	8000ec46 <_malloc_r+0x4e>
8000ec3c:	ec c8 ff f8 	sub	r8,r6,-8
8000ec40:	70 36       	ld.w	r6,r8[0xc]
8000ec42:	10 36       	cp.w	r6,r8
8000ec44:	c0 90       	breq	8000ec56 <_malloc_r+0x5e>
8000ec46:	6c 19       	ld.w	r9,r6[0x4]
8000ec48:	04 9c       	mov	r12,r2
8000ec4a:	e0 19 ff fc 	andl	r9,0xfffc
8000ec4e:	6c 3a       	ld.w	r10,r6[0xc]
8000ec50:	ec 09 00 09 	add	r9,r6,r9
8000ec54:	c4 88       	rjmp	8000ece4 <_malloc_r+0xec>
8000ec56:	f2 c7 ff fe 	sub	r7,r9,-2
8000ec5a:	c5 18       	rjmp	8000ecfc <_malloc_r+0x104>
8000ec5c:	ea 08 16 09 	lsr	r8,r5,0x9
8000ec60:	c0 41       	brne	8000ec68 <_malloc_r+0x70>
8000ec62:	ea 09 16 03 	lsr	r9,r5,0x3
8000ec66:	c2 a8       	rjmp	8000ecba <_malloc_r+0xc2>
8000ec68:	58 48       	cp.w	r8,4
8000ec6a:	e0 8b 00 07 	brhi	8000ec78 <_malloc_r+0x80>
8000ec6e:	ea 08 16 06 	lsr	r8,r5,0x6
8000ec72:	f0 c9 ff c8 	sub	r9,r8,-56
8000ec76:	c2 28       	rjmp	8000ecba <_malloc_r+0xc2>
8000ec78:	59 48       	cp.w	r8,20
8000ec7a:	e0 8b 00 05 	brhi	8000ec84 <_malloc_r+0x8c>
8000ec7e:	f0 c9 ff a5 	sub	r9,r8,-91
8000ec82:	c1 c8       	rjmp	8000ecba <_malloc_r+0xc2>
8000ec84:	e0 48 00 54 	cp.w	r8,84
8000ec88:	e0 8b 00 07 	brhi	8000ec96 <_malloc_r+0x9e>
8000ec8c:	ea 08 16 0c 	lsr	r8,r5,0xc
8000ec90:	f0 c9 ff 92 	sub	r9,r8,-110
8000ec94:	c1 38       	rjmp	8000ecba <_malloc_r+0xc2>
8000ec96:	e0 48 01 54 	cp.w	r8,340
8000ec9a:	e0 8b 00 07 	brhi	8000eca8 <_malloc_r+0xb0>
8000ec9e:	ea 08 16 0f 	lsr	r8,r5,0xf
8000eca2:	f0 c9 ff 89 	sub	r9,r8,-119
8000eca6:	c0 a8       	rjmp	8000ecba <_malloc_r+0xc2>
8000eca8:	ea 09 16 12 	lsr	r9,r5,0x12
8000ecac:	e0 48 05 54 	cp.w	r8,1364
8000ecb0:	e0 88 00 04 	brls	8000ecb8 <_malloc_r+0xc0>
8000ecb4:	37 e9       	mov	r9,126
8000ecb6:	c0 28       	rjmp	8000ecba <_malloc_r+0xc2>
8000ecb8:	28 49       	sub	r9,-124
8000ecba:	4a e8       	lddpc	r8,8000ed70 <_malloc_r+0x178>
8000ecbc:	f0 09 00 3c 	add	r12,r8,r9<<0x3
8000ecc0:	78 36       	ld.w	r6,r12[0xc]
8000ecc2:	c1 98       	rjmp	8000ecf4 <_malloc_r+0xfc>
8000ecc4:	6c 18       	ld.w	r8,r6[0x4]
8000ecc6:	e0 18 ff fc 	andl	r8,0xfffc
8000ecca:	f0 05 01 0b 	sub	r11,r8,r5
8000ecce:	58 fb       	cp.w	r11,15
8000ecd0:	e0 8a 00 04 	brle	8000ecd8 <_malloc_r+0xe0>
8000ecd4:	20 19       	sub	r9,1
8000ecd6:	c1 18       	rjmp	8000ecf8 <_malloc_r+0x100>
8000ecd8:	6c 3a       	ld.w	r10,r6[0xc]
8000ecda:	58 0b       	cp.w	r11,0
8000ecdc:	c0 b5       	brlt	8000ecf2 <_malloc_r+0xfa>
8000ecde:	ec 08 00 09 	add	r9,r6,r8
8000ece2:	04 9c       	mov	r12,r2
8000ece4:	6c 28       	ld.w	r8,r6[0x8]
8000ece6:	95 28       	st.w	r10[0x8],r8
8000ece8:	91 3a       	st.w	r8[0xc],r10
8000ecea:	72 18       	ld.w	r8,r9[0x4]
8000ecec:	a1 a8       	sbr	r8,0x0
8000ecee:	93 18       	st.w	r9[0x4],r8
8000ecf0:	cc d8       	rjmp	8000ee8a <_malloc_r+0x292>
8000ecf2:	14 96       	mov	r6,r10
8000ecf4:	18 36       	cp.w	r6,r12
8000ecf6:	ce 71       	brne	8000ecc4 <_malloc_r+0xcc>
8000ecf8:	f2 c7 ff ff 	sub	r7,r9,-1
8000ecfc:	49 db       	lddpc	r11,8000ed70 <_malloc_r+0x178>
8000ecfe:	f6 c4 ff f8 	sub	r4,r11,-8
8000ed02:	68 26       	ld.w	r6,r4[0x8]
8000ed04:	08 36       	cp.w	r6,r4
8000ed06:	c7 e0       	breq	8000ee02 <_malloc_r+0x20a>
8000ed08:	6c 19       	ld.w	r9,r6[0x4]
8000ed0a:	e0 19 ff fc 	andl	r9,0xfffc
8000ed0e:	f2 05 01 08 	sub	r8,r9,r5
8000ed12:	58 f8       	cp.w	r8,15
8000ed14:	e0 8a 00 0e 	brle	8000ed30 <_malloc_r+0x138>
8000ed18:	ec 05 00 09 	add	r9,r6,r5
8000ed1c:	89 39       	st.w	r4[0xc],r9
8000ed1e:	89 29       	st.w	r4[0x8],r9
8000ed20:	a1 a5       	sbr	r5,0x0
8000ed22:	f2 08 09 08 	st.w	r9[r8],r8
8000ed26:	8d 15       	st.w	r6[0x4],r5
8000ed28:	93 24       	st.w	r9[0x8],r4
8000ed2a:	93 34       	st.w	r9[0xc],r4
8000ed2c:	04 9c       	mov	r12,r2
8000ed2e:	cd fb       	rjmp	8000ecec <_malloc_r+0xf4>
8000ed30:	89 34       	st.w	r4[0xc],r4
8000ed32:	89 24       	st.w	r4[0x8],r4
8000ed34:	58 08       	cp.w	r8,0
8000ed36:	c0 55       	brlt	8000ed40 <_malloc_r+0x148>
8000ed38:	ec 09 00 09 	add	r9,r6,r9
8000ed3c:	04 9c       	mov	r12,r2
8000ed3e:	cd 6b       	rjmp	8000ecea <_malloc_r+0xf2>
8000ed40:	e0 49 01 ff 	cp.w	r9,511
8000ed44:	e0 8b 00 18 	brhi	8000ed74 <_malloc_r+0x17c>
8000ed48:	f2 0a 16 03 	lsr	r10,r9,0x3
8000ed4c:	f6 0a 00 38 	add	r8,r11,r10<<0x3
8000ed50:	70 29       	ld.w	r9,r8[0x8]
8000ed52:	8d 38       	st.w	r6[0xc],r8
8000ed54:	8d 29       	st.w	r6[0x8],r9
8000ed56:	93 36       	st.w	r9[0xc],r6
8000ed58:	91 26       	st.w	r8[0x8],r6
8000ed5a:	76 19       	ld.w	r9,r11[0x4]
8000ed5c:	a3 4a       	asr	r10,0x2
8000ed5e:	30 18       	mov	r8,1
8000ed60:	f0 0a 09 48 	lsl	r8,r8,r10
8000ed64:	10 49       	or	r9,r8
8000ed66:	97 19       	st.w	r11[0x4],r9
8000ed68:	c4 d8       	rjmp	8000ee02 <_malloc_r+0x20a>
8000ed6a:	00 00       	add	r0,r0
8000ed6c:	80 00       	ld.sh	r0,r0[0x0]
8000ed6e:	f1 f6 00 00 	ld.weq	r6,r8[0x0]
8000ed72:	01 44       	ld.w	r4,--r0
8000ed74:	f2 0a 16 09 	lsr	r10,r9,0x9
8000ed78:	58 4a       	cp.w	r10,4
8000ed7a:	e0 8b 00 07 	brhi	8000ed88 <_malloc_r+0x190>
8000ed7e:	f2 08 16 06 	lsr	r8,r9,0x6
8000ed82:	f0 ca ff c8 	sub	r10,r8,-56
8000ed86:	c2 28       	rjmp	8000edca <_malloc_r+0x1d2>
8000ed88:	59 4a       	cp.w	r10,20
8000ed8a:	e0 8b 00 04 	brhi	8000ed92 <_malloc_r+0x19a>
8000ed8e:	2a 5a       	sub	r10,-91
8000ed90:	c1 d8       	rjmp	8000edca <_malloc_r+0x1d2>
8000ed92:	e0 4a 00 54 	cp.w	r10,84
8000ed96:	e0 8b 00 07 	brhi	8000eda4 <_malloc_r+0x1ac>
8000ed9a:	f2 08 16 0c 	lsr	r8,r9,0xc
8000ed9e:	f0 ca ff 92 	sub	r10,r8,-110
8000eda2:	c1 48       	rjmp	8000edca <_malloc_r+0x1d2>
8000eda4:	e0 4a 01 54 	cp.w	r10,340
8000eda8:	e0 8b 00 07 	brhi	8000edb6 <_malloc_r+0x1be>
8000edac:	f2 08 16 0f 	lsr	r8,r9,0xf
8000edb0:	f0 ca ff 89 	sub	r10,r8,-119
8000edb4:	c0 b8       	rjmp	8000edca <_malloc_r+0x1d2>
8000edb6:	f2 08 16 12 	lsr	r8,r9,0x12
8000edba:	e0 4a 05 54 	cp.w	r10,1364
8000edbe:	f9 ba 0b 7e 	movhi	r10,126
8000edc2:	f9 bb 08 7c 	movls	r11,124
8000edc6:	f1 db e8 0a 	addls	r10,r8,r11
8000edca:	4c 7e       	lddpc	lr,8000eee4 <_malloc_r+0x2ec>
8000edcc:	fc 0a 00 3c 	add	r12,lr,r10<<0x3
8000edd0:	78 2b       	ld.w	r11,r12[0x8]
8000edd2:	18 3b       	cp.w	r11,r12
8000edd4:	c0 d1       	brne	8000edee <_malloc_r+0x1f6>
8000edd6:	a3 4a       	asr	r10,0x2
8000edd8:	30 18       	mov	r8,1
8000edda:	f0 0a 09 48 	lsl	r8,r8,r10
8000edde:	7c 19       	ld.w	r9,lr[0x4]
8000ede0:	10 49       	or	r9,r8
8000ede2:	16 98       	mov	r8,r11
8000ede4:	9d 19       	st.w	lr[0x4],r9
8000ede6:	c0 a8       	rjmp	8000edfa <_malloc_r+0x202>
8000ede8:	76 2b       	ld.w	r11,r11[0x8]
8000edea:	18 3b       	cp.w	r11,r12
8000edec:	c0 60       	breq	8000edf8 <_malloc_r+0x200>
8000edee:	76 18       	ld.w	r8,r11[0x4]
8000edf0:	e0 18 ff fc 	andl	r8,0xfffc
8000edf4:	10 39       	cp.w	r9,r8
8000edf6:	cf 93       	brcs	8000ede8 <_malloc_r+0x1f0>
8000edf8:	76 38       	ld.w	r8,r11[0xc]
8000edfa:	8d 38       	st.w	r6[0xc],r8
8000edfc:	8d 2b       	st.w	r6[0x8],r11
8000edfe:	97 36       	st.w	r11[0xc],r6
8000ee00:	91 26       	st.w	r8[0x8],r6
8000ee02:	ee 09 14 02 	asr	r9,r7,0x2
8000ee06:	30 18       	mov	r8,1
8000ee08:	4b 71       	lddpc	r1,8000eee4 <_malloc_r+0x2ec>
8000ee0a:	f0 09 09 4b 	lsl	r11,r8,r9
8000ee0e:	62 19       	ld.w	r9,r1[0x4]
8000ee10:	12 3b       	cp.w	r11,r9
8000ee12:	e0 8b 00 6d 	brhi	8000eeec <_malloc_r+0x2f4>
8000ee16:	f7 e9 00 08 	and	r8,r11,r9
8000ee1a:	c0 d1       	brne	8000ee34 <_malloc_r+0x23c>
8000ee1c:	0e 98       	mov	r8,r7
8000ee1e:	a1 7b       	lsl	r11,0x1
8000ee20:	e0 18 ff fc 	andl	r8,0xfffc
8000ee24:	f0 c7 ff fc 	sub	r7,r8,-4
8000ee28:	c0 38       	rjmp	8000ee2e <_malloc_r+0x236>
8000ee2a:	2f c7       	sub	r7,-4
8000ee2c:	a1 7b       	lsl	r11,0x1
8000ee2e:	f7 e9 00 08 	and	r8,r11,r9
8000ee32:	cf c0       	breq	8000ee2a <_malloc_r+0x232>
8000ee34:	e2 07 00 33 	add	r3,r1,r7<<0x3
8000ee38:	0e 9c       	mov	r12,r7
8000ee3a:	06 99       	mov	r9,r3
8000ee3c:	72 36       	ld.w	r6,r9[0xc]
8000ee3e:	c2 c8       	rjmp	8000ee96 <_malloc_r+0x29e>
8000ee40:	6c 18       	ld.w	r8,r6[0x4]
8000ee42:	e0 18 ff fc 	andl	r8,0xfffc
8000ee46:	f0 05 01 0e 	sub	lr,r8,r5
8000ee4a:	58 fe       	cp.w	lr,15
8000ee4c:	e0 8a 00 13 	brle	8000ee72 <_malloc_r+0x27a>
8000ee50:	6c 39       	ld.w	r9,r6[0xc]
8000ee52:	6c 28       	ld.w	r8,r6[0x8]
8000ee54:	93 28       	st.w	r9[0x8],r8
8000ee56:	91 39       	st.w	r8[0xc],r9
8000ee58:	ec 05 00 09 	add	r9,r6,r5
8000ee5c:	89 39       	st.w	r4[0xc],r9
8000ee5e:	89 29       	st.w	r4[0x8],r9
8000ee60:	a1 a5       	sbr	r5,0x0
8000ee62:	f2 0e 09 0e 	st.w	r9[lr],lr
8000ee66:	8d 15       	st.w	r6[0x4],r5
8000ee68:	93 24       	st.w	r9[0x8],r4
8000ee6a:	93 34       	st.w	r9[0xc],r4
8000ee6c:	04 9c       	mov	r12,r2
8000ee6e:	1c 98       	mov	r8,lr
8000ee70:	c3 eb       	rjmp	8000ecec <_malloc_r+0xf4>
8000ee72:	6c 3a       	ld.w	r10,r6[0xc]
8000ee74:	58 0e       	cp.w	lr,0
8000ee76:	c0 f5       	brlt	8000ee94 <_malloc_r+0x29c>
8000ee78:	ec 08 00 08 	add	r8,r6,r8
8000ee7c:	04 9c       	mov	r12,r2
8000ee7e:	70 19       	ld.w	r9,r8[0x4]
8000ee80:	a1 a9       	sbr	r9,0x0
8000ee82:	91 19       	st.w	r8[0x4],r9
8000ee84:	6c 28       	ld.w	r8,r6[0x8]
8000ee86:	95 28       	st.w	r10[0x8],r8
8000ee88:	91 3a       	st.w	r8[0xc],r10
8000ee8a:	f0 1f 00 18 	mcall	8000eee8 <_malloc_r+0x2f0>
8000ee8e:	ec cc ff f8 	sub	r12,r6,-8
8000ee92:	d8 32       	popm	r0-r7,pc
8000ee94:	14 96       	mov	r6,r10
8000ee96:	12 36       	cp.w	r6,r9
8000ee98:	cd 41       	brne	8000ee40 <_malloc_r+0x248>
8000ee9a:	2f fc       	sub	r12,-1
8000ee9c:	f1 dc c0 02 	bfextu	r8,r12,0x0,0x2
8000eea0:	c0 30       	breq	8000eea6 <_malloc_r+0x2ae>
8000eea2:	2f 89       	sub	r9,-8
8000eea4:	cc cb       	rjmp	8000ee3c <_malloc_r+0x244>
8000eea6:	0e 99       	mov	r9,r7
8000eea8:	06 9a       	mov	r10,r3
8000eeaa:	f1 d9 c0 02 	bfextu	r8,r9,0x0,0x2
8000eeae:	c0 51       	brne	8000eeb8 <_malloc_r+0x2c0>
8000eeb0:	62 18       	ld.w	r8,r1[0x4]
8000eeb2:	16 88       	andn	r8,r11
8000eeb4:	83 18       	st.w	r1[0x4],r8
8000eeb6:	c0 78       	rjmp	8000eec4 <_malloc_r+0x2cc>
8000eeb8:	f4 c8 00 08 	sub	r8,r10,8
8000eebc:	20 19       	sub	r9,1
8000eebe:	74 0a       	ld.w	r10,r10[0x0]
8000eec0:	10 3a       	cp.w	r10,r8
8000eec2:	cf 40       	breq	8000eeaa <_malloc_r+0x2b2>
8000eec4:	a1 7b       	lsl	r11,0x1
8000eec6:	62 19       	ld.w	r9,r1[0x4]
8000eec8:	12 3b       	cp.w	r11,r9
8000eeca:	e0 8b 00 11 	brhi	8000eeec <_malloc_r+0x2f4>
8000eece:	58 0b       	cp.w	r11,0
8000eed0:	c0 e0       	breq	8000eeec <_malloc_r+0x2f4>
8000eed2:	18 97       	mov	r7,r12
8000eed4:	c0 38       	rjmp	8000eeda <_malloc_r+0x2e2>
8000eed6:	2f c7       	sub	r7,-4
8000eed8:	a1 7b       	lsl	r11,0x1
8000eeda:	f7 e9 00 08 	and	r8,r11,r9
8000eede:	ca b1       	brne	8000ee34 <_malloc_r+0x23c>
8000eee0:	cf bb       	rjmp	8000eed6 <_malloc_r+0x2de>
8000eee2:	00 00       	add	r0,r0
8000eee4:	00 00       	add	r0,r0
8000eee6:	01 44       	ld.w	r4,--r0
8000eee8:	80 00       	ld.sh	r0,r0[0x0]
8000eeea:	f1 f8 62 23 	ld.shmi	r8,r8[0x46]
8000eeee:	66 14       	ld.w	r4,r3[0x4]
8000eef0:	e0 14 ff fc 	andl	r4,0xfffc
8000eef4:	0a 34       	cp.w	r4,r5
8000eef6:	5f 39       	srlo	r9
8000eef8:	e8 05 01 0a 	sub	r10,r4,r5
8000eefc:	58 fa       	cp.w	r10,15
8000eefe:	5f a8       	srle	r8
8000ef00:	10 49       	or	r9,r8
8000ef02:	e0 80 00 a9 	breq	8000f054 <_malloc_r+0x45c>
8000ef06:	4c c8       	lddpc	r8,8000f034 <_malloc_r+0x43c>
8000ef08:	70 08       	ld.w	r8,r8[0x0]
8000ef0a:	2f 08       	sub	r8,-16
8000ef0c:	f0 05 00 07 	add	r7,r8,r5
8000ef10:	4c a8       	lddpc	r8,8000f038 <_malloc_r+0x440>
8000ef12:	70 08       	ld.w	r8,r8[0x0]
8000ef14:	5b f8       	cp.w	r8,-1
8000ef16:	f9 b9 01 7f 	movne	r9,127
8000ef1a:	ef d9 e1 08 	addne	r8,r7,r9
8000ef1e:	f9 b9 01 80 	movne	r9,-128
8000ef22:	f1 d9 e1 27 	andne	r7,r8,r9
8000ef26:	04 9c       	mov	r12,r2
8000ef28:	0e 9b       	mov	r11,r7
8000ef2a:	f0 1f 00 45 	mcall	8000f03c <_malloc_r+0x444>
8000ef2e:	18 96       	mov	r6,r12
8000ef30:	5b fc       	cp.w	r12,-1
8000ef32:	c7 10       	breq	8000f014 <_malloc_r+0x41c>
8000ef34:	e6 04 00 0a 	add	r10,r3,r4
8000ef38:	14 3c       	cp.w	r12,r10
8000ef3a:	c0 32       	brcc	8000ef40 <_malloc_r+0x348>
8000ef3c:	02 33       	cp.w	r3,r1
8000ef3e:	c6 b1       	brne	8000f014 <_malloc_r+0x41c>
8000ef40:	4c 09       	lddpc	r9,8000f040 <_malloc_r+0x448>
8000ef42:	72 08       	ld.w	r8,r9[0x0]
8000ef44:	ee 08 00 0b 	add	r11,r7,r8
8000ef48:	93 0b       	st.w	r9[0x0],r11
8000ef4a:	14 36       	cp.w	r6,r10
8000ef4c:	c0 a1       	brne	8000ef60 <_malloc_r+0x368>
8000ef4e:	f1 d6 c0 07 	bfextu	r8,r6,0x0,0x7
8000ef52:	c0 71       	brne	8000ef60 <_malloc_r+0x368>
8000ef54:	ee 04 00 08 	add	r8,r7,r4
8000ef58:	62 29       	ld.w	r9,r1[0x8]
8000ef5a:	a1 a8       	sbr	r8,0x0
8000ef5c:	93 18       	st.w	r9[0x4],r8
8000ef5e:	c4 f8       	rjmp	8000effc <_malloc_r+0x404>
8000ef60:	4b 69       	lddpc	r9,8000f038 <_malloc_r+0x440>
8000ef62:	72 08       	ld.w	r8,r9[0x0]
8000ef64:	5b f8       	cp.w	r8,-1
8000ef66:	c0 31       	brne	8000ef6c <_malloc_r+0x374>
8000ef68:	93 06       	st.w	r9[0x0],r6
8000ef6a:	c0 68       	rjmp	8000ef76 <_malloc_r+0x37e>
8000ef6c:	ec 0b 00 09 	add	r9,r6,r11
8000ef70:	4b 48       	lddpc	r8,8000f040 <_malloc_r+0x448>
8000ef72:	14 19       	sub	r9,r10
8000ef74:	91 09       	st.w	r8[0x0],r9
8000ef76:	f3 d6 c0 03 	bfextu	r9,r6,0x0,0x3
8000ef7a:	f2 08 11 08 	rsub	r8,r9,8
8000ef7e:	58 09       	cp.w	r9,0
8000ef80:	f0 09 17 10 	movne	r9,r8
8000ef84:	ed d9 e1 06 	addne	r6,r6,r9
8000ef88:	28 09       	sub	r9,-128
8000ef8a:	ec 07 00 08 	add	r8,r6,r7
8000ef8e:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000ef92:	f2 08 01 07 	sub	r7,r9,r8
8000ef96:	04 9c       	mov	r12,r2
8000ef98:	0e 9b       	mov	r11,r7
8000ef9a:	f0 1f 00 29 	mcall	8000f03c <_malloc_r+0x444>
8000ef9e:	5b fc       	cp.w	r12,-1
8000efa0:	ec 0c 17 00 	moveq	r12,r6
8000efa4:	f9 b7 00 00 	moveq	r7,0
8000efa8:	f8 06 01 08 	sub	r8,r12,r6
8000efac:	0e 08       	add	r8,r7
8000efae:	a1 a8       	sbr	r8,0x0
8000efb0:	4a 49       	lddpc	r9,8000f040 <_malloc_r+0x448>
8000efb2:	8d 18       	st.w	r6[0x4],r8
8000efb4:	83 26       	st.w	r1[0x8],r6
8000efb6:	72 08       	ld.w	r8,r9[0x0]
8000efb8:	ee 08 00 08 	add	r8,r7,r8
8000efbc:	93 08       	st.w	r9[0x0],r8
8000efbe:	02 33       	cp.w	r3,r1
8000efc0:	c1 e0       	breq	8000effc <_malloc_r+0x404>
8000efc2:	58 f4       	cp.w	r4,15
8000efc4:	e0 8b 00 05 	brhi	8000efce <_malloc_r+0x3d6>
8000efc8:	30 18       	mov	r8,1
8000efca:	8d 18       	st.w	r6[0x4],r8
8000efcc:	c2 48       	rjmp	8000f014 <_malloc_r+0x41c>
8000efce:	30 5a       	mov	r10,5
8000efd0:	e8 c9 00 0c 	sub	r9,r4,12
8000efd4:	e0 19 ff f8 	andl	r9,0xfff8
8000efd8:	e6 09 00 08 	add	r8,r3,r9
8000efdc:	91 2a       	st.w	r8[0x8],r10
8000efde:	91 1a       	st.w	r8[0x4],r10
8000efe0:	66 18       	ld.w	r8,r3[0x4]
8000efe2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000efe6:	f3 e8 10 08 	or	r8,r9,r8
8000efea:	87 18       	st.w	r3[0x4],r8
8000efec:	58 f9       	cp.w	r9,15
8000efee:	e0 88 00 07 	brls	8000effc <_malloc_r+0x404>
8000eff2:	e6 cb ff f8 	sub	r11,r3,-8
8000eff6:	04 9c       	mov	r12,r2
8000eff8:	f0 1f 00 13 	mcall	8000f044 <_malloc_r+0x44c>
8000effc:	49 18       	lddpc	r8,8000f040 <_malloc_r+0x448>
8000effe:	49 3a       	lddpc	r10,8000f048 <_malloc_r+0x450>
8000f000:	70 09       	ld.w	r9,r8[0x0]
8000f002:	74 08       	ld.w	r8,r10[0x0]
8000f004:	10 39       	cp.w	r9,r8
8000f006:	f5 f9 ba 00 	st.whi	r10[0x0],r9
8000f00a:	49 1a       	lddpc	r10,8000f04c <_malloc_r+0x454>
8000f00c:	74 08       	ld.w	r8,r10[0x0]
8000f00e:	10 39       	cp.w	r9,r8
8000f010:	f5 f9 ba 00 	st.whi	r10[0x0],r9
8000f014:	62 28       	ld.w	r8,r1[0x8]
8000f016:	70 18       	ld.w	r8,r8[0x4]
8000f018:	e0 18 ff fc 	andl	r8,0xfffc
8000f01c:	0a 38       	cp.w	r8,r5
8000f01e:	5f 39       	srlo	r9
8000f020:	f0 05 01 0a 	sub	r10,r8,r5
8000f024:	58 fa       	cp.w	r10,15
8000f026:	5f a8       	srle	r8
8000f028:	10 49       	or	r9,r8
8000f02a:	c1 50       	breq	8000f054 <_malloc_r+0x45c>
8000f02c:	04 9c       	mov	r12,r2
8000f02e:	f0 1f 00 09 	mcall	8000f050 <_malloc_r+0x458>
8000f032:	d8 3a       	popm	r0-r7,pc,r12=0
8000f034:	00 00       	add	r0,r0
8000f036:	07 34       	ld.ub	r4,r3++
8000f038:	00 00       	add	r0,r0
8000f03a:	05 50       	ld.sh	r0,--r2
8000f03c:	80 00       	ld.sh	r0,r0[0x0]
8000f03e:	f1 fc 00 00 	ld.weq	r12,r8[0x0]
8000f042:	07 38       	ld.ub	r8,r3++
8000f044:	80 00       	ld.sh	r0,r0[0x0]
8000f046:	f5 0c 00 00 	ld.sh	r12,r10[0]
8000f04a:	07 30       	ld.ub	r0,r3++
8000f04c:	00 00       	add	r0,r0
8000f04e:	07 2c       	ld.uh	r12,r3++
8000f050:	80 00       	ld.sh	r0,r0[0x0]
8000f052:	f1 f8 0a 98 	st.weq	r8[0x260],r8
8000f056:	a1 a8       	sbr	r8,0x0
8000f058:	62 26       	ld.w	r6,r1[0x8]
8000f05a:	a1 aa       	sbr	r10,0x0
8000f05c:	8d 18       	st.w	r6[0x4],r8
8000f05e:	ec 05 00 08 	add	r8,r6,r5
8000f062:	04 9c       	mov	r12,r2
8000f064:	83 28       	st.w	r1[0x8],r8
8000f066:	91 1a       	st.w	r8[0x4],r10
8000f068:	f0 1f 00 03 	mcall	8000f074 <_malloc_r+0x47c>
8000f06c:	ec cc ff f8 	sub	r12,r6,-8
8000f070:	d8 32       	popm	r0-r7,pc
8000f072:	00 00       	add	r0,r0
8000f074:	80 00       	ld.sh	r0,r0[0x0]
8000f076:	f1 f8 d4 01 	ld.shvc	r8,r8[0x2]

8000f078 <memcmp>:
8000f078:	d4 01       	pushm	lr
8000f07a:	30 08       	mov	r8,0
8000f07c:	18 9e       	mov	lr,r12
8000f07e:	14 9c       	mov	r12,r10
8000f080:	c0 d8       	rjmp	8000f09a <memcmp+0x22>
8000f082:	fc 08 07 0a 	ld.ub	r10,lr[r8]
8000f086:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000f08a:	20 1c       	sub	r12,1
8000f08c:	2f f8       	sub	r8,-1
8000f08e:	f2 0a 18 00 	cp.b	r10,r9
8000f092:	c0 40       	breq	8000f09a <memcmp+0x22>
8000f094:	f4 09 01 0c 	sub	r12,r10,r9
8000f098:	d8 02       	popm	pc
8000f09a:	58 0c       	cp.w	r12,0
8000f09c:	cf 31       	brne	8000f082 <memcmp+0xa>
8000f09e:	d8 02       	popm	pc

8000f0a0 <memcpy>:
8000f0a0:	58 8a       	cp.w	r10,8
8000f0a2:	c2 f5       	brlt	8000f100 <memcpy+0x60>
8000f0a4:	f9 eb 10 09 	or	r9,r12,r11
8000f0a8:	e2 19 00 03 	andl	r9,0x3,COH
8000f0ac:	e0 81 00 97 	brne	8000f1da <memcpy+0x13a>
8000f0b0:	e0 4a 00 20 	cp.w	r10,32
8000f0b4:	c3 b4       	brge	8000f12a <memcpy+0x8a>
8000f0b6:	f4 08 14 02 	asr	r8,r10,0x2
8000f0ba:	f0 09 11 08 	rsub	r9,r8,8
8000f0be:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000f0c2:	76 69       	ld.w	r9,r11[0x18]
8000f0c4:	99 69       	st.w	r12[0x18],r9
8000f0c6:	76 59       	ld.w	r9,r11[0x14]
8000f0c8:	99 59       	st.w	r12[0x14],r9
8000f0ca:	76 49       	ld.w	r9,r11[0x10]
8000f0cc:	99 49       	st.w	r12[0x10],r9
8000f0ce:	76 39       	ld.w	r9,r11[0xc]
8000f0d0:	99 39       	st.w	r12[0xc],r9
8000f0d2:	76 29       	ld.w	r9,r11[0x8]
8000f0d4:	99 29       	st.w	r12[0x8],r9
8000f0d6:	76 19       	ld.w	r9,r11[0x4]
8000f0d8:	99 19       	st.w	r12[0x4],r9
8000f0da:	76 09       	ld.w	r9,r11[0x0]
8000f0dc:	99 09       	st.w	r12[0x0],r9
8000f0de:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000f0e2:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000f0e6:	e0 1a 00 03 	andl	r10,0x3
8000f0ea:	f4 0a 11 04 	rsub	r10,r10,4
8000f0ee:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000f0f2:	17 a9       	ld.ub	r9,r11[0x2]
8000f0f4:	b0 a9       	st.b	r8[0x2],r9
8000f0f6:	17 99       	ld.ub	r9,r11[0x1]
8000f0f8:	b0 99       	st.b	r8[0x1],r9
8000f0fa:	17 89       	ld.ub	r9,r11[0x0]
8000f0fc:	b0 89       	st.b	r8[0x0],r9
8000f0fe:	5e fc       	retal	r12
8000f100:	f4 0a 11 09 	rsub	r10,r10,9
8000f104:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000f108:	17 f9       	ld.ub	r9,r11[0x7]
8000f10a:	b8 f9       	st.b	r12[0x7],r9
8000f10c:	17 e9       	ld.ub	r9,r11[0x6]
8000f10e:	b8 e9       	st.b	r12[0x6],r9
8000f110:	17 d9       	ld.ub	r9,r11[0x5]
8000f112:	b8 d9       	st.b	r12[0x5],r9
8000f114:	17 c9       	ld.ub	r9,r11[0x4]
8000f116:	b8 c9       	st.b	r12[0x4],r9
8000f118:	17 b9       	ld.ub	r9,r11[0x3]
8000f11a:	b8 b9       	st.b	r12[0x3],r9
8000f11c:	17 a9       	ld.ub	r9,r11[0x2]
8000f11e:	b8 a9       	st.b	r12[0x2],r9
8000f120:	17 99       	ld.ub	r9,r11[0x1]
8000f122:	b8 99       	st.b	r12[0x1],r9
8000f124:	17 89       	ld.ub	r9,r11[0x0]
8000f126:	b8 89       	st.b	r12[0x0],r9
8000f128:	5e fc       	retal	r12
8000f12a:	eb cd 40 c0 	pushm	r6-r7,lr
8000f12e:	18 99       	mov	r9,r12
8000f130:	22 0a       	sub	r10,32
8000f132:	b7 07       	ld.d	r6,r11++
8000f134:	b3 26       	st.d	r9++,r6
8000f136:	b7 07       	ld.d	r6,r11++
8000f138:	b3 26       	st.d	r9++,r6
8000f13a:	b7 07       	ld.d	r6,r11++
8000f13c:	b3 26       	st.d	r9++,r6
8000f13e:	b7 07       	ld.d	r6,r11++
8000f140:	b3 26       	st.d	r9++,r6
8000f142:	22 0a       	sub	r10,32
8000f144:	cf 74       	brge	8000f132 <memcpy+0x92>
8000f146:	2f 0a       	sub	r10,-16
8000f148:	c0 65       	brlt	8000f154 <memcpy+0xb4>
8000f14a:	b7 07       	ld.d	r6,r11++
8000f14c:	b3 26       	st.d	r9++,r6
8000f14e:	b7 07       	ld.d	r6,r11++
8000f150:	b3 26       	st.d	r9++,r6
8000f152:	21 0a       	sub	r10,16
8000f154:	5c 3a       	neg	r10
8000f156:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000f15a:	d7 03       	nop
8000f15c:	d7 03       	nop
8000f15e:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000f162:	f3 66 00 0e 	st.b	r9[14],r6
8000f166:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000f16a:	f3 66 00 0d 	st.b	r9[13],r6
8000f16e:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000f172:	f3 66 00 0c 	st.b	r9[12],r6
8000f176:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000f17a:	f3 66 00 0b 	st.b	r9[11],r6
8000f17e:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000f182:	f3 66 00 0a 	st.b	r9[10],r6
8000f186:	f7 36 00 09 	ld.ub	r6,r11[9]
8000f18a:	f3 66 00 09 	st.b	r9[9],r6
8000f18e:	f7 36 00 08 	ld.ub	r6,r11[8]
8000f192:	f3 66 00 08 	st.b	r9[8],r6
8000f196:	f7 36 00 07 	ld.ub	r6,r11[7]
8000f19a:	f3 66 00 07 	st.b	r9[7],r6
8000f19e:	f7 36 00 06 	ld.ub	r6,r11[6]
8000f1a2:	f3 66 00 06 	st.b	r9[6],r6
8000f1a6:	f7 36 00 05 	ld.ub	r6,r11[5]
8000f1aa:	f3 66 00 05 	st.b	r9[5],r6
8000f1ae:	f7 36 00 04 	ld.ub	r6,r11[4]
8000f1b2:	f3 66 00 04 	st.b	r9[4],r6
8000f1b6:	f7 36 00 03 	ld.ub	r6,r11[3]
8000f1ba:	f3 66 00 03 	st.b	r9[3],r6
8000f1be:	f7 36 00 02 	ld.ub	r6,r11[2]
8000f1c2:	f3 66 00 02 	st.b	r9[2],r6
8000f1c6:	f7 36 00 01 	ld.ub	r6,r11[1]
8000f1ca:	f3 66 00 01 	st.b	r9[1],r6
8000f1ce:	f7 36 00 00 	ld.ub	r6,r11[0]
8000f1d2:	f3 66 00 00 	st.b	r9[0],r6
8000f1d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f1da:	20 1a       	sub	r10,1
8000f1dc:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000f1e0:	f8 0a 0b 09 	st.b	r12[r10],r9
8000f1e4:	cf b1       	brne	8000f1da <memcpy+0x13a>
8000f1e6:	5e fc       	retal	r12

8000f1e8 <memset>:
8000f1e8:	18 98       	mov	r8,r12
8000f1ea:	c0 38       	rjmp	8000f1f0 <memset+0x8>
8000f1ec:	10 cb       	st.b	r8++,r11
8000f1ee:	20 1a       	sub	r10,1
8000f1f0:	58 0a       	cp.w	r10,0
8000f1f2:	cf d1       	brne	8000f1ec <memset+0x4>
8000f1f4:	5e fc       	retal	r12

8000f1f6 <__malloc_lock>:
8000f1f6:	5e fc       	retal	r12

8000f1f8 <__malloc_unlock>:
8000f1f8:	5e fc       	retal	r12
8000f1fa:	d7 03       	nop

8000f1fc <_sbrk_r>:
8000f1fc:	d4 21       	pushm	r4-r7,lr
8000f1fe:	30 08       	mov	r8,0
8000f200:	18 96       	mov	r6,r12
8000f202:	48 77       	lddpc	r7,8000f21c <_sbrk_r+0x20>
8000f204:	16 9c       	mov	r12,r11
8000f206:	8f 08       	st.w	r7[0x0],r8
8000f208:	f0 1f 00 06 	mcall	8000f220 <_sbrk_r+0x24>
8000f20c:	5b fc       	cp.w	r12,-1
8000f20e:	c0 51       	brne	8000f218 <_sbrk_r+0x1c>
8000f210:	6e 08       	ld.w	r8,r7[0x0]
8000f212:	58 08       	cp.w	r8,0
8000f214:	ed f8 1a 03 	st.wne	r6[0xc],r8
8000f218:	d8 22       	popm	r4-r7,pc
8000f21a:	00 00       	add	r0,r0
8000f21c:	00 00       	add	r0,r0
8000f21e:	10 40       	or	r0,r8
8000f220:	80 00       	ld.sh	r0,r0[0x0]
8000f222:	ea d0 f9 eb 	satsub.w	r0,r5,-1557

8000f224 <strcmp>:
8000f224:	f9 eb 10 0a 	or	r10,r12,r11
8000f228:	e2 1a 00 03 	andl	r10,0x3,COH
8000f22c:	c3 41       	brne	8000f294 <strcmp+0x70>
8000f22e:	78 0a       	ld.w	r10,r12[0x0]
8000f230:	76 09       	ld.w	r9,r11[0x0]
8000f232:	5c ea       	tnbz	r10
8000f234:	c1 70       	breq	8000f262 <strcmp+0x3e>
8000f236:	12 3a       	cp.w	r10,r9
8000f238:	c1 51       	brne	8000f262 <strcmp+0x3e>
8000f23a:	78 1a       	ld.w	r10,r12[0x4]
8000f23c:	76 19       	ld.w	r9,r11[0x4]
8000f23e:	5c ea       	tnbz	r10
8000f240:	c1 10       	breq	8000f262 <strcmp+0x3e>
8000f242:	12 3a       	cp.w	r10,r9
8000f244:	c0 f1       	brne	8000f262 <strcmp+0x3e>
8000f246:	78 2a       	ld.w	r10,r12[0x8]
8000f248:	76 29       	ld.w	r9,r11[0x8]
8000f24a:	5c ea       	tnbz	r10
8000f24c:	c0 b0       	breq	8000f262 <strcmp+0x3e>
8000f24e:	12 3a       	cp.w	r10,r9
8000f250:	c0 91       	brne	8000f262 <strcmp+0x3e>
8000f252:	78 3a       	ld.w	r10,r12[0xc]
8000f254:	76 39       	ld.w	r9,r11[0xc]
8000f256:	5c ea       	tnbz	r10
8000f258:	c0 50       	breq	8000f262 <strcmp+0x3e>
8000f25a:	2f 0c       	sub	r12,-16
8000f25c:	2f 0b       	sub	r11,-16
8000f25e:	12 3a       	cp.w	r10,r9
8000f260:	ce 70       	breq	8000f22e <strcmp+0xa>
8000f262:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
8000f266:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
8000f26a:	5e 0c       	reteq	r12
8000f26c:	16 1c       	sub	r12,r11
8000f26e:	5e 1c       	retne	r12
8000f270:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
8000f274:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
8000f278:	5e 0c       	reteq	r12
8000f27a:	16 1c       	sub	r12,r11
8000f27c:	5e 1c       	retne	r12
8000f27e:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
8000f282:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
8000f286:	5e 0c       	reteq	r12
8000f288:	16 1c       	sub	r12,r11
8000f28a:	5e 1c       	retne	r12
8000f28c:	5c 5a       	castu.b	r10
8000f28e:	5c 59       	castu.b	r9
8000f290:	12 1a       	sub	r10,r9
8000f292:	5e fa       	retal	r10
8000f294:	17 8a       	ld.ub	r10,r11[0x0]
8000f296:	19 89       	ld.ub	r9,r12[0x0]
8000f298:	58 0a       	cp.w	r10,0
8000f29a:	5e 09       	reteq	r9
8000f29c:	14 19       	sub	r9,r10
8000f29e:	5e 19       	retne	r9
8000f2a0:	17 9a       	ld.ub	r10,r11[0x1]
8000f2a2:	19 99       	ld.ub	r9,r12[0x1]
8000f2a4:	58 0a       	cp.w	r10,0
8000f2a6:	5e 09       	reteq	r9
8000f2a8:	14 19       	sub	r9,r10
8000f2aa:	5e 19       	retne	r9
8000f2ac:	17 aa       	ld.ub	r10,r11[0x2]
8000f2ae:	19 a9       	ld.ub	r9,r12[0x2]
8000f2b0:	58 0a       	cp.w	r10,0
8000f2b2:	5e 09       	reteq	r9
8000f2b4:	14 19       	sub	r9,r10
8000f2b6:	5e 19       	retne	r9
8000f2b8:	17 ba       	ld.ub	r10,r11[0x3]
8000f2ba:	19 b9       	ld.ub	r9,r12[0x3]
8000f2bc:	58 0a       	cp.w	r10,0
8000f2be:	5e 09       	reteq	r9
8000f2c0:	14 19       	sub	r9,r10
8000f2c2:	5e 19       	retne	r9
8000f2c4:	2f cb       	sub	r11,-4
8000f2c6:	2f cc       	sub	r12,-4
8000f2c8:	ce 6b       	rjmp	8000f294 <strcmp+0x70>
	...

8000f2cc <strlen>:
8000f2cc:	18 99       	mov	r9,r12
8000f2ce:	30 0a       	mov	r10,0
8000f2d0:	c0 28       	rjmp	8000f2d4 <strlen+0x8>
8000f2d2:	2f fc       	sub	r12,-1
8000f2d4:	19 88       	ld.ub	r8,r12[0x0]
8000f2d6:	f4 08 18 00 	cp.b	r8,r10
8000f2da:	cf c1       	brne	8000f2d2 <strlen+0x6>
8000f2dc:	12 1c       	sub	r12,r9
8000f2de:	5e fc       	retal	r12

8000f2e0 <__register_exitproc>:
8000f2e0:	d4 31       	pushm	r0-r7,lr
8000f2e2:	4a 98       	lddpc	r8,8000f384 <__register_exitproc+0xa4>
8000f2e4:	70 06       	ld.w	r6,r8[0x0]
8000f2e6:	6d 27       	ld.w	r7,r6[0x48]
8000f2e8:	58 07       	cp.w	r7,0
8000f2ea:	f9 b8 00 4c 	moveq	r8,76
8000f2ee:	ed d8 e0 07 	addeq	r7,r6,r8
8000f2f2:	ed f7 0a 12 	st.weq	r6[0x48],r7
8000f2f6:	18 95       	mov	r5,r12
8000f2f8:	16 92       	mov	r2,r11
8000f2fa:	14 94       	mov	r4,r10
8000f2fc:	12 93       	mov	r3,r9
8000f2fe:	6e 18       	ld.w	r8,r7[0x4]
8000f300:	59 f8       	cp.w	r8,31
8000f302:	e0 8a 00 0e 	brle	8000f31e <__register_exitproc+0x3e>
8000f306:	e0 6c 00 8c 	mov	r12,140
8000f30a:	f0 1f 00 20 	mcall	8000f388 <__register_exitproc+0xa8>
8000f30e:	18 97       	mov	r7,r12
8000f310:	c3 80       	breq	8000f380 <__register_exitproc+0xa0>
8000f312:	6d 28       	ld.w	r8,r6[0x48]
8000f314:	99 08       	st.w	r12[0x0],r8
8000f316:	ed 4c 00 48 	st.w	r6[72],r12
8000f31a:	30 08       	mov	r8,0
8000f31c:	99 18       	st.w	r12[0x4],r8
8000f31e:	58 05       	cp.w	r5,0
8000f320:	c2 70       	breq	8000f36e <__register_exitproc+0x8e>
8000f322:	ee fc 00 88 	ld.w	r12,r7[136]
8000f326:	58 0c       	cp.w	r12,0
8000f328:	c0 d1       	brne	8000f342 <__register_exitproc+0x62>
8000f32a:	e0 6c 01 08 	mov	r12,264
8000f32e:	f0 1f 00 17 	mcall	8000f388 <__register_exitproc+0xa8>
8000f332:	c2 70       	breq	8000f380 <__register_exitproc+0xa0>
8000f334:	30 08       	mov	r8,0
8000f336:	ef 4c 00 88 	st.w	r7[136],r12
8000f33a:	f9 48 01 04 	st.w	r12[260],r8
8000f33e:	f9 48 01 00 	st.w	r12[256],r8
8000f342:	6e 1a       	ld.w	r10,r7[0x4]
8000f344:	f4 c8 ff e0 	sub	r8,r10,-32
8000f348:	30 19       	mov	r9,1
8000f34a:	f8 08 09 23 	st.w	r12[r8<<0x2],r3
8000f34e:	f2 0a 09 49 	lsl	r9,r9,r10
8000f352:	f8 f8 01 00 	ld.w	r8,r12[256]
8000f356:	f8 0a 09 24 	st.w	r12[r10<<0x2],r4
8000f35a:	12 48       	or	r8,r9
8000f35c:	f9 48 01 00 	st.w	r12[256],r8
8000f360:	58 25       	cp.w	r5,2
8000f362:	f9 f8 00 41 	ld.weq	r8,r12[0x104]
8000f366:	f1 d9 e0 38 	oreq	r8,r8,r9
8000f36a:	f9 f8 0a 41 	st.weq	r12[0x104],r8
8000f36e:	6e 18       	ld.w	r8,r7[0x4]
8000f370:	30 0c       	mov	r12,0
8000f372:	f0 c9 ff ff 	sub	r9,r8,-1
8000f376:	2f e8       	sub	r8,-2
8000f378:	8f 19       	st.w	r7[0x4],r9
8000f37a:	ee 08 09 22 	st.w	r7[r8<<0x2],r2
8000f37e:	d8 32       	popm	r0-r7,pc
8000f380:	dc 3a       	popm	r0-r7,pc,r12=-1
8000f382:	00 00       	add	r0,r0
8000f384:	80 00       	ld.sh	r0,r0[0x0]
8000f386:	fd 38 80 00 	ld.ub	r8,lr[-32768]
8000f38a:	eb e0 d4 31 	sthh.w	r1[0x10c],r5:b,r0:t

8000f38c <__call_exitprocs>:
8000f38c:	d4 31       	pushm	r0-r7,lr
8000f38e:	20 3d       	sub	sp,12
8000f390:	4b 38       	lddpc	r8,8000f45c <__call_exitprocs+0xd0>
8000f392:	50 0c       	stdsp	sp[0x0],r12
8000f394:	70 08       	ld.w	r8,r8[0x0]
8000f396:	16 90       	mov	r0,r11
8000f398:	50 18       	stdsp	sp[0x4],r8
8000f39a:	2b 88       	sub	r8,-72
8000f39c:	50 28       	stdsp	sp[0x8],r8
8000f39e:	40 18       	lddsp	r8,sp[0x4]
8000f3a0:	40 22       	lddsp	r2,sp[0x8]
8000f3a2:	71 27       	ld.w	r7,r8[0x48]
8000f3a4:	c5 78       	rjmp	8000f452 <__call_exitprocs+0xc6>
8000f3a6:	6e 19       	ld.w	r9,r7[0x4]
8000f3a8:	ee f5 00 88 	ld.w	r5,r7[136]
8000f3ac:	f2 c8 ff ff 	sub	r8,r9,-1
8000f3b0:	f2 c6 00 01 	sub	r6,r9,1
8000f3b4:	ee 08 00 23 	add	r3,r7,r8<<0x2
8000f3b8:	ea 06 00 24 	add	r4,r5,r6<<0x2
8000f3bc:	c3 68       	rjmp	8000f428 <__call_exitprocs+0x9c>
8000f3be:	58 00       	cp.w	r0,0
8000f3c0:	c0 70       	breq	8000f3ce <__call_exitprocs+0x42>
8000f3c2:	58 05       	cp.w	r5,0
8000f3c4:	c2 f0       	breq	8000f422 <__call_exitprocs+0x96>
8000f3c6:	e8 f8 00 80 	ld.w	r8,r4[128]
8000f3ca:	00 38       	cp.w	r8,r0
8000f3cc:	c2 b1       	brne	8000f422 <__call_exitprocs+0x96>
8000f3ce:	6e 18       	ld.w	r8,r7[0x4]
8000f3d0:	66 0a       	ld.w	r10,r3[0x0]
8000f3d2:	20 18       	sub	r8,1
8000f3d4:	10 36       	cp.w	r6,r8
8000f3d6:	ef f6 0a 01 	st.weq	r7[0x4],r6
8000f3da:	f9 b8 01 00 	movne	r8,0
8000f3de:	e7 f8 1a 00 	st.wne	r3[0x0],r8
8000f3e2:	58 0a       	cp.w	r10,0
8000f3e4:	c1 f0       	breq	8000f422 <__call_exitprocs+0x96>
8000f3e6:	6e 11       	ld.w	r1,r7[0x4]
8000f3e8:	58 05       	cp.w	r5,0
8000f3ea:	c0 90       	breq	8000f3fc <__call_exitprocs+0x70>
8000f3ec:	30 18       	mov	r8,1
8000f3ee:	f0 06 09 49 	lsl	r9,r8,r6
8000f3f2:	ea f8 01 00 	ld.w	r8,r5[256]
8000f3f6:	f3 e8 00 08 	and	r8,r9,r8
8000f3fa:	c0 31       	brne	8000f400 <__call_exitprocs+0x74>
8000f3fc:	5d 1a       	icall	r10
8000f3fe:	c0 c8       	rjmp	8000f416 <__call_exitprocs+0x8a>
8000f400:	ea f8 01 04 	ld.w	r8,r5[260]
8000f404:	68 0c       	ld.w	r12,r4[0x0]
8000f406:	f3 e8 00 08 	and	r8,r9,r8
8000f40a:	c0 51       	brne	8000f414 <__call_exitprocs+0x88>
8000f40c:	18 9b       	mov	r11,r12
8000f40e:	40 0c       	lddsp	r12,sp[0x0]
8000f410:	5d 1a       	icall	r10
8000f412:	c0 28       	rjmp	8000f416 <__call_exitprocs+0x8a>
8000f414:	5d 1a       	icall	r10
8000f416:	6e 18       	ld.w	r8,r7[0x4]
8000f418:	10 31       	cp.w	r1,r8
8000f41a:	cc 21       	brne	8000f39e <__call_exitprocs+0x12>
8000f41c:	64 08       	ld.w	r8,r2[0x0]
8000f41e:	0e 38       	cp.w	r8,r7
8000f420:	cb f1       	brne	8000f39e <__call_exitprocs+0x12>
8000f422:	20 16       	sub	r6,1
8000f424:	20 44       	sub	r4,4
8000f426:	20 43       	sub	r3,4
8000f428:	58 06       	cp.w	r6,0
8000f42a:	cc a4       	brge	8000f3be <__call_exitprocs+0x32>
8000f42c:	6e 18       	ld.w	r8,r7[0x4]
8000f42e:	58 08       	cp.w	r8,0
8000f430:	c0 f1       	brne	8000f44e <__call_exitprocs+0xc2>
8000f432:	6e 08       	ld.w	r8,r7[0x0]
8000f434:	58 08       	cp.w	r8,0
8000f436:	c0 c0       	breq	8000f44e <__call_exitprocs+0xc2>
8000f438:	85 08       	st.w	r2[0x0],r8
8000f43a:	58 05       	cp.w	r5,0
8000f43c:	c0 40       	breq	8000f444 <__call_exitprocs+0xb8>
8000f43e:	0a 9c       	mov	r12,r5
8000f440:	f0 1f 00 08 	mcall	8000f460 <__call_exitprocs+0xd4>
8000f444:	0e 9c       	mov	r12,r7
8000f446:	f0 1f 00 07 	mcall	8000f460 <__call_exitprocs+0xd4>
8000f44a:	64 07       	ld.w	r7,r2[0x0]
8000f44c:	c0 38       	rjmp	8000f452 <__call_exitprocs+0xc6>
8000f44e:	0e 92       	mov	r2,r7
8000f450:	6e 07       	ld.w	r7,r7[0x0]
8000f452:	58 07       	cp.w	r7,0
8000f454:	ca 91       	brne	8000f3a6 <__call_exitprocs+0x1a>
8000f456:	2f dd       	sub	sp,-12
8000f458:	d8 32       	popm	r0-r7,pc
8000f45a:	00 00       	add	r0,r0
8000f45c:	80 00       	ld.sh	r0,r0[0x0]
8000f45e:	fd 38 80 00 	ld.ub	r8,lr[-32768]
8000f462:	eb c8 d4 21 	stm	--r8,r0,r5,r10,r12,lr-pc

8000f464 <_malloc_trim_r>:
8000f464:	d4 21       	pushm	r4-r7,lr
8000f466:	16 96       	mov	r6,r11
8000f468:	18 97       	mov	r7,r12
8000f46a:	f0 1f 00 23 	mcall	8000f4f4 <_malloc_trim_r+0x90>
8000f46e:	4a 34       	lddpc	r4,8000f4f8 <_malloc_trim_r+0x94>
8000f470:	68 28       	ld.w	r8,r4[0x8]
8000f472:	70 15       	ld.w	r5,r8[0x4]
8000f474:	e0 15 ff fc 	andl	r5,0xfffc
8000f478:	ea c8 ff 91 	sub	r8,r5,-111
8000f47c:	0c 18       	sub	r8,r6
8000f47e:	e0 18 ff 80 	andl	r8,0xff80
8000f482:	f0 c6 00 80 	sub	r6,r8,128
8000f486:	e0 46 00 7f 	cp.w	r6,127
8000f48a:	e0 8a 00 23 	brle	8000f4d0 <_malloc_trim_r+0x6c>
8000f48e:	30 0b       	mov	r11,0
8000f490:	0e 9c       	mov	r12,r7
8000f492:	f0 1f 00 1b 	mcall	8000f4fc <_malloc_trim_r+0x98>
8000f496:	68 28       	ld.w	r8,r4[0x8]
8000f498:	0a 08       	add	r8,r5
8000f49a:	10 3c       	cp.w	r12,r8
8000f49c:	c1 a1       	brne	8000f4d0 <_malloc_trim_r+0x6c>
8000f49e:	ec 0b 11 00 	rsub	r11,r6,0
8000f4a2:	0e 9c       	mov	r12,r7
8000f4a4:	f0 1f 00 16 	mcall	8000f4fc <_malloc_trim_r+0x98>
8000f4a8:	5b fc       	cp.w	r12,-1
8000f4aa:	c1 71       	brne	8000f4d8 <_malloc_trim_r+0x74>
8000f4ac:	30 0b       	mov	r11,0
8000f4ae:	0e 9c       	mov	r12,r7
8000f4b0:	f0 1f 00 13 	mcall	8000f4fc <_malloc_trim_r+0x98>
8000f4b4:	68 29       	ld.w	r9,r4[0x8]
8000f4b6:	f8 09 01 08 	sub	r8,r12,r9
8000f4ba:	58 f8       	cp.w	r8,15
8000f4bc:	e0 8a 00 0a 	brle	8000f4d0 <_malloc_trim_r+0x6c>
8000f4c0:	a1 a8       	sbr	r8,0x0
8000f4c2:	93 18       	st.w	r9[0x4],r8
8000f4c4:	48 f8       	lddpc	r8,8000f500 <_malloc_trim_r+0x9c>
8000f4c6:	70 09       	ld.w	r9,r8[0x0]
8000f4c8:	48 f8       	lddpc	r8,8000f504 <_malloc_trim_r+0xa0>
8000f4ca:	f8 09 01 09 	sub	r9,r12,r9
8000f4ce:	91 09       	st.w	r8[0x0],r9
8000f4d0:	0e 9c       	mov	r12,r7
8000f4d2:	f0 1f 00 0e 	mcall	8000f508 <_malloc_trim_r+0xa4>
8000f4d6:	d8 2a       	popm	r4-r7,pc,r12=0
8000f4d8:	68 29       	ld.w	r9,r4[0x8]
8000f4da:	ea 06 01 08 	sub	r8,r5,r6
8000f4de:	a1 a8       	sbr	r8,0x0
8000f4e0:	93 18       	st.w	r9[0x4],r8
8000f4e2:	48 99       	lddpc	r9,8000f504 <_malloc_trim_r+0xa0>
8000f4e4:	72 08       	ld.w	r8,r9[0x0]
8000f4e6:	0c 18       	sub	r8,r6
8000f4e8:	0e 9c       	mov	r12,r7
8000f4ea:	93 08       	st.w	r9[0x0],r8
8000f4ec:	f0 1f 00 07 	mcall	8000f508 <_malloc_trim_r+0xa4>
8000f4f0:	da 2a       	popm	r4-r7,pc,r12=1
8000f4f2:	00 00       	add	r0,r0
8000f4f4:	80 00       	ld.sh	r0,r0[0x0]
8000f4f6:	f1 f6 00 00 	ld.weq	r6,r8[0x0]
8000f4fa:	01 44       	ld.w	r4,--r0
8000f4fc:	80 00       	ld.sh	r0,r0[0x0]
8000f4fe:	f1 fc 00 00 	ld.weq	r12,r8[0x0]
8000f502:	05 50       	ld.sh	r0,--r2
8000f504:	00 00       	add	r0,r0
8000f506:	07 38       	ld.ub	r8,r3++
8000f508:	80 00       	ld.sh	r0,r0[0x0]
8000f50a:	f1 f8 d4 21 	ld.shvc	r8,r8[0x42]

8000f50c <_free_r>:
8000f50c:	d4 21       	pushm	r4-r7,lr
8000f50e:	16 97       	mov	r7,r11
8000f510:	18 95       	mov	r5,r12
8000f512:	58 0b       	cp.w	r11,0
8000f514:	e0 80 00 ce 	breq	8000f6b0 <_free_r+0x1a4>
8000f518:	f0 1f 00 4c 	mcall	8000f648 <_free_r+0x13c>
8000f51c:	ee cb 00 08 	sub	r11,r7,8
8000f520:	76 18       	ld.w	r8,r11[0x4]
8000f522:	4c b6       	lddpc	r6,8000f64c <_free_r+0x140>
8000f524:	10 9e       	mov	lr,r8
8000f526:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
8000f52a:	a1 ce       	cbr	lr,0x0
8000f52c:	6c 28       	ld.w	r8,r6[0x8]
8000f52e:	f6 0e 00 0a 	add	r10,r11,lr
8000f532:	74 1c       	ld.w	r12,r10[0x4]
8000f534:	e0 1c ff fc 	andl	r12,0xfffc
8000f538:	10 3a       	cp.w	r10,r8
8000f53a:	c1 d1       	brne	8000f574 <_free_r+0x68>
8000f53c:	f8 0e 00 0a 	add	r10,r12,lr
8000f540:	58 07       	cp.w	r7,0
8000f542:	c0 81       	brne	8000f552 <_free_r+0x46>
8000f544:	76 08       	ld.w	r8,r11[0x0]
8000f546:	10 1b       	sub	r11,r8
8000f548:	10 0a       	add	r10,r8
8000f54a:	76 39       	ld.w	r9,r11[0xc]
8000f54c:	76 28       	ld.w	r8,r11[0x8]
8000f54e:	93 28       	st.w	r9[0x8],r8
8000f550:	91 39       	st.w	r8[0xc],r9
8000f552:	14 98       	mov	r8,r10
8000f554:	8d 2b       	st.w	r6[0x8],r11
8000f556:	a1 a8       	sbr	r8,0x0
8000f558:	97 18       	st.w	r11[0x4],r8
8000f55a:	4b e8       	lddpc	r8,8000f650 <_free_r+0x144>
8000f55c:	70 08       	ld.w	r8,r8[0x0]
8000f55e:	10 3a       	cp.w	r10,r8
8000f560:	c0 63       	brcs	8000f56c <_free_r+0x60>
8000f562:	4b d8       	lddpc	r8,8000f654 <_free_r+0x148>
8000f564:	0a 9c       	mov	r12,r5
8000f566:	70 0b       	ld.w	r11,r8[0x0]
8000f568:	f0 1f 00 3c 	mcall	8000f658 <_free_r+0x14c>
8000f56c:	0a 9c       	mov	r12,r5
8000f56e:	f0 1f 00 3c 	mcall	8000f65c <_free_r+0x150>
8000f572:	d8 22       	popm	r4-r7,pc
8000f574:	95 1c       	st.w	r10[0x4],r12
8000f576:	58 07       	cp.w	r7,0
8000f578:	c0 30       	breq	8000f57e <_free_r+0x72>
8000f57a:	30 07       	mov	r7,0
8000f57c:	c1 08       	rjmp	8000f59c <_free_r+0x90>
8000f57e:	76 08       	ld.w	r8,r11[0x0]
8000f580:	10 1b       	sub	r11,r8
8000f582:	10 0e       	add	lr,r8
8000f584:	76 29       	ld.w	r9,r11[0x8]
8000f586:	ec c8 ff f8 	sub	r8,r6,-8
8000f58a:	10 39       	cp.w	r9,r8
8000f58c:	f9 b7 00 01 	moveq	r7,1
8000f590:	f7 f8 10 03 	ld.wne	r8,r11[0xc]
8000f594:	f1 f9 1a 02 	st.wne	r8[0x8],r9
8000f598:	f3 f8 1a 03 	st.wne	r9[0xc],r8
8000f59c:	f4 0c 00 08 	add	r8,r10,r12
8000f5a0:	70 18       	ld.w	r8,r8[0x4]
8000f5a2:	ed b8 00 00 	bld	r8,0x0
8000f5a6:	c1 30       	breq	8000f5cc <_free_r+0xc0>
8000f5a8:	18 0e       	add	lr,r12
8000f5aa:	58 07       	cp.w	r7,0
8000f5ac:	c0 c1       	brne	8000f5c4 <_free_r+0xb8>
8000f5ae:	4a 88       	lddpc	r8,8000f64c <_free_r+0x140>
8000f5b0:	74 29       	ld.w	r9,r10[0x8]
8000f5b2:	2f 88       	sub	r8,-8
8000f5b4:	10 39       	cp.w	r9,r8
8000f5b6:	c0 71       	brne	8000f5c4 <_free_r+0xb8>
8000f5b8:	93 3b       	st.w	r9[0xc],r11
8000f5ba:	93 2b       	st.w	r9[0x8],r11
8000f5bc:	97 29       	st.w	r11[0x8],r9
8000f5be:	97 39       	st.w	r11[0xc],r9
8000f5c0:	30 17       	mov	r7,1
8000f5c2:	c0 58       	rjmp	8000f5cc <_free_r+0xc0>
8000f5c4:	74 29       	ld.w	r9,r10[0x8]
8000f5c6:	74 38       	ld.w	r8,r10[0xc]
8000f5c8:	91 29       	st.w	r8[0x8],r9
8000f5ca:	93 38       	st.w	r9[0xc],r8
8000f5cc:	1c 98       	mov	r8,lr
8000f5ce:	f6 0e 09 0e 	st.w	r11[lr],lr
8000f5d2:	a1 a8       	sbr	r8,0x0
8000f5d4:	97 18       	st.w	r11[0x4],r8
8000f5d6:	58 07       	cp.w	r7,0
8000f5d8:	c6 91       	brne	8000f6aa <_free_r+0x19e>
8000f5da:	e0 4e 01 ff 	cp.w	lr,511
8000f5de:	e0 8b 00 13 	brhi	8000f604 <_free_r+0xf8>
8000f5e2:	fc 0a 16 03 	lsr	r10,lr,0x3
8000f5e6:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000f5ea:	70 29       	ld.w	r9,r8[0x8]
8000f5ec:	97 38       	st.w	r11[0xc],r8
8000f5ee:	97 29       	st.w	r11[0x8],r9
8000f5f0:	93 3b       	st.w	r9[0xc],r11
8000f5f2:	91 2b       	st.w	r8[0x8],r11
8000f5f4:	6c 19       	ld.w	r9,r6[0x4]
8000f5f6:	a3 4a       	asr	r10,0x2
8000f5f8:	30 18       	mov	r8,1
8000f5fa:	f0 0a 09 48 	lsl	r8,r8,r10
8000f5fe:	10 49       	or	r9,r8
8000f600:	8d 19       	st.w	r6[0x4],r9
8000f602:	c5 48       	rjmp	8000f6aa <_free_r+0x19e>
8000f604:	fc 0a 16 09 	lsr	r10,lr,0x9
8000f608:	58 4a       	cp.w	r10,4
8000f60a:	e0 8b 00 07 	brhi	8000f618 <_free_r+0x10c>
8000f60e:	fc 08 16 06 	lsr	r8,lr,0x6
8000f612:	f0 ca ff c8 	sub	r10,r8,-56
8000f616:	c2 f8       	rjmp	8000f674 <_free_r+0x168>
8000f618:	59 4a       	cp.w	r10,20
8000f61a:	e0 8b 00 04 	brhi	8000f622 <_free_r+0x116>
8000f61e:	2a 5a       	sub	r10,-91
8000f620:	c2 a8       	rjmp	8000f674 <_free_r+0x168>
8000f622:	e0 4a 00 54 	cp.w	r10,84
8000f626:	e0 8b 00 07 	brhi	8000f634 <_free_r+0x128>
8000f62a:	fc 08 16 0c 	lsr	r8,lr,0xc
8000f62e:	f0 ca ff 92 	sub	r10,r8,-110
8000f632:	c2 18       	rjmp	8000f674 <_free_r+0x168>
8000f634:	e0 4a 01 54 	cp.w	r10,340
8000f638:	e0 8b 00 14 	brhi	8000f660 <_free_r+0x154>
8000f63c:	fc 08 16 0f 	lsr	r8,lr,0xf
8000f640:	f0 ca ff 89 	sub	r10,r8,-119
8000f644:	c1 88       	rjmp	8000f674 <_free_r+0x168>
8000f646:	00 00       	add	r0,r0
8000f648:	80 00       	ld.sh	r0,r0[0x0]
8000f64a:	f1 f6 00 00 	ld.weq	r6,r8[0x0]
8000f64e:	01 44       	ld.w	r4,--r0
8000f650:	00 00       	add	r0,r0
8000f652:	05 4c       	ld.w	r12,--r2
8000f654:	00 00       	add	r0,r0
8000f656:	07 34       	ld.ub	r4,r3++
8000f658:	80 00       	ld.sh	r0,r0[0x0]
8000f65a:	f4 64 80 00 	mov	r4,-753664
8000f65e:	f1 f8 fc 08 	st.hal	r8[0x10],r8
8000f662:	16 12       	sub	r2,r11
8000f664:	e0 4a 05 54 	cp.w	r10,1364
8000f668:	f9 ba 0b 7e 	movhi	r10,126
8000f66c:	f9 b9 08 7c 	movls	r9,124
8000f670:	f1 d9 e8 0a 	addls	r10,r8,r9
8000f674:	ec 0a 00 39 	add	r9,r6,r10<<0x3
8000f678:	72 2c       	ld.w	r12,r9[0x8]
8000f67a:	12 3c       	cp.w	r12,r9
8000f67c:	c0 d1       	brne	8000f696 <_free_r+0x18a>
8000f67e:	a3 4a       	asr	r10,0x2
8000f680:	30 18       	mov	r8,1
8000f682:	f0 0a 09 48 	lsl	r8,r8,r10
8000f686:	6c 19       	ld.w	r9,r6[0x4]
8000f688:	10 49       	or	r9,r8
8000f68a:	18 98       	mov	r8,r12
8000f68c:	8d 19       	st.w	r6[0x4],r9
8000f68e:	c0 a8       	rjmp	8000f6a2 <_free_r+0x196>
8000f690:	78 2c       	ld.w	r12,r12[0x8]
8000f692:	12 3c       	cp.w	r12,r9
8000f694:	c0 60       	breq	8000f6a0 <_free_r+0x194>
8000f696:	78 18       	ld.w	r8,r12[0x4]
8000f698:	e0 18 ff fc 	andl	r8,0xfffc
8000f69c:	10 3e       	cp.w	lr,r8
8000f69e:	cf 93       	brcs	8000f690 <_free_r+0x184>
8000f6a0:	78 38       	ld.w	r8,r12[0xc]
8000f6a2:	97 38       	st.w	r11[0xc],r8
8000f6a4:	97 2c       	st.w	r11[0x8],r12
8000f6a6:	99 3b       	st.w	r12[0xc],r11
8000f6a8:	91 2b       	st.w	r8[0x8],r11
8000f6aa:	0a 9c       	mov	r12,r5
8000f6ac:	f0 1f 00 02 	mcall	8000f6b4 <_free_r+0x1a8>
8000f6b0:	d8 22       	popm	r4-r7,pc
8000f6b2:	00 00       	add	r0,r0
8000f6b4:	80 00       	ld.sh	r0,r0[0x0]
8000f6b6:	f1 f8 eb cd 	st.wqs	r8[0x734],r8

8000f6b8 <__do_global_ctors_aux>:
8000f6b8:	eb cd 40 80 	pushm	r7,lr
8000f6bc:	48 79       	lddpc	r9,8000f6d8 <__do_global_ctors_aux+0x20>
8000f6be:	f2 f8 ff fc 	ld.w	r8,r9[-4]
8000f6c2:	5b f8       	cp.w	r8,-1
8000f6c4:	c0 70       	breq	8000f6d2 <__do_global_ctors_aux+0x1a>
8000f6c6:	f2 c7 00 04 	sub	r7,r9,4
8000f6ca:	5d 18       	icall	r8
8000f6cc:	0f 48       	ld.w	r8,--r7
8000f6ce:	5b f8       	cp.w	r8,-1
8000f6d0:	cf d1       	brne	8000f6ca <__do_global_ctors_aux+0x12>
8000f6d2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000f6d6:	00 00       	add	r0,r0
8000f6d8:	00 00       	add	r0,r0
8000f6da:	00 0c       	add	r12,r0

Disassembly of section .exception:

8000f800 <_evba>:
8000f800:	c0 08       	rjmp	8000f800 <_evba>
	...

8000f804 <_handle_TLB_Multiple_Hit>:
8000f804:	c0 08       	rjmp	8000f804 <_handle_TLB_Multiple_Hit>
	...

8000f808 <_handle_Bus_Error_Data_Fetch>:
8000f808:	c0 08       	rjmp	8000f808 <_handle_Bus_Error_Data_Fetch>
	...

8000f80c <_handle_Bus_Error_Instruction_Fetch>:
8000f80c:	c0 08       	rjmp	8000f80c <_handle_Bus_Error_Instruction_Fetch>
	...

8000f810 <_handle_NMI>:
8000f810:	c0 08       	rjmp	8000f810 <_handle_NMI>
	...

8000f814 <_handle_Instruction_Address>:
8000f814:	c0 08       	rjmp	8000f814 <_handle_Instruction_Address>
	...

8000f818 <_handle_ITLB_Protection>:
8000f818:	c0 08       	rjmp	8000f818 <_handle_ITLB_Protection>
	...

8000f81c <_handle_Breakpoint>:
8000f81c:	c0 08       	rjmp	8000f81c <_handle_Breakpoint>
	...

8000f820 <_handle_Illegal_Opcode>:
8000f820:	c0 08       	rjmp	8000f820 <_handle_Illegal_Opcode>
	...

8000f824 <_handle_Unimplemented_Instruction>:
8000f824:	c0 08       	rjmp	8000f824 <_handle_Unimplemented_Instruction>
	...

8000f828 <_handle_Privilege_Violation>:
8000f828:	c0 08       	rjmp	8000f828 <_handle_Privilege_Violation>
	...

8000f82c <_handle_Floating_Point>:
8000f82c:	c0 08       	rjmp	8000f82c <_handle_Floating_Point>
	...

8000f830 <_handle_Coprocessor_Absent>:
8000f830:	c0 08       	rjmp	8000f830 <_handle_Coprocessor_Absent>
	...

8000f834 <_handle_Data_Address_Read>:
8000f834:	c0 08       	rjmp	8000f834 <_handle_Data_Address_Read>
	...

8000f838 <_handle_Data_Address_Write>:
8000f838:	c0 08       	rjmp	8000f838 <_handle_Data_Address_Write>
	...

8000f83c <_handle_DTLB_Protection_Read>:
8000f83c:	c0 08       	rjmp	8000f83c <_handle_DTLB_Protection_Read>
	...

8000f840 <_handle_DTLB_Protection_Write>:
8000f840:	c0 08       	rjmp	8000f840 <_handle_DTLB_Protection_Write>
	...

8000f844 <_handle_DTLB_Modified>:
8000f844:	c0 08       	rjmp	8000f844 <_handle_DTLB_Modified>
	...

8000f850 <_handle_ITLB_Miss>:
8000f850:	c0 08       	rjmp	8000f850 <_handle_ITLB_Miss>
	...

8000f860 <_handle_DTLB_Miss_Read>:
8000f860:	c0 08       	rjmp	8000f860 <_handle_DTLB_Miss_Read>
	...

8000f870 <_handle_DTLB_Miss_Write>:
8000f870:	c0 08       	rjmp	8000f870 <_handle_DTLB_Miss_Write>
	...

8000f900 <_handle_Supervisor_Call>:
8000f900:	c0 08       	rjmp	8000f900 <_handle_Supervisor_Call>
	...

8000f904 <_int0>:
8000f904:	30 0c       	mov	r12,0
8000f906:	f0 1f 00 12 	mcall	8000f94c <ipr_val+0x10>
8000f90a:	58 0c       	cp.w	r12,0
8000f90c:	f8 0f 17 10 	movne	pc,r12
8000f910:	d6 03       	rete

8000f912 <_int1>:
8000f912:	30 1c       	mov	r12,1
8000f914:	f0 1f 00 0e 	mcall	8000f94c <ipr_val+0x10>
8000f918:	58 0c       	cp.w	r12,0
8000f91a:	f8 0f 17 10 	movne	pc,r12
8000f91e:	d6 03       	rete

8000f920 <_int2>:
8000f920:	30 2c       	mov	r12,2
8000f922:	f0 1f 00 0b 	mcall	8000f94c <ipr_val+0x10>
8000f926:	58 0c       	cp.w	r12,0
8000f928:	f8 0f 17 10 	movne	pc,r12
8000f92c:	d6 03       	rete

8000f92e <_int3>:
8000f92e:	30 3c       	mov	r12,3
8000f930:	f0 1f 00 07 	mcall	8000f94c <ipr_val+0x10>
8000f934:	58 0c       	cp.w	r12,0
8000f936:	f8 0f 17 10 	movne	pc,r12
8000f93a:	d6 03       	rete

8000f93c <ipr_val>:
8000f93c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8000f94c:	80 00 26 74 00 00 00 00 00 00 00 00 00 00 00 00     ..&t............
	...

Disassembly of section .fini:

8000fa00 <_fini>:
8000fa00:	eb cd 40 40 	pushm	r6,lr
8000fa04:	48 26       	lddpc	r6,8000fa0c <_fini+0xc>
8000fa06:	1e 26       	rsub	r6,pc
8000fa08:	c0 48       	rjmp	8000fa10 <_fini+0x10>
8000fa0a:	00 00       	add	r0,r0
8000fa0c:	80 00       	ld.sh	r0,r0[0x0]
8000fa0e:	f9 ea f0 16 	sthh.w	r6[0x4],r12:t,r10:t
8000fa12:	00 02       	add	r2,r0
8000fa14:	e3 cd 80 40 	ldm	sp++,r6,pc
